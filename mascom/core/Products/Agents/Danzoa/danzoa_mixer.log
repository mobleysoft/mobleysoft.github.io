2025-01-05 16:47:26,719 - INFO - Found 43 audio files
2025-01-05 16:47:30,135 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1141)
           2	LOAD_FAST(arg=0, lineno=1144)
           4	LOAD_CONST(arg=1, lineno=1144)
           6	BINARY_SUBSCR(arg=None, lineno=1144)
           8	STORE_FAST(arg=3, lineno=1144)
          10	LOAD_FAST(arg=1, lineno=1145)
          12	UNARY_NEGATIVE(arg=None, lineno=1145)
          14	LOAD_FAST(arg=3, lineno=1145)
          16	DUP_TOP(arg=None, lineno=1145)
          18	ROT_THREE(arg=None, lineno=1145)
          20	COMPARE_OP(arg=1, lineno=1145)
          22	POP_JUMP_IF_FALSE(arg=32, lineno=1145)
          24	LOAD_FAST(arg=1, lineno=1145)
          26	COMPARE_OP(arg=1, lineno=1145)
          28	POP_JUMP_IF_FALSE(arg=40, lineno=1145)
          30	JUMP_FORWARD(arg=4, lineno=1145)
>         32	POP_TOP(arg=None, lineno=1145)
          34	JUMP_FORWARD(arg=4, lineno=1145)
>         36	LOAD_CONST(arg=1, lineno=1146)
          38	STORE_FAST(arg=3, lineno=1146)
>         40	LOAD_FAST(arg=0, lineno=1148)
          42	LOAD_CONST(arg=2, lineno=1148)
          44	BINARY_SUBSCR(arg=None, lineno=1148)
          46	STORE_FAST(arg=4, lineno=1148)
          48	LOAD_FAST(arg=1, lineno=1149)
          50	UNARY_NEGATIVE(arg=None, lineno=1149)
          52	LOAD_FAST(arg=4, lineno=1149)
          54	DUP_TOP(arg=None, lineno=1149)
          56	ROT_THREE(arg=None, lineno=1149)
          58	COMPARE_OP(arg=1, lineno=1149)
          60	POP_JUMP_IF_FALSE(arg=70, lineno=1149)
          62	LOAD_FAST(arg=1, lineno=1149)
          64	COMPARE_OP(arg=1, lineno=1149)
          66	POP_JUMP_IF_FALSE(arg=78, lineno=1149)
          68	JUMP_FORWARD(arg=4, lineno=1149)
>         70	POP_TOP(arg=None, lineno=1149)
          72	JUMP_FORWARD(arg=4, lineno=1149)
>         74	LOAD_CONST(arg=1, lineno=1150)
          76	STORE_FAST(arg=4, lineno=1150)
>         78	LOAD_FAST(arg=2, lineno=1152)
          80	POP_JUMP_IF_FALSE(arg=102, lineno=1152)
          82	LOAD_GLOBAL(arg=0, lineno=1153)
          84	LOAD_METHOD(arg=1, lineno=1153)
          86	LOAD_FAST(arg=3, lineno=1153)
          88	CALL_METHOD(arg=1, lineno=1153)
          90	LOAD_GLOBAL(arg=0, lineno=1153)
          92	LOAD_METHOD(arg=1, lineno=1153)
          94	LOAD_FAST(arg=4, lineno=1153)
          96	CALL_METHOD(arg=1, lineno=1153)
          98	COMPARE_OP(arg=3, lineno=1153)
         100	RETURN_VALUE(arg=None, lineno=1153)
>        102	LOAD_GLOBAL(arg=0, lineno=1155)
         104	LOAD_METHOD(arg=2, lineno=1155)
         106	LOAD_FAST(arg=3, lineno=1155)
         108	CALL_METHOD(arg=1, lineno=1155)
         110	LOAD_GLOBAL(arg=0, lineno=1155)
         112	LOAD_METHOD(arg=2, lineno=1155)
         114	LOAD_FAST(arg=4, lineno=1155)
         116	CALL_METHOD(arg=1, lineno=1155)
         118	COMPARE_OP(arg=3, lineno=1155)
         120	RETURN_VALUE(arg=None, lineno=1155)
         122	LOAD_CONST(arg=3, lineno=1155)
         124	RETURN_VALUE(arg=None, lineno=1155)
2025-01-05 16:47:30,136 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:47:30,136 - DEBUG - stack: []
2025-01-05 16:47:30,137 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:47:30,137 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1141)
2025-01-05 16:47:30,137 - DEBUG - stack []
2025-01-05 16:47:30,137 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1144)
2025-01-05 16:47:30,138 - DEBUG - stack []
2025-01-05 16:47:30,138 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1144)
2025-01-05 16:47:30,138 - DEBUG - stack ['$x2.0']
2025-01-05 16:47:30,138 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1144)
2025-01-05 16:47:30,138 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-05 16:47:30,138 - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1144)
2025-01-05 16:47:30,138 - DEBUG - stack ['$6binary_subscr.2']
2025-01-05 16:47:30,139 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=1145)
2025-01-05 16:47:30,139 - DEBUG - stack []
2025-01-05 16:47:30,139 - DEBUG - dispatch pc=12, inst=UNARY_NEGATIVE(arg=None, lineno=1145)
2025-01-05 16:47:30,139 - DEBUG - stack ['$threshold10.3']
2025-01-05 16:47:30,139 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=1145)
2025-01-05 16:47:30,139 - DEBUG - stack ['$12unary_negative.4']
2025-01-05 16:47:30,140 - DEBUG - dispatch pc=16, inst=DUP_TOP(arg=None, lineno=1145)
2025-01-05 16:47:30,140 - DEBUG - stack ['$12unary_negative.4', '$x014.5']
2025-01-05 16:47:30,140 - DEBUG - dispatch pc=18, inst=ROT_THREE(arg=None, lineno=1145)
2025-01-05 16:47:30,140 - DEBUG - stack ['$12unary_negative.4', '$x014.5', '$16dup_top.6']
2025-01-05 16:47:30,140 - DEBUG - dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=1145)
2025-01-05 16:47:30,140 - DEBUG - stack ['$16dup_top.6', '$12unary_negative.4', '$x014.5']
2025-01-05 16:47:30,141 - DEBUG - dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=32, lineno=1145)
2025-01-05 16:47:30,141 - DEBUG - stack ['$16dup_top.6', '$20compare_op.7']
2025-01-05 16:47:30,141 - DEBUG - end state. edges=[Edge(pc=24, stack=('$16dup_top.6',), blockstack=(), npush=0), Edge(pc=32, stack=('$16dup_top.6',), blockstack=(), npush=0)]
2025-01-05 16:47:30,141 - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2025-01-05 16:47:30,141 - DEBUG - stack: ['$phi24.0']
2025-01-05 16:47:30,142 - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=1)
2025-01-05 16:47:30,142 - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1145)
2025-01-05 16:47:30,142 - DEBUG - stack ['$phi24.0']
2025-01-05 16:47:30,142 - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=1, lineno=1145)
2025-01-05 16:47:30,142 - DEBUG - stack ['$phi24.0', '$threshold24.1']
2025-01-05 16:47:30,142 - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=40, lineno=1145)
2025-01-05 16:47:30,143 - DEBUG - stack ['$26compare_op.2']
2025-01-05 16:47:30,143 - DEBUG - end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=(), blockstack=(), npush=0)]
2025-01-05 16:47:30,143 - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2025-01-05 16:47:30,143 - DEBUG - stack: ['$phi32.0']
2025-01-05 16:47:30,143 - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2025-01-05 16:47:30,144 - DEBUG - dispatch pc=32, inst=POP_TOP(arg=None, lineno=1145)
2025-01-05 16:47:30,144 - DEBUG - stack ['$phi32.0']
2025-01-05 16:47:30,144 - DEBUG - dispatch pc=34, inst=JUMP_FORWARD(arg=4, lineno=1145)
2025-01-05 16:47:30,144 - DEBUG - stack []
2025-01-05 16:47:30,145 - DEBUG - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2025-01-05 16:47:30,145 - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2025-01-05 16:47:30,145 - DEBUG - stack: []
2025-01-05 16:47:30,145 - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2025-01-05 16:47:30,146 - DEBUG - dispatch pc=30, inst=JUMP_FORWARD(arg=4, lineno=1145)
2025-01-05 16:47:30,146 - DEBUG - stack []
2025-01-05 16:47:30,146 - DEBUG - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0)]
2025-01-05 16:47:30,146 - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2025-01-05 16:47:30,146 - DEBUG - stack: []
2025-01-05 16:47:30,146 - DEBUG - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2025-01-05 16:47:30,147 - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1148)
2025-01-05 16:47:30,147 - DEBUG - stack []
2025-01-05 16:47:30,147 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=1148)
2025-01-05 16:47:30,147 - DEBUG - stack ['$x40.0']
2025-01-05 16:47:30,147 - DEBUG - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=1148)
2025-01-05 16:47:30,147 - DEBUG - stack ['$x40.0', '$const42.1']
2025-01-05 16:47:30,148 - DEBUG - dispatch pc=46, inst=STORE_FAST(arg=4, lineno=1148)
2025-01-05 16:47:30,148 - DEBUG - stack ['$44binary_subscr.2']
2025-01-05 16:47:30,379 - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=1149)
2025-01-05 16:47:30,380 - DEBUG - stack []
2025-01-05 16:47:30,380 - DEBUG - dispatch pc=50, inst=UNARY_NEGATIVE(arg=None, lineno=1149)
2025-01-05 16:47:30,381 - DEBUG - stack ['$threshold48.3']
2025-01-05 16:47:30,381 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=1149)
2025-01-05 16:47:30,382 - DEBUG - stack ['$50unary_negative.4']
2025-01-05 16:47:30,382 - DEBUG - dispatch pc=54, inst=DUP_TOP(arg=None, lineno=1149)
2025-01-05 16:47:30,383 - DEBUG - stack ['$50unary_negative.4', '$x152.5']
2025-01-05 16:47:30,383 - DEBUG - dispatch pc=56, inst=ROT_THREE(arg=None, lineno=1149)
2025-01-05 16:47:30,383 - DEBUG - stack ['$50unary_negative.4', '$x152.5', '$54dup_top.6']
2025-01-05 16:47:30,384 - DEBUG - dispatch pc=58, inst=COMPARE_OP(arg=1, lineno=1149)
2025-01-05 16:47:30,384 - DEBUG - stack ['$54dup_top.6', '$50unary_negative.4', '$x152.5']
2025-01-05 16:47:30,385 - DEBUG - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=70, lineno=1149)
2025-01-05 16:47:30,386 - DEBUG - stack ['$54dup_top.6', '$58compare_op.7']
2025-01-05 16:47:30,386 - DEBUG - end state. edges=[Edge(pc=62, stack=('$54dup_top.6',), blockstack=(), npush=0), Edge(pc=70, stack=('$54dup_top.6',), blockstack=(), npush=0)]
2025-01-05 16:47:30,387 - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2025-01-05 16:47:30,387 - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2025-01-05 16:47:30,387 - DEBUG - stack: []
2025-01-05 16:47:30,387 - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2025-01-05 16:47:30,388 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1146)
2025-01-05 16:47:30,388 - DEBUG - stack []
2025-01-05 16:47:30,388 - DEBUG - dispatch pc=38, inst=STORE_FAST(arg=3, lineno=1146)
2025-01-05 16:47:30,388 - DEBUG - stack ['$const36.0']
2025-01-05 16:47:30,389 - DEBUG - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2025-01-05 16:47:30,389 - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0)])
2025-01-05 16:47:30,389 - DEBUG - stack: ['$phi62.0']
2025-01-05 16:47:30,389 - DEBUG - state.pc_initial: State(pc_initial=62 nstack_initial=1)
2025-01-05 16:47:30,390 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=1149)
2025-01-05 16:47:30,390 - DEBUG - stack ['$phi62.0']
2025-01-05 16:47:30,390 - DEBUG - dispatch pc=64, inst=COMPARE_OP(arg=1, lineno=1149)
2025-01-05 16:47:30,390 - DEBUG - stack ['$phi62.0', '$threshold62.1']
2025-01-05 16:47:30,390 - DEBUG - dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=78, lineno=1149)
2025-01-05 16:47:30,390 - DEBUG - stack ['$64compare_op.2']
2025-01-05 16:47:30,390 - DEBUG - end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
2025-01-05 16:47:30,391 - DEBUG - pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-05 16:47:30,391 - DEBUG - stack: ['$phi70.0']
2025-01-05 16:47:30,391 - DEBUG - state.pc_initial: State(pc_initial=70 nstack_initial=1)
2025-01-05 16:47:30,391 - DEBUG - dispatch pc=70, inst=POP_TOP(arg=None, lineno=1149)
2025-01-05 16:47:30,391 - DEBUG - stack ['$phi70.0']
2025-01-05 16:47:30,391 - DEBUG - dispatch pc=72, inst=JUMP_FORWARD(arg=4, lineno=1149)
2025-01-05 16:47:30,392 - DEBUG - stack []
2025-01-05 16:47:30,392 - DEBUG - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2025-01-05 16:47:30,392 - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-05 16:47:30,392 - DEBUG - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-05 16:47:30,392 - DEBUG - stack: []
2025-01-05 16:47:30,392 - DEBUG - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2025-01-05 16:47:30,392 - DEBUG - dispatch pc=68, inst=JUMP_FORWARD(arg=4, lineno=1149)
2025-01-05 16:47:30,393 - DEBUG - stack []
2025-01-05 16:47:30,393 - DEBUG - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0)]
2025-01-05 16:47:30,393 - DEBUG - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2025-01-05 16:47:30,393 - DEBUG - stack: []
2025-01-05 16:47:30,393 - DEBUG - state.pc_initial: State(pc_initial=78 nstack_initial=0)
2025-01-05 16:47:30,393 - DEBUG - dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=1152)
2025-01-05 16:47:30,394 - DEBUG - stack []
2025-01-05 16:47:30,394 - DEBUG - dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=102, lineno=1152)
2025-01-05 16:47:30,394 - DEBUG - stack ['$zero_pos78.0']
2025-01-05 16:47:30,395 - DEBUG - end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2025-01-05 16:47:30,396 - DEBUG - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-05 16:47:30,396 - DEBUG - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-05 16:47:30,396 - DEBUG - stack: []
2025-01-05 16:47:30,396 - DEBUG - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2025-01-05 16:47:30,398 - DEBUG - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1150)
2025-01-05 16:47:30,398 - DEBUG - stack []
2025-01-05 16:47:30,399 - DEBUG - dispatch pc=76, inst=STORE_FAST(arg=4, lineno=1150)
2025-01-05 16:47:30,399 - DEBUG - stack ['$const74.0']
2025-01-05 16:47:30,399 - DEBUG - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2025-01-05 16:47:30,400 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-05 16:47:30,400 - DEBUG - stack: []
2025-01-05 16:47:30,400 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2025-01-05 16:47:30,400 - DEBUG - dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2025-01-05 16:47:30,401 - DEBUG - stack []
2025-01-05 16:47:30,401 - DEBUG - dispatch pc=84, inst=LOAD_METHOD(arg=1, lineno=1153)
2025-01-05 16:47:30,401 - DEBUG - stack ['$82load_global.0']
2025-01-05 16:47:30,401 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=1153)
2025-01-05 16:47:30,401 - DEBUG - stack ['$84load_method.1']
2025-01-05 16:47:30,402 - DEBUG - dispatch pc=88, inst=CALL_METHOD(arg=1, lineno=1153)
2025-01-05 16:47:30,402 - DEBUG - stack ['$84load_method.1', '$x086.2']
2025-01-05 16:47:30,402 - DEBUG - dispatch pc=90, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2025-01-05 16:47:30,402 - DEBUG - stack ['$88call_method.3']
2025-01-05 16:47:30,402 - DEBUG - dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=1153)
2025-01-05 16:47:30,403 - DEBUG - stack ['$88call_method.3', '$90load_global.4']
2025-01-05 16:47:30,403 - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=1153)
2025-01-05 16:47:30,403 - DEBUG - stack ['$88call_method.3', '$92load_method.5']
2025-01-05 16:47:30,403 - DEBUG - dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=1153)
2025-01-05 16:47:30,403 - DEBUG - stack ['$88call_method.3', '$92load_method.5', '$x194.6']
2025-01-05 16:47:30,403 - DEBUG - dispatch pc=98, inst=COMPARE_OP(arg=3, lineno=1153)
2025-01-05 16:47:30,404 - DEBUG - stack ['$88call_method.3', '$96call_method.7']
2025-01-05 16:47:30,404 - DEBUG - dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=1153)
2025-01-05 16:47:30,404 - DEBUG - stack ['$98compare_op.8']
2025-01-05 16:47:30,404 - DEBUG - end state. edges=[]
2025-01-05 16:47:30,405 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-05 16:47:30,405 - DEBUG - stack: []
2025-01-05 16:47:30,405 - DEBUG - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2025-01-05 16:47:30,406 - DEBUG - dispatch pc=102, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2025-01-05 16:47:30,406 - DEBUG - stack []
2025-01-05 16:47:30,406 - DEBUG - dispatch pc=104, inst=LOAD_METHOD(arg=2, lineno=1155)
2025-01-05 16:47:30,406 - DEBUG - stack ['$102load_global.0']
2025-01-05 16:47:30,406 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1155)
2025-01-05 16:47:30,407 - DEBUG - stack ['$104load_method.1']
2025-01-05 16:47:30,407 - DEBUG - dispatch pc=108, inst=CALL_METHOD(arg=1, lineno=1155)
2025-01-05 16:47:30,407 - DEBUG - stack ['$104load_method.1', '$x0106.2']
2025-01-05 16:47:30,408 - DEBUG - dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2025-01-05 16:47:30,408 - DEBUG - stack ['$108call_method.3']
2025-01-05 16:47:30,408 - DEBUG - dispatch pc=112, inst=LOAD_METHOD(arg=2, lineno=1155)
2025-01-05 16:47:30,408 - DEBUG - stack ['$108call_method.3', '$110load_global.4']
2025-01-05 16:47:30,409 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=1155)
2025-01-05 16:47:30,409 - DEBUG - stack ['$108call_method.3', '$112load_method.5']
2025-01-05 16:47:30,409 - DEBUG - dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=1155)
2025-01-05 16:47:30,409 - DEBUG - stack ['$108call_method.3', '$112load_method.5', '$x1114.6']
2025-01-05 16:47:30,409 - DEBUG - dispatch pc=118, inst=COMPARE_OP(arg=3, lineno=1155)
2025-01-05 16:47:30,410 - DEBUG - stack ['$108call_method.3', '$116call_method.7']
2025-01-05 16:47:30,410 - DEBUG - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=1155)
2025-01-05 16:47:30,410 - DEBUG - stack ['$118compare_op.8']
2025-01-05 16:47:30,410 - DEBUG - end state. edges=[]
2025-01-05 16:47:30,411 - DEBUG - pending: deque([State(pc_initial=78 nstack_initial=0)])
2025-01-05 16:47:30,411 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:47:30,411 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=1): {'$phi62.0'},
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set()})
2025-01-05 16:47:30,412 - DEBUG - defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.0': State(pc_initial=40 nstack_initial=0),
 '$phi70.0': State(pc_initial=40 nstack_initial=0)}
2025-01-05 16:47:30,412 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2025-01-05 16:47:30,413 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2025-01-05 16:47:30,413 - DEBUG - keep phismap: {'$phi24.0': {('$16dup_top.6', State(pc_initial=0 nstack_initial=0))},
 '$phi62.0': {('$54dup_top.6', State(pc_initial=40 nstack_initial=0))}}
2025-01-05 16:47:30,414 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$16dup_top.6'},
             State(pc_initial=40 nstack_initial=0): {'$phi62.0': '$54dup_top.6'}})
2025-01-05 16:47:30,414 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:47:30,415 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$threshold10.3'}), (12, {'value': '$threshold10.3', 'res': '$12unary_negative.4'}), (14, {'res': '$x014.5'}), (16, {'orig': ['$x014.5'], 'duped': ['$16dup_top.6']}), (20, {'lhs': '$12unary_negative.4', 'rhs': '$x014.5', 'res': '$20compare_op.7'}), (22, {'pred': '$20compare_op.7'})), outgoing_phis={'$phi24.0': '$16dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$16dup_top.6',), 32: ('$16dup_top.6',)})
2025-01-05 16:47:30,415 - DEBUG - block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$threshold24.1'}), (26, {'lhs': '$phi24.0', 'rhs': '$threshold24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 40: ()})
2025-01-05 16:47:30,416 - DEBUG - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ()})
2025-01-05 16:47:30,416 - DEBUG - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((34, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2025-01-05 16:47:30,416 - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2025-01-05 16:47:30,416 - DEBUG - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$x40.0'}), (42, {'res': '$const42.1'}), (44, {'index': '$const42.1', 'target': '$x40.0', 'res': '$44binary_subscr.2'}), (46, {'value': '$44binary_subscr.2'}), (48, {'res': '$threshold48.3'}), (50, {'value': '$threshold48.3', 'res': '$50unary_negative.4'}), (52, {'res': '$x152.5'}), (54, {'orig': ['$x152.5'], 'duped': ['$54dup_top.6']}), (58, {'lhs': '$50unary_negative.4', 'rhs': '$x152.5', 'res': '$58compare_op.7'}), (60, {'pred': '$58compare_op.7'})), outgoing_phis={'$phi62.0': '$54dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$54dup_top.6',), 70: ('$54dup_top.6',)})
2025-01-05 16:47:30,417 - DEBUG - block_infos State(pc_initial=62 nstack_initial=1):
AdaptBlockInfo(insts=((62, {'res': '$threshold62.1'}), (64, {'lhs': '$phi62.0', 'rhs': '$threshold62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 78: ()})
2025-01-05 16:47:30,417 - DEBUG - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ()})
2025-01-05 16:47:30,417 - DEBUG - block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((72, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2025-01-05 16:47:30,418 - DEBUG - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2025-01-05 16:47:30,418 - DEBUG - block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$zero_pos78.0'}), (80, {'pred': '$zero_pos78.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 102: ()})
2025-01-05 16:47:30,418 - DEBUG - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'item': '$82load_global.0', 'res': '$84load_method.1'}), (86, {'res': '$x086.2'}), (88, {'func': '$84load_method.1', 'args': ['$x086.2'], 'res': '$88call_method.3'}), (90, {'res': '$90load_global.4'}), (92, {'item': '$90load_global.4', 'res': '$92load_method.5'}), (94, {'res': '$x194.6'}), (96, {'func': '$92load_method.5', 'args': ['$x194.6'], 'res': '$96call_method.7'}), (98, {'lhs': '$88call_method.3', 'rhs': '$96call_method.7', 'res': '$98compare_op.8'}), (100, {'retval': '$98compare_op.8', 'castval': '$100return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:47:30,419 - DEBUG - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'item': '$102load_global.0', 'res': '$104load_method.1'}), (106, {'res': '$x0106.2'}), (108, {'func': '$104load_method.1', 'args': ['$x0106.2'], 'res': '$108call_method.3'}), (110, {'res': '$110load_global.4'}), (112, {'item': '$110load_global.4', 'res': '$112load_method.5'}), (114, {'res': '$x1114.6'}), (116, {'func': '$112load_method.5', 'args': ['$x1114.6'], 'res': '$116call_method.7'}), (118, {'lhs': '$108call_method.3', 'rhs': '$116call_method.7', 'res': '$118compare_op.8'}), (120, {'retval': '$118compare_op.8', 'castval': '$120return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:47:30,424 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const4.1 = const(int, 0)                ['$const4.1']
    x0 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'x', 'x0']
    $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$12unary_negative.4', 'threshold']
    $20compare_op.7 = $12unary_negative.4 <= x0 ['$12unary_negative.4', '$20compare_op.7', 'x0']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.7', '$22pred', 'bool22']
    $phi24.0 = x0                            ['$phi24.0', 'x0']
    branch $22pred, 24, 32                   ['$22pred']
label 24:
    $26compare_op.2 = $phi24.0 <= threshold  ['$26compare_op.2', '$phi24.0', 'threshold']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 40                   ['$28pred']
label 30:
    jump 36                                  []
label 32:
    jump 40                                  []
label 36:
    x0 = const(int, 0)                       ['x0']
    jump 40                                  []
label 40:
    $const42.1 = const(int, -1)              ['$const42.1']
    x1 = getitem(value=x, index=$const42.1, fn=<built-in function getitem>) ['$const42.1', 'x', 'x1']
    $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$50unary_negative.4', 'threshold']
    $58compare_op.7 = $50unary_negative.4 <= x1 ['$50unary_negative.4', '$58compare_op.7', 'x1']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$58compare_op.7', '$60pred', 'bool60']
    $phi62.0 = x1                            ['$phi62.0', 'x1']
    branch $60pred, 62, 70                   ['$60pred']
label 62:
    $64compare_op.2 = $phi62.0 <= threshold  ['$64compare_op.2', '$phi62.0', 'threshold']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 78                   ['$66pred']
label 68:
    jump 74                                  []
label 70:
    jump 78                                  []
label 74:
    x1 = const(int, 0)                       ['x1']
    jump 78                                  []
label 78:
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$80pred', 'bool80', 'zero_pos']
    branch $80pred, 82, 102                  ['$80pred']
label 82:
    $82load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$82load_global.0']
    $84load_method.1 = getattr(value=$82load_global.0, attr=signbit) ['$82load_global.0', '$84load_method.1']
    $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$84load_method.1', '$88call_method.3', 'x0']
    $90load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$90load_global.4']
    $92load_method.5 = getattr(value=$90load_global.4, attr=signbit) ['$90load_global.4', '$92load_method.5']
    $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$92load_method.5', '$96call_method.7', 'x1']
    $98compare_op.8 = $88call_method.3 != $96call_method.7 ['$88call_method.3', '$96call_method.7', '$98compare_op.8']
    $100return_value.9 = cast(value=$98compare_op.8) ['$100return_value.9', '$98compare_op.8']
    return $100return_value.9                ['$100return_value.9']
label 102:
    $102load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$102load_global.0']
    $104load_method.1 = getattr(value=$102load_global.0, attr=sign) ['$102load_global.0', '$104load_method.1']
    $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_method.1', '$108call_method.3', 'x0']
    $110load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$110load_global.4']
    $112load_method.5 = getattr(value=$110load_global.4, attr=sign) ['$110load_global.4', '$112load_method.5']
    $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$112load_method.5', '$116call_method.7', 'x1']
    $118compare_op.8 = $108call_method.3 != $116call_method.7 ['$108call_method.3', '$116call_method.7', '$118compare_op.8']
    $120return_value.9 = cast(value=$118compare_op.8) ['$118compare_op.8', '$120return_value.9']
    return $120return_value.9                ['$120return_value.9']

2025-01-05 16:47:48,657 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1039)
           2	LOAD_FAST(arg=0, lineno=1042)
           4	LOAD_CONST(arg=1, lineno=1042)
           6	BINARY_SUBSCR(arg=None, lineno=1042)
           8	LOAD_FAST(arg=0, lineno=1042)
          10	LOAD_CONST(arg=2, lineno=1042)
          12	BINARY_SUBSCR(arg=None, lineno=1042)
          14	COMPARE_OP(arg=4, lineno=1042)
          16	LOAD_FAST(arg=0, lineno=1042)
          18	LOAD_CONST(arg=1, lineno=1042)
          20	BINARY_SUBSCR(arg=None, lineno=1042)
          22	LOAD_FAST(arg=0, lineno=1042)
          24	LOAD_CONST(arg=3, lineno=1042)
          26	BINARY_SUBSCR(arg=None, lineno=1042)
          28	COMPARE_OP(arg=5, lineno=1042)
          30	BINARY_AND(arg=None, lineno=1042)
          32	RETURN_VALUE(arg=None, lineno=1042)
2025-01-05 16:47:48,658 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:47:48,658 - DEBUG - stack: []
2025-01-05 16:47:48,658 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:47:48,658 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1039)
2025-01-05 16:47:48,658 - DEBUG - stack []
2025-01-05 16:47:48,659 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-05 16:47:48,659 - DEBUG - stack []
2025-01-05 16:47:48,659 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1042)
2025-01-05 16:47:48,659 - DEBUG - stack ['$x2.0']
2025-01-05 16:47:48,659 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-05 16:47:48,660 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-05 16:47:48,660 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-05 16:47:48,660 - DEBUG - stack ['$6binary_subscr.2']
2025-01-05 16:47:48,660 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1042)
2025-01-05 16:47:48,660 - DEBUG - stack ['$6binary_subscr.2', '$x8.3']
2025-01-05 16:47:48,660 - DEBUG - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-05 16:47:48,661 - DEBUG - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2025-01-05 16:47:48,661 - DEBUG - dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=1042)
2025-01-05 16:47:48,661 - DEBUG - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2025-01-05 16:47:48,662 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-05 16:47:48,662 - DEBUG - stack ['$14compare_op.6']
2025-01-05 16:47:48,662 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1042)
2025-01-05 16:47:48,662 - DEBUG - stack ['$14compare_op.6', '$x16.7']
2025-01-05 16:47:48,662 - DEBUG - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-05 16:47:48,662 - DEBUG - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2025-01-05 16:47:48,663 - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-05 16:47:48,663 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9']
2025-01-05 16:47:48,663 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1042)
2025-01-05 16:47:48,663 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2025-01-05 16:47:48,663 - DEBUG - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-05 16:47:48,663 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2025-01-05 16:47:48,663 - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=1042)
2025-01-05 16:47:48,664 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2025-01-05 16:47:48,664 - DEBUG - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1042)
2025-01-05 16:47:48,664 - DEBUG - stack ['$14compare_op.6', '$28compare_op.13']
2025-01-05 16:47:48,664 - DEBUG - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1042)
2025-01-05 16:47:48,664 - DEBUG - stack ['$30binary_and.14']
2025-01-05 16:47:48,664 - DEBUG - end state. edges=[]
2025-01-05 16:47:48,664 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:47:48,665 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-05 16:47:48,665 - DEBUG - defmap: {}
2025-01-05 16:47:48,665 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:47:48,665 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:47:48,665 - DEBUG - keep phismap: {}
2025-01-05 16:47:48,665 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-05 16:47:48,666 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:47:48,666 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:47:48,667 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2025-01-05 16:47:48,668 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1045)
           2	LOAD_FAST(arg=0, lineno=1048)
           4	LOAD_CONST(arg=1, lineno=1048)
           6	BINARY_SUBSCR(arg=None, lineno=1048)
           8	LOAD_FAST(arg=0, lineno=1048)
          10	LOAD_CONST(arg=2, lineno=1048)
          12	BINARY_SUBSCR(arg=None, lineno=1048)
          14	COMPARE_OP(arg=0, lineno=1048)
          16	LOAD_FAST(arg=0, lineno=1048)
          18	LOAD_CONST(arg=1, lineno=1048)
          20	BINARY_SUBSCR(arg=None, lineno=1048)
          22	LOAD_FAST(arg=0, lineno=1048)
          24	LOAD_CONST(arg=3, lineno=1048)
          26	BINARY_SUBSCR(arg=None, lineno=1048)
          28	COMPARE_OP(arg=1, lineno=1048)
          30	BINARY_AND(arg=None, lineno=1048)
          32	RETURN_VALUE(arg=None, lineno=1048)
2025-01-05 16:47:48,668 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:47:48,668 - DEBUG - stack: []
2025-01-05 16:47:48,669 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:47:48,669 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1045)
2025-01-05 16:47:48,669 - DEBUG - stack []
2025-01-05 16:47:48,669 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-05 16:47:48,669 - DEBUG - stack []
2025-01-05 16:47:48,669 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1048)
2025-01-05 16:47:48,669 - DEBUG - stack ['$x2.0']
2025-01-05 16:47:48,670 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-05 16:47:48,670 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-05 16:47:48,670 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-05 16:47:48,670 - DEBUG - stack ['$6binary_subscr.2']
2025-01-05 16:47:48,670 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1048)
2025-01-05 16:47:48,670 - DEBUG - stack ['$6binary_subscr.2', '$x8.3']
2025-01-05 16:47:48,670 - DEBUG - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-05 16:47:48,671 - DEBUG - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2025-01-05 16:47:48,671 - DEBUG - dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=1048)
2025-01-05 16:47:48,671 - DEBUG - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2025-01-05 16:47:48,671 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-05 16:47:48,671 - DEBUG - stack ['$14compare_op.6']
2025-01-05 16:47:48,671 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1048)
2025-01-05 16:47:48,671 - DEBUG - stack ['$14compare_op.6', '$x16.7']
2025-01-05 16:47:48,672 - DEBUG - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-05 16:47:48,672 - DEBUG - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2025-01-05 16:47:48,672 - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-05 16:47:48,672 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9']
2025-01-05 16:47:48,672 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1048)
2025-01-05 16:47:48,672 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2025-01-05 16:47:48,672 - DEBUG - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-05 16:47:48,672 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2025-01-05 16:47:48,673 - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=1, lineno=1048)
2025-01-05 16:47:48,673 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2025-01-05 16:47:48,673 - DEBUG - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1048)
2025-01-05 16:47:48,673 - DEBUG - stack ['$14compare_op.6', '$28compare_op.13']
2025-01-05 16:47:48,673 - DEBUG - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1048)
2025-01-05 16:47:48,673 - DEBUG - stack ['$30binary_and.14']
2025-01-05 16:47:48,674 - DEBUG - end state. edges=[]
2025-01-05 16:47:48,674 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:47:48,674 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-05 16:47:48,674 - DEBUG - defmap: {}
2025-01-05 16:47:48,674 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:47:48,674 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:47:48,675 - DEBUG - keep phismap: {}
2025-01-05 16:47:48,675 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-05 16:47:48,675 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:47:48,675 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:47:48,676 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2025-01-05 16:47:56,536 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=425)
           2	LOAD_FAST(arg=0, lineno=428)
           4	LOAD_CONST(arg=1, lineno=428)
           6	BINARY_SUBSCR(arg=None, lineno=428)
           8	LOAD_FAST(arg=0, lineno=428)
          10	LOAD_CONST(arg=2, lineno=428)
          12	BINARY_SUBSCR(arg=None, lineno=428)
          14	BINARY_ADD(arg=None, lineno=428)
          16	LOAD_CONST(arg=3, lineno=428)
          18	LOAD_FAST(arg=0, lineno=428)
          20	LOAD_CONST(arg=4, lineno=428)
          22	BINARY_SUBSCR(arg=None, lineno=428)
          24	BINARY_MULTIPLY(arg=None, lineno=428)
          26	BINARY_SUBTRACT(arg=None, lineno=428)
          28	STORE_FAST(arg=1, lineno=428)
          30	LOAD_FAST(arg=0, lineno=429)
          32	LOAD_CONST(arg=1, lineno=429)
          34	BINARY_SUBSCR(arg=None, lineno=429)
          36	LOAD_FAST(arg=0, lineno=429)
          38	LOAD_CONST(arg=2, lineno=429)
          40	BINARY_SUBSCR(arg=None, lineno=429)
          42	BINARY_SUBTRACT(arg=None, lineno=429)
          44	LOAD_CONST(arg=3, lineno=429)
          46	BINARY_TRUE_DIVIDE(arg=None, lineno=429)
          48	STORE_FAST(arg=2, lineno=429)
          50	LOAD_GLOBAL(arg=0, lineno=431)
          52	LOAD_METHOD(arg=1, lineno=431)
          54	LOAD_FAST(arg=2, lineno=431)
          56	CALL_METHOD(arg=1, lineno=431)
          58	LOAD_GLOBAL(arg=0, lineno=431)
          60	LOAD_METHOD(arg=1, lineno=431)
          62	LOAD_FAST(arg=1, lineno=431)
          64	CALL_METHOD(arg=1, lineno=431)
          66	COMPARE_OP(arg=5, lineno=431)
          68	POP_JUMP_IF_FALSE(arg=74, lineno=431)
          70	LOAD_CONST(arg=4, lineno=434)
          72	RETURN_VALUE(arg=None, lineno=434)
>         74	LOAD_FAST(arg=2, lineno=436)
          76	UNARY_NEGATIVE(arg=None, lineno=436)
          78	LOAD_FAST(arg=1, lineno=436)
          80	BINARY_TRUE_DIVIDE(arg=None, lineno=436)
          82	RETURN_VALUE(arg=None, lineno=436)
2025-01-05 16:47:56,537 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:47:56,537 - DEBUG - stack: []
2025-01-05 16:47:56,538 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:47:56,538 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=425)
2025-01-05 16:47:56,538 - DEBUG - stack []
2025-01-05 16:47:56,538 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=428)
2025-01-05 16:47:56,539 - DEBUG - stack []
2025-01-05 16:47:56,539 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=428)
2025-01-05 16:47:56,539 - DEBUG - stack ['$x2.0']
2025-01-05 16:47:56,539 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=428)
2025-01-05 16:47:56,539 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-05 16:47:56,539 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=428)
2025-01-05 16:47:56,540 - DEBUG - stack ['$6binary_subscr.2']
2025-01-05 16:47:56,540 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=428)
2025-01-05 16:47:56,540 - DEBUG - stack ['$6binary_subscr.2', '$x8.3']
2025-01-05 16:47:56,540 - DEBUG - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=428)
2025-01-05 16:47:56,540 - DEBUG - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2025-01-05 16:47:56,540 - DEBUG - dispatch pc=14, inst=BINARY_ADD(arg=None, lineno=428)
2025-01-05 16:47:56,540 - DEBUG - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2025-01-05 16:47:56,541 - DEBUG - dispatch pc=16, inst=LOAD_CONST(arg=3, lineno=428)
2025-01-05 16:47:56,541 - DEBUG - stack ['$14binary_add.6']
2025-01-05 16:47:56,541 - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=428)
2025-01-05 16:47:56,541 - DEBUG - stack ['$14binary_add.6', '$const16.7']
2025-01-05 16:47:56,541 - DEBUG - dispatch pc=20, inst=LOAD_CONST(arg=4, lineno=428)
2025-01-05 16:47:56,542 - DEBUG - stack ['$14binary_add.6', '$const16.7', '$x18.8']
2025-01-05 16:47:56,542 - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=428)
2025-01-05 16:47:56,542 - DEBUG - stack ['$14binary_add.6', '$const16.7', '$x18.8', '$const20.9']
2025-01-05 16:47:56,542 - DEBUG - dispatch pc=24, inst=BINARY_MULTIPLY(arg=None, lineno=428)
2025-01-05 16:47:56,542 - DEBUG - stack ['$14binary_add.6', '$const16.7', '$22binary_subscr.10']
2025-01-05 16:47:56,542 - DEBUG - dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=428)
2025-01-05 16:47:56,542 - DEBUG - stack ['$14binary_add.6', '$24binary_multiply.11']
2025-01-05 16:47:56,543 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=428)
2025-01-05 16:47:56,543 - DEBUG - stack ['$26binary_subtract.12']
2025-01-05 16:47:56,543 - DEBUG - dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=429)
2025-01-05 16:47:56,543 - DEBUG - stack []
2025-01-05 16:47:56,543 - DEBUG - dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=429)
2025-01-05 16:47:56,543 - DEBUG - stack ['$x30.13']
2025-01-05 16:47:56,543 - DEBUG - dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=429)
2025-01-05 16:47:56,544 - DEBUG - stack ['$x30.13', '$const32.14']
2025-01-05 16:47:56,544 - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=429)
2025-01-05 16:47:56,544 - DEBUG - stack ['$34binary_subscr.15']
2025-01-05 16:47:56,544 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=429)
2025-01-05 16:47:56,544 - DEBUG - stack ['$34binary_subscr.15', '$x36.16']
2025-01-05 16:47:56,544 - DEBUG - dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=429)
2025-01-05 16:47:56,544 - DEBUG - stack ['$34binary_subscr.15', '$x36.16', '$const38.17']
2025-01-05 16:47:56,545 - DEBUG - dispatch pc=42, inst=BINARY_SUBTRACT(arg=None, lineno=429)
2025-01-05 16:47:56,545 - DEBUG - stack ['$34binary_subscr.15', '$40binary_subscr.18']
2025-01-05 16:47:56,545 - DEBUG - dispatch pc=44, inst=LOAD_CONST(arg=3, lineno=429)
2025-01-05 16:47:56,545 - DEBUG - stack ['$42binary_subtract.19']
2025-01-05 16:47:56,545 - DEBUG - dispatch pc=46, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=429)
2025-01-05 16:47:56,545 - DEBUG - stack ['$42binary_subtract.19', '$const44.20']
2025-01-05 16:47:56,546 - DEBUG - dispatch pc=48, inst=STORE_FAST(arg=2, lineno=429)
2025-01-05 16:47:56,546 - DEBUG - stack ['$46binary_true_divide.21']
2025-01-05 16:47:56,546 - DEBUG - dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=431)
2025-01-05 16:47:56,546 - DEBUG - stack []
2025-01-05 16:47:56,546 - DEBUG - dispatch pc=52, inst=LOAD_METHOD(arg=1, lineno=431)
2025-01-05 16:47:56,546 - DEBUG - stack ['$50load_global.22']
2025-01-05 16:47:56,546 - DEBUG - dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=431)
2025-01-05 16:47:56,547 - DEBUG - stack ['$52load_method.23']
2025-01-05 16:47:56,547 - DEBUG - dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=431)
2025-01-05 16:47:56,547 - DEBUG - stack ['$52load_method.23', '$b54.24']
2025-01-05 16:47:56,547 - DEBUG - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=431)
2025-01-05 16:47:56,547 - DEBUG - stack ['$56call_method.25']
2025-01-05 16:47:56,547 - DEBUG - dispatch pc=60, inst=LOAD_METHOD(arg=1, lineno=431)
2025-01-05 16:47:56,547 - DEBUG - stack ['$56call_method.25', '$58load_global.26']
2025-01-05 16:47:56,548 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=431)
2025-01-05 16:47:56,548 - DEBUG - stack ['$56call_method.25', '$60load_method.27']
2025-01-05 16:47:56,548 - DEBUG - dispatch pc=64, inst=CALL_METHOD(arg=1, lineno=431)
2025-01-05 16:47:56,548 - DEBUG - stack ['$56call_method.25', '$60load_method.27', '$a62.28']
2025-01-05 16:47:56,548 - DEBUG - dispatch pc=66, inst=COMPARE_OP(arg=5, lineno=431)
2025-01-05 16:47:56,548 - DEBUG - stack ['$56call_method.25', '$64call_method.29']
2025-01-05 16:47:56,548 - DEBUG - dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=74, lineno=431)
2025-01-05 16:47:56,549 - DEBUG - stack ['$66compare_op.30']
2025-01-05 16:47:56,549 - DEBUG - end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=74, stack=(), blockstack=(), npush=0)]
2025-01-05 16:47:56,549 - DEBUG - pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2025-01-05 16:47:56,549 - DEBUG - stack: []
2025-01-05 16:47:56,549 - DEBUG - state.pc_initial: State(pc_initial=70 nstack_initial=0)
2025-01-05 16:47:56,549 - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=434)
2025-01-05 16:47:56,549 - DEBUG - stack []
2025-01-05 16:47:56,550 - DEBUG - dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=434)
2025-01-05 16:47:56,550 - DEBUG - stack ['$const70.0']
2025-01-05 16:47:56,550 - DEBUG - end state. edges=[]
2025-01-05 16:47:56,550 - DEBUG - pending: deque([State(pc_initial=74 nstack_initial=0)])
2025-01-05 16:47:56,550 - DEBUG - stack: []
2025-01-05 16:47:56,550 - DEBUG - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2025-01-05 16:47:56,550 - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=436)
2025-01-05 16:47:56,551 - DEBUG - stack []
2025-01-05 16:47:56,551 - DEBUG - dispatch pc=76, inst=UNARY_NEGATIVE(arg=None, lineno=436)
2025-01-05 16:47:56,551 - DEBUG - stack ['$b74.0']
2025-01-05 16:47:56,551 - DEBUG - dispatch pc=78, inst=LOAD_FAST(arg=1, lineno=436)
2025-01-05 16:47:56,551 - DEBUG - stack ['$76unary_negative.1']
2025-01-05 16:47:56,551 - DEBUG - dispatch pc=80, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=436)
2025-01-05 16:47:56,551 - DEBUG - stack ['$76unary_negative.1', '$a78.2']
2025-01-05 16:47:56,552 - DEBUG - dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=436)
2025-01-05 16:47:56,552 - DEBUG - stack ['$80binary_true_divide.3']
2025-01-05 16:47:56,552 - DEBUG - end state. edges=[]
2025-01-05 16:47:56,552 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:47:56,552 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set()})
2025-01-05 16:47:56,552 - DEBUG - defmap: {}
2025-01-05 16:47:56,553 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:47:56,553 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:47:56,553 - DEBUG - keep phismap: {}
2025-01-05 16:47:56,553 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-05 16:47:56,553 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:47:56,553 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14binary_add.6'}), (16, {'res': '$const16.7'}), (18, {'res': '$x18.8'}), (20, {'res': '$const20.9'}), (22, {'index': '$const20.9', 'target': '$x18.8', 'res': '$22binary_subscr.10'}), (24, {'lhs': '$const16.7', 'rhs': '$22binary_subscr.10', 'res': '$24binary_multiply.11'}), (26, {'lhs': '$14binary_add.6', 'rhs': '$24binary_multiply.11', 'res': '$26binary_subtract.12'}), (28, {'value': '$26binary_subtract.12'}), (30, {'res': '$x30.13'}), (32, {'res': '$const32.14'}), (34, {'index': '$const32.14', 'target': '$x30.13', 'res': '$34binary_subscr.15'}), (36, {'res': '$x36.16'}), (38, {'res': '$const38.17'}), (40, {'index': '$const38.17', 'target': '$x36.16', 'res': '$40binary_subscr.18'}), (42, {'lhs': '$34binary_subscr.15', 'rhs': '$40binary_subscr.18', 'res': '$42binary_subtract.19'}), (44, {'res': '$const44.20'}), (46, {'lhs': '$42binary_subtract.19', 'rhs': '$const44.20', 'res': '$46binary_true_divide.21'}), (48, {'value': '$46binary_true_divide.21'}), (50, {'res': '$50load_global.22'}), (52, {'item': '$50load_global.22', 'res': '$52load_method.23'}), (54, {'res': '$b54.24'}), (56, {'func': '$52load_method.23', 'args': ['$b54.24'], 'res': '$56call_method.25'}), (58, {'res': '$58load_global.26'}), (60, {'item': '$58load_global.26', 'res': '$60load_method.27'}), (62, {'res': '$a62.28'}), (64, {'func': '$60load_method.27', 'args': ['$a62.28'], 'res': '$64call_method.29'}), (66, {'lhs': '$56call_method.25', 'rhs': '$64call_method.29', 'res': '$66compare_op.30'}), (68, {'pred': '$66compare_op.30'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 74: ()})
2025-01-05 16:47:56,554 - DEBUG - block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$const70.0'}), (72, {'retval': '$const70.0', 'castval': '$72return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:47:56,554 - DEBUG - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$b74.0'}), (76, {'value': '$b74.0', 'res': '$76unary_negative.1'}), (78, {'res': '$a78.2'}), (80, {'lhs': '$76unary_negative.1', 'rhs': '$a78.2', 'res': '$80binary_true_divide.3'}), (82, {'retval': '$80binary_true_divide.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:47:56,556 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14binary_add.6 = $6binary_subscr.2 + $12binary_subscr.5 ['$12binary_subscr.5', '$14binary_add.6', '$6binary_subscr.2']
    $const16.7 = const(int, 2)               ['$const16.7']
    $const20.9 = const(int, 0)               ['$const20.9']
    $22binary_subscr.10 = getitem(value=x, index=$const20.9, fn=<built-in function getitem>) ['$22binary_subscr.10', '$const20.9', 'x']
    $24binary_multiply.11 = $const16.7 * $22binary_subscr.10 ['$22binary_subscr.10', '$24binary_multiply.11', '$const16.7']
    a = $14binary_add.6 - $24binary_multiply.11 ['$14binary_add.6', '$24binary_multiply.11', 'a']
    $const32.14 = const(int, 1)              ['$const32.14']
    $34binary_subscr.15 = getitem(value=x, index=$const32.14, fn=<built-in function getitem>) ['$34binary_subscr.15', '$const32.14', 'x']
    $const38.17 = const(int, -1)             ['$const38.17']
    $40binary_subscr.18 = getitem(value=x, index=$const38.17, fn=<built-in function getitem>) ['$40binary_subscr.18', '$const38.17', 'x']
    $42binary_subtract.19 = $34binary_subscr.15 - $40binary_subscr.18 ['$34binary_subscr.15', '$40binary_subscr.18', '$42binary_subtract.19']
    $const44.20 = const(int, 2)              ['$const44.20']
    b = $42binary_subtract.19 / $const44.20  ['$42binary_subtract.19', '$const44.20', 'b']
    $50load_global.22 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$50load_global.22']
    $52load_method.23 = getattr(value=$50load_global.22, attr=abs) ['$50load_global.22', '$52load_method.23']
    $56call_method.25 = call $52load_method.23(b, func=$52load_method.23, args=[Var(b, pitch.py:429)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_method.23', '$56call_method.25', 'b']
    $58load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.26']
    $60load_method.27 = getattr(value=$58load_global.26, attr=abs) ['$58load_global.26', '$60load_method.27']
    $64call_method.29 = call $60load_method.27(a, func=$60load_method.27, args=[Var(a, pitch.py:428)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.27', '$64call_method.29', 'a']
    $66compare_op.30 = $56call_method.25 >= $64call_method.29 ['$56call_method.25', '$64call_method.29', '$66compare_op.30']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.30, func=bool68, args=(Var($66compare_op.30, pitch.py:431),), kws=(), vararg=None, varkwarg=None, target=None) ['$66compare_op.30', '$68pred', 'bool68']
    branch $68pred, 70, 74                   ['$68pred']
label 70:
    $const70.0 = const(int, 0)               ['$const70.0']
    $72return_value.1 = cast(value=$const70.0) ['$72return_value.1', '$const70.0']
    return $72return_value.1                 ['$72return_value.1']
label 74:
    $76unary_negative.1 = unary(fn=<built-in function neg>, value=b) ['$76unary_negative.1', 'b']
    $80binary_true_divide.3 = $76unary_negative.1 / a ['$76unary_negative.1', '$80binary_true_divide.3', 'a']
    $82return_value.4 = cast(value=$80binary_true_divide.3) ['$80binary_true_divide.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']

2025-01-05 16:47:57,464 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (1).mp3: No librosa attribute beats
2025-01-05 16:47:59,590 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (10).mp3: No librosa attribute beats
2025-01-05 16:48:02,957 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (11).mp3: No librosa attribute beats
2025-01-05 16:48:05,750 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (12).mp3: No librosa attribute beats
2025-01-05 16:48:07,301 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (13).mp3: No librosa attribute beats
2025-01-05 16:48:09,333 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (14).mp3: No librosa attribute beats
2025-01-05 16:48:11,110 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (15).mp3: No librosa attribute beats
2025-01-05 16:48:12,794 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (16).mp3: No librosa attribute beats
2025-01-05 16:48:14,459 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (17).mp3: No librosa attribute beats
2025-01-05 16:48:16,958 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (18).mp3: No librosa attribute beats
2025-01-05 16:48:18,513 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (19).mp3: No librosa attribute beats
2025-01-05 16:48:20,418 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (2).mp3: No librosa attribute beats
2025-01-05 16:48:22,367 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (20).mp3: No librosa attribute beats
2025-01-05 16:48:23,622 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (21).mp3: No librosa attribute beats
2025-01-05 16:48:24,538 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (22).mp3: No librosa attribute beats
2025-01-05 16:48:26,394 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (23).mp3: No librosa attribute beats
2025-01-05 16:48:27,719 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (24).mp3: No librosa attribute beats
2025-01-05 16:48:28,871 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (25).mp3: No librosa attribute beats
2025-01-05 16:48:30,404 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (26).mp3: No librosa attribute beats
2025-01-05 16:48:34,239 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (27).mp3: No librosa attribute beats
2025-01-05 16:48:36,410 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (28).mp3: No librosa attribute beats
2025-01-05 16:48:37,998 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (29).mp3: No librosa attribute beats
2025-01-05 16:48:39,206 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (3).mp3: No librosa attribute beats
2025-01-05 16:48:40,583 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (30).mp3: No librosa attribute beats
2025-01-05 16:48:42,563 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (31).mp3: No librosa attribute beats
2025-01-05 16:48:44,611 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (32).mp3: No librosa attribute beats
2025-01-05 16:48:46,243 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (33).mp3: No librosa attribute beats
2025-01-05 16:48:48,678 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (34).mp3: No librosa attribute beats
2025-01-05 16:48:51,040 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (35).mp3: No librosa attribute beats
2025-01-05 16:48:58,760 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (36).mp3: No librosa attribute beats
2025-01-05 16:49:02,593 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (37).mp3: No librosa attribute beats
2025-01-05 16:49:05,972 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (38).mp3: No librosa attribute beats
2025-01-05 16:49:10,959 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (39).mp3: No librosa attribute beats
2025-01-05 16:49:14,449 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (4).mp3: No librosa attribute beats
2025-01-05 16:49:22,841 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (40).mp3: No librosa attribute beats
2025-01-05 16:49:26,998 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (41).mp3: No librosa attribute beats
2025-01-05 16:49:29,410 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (42).mp3: No librosa attribute beats
2025-01-05 16:49:30,768 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (43).mp3: No librosa attribute beats
2025-01-05 16:49:31,819 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (5).mp3: No librosa attribute beats
2025-01-05 16:49:33,681 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (6).mp3: No librosa attribute beats
2025-01-05 16:49:35,838 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (7).mp3: No librosa attribute beats
2025-01-05 16:49:37,565 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (8).mp3: No librosa attribute beats
2025-01-05 16:49:38,947 - ERROR - Segment analysis error for C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (9).mp3: No librosa attribute beats
2025-01-05 16:49:52,966 - INFO - Processed 0 valid track segments
2025-01-05 16:51:14,839 - INFO - Found 43 audio files
2025-01-05 16:51:16,899 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1141)
           2	LOAD_FAST(arg=0, lineno=1144)
           4	LOAD_CONST(arg=1, lineno=1144)
           6	BINARY_SUBSCR(arg=None, lineno=1144)
           8	STORE_FAST(arg=3, lineno=1144)
          10	LOAD_FAST(arg=1, lineno=1145)
          12	UNARY_NEGATIVE(arg=None, lineno=1145)
          14	LOAD_FAST(arg=3, lineno=1145)
          16	DUP_TOP(arg=None, lineno=1145)
          18	ROT_THREE(arg=None, lineno=1145)
          20	COMPARE_OP(arg=1, lineno=1145)
          22	POP_JUMP_IF_FALSE(arg=32, lineno=1145)
          24	LOAD_FAST(arg=1, lineno=1145)
          26	COMPARE_OP(arg=1, lineno=1145)
          28	POP_JUMP_IF_FALSE(arg=40, lineno=1145)
          30	JUMP_FORWARD(arg=4, lineno=1145)
>         32	POP_TOP(arg=None, lineno=1145)
          34	JUMP_FORWARD(arg=4, lineno=1145)
>         36	LOAD_CONST(arg=1, lineno=1146)
          38	STORE_FAST(arg=3, lineno=1146)
>         40	LOAD_FAST(arg=0, lineno=1148)
          42	LOAD_CONST(arg=2, lineno=1148)
          44	BINARY_SUBSCR(arg=None, lineno=1148)
          46	STORE_FAST(arg=4, lineno=1148)
          48	LOAD_FAST(arg=1, lineno=1149)
          50	UNARY_NEGATIVE(arg=None, lineno=1149)
          52	LOAD_FAST(arg=4, lineno=1149)
          54	DUP_TOP(arg=None, lineno=1149)
          56	ROT_THREE(arg=None, lineno=1149)
          58	COMPARE_OP(arg=1, lineno=1149)
          60	POP_JUMP_IF_FALSE(arg=70, lineno=1149)
          62	LOAD_FAST(arg=1, lineno=1149)
          64	COMPARE_OP(arg=1, lineno=1149)
          66	POP_JUMP_IF_FALSE(arg=78, lineno=1149)
          68	JUMP_FORWARD(arg=4, lineno=1149)
>         70	POP_TOP(arg=None, lineno=1149)
          72	JUMP_FORWARD(arg=4, lineno=1149)
>         74	LOAD_CONST(arg=1, lineno=1150)
          76	STORE_FAST(arg=4, lineno=1150)
>         78	LOAD_FAST(arg=2, lineno=1152)
          80	POP_JUMP_IF_FALSE(arg=102, lineno=1152)
          82	LOAD_GLOBAL(arg=0, lineno=1153)
          84	LOAD_METHOD(arg=1, lineno=1153)
          86	LOAD_FAST(arg=3, lineno=1153)
          88	CALL_METHOD(arg=1, lineno=1153)
          90	LOAD_GLOBAL(arg=0, lineno=1153)
          92	LOAD_METHOD(arg=1, lineno=1153)
          94	LOAD_FAST(arg=4, lineno=1153)
          96	CALL_METHOD(arg=1, lineno=1153)
          98	COMPARE_OP(arg=3, lineno=1153)
         100	RETURN_VALUE(arg=None, lineno=1153)
>        102	LOAD_GLOBAL(arg=0, lineno=1155)
         104	LOAD_METHOD(arg=2, lineno=1155)
         106	LOAD_FAST(arg=3, lineno=1155)
         108	CALL_METHOD(arg=1, lineno=1155)
         110	LOAD_GLOBAL(arg=0, lineno=1155)
         112	LOAD_METHOD(arg=2, lineno=1155)
         114	LOAD_FAST(arg=4, lineno=1155)
         116	CALL_METHOD(arg=1, lineno=1155)
         118	COMPARE_OP(arg=3, lineno=1155)
         120	RETURN_VALUE(arg=None, lineno=1155)
         122	LOAD_CONST(arg=3, lineno=1155)
         124	RETURN_VALUE(arg=None, lineno=1155)
2025-01-05 16:51:16,926 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:51:16,927 - DEBUG - stack: []
2025-01-05 16:51:16,928 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:51:16,930 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1141)
2025-01-05 16:51:16,932 - DEBUG - stack []
2025-01-05 16:51:16,933 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1144)
2025-01-05 16:51:16,934 - DEBUG - stack []
2025-01-05 16:51:16,935 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1144)
2025-01-05 16:51:16,937 - DEBUG - stack ['$x2.0']
2025-01-05 16:51:16,938 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1144)
2025-01-05 16:51:16,940 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-05 16:51:16,941 - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1144)
2025-01-05 16:51:16,943 - DEBUG - stack ['$6binary_subscr.2']
2025-01-05 16:51:16,944 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=1145)
2025-01-05 16:51:16,946 - DEBUG - stack []
2025-01-05 16:51:16,948 - DEBUG - dispatch pc=12, inst=UNARY_NEGATIVE(arg=None, lineno=1145)
2025-01-05 16:51:16,949 - DEBUG - stack ['$threshold10.3']
2025-01-05 16:51:16,950 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=1145)
2025-01-05 16:51:16,951 - DEBUG - stack ['$12unary_negative.4']
2025-01-05 16:51:16,952 - DEBUG - dispatch pc=16, inst=DUP_TOP(arg=None, lineno=1145)
2025-01-05 16:51:16,953 - DEBUG - stack ['$12unary_negative.4', '$x014.5']
2025-01-05 16:51:16,955 - DEBUG - dispatch pc=18, inst=ROT_THREE(arg=None, lineno=1145)
2025-01-05 16:51:16,956 - DEBUG - stack ['$12unary_negative.4', '$x014.5', '$16dup_top.6']
2025-01-05 16:51:16,957 - DEBUG - dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=1145)
2025-01-05 16:51:16,959 - DEBUG - stack ['$16dup_top.6', '$12unary_negative.4', '$x014.5']
2025-01-05 16:51:16,960 - DEBUG - dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=32, lineno=1145)
2025-01-05 16:51:16,962 - DEBUG - stack ['$16dup_top.6', '$20compare_op.7']
2025-01-05 16:51:16,963 - DEBUG - end state. edges=[Edge(pc=24, stack=('$16dup_top.6',), blockstack=(), npush=0), Edge(pc=32, stack=('$16dup_top.6',), blockstack=(), npush=0)]
2025-01-05 16:51:16,965 - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2025-01-05 16:51:16,967 - DEBUG - stack: ['$phi24.0']
2025-01-05 16:51:16,968 - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=1)
2025-01-05 16:51:16,969 - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1145)
2025-01-05 16:51:16,971 - DEBUG - stack ['$phi24.0']
2025-01-05 16:51:16,972 - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=1, lineno=1145)
2025-01-05 16:51:16,973 - DEBUG - stack ['$phi24.0', '$threshold24.1']
2025-01-05 16:51:16,974 - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=40, lineno=1145)
2025-01-05 16:51:16,976 - DEBUG - stack ['$26compare_op.2']
2025-01-05 16:51:16,976 - DEBUG - end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:16,978 - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2025-01-05 16:51:16,980 - DEBUG - stack: ['$phi32.0']
2025-01-05 16:51:16,981 - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2025-01-05 16:51:16,982 - DEBUG - dispatch pc=32, inst=POP_TOP(arg=None, lineno=1145)
2025-01-05 16:51:16,984 - DEBUG - stack ['$phi32.0']
2025-01-05 16:51:16,985 - DEBUG - dispatch pc=34, inst=JUMP_FORWARD(arg=4, lineno=1145)
2025-01-05 16:51:16,987 - DEBUG - stack []
2025-01-05 16:51:16,988 - DEBUG - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:16,989 - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2025-01-05 16:51:16,991 - DEBUG - stack: []
2025-01-05 16:51:16,992 - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2025-01-05 16:51:16,994 - DEBUG - dispatch pc=30, inst=JUMP_FORWARD(arg=4, lineno=1145)
2025-01-05 16:51:16,995 - DEBUG - stack []
2025-01-05 16:51:16,997 - DEBUG - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:16,998 - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2025-01-05 16:51:17,000 - DEBUG - stack: []
2025-01-05 16:51:17,001 - DEBUG - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2025-01-05 16:51:17,003 - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1148)
2025-01-05 16:51:17,004 - DEBUG - stack []
2025-01-05 16:51:17,006 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=1148)
2025-01-05 16:51:17,007 - DEBUG - stack ['$x40.0']
2025-01-05 16:51:17,008 - DEBUG - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=1148)
2025-01-05 16:51:17,009 - DEBUG - stack ['$x40.0', '$const42.1']
2025-01-05 16:51:17,010 - DEBUG - dispatch pc=46, inst=STORE_FAST(arg=4, lineno=1148)
2025-01-05 16:51:17,012 - DEBUG - stack ['$44binary_subscr.2']
2025-01-05 16:51:17,014 - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=1149)
2025-01-05 16:51:17,015 - DEBUG - stack []
2025-01-05 16:51:17,016 - DEBUG - dispatch pc=50, inst=UNARY_NEGATIVE(arg=None, lineno=1149)
2025-01-05 16:51:17,018 - DEBUG - stack ['$threshold48.3']
2025-01-05 16:51:17,019 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=1149)
2025-01-05 16:51:17,020 - DEBUG - stack ['$50unary_negative.4']
2025-01-05 16:51:17,021 - DEBUG - dispatch pc=54, inst=DUP_TOP(arg=None, lineno=1149)
2025-01-05 16:51:17,022 - DEBUG - stack ['$50unary_negative.4', '$x152.5']
2025-01-05 16:51:17,024 - DEBUG - dispatch pc=56, inst=ROT_THREE(arg=None, lineno=1149)
2025-01-05 16:51:17,025 - DEBUG - stack ['$50unary_negative.4', '$x152.5', '$54dup_top.6']
2025-01-05 16:51:17,027 - DEBUG - dispatch pc=58, inst=COMPARE_OP(arg=1, lineno=1149)
2025-01-05 16:51:17,028 - DEBUG - stack ['$54dup_top.6', '$50unary_negative.4', '$x152.5']
2025-01-05 16:51:17,031 - DEBUG - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=70, lineno=1149)
2025-01-05 16:51:17,032 - DEBUG - stack ['$54dup_top.6', '$58compare_op.7']
2025-01-05 16:51:17,033 - DEBUG - end state. edges=[Edge(pc=62, stack=('$54dup_top.6',), blockstack=(), npush=0), Edge(pc=70, stack=('$54dup_top.6',), blockstack=(), npush=0)]
2025-01-05 16:51:17,035 - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2025-01-05 16:51:17,037 - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2025-01-05 16:51:17,039 - DEBUG - stack: []
2025-01-05 16:51:17,040 - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2025-01-05 16:51:17,042 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1146)
2025-01-05 16:51:17,043 - DEBUG - stack []
2025-01-05 16:51:17,044 - DEBUG - dispatch pc=38, inst=STORE_FAST(arg=3, lineno=1146)
2025-01-05 16:51:17,045 - DEBUG - stack ['$const36.0']
2025-01-05 16:51:17,047 - DEBUG - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:17,048 - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0)])
2025-01-05 16:51:17,050 - DEBUG - stack: ['$phi62.0']
2025-01-05 16:51:17,051 - DEBUG - state.pc_initial: State(pc_initial=62 nstack_initial=1)
2025-01-05 16:51:17,053 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=1149)
2025-01-05 16:51:17,054 - DEBUG - stack ['$phi62.0']
2025-01-05 16:51:17,055 - DEBUG - dispatch pc=64, inst=COMPARE_OP(arg=1, lineno=1149)
2025-01-05 16:51:17,057 - DEBUG - stack ['$phi62.0', '$threshold62.1']
2025-01-05 16:51:17,058 - DEBUG - dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=78, lineno=1149)
2025-01-05 16:51:17,059 - DEBUG - stack ['$64compare_op.2']
2025-01-05 16:51:17,060 - DEBUG - end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:17,062 - DEBUG - pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-05 16:51:17,064 - DEBUG - stack: ['$phi70.0']
2025-01-05 16:51:17,065 - DEBUG - state.pc_initial: State(pc_initial=70 nstack_initial=1)
2025-01-05 16:51:17,067 - DEBUG - dispatch pc=70, inst=POP_TOP(arg=None, lineno=1149)
2025-01-05 16:51:17,068 - DEBUG - stack ['$phi70.0']
2025-01-05 16:51:17,069 - DEBUG - dispatch pc=72, inst=JUMP_FORWARD(arg=4, lineno=1149)
2025-01-05 16:51:17,071 - DEBUG - stack []
2025-01-05 16:51:17,072 - DEBUG - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:17,073 - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-05 16:51:17,075 - DEBUG - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-05 16:51:17,077 - DEBUG - stack: []
2025-01-05 16:51:17,078 - DEBUG - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2025-01-05 16:51:17,080 - DEBUG - dispatch pc=68, inst=JUMP_FORWARD(arg=4, lineno=1149)
2025-01-05 16:51:17,082 - DEBUG - stack []
2025-01-05 16:51:17,083 - DEBUG - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:17,084 - DEBUG - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2025-01-05 16:51:17,086 - DEBUG - stack: []
2025-01-05 16:51:17,087 - DEBUG - state.pc_initial: State(pc_initial=78 nstack_initial=0)
2025-01-05 16:51:17,089 - DEBUG - dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=1152)
2025-01-05 16:51:17,091 - DEBUG - stack []
2025-01-05 16:51:17,092 - DEBUG - dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=102, lineno=1152)
2025-01-05 16:51:17,093 - DEBUG - stack ['$zero_pos78.0']
2025-01-05 16:51:17,095 - DEBUG - end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:17,097 - DEBUG - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-05 16:51:17,099 - DEBUG - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-05 16:51:17,102 - DEBUG - stack: []
2025-01-05 16:51:17,103 - DEBUG - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2025-01-05 16:51:17,104 - DEBUG - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1150)
2025-01-05 16:51:17,106 - DEBUG - stack []
2025-01-05 16:51:17,107 - DEBUG - dispatch pc=76, inst=STORE_FAST(arg=4, lineno=1150)
2025-01-05 16:51:17,108 - DEBUG - stack ['$const74.0']
2025-01-05 16:51:17,109 - DEBUG - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:17,110 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-05 16:51:17,113 - DEBUG - stack: []
2025-01-05 16:51:17,114 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2025-01-05 16:51:17,115 - DEBUG - dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2025-01-05 16:51:17,117 - DEBUG - stack []
2025-01-05 16:51:17,118 - DEBUG - dispatch pc=84, inst=LOAD_METHOD(arg=1, lineno=1153)
2025-01-05 16:51:17,119 - DEBUG - stack ['$82load_global.0']
2025-01-05 16:51:17,121 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=1153)
2025-01-05 16:51:17,122 - DEBUG - stack ['$84load_method.1']
2025-01-05 16:51:17,123 - DEBUG - dispatch pc=88, inst=CALL_METHOD(arg=1, lineno=1153)
2025-01-05 16:51:17,124 - DEBUG - stack ['$84load_method.1', '$x086.2']
2025-01-05 16:51:17,126 - DEBUG - dispatch pc=90, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2025-01-05 16:51:17,127 - DEBUG - stack ['$88call_method.3']
2025-01-05 16:51:17,128 - DEBUG - dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=1153)
2025-01-05 16:51:17,130 - DEBUG - stack ['$88call_method.3', '$90load_global.4']
2025-01-05 16:51:17,131 - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=1153)
2025-01-05 16:51:17,133 - DEBUG - stack ['$88call_method.3', '$92load_method.5']
2025-01-05 16:51:17,134 - DEBUG - dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=1153)
2025-01-05 16:51:17,136 - DEBUG - stack ['$88call_method.3', '$92load_method.5', '$x194.6']
2025-01-05 16:51:17,138 - DEBUG - dispatch pc=98, inst=COMPARE_OP(arg=3, lineno=1153)
2025-01-05 16:51:17,139 - DEBUG - stack ['$88call_method.3', '$96call_method.7']
2025-01-05 16:51:17,141 - DEBUG - dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=1153)
2025-01-05 16:51:17,143 - DEBUG - stack ['$98compare_op.8']
2025-01-05 16:51:17,144 - DEBUG - end state. edges=[]
2025-01-05 16:51:17,145 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-05 16:51:17,147 - DEBUG - stack: []
2025-01-05 16:51:17,148 - DEBUG - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2025-01-05 16:51:17,150 - DEBUG - dispatch pc=102, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2025-01-05 16:51:17,151 - DEBUG - stack []
2025-01-05 16:51:17,152 - DEBUG - dispatch pc=104, inst=LOAD_METHOD(arg=2, lineno=1155)
2025-01-05 16:51:17,153 - DEBUG - stack ['$102load_global.0']
2025-01-05 16:51:17,155 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1155)
2025-01-05 16:51:17,156 - DEBUG - stack ['$104load_method.1']
2025-01-05 16:51:17,157 - DEBUG - dispatch pc=108, inst=CALL_METHOD(arg=1, lineno=1155)
2025-01-05 16:51:17,158 - DEBUG - stack ['$104load_method.1', '$x0106.2']
2025-01-05 16:51:17,159 - DEBUG - dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2025-01-05 16:51:17,161 - DEBUG - stack ['$108call_method.3']
2025-01-05 16:51:17,162 - DEBUG - dispatch pc=112, inst=LOAD_METHOD(arg=2, lineno=1155)
2025-01-05 16:51:17,163 - DEBUG - stack ['$108call_method.3', '$110load_global.4']
2025-01-05 16:51:17,165 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=1155)
2025-01-05 16:51:17,167 - DEBUG - stack ['$108call_method.3', '$112load_method.5']
2025-01-05 16:51:17,169 - DEBUG - dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=1155)
2025-01-05 16:51:17,170 - DEBUG - stack ['$108call_method.3', '$112load_method.5', '$x1114.6']
2025-01-05 16:51:17,172 - DEBUG - dispatch pc=118, inst=COMPARE_OP(arg=3, lineno=1155)
2025-01-05 16:51:17,173 - DEBUG - stack ['$108call_method.3', '$116call_method.7']
2025-01-05 16:51:17,175 - DEBUG - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=1155)
2025-01-05 16:51:17,176 - DEBUG - stack ['$118compare_op.8']
2025-01-05 16:51:17,177 - DEBUG - end state. edges=[]
2025-01-05 16:51:17,178 - DEBUG - pending: deque([State(pc_initial=78 nstack_initial=0)])
2025-01-05 16:51:17,180 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:51:17,182 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=1): {'$phi62.0'},
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set()})
2025-01-05 16:51:17,190 - DEBUG - defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.0': State(pc_initial=40 nstack_initial=0),
 '$phi70.0': State(pc_initial=40 nstack_initial=0)}
2025-01-05 16:51:17,193 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2025-01-05 16:51:17,199 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2025-01-05 16:51:17,205 - DEBUG - keep phismap: {'$phi24.0': {('$16dup_top.6', State(pc_initial=0 nstack_initial=0))},
 '$phi62.0': {('$54dup_top.6', State(pc_initial=40 nstack_initial=0))}}
2025-01-05 16:51:17,207 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$16dup_top.6'},
             State(pc_initial=40 nstack_initial=0): {'$phi62.0': '$54dup_top.6'}})
2025-01-05 16:51:17,210 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:51:17,213 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$threshold10.3'}), (12, {'value': '$threshold10.3', 'res': '$12unary_negative.4'}), (14, {'res': '$x014.5'}), (16, {'orig': ['$x014.5'], 'duped': ['$16dup_top.6']}), (20, {'lhs': '$12unary_negative.4', 'rhs': '$x014.5', 'res': '$20compare_op.7'}), (22, {'pred': '$20compare_op.7'})), outgoing_phis={'$phi24.0': '$16dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$16dup_top.6',), 32: ('$16dup_top.6',)})
2025-01-05 16:51:17,219 - DEBUG - block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$threshold24.1'}), (26, {'lhs': '$phi24.0', 'rhs': '$threshold24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 40: ()})
2025-01-05 16:51:17,223 - DEBUG - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ()})
2025-01-05 16:51:17,226 - DEBUG - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((34, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2025-01-05 16:51:17,228 - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2025-01-05 16:51:17,231 - DEBUG - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$x40.0'}), (42, {'res': '$const42.1'}), (44, {'index': '$const42.1', 'target': '$x40.0', 'res': '$44binary_subscr.2'}), (46, {'value': '$44binary_subscr.2'}), (48, {'res': '$threshold48.3'}), (50, {'value': '$threshold48.3', 'res': '$50unary_negative.4'}), (52, {'res': '$x152.5'}), (54, {'orig': ['$x152.5'], 'duped': ['$54dup_top.6']}), (58, {'lhs': '$50unary_negative.4', 'rhs': '$x152.5', 'res': '$58compare_op.7'}), (60, {'pred': '$58compare_op.7'})), outgoing_phis={'$phi62.0': '$54dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$54dup_top.6',), 70: ('$54dup_top.6',)})
2025-01-05 16:51:17,238 - DEBUG - block_infos State(pc_initial=62 nstack_initial=1):
AdaptBlockInfo(insts=((62, {'res': '$threshold62.1'}), (64, {'lhs': '$phi62.0', 'rhs': '$threshold62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 78: ()})
2025-01-05 16:51:17,241 - DEBUG - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ()})
2025-01-05 16:51:17,245 - DEBUG - block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((72, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2025-01-05 16:51:17,248 - DEBUG - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2025-01-05 16:51:17,252 - DEBUG - block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$zero_pos78.0'}), (80, {'pred': '$zero_pos78.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 102: ()})
2025-01-05 16:51:17,255 - DEBUG - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'item': '$82load_global.0', 'res': '$84load_method.1'}), (86, {'res': '$x086.2'}), (88, {'func': '$84load_method.1', 'args': ['$x086.2'], 'res': '$88call_method.3'}), (90, {'res': '$90load_global.4'}), (92, {'item': '$90load_global.4', 'res': '$92load_method.5'}), (94, {'res': '$x194.6'}), (96, {'func': '$92load_method.5', 'args': ['$x194.6'], 'res': '$96call_method.7'}), (98, {'lhs': '$88call_method.3', 'rhs': '$96call_method.7', 'res': '$98compare_op.8'}), (100, {'retval': '$98compare_op.8', 'castval': '$100return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:17,261 - DEBUG - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'item': '$102load_global.0', 'res': '$104load_method.1'}), (106, {'res': '$x0106.2'}), (108, {'func': '$104load_method.1', 'args': ['$x0106.2'], 'res': '$108call_method.3'}), (110, {'res': '$110load_global.4'}), (112, {'item': '$110load_global.4', 'res': '$112load_method.5'}), (114, {'res': '$x1114.6'}), (116, {'func': '$112load_method.5', 'args': ['$x1114.6'], 'res': '$116call_method.7'}), (118, {'lhs': '$108call_method.3', 'rhs': '$116call_method.7', 'res': '$118compare_op.8'}), (120, {'retval': '$118compare_op.8', 'castval': '$120return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:17,271 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const4.1 = const(int, 0)                ['$const4.1']
    x0 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'x', 'x0']
    $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$12unary_negative.4', 'threshold']
    $20compare_op.7 = $12unary_negative.4 <= x0 ['$12unary_negative.4', '$20compare_op.7', 'x0']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.7', '$22pred', 'bool22']
    $phi24.0 = x0                            ['$phi24.0', 'x0']
    branch $22pred, 24, 32                   ['$22pred']
label 24:
    $26compare_op.2 = $phi24.0 <= threshold  ['$26compare_op.2', '$phi24.0', 'threshold']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 40                   ['$28pred']
label 30:
    jump 36                                  []
label 32:
    jump 40                                  []
label 36:
    x0 = const(int, 0)                       ['x0']
    jump 40                                  []
label 40:
    $const42.1 = const(int, -1)              ['$const42.1']
    x1 = getitem(value=x, index=$const42.1, fn=<built-in function getitem>) ['$const42.1', 'x', 'x1']
    $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$50unary_negative.4', 'threshold']
    $58compare_op.7 = $50unary_negative.4 <= x1 ['$50unary_negative.4', '$58compare_op.7', 'x1']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$58compare_op.7', '$60pred', 'bool60']
    $phi62.0 = x1                            ['$phi62.0', 'x1']
    branch $60pred, 62, 70                   ['$60pred']
label 62:
    $64compare_op.2 = $phi62.0 <= threshold  ['$64compare_op.2', '$phi62.0', 'threshold']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 78                   ['$66pred']
label 68:
    jump 74                                  []
label 70:
    jump 78                                  []
label 74:
    x1 = const(int, 0)                       ['x1']
    jump 78                                  []
label 78:
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$80pred', 'bool80', 'zero_pos']
    branch $80pred, 82, 102                  ['$80pred']
label 82:
    $82load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$82load_global.0']
    $84load_method.1 = getattr(value=$82load_global.0, attr=signbit) ['$82load_global.0', '$84load_method.1']
    $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$84load_method.1', '$88call_method.3', 'x0']
    $90load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$90load_global.4']
    $92load_method.5 = getattr(value=$90load_global.4, attr=signbit) ['$90load_global.4', '$92load_method.5']
    $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$92load_method.5', '$96call_method.7', 'x1']
    $98compare_op.8 = $88call_method.3 != $96call_method.7 ['$88call_method.3', '$96call_method.7', '$98compare_op.8']
    $100return_value.9 = cast(value=$98compare_op.8) ['$100return_value.9', '$98compare_op.8']
    return $100return_value.9                ['$100return_value.9']
label 102:
    $102load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$102load_global.0']
    $104load_method.1 = getattr(value=$102load_global.0, attr=sign) ['$102load_global.0', '$104load_method.1']
    $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_method.1', '$108call_method.3', 'x0']
    $110load_global.4 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$110load_global.4']
    $112load_method.5 = getattr(value=$110load_global.4, attr=sign) ['$110load_global.4', '$112load_method.5']
    $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$112load_method.5', '$116call_method.7', 'x1']
    $118compare_op.8 = $108call_method.3 != $116call_method.7 ['$108call_method.3', '$116call_method.7', '$118compare_op.8']
    $120return_value.9 = cast(value=$118compare_op.8) ['$118compare_op.8', '$120return_value.9']
    return $120return_value.9                ['$120return_value.9']

2025-01-05 16:51:17,920 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1039)
           2	LOAD_FAST(arg=0, lineno=1042)
           4	LOAD_CONST(arg=1, lineno=1042)
           6	BINARY_SUBSCR(arg=None, lineno=1042)
           8	LOAD_FAST(arg=0, lineno=1042)
          10	LOAD_CONST(arg=2, lineno=1042)
          12	BINARY_SUBSCR(arg=None, lineno=1042)
          14	COMPARE_OP(arg=4, lineno=1042)
          16	LOAD_FAST(arg=0, lineno=1042)
          18	LOAD_CONST(arg=1, lineno=1042)
          20	BINARY_SUBSCR(arg=None, lineno=1042)
          22	LOAD_FAST(arg=0, lineno=1042)
          24	LOAD_CONST(arg=3, lineno=1042)
          26	BINARY_SUBSCR(arg=None, lineno=1042)
          28	COMPARE_OP(arg=5, lineno=1042)
          30	BINARY_AND(arg=None, lineno=1042)
          32	RETURN_VALUE(arg=None, lineno=1042)
2025-01-05 16:51:17,928 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:51:17,931 - DEBUG - stack: []
2025-01-05 16:51:17,933 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:51:17,935 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1039)
2025-01-05 16:51:17,936 - DEBUG - stack []
2025-01-05 16:51:17,937 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-05 16:51:17,939 - DEBUG - stack []
2025-01-05 16:51:17,940 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1042)
2025-01-05 16:51:17,941 - DEBUG - stack ['$x2.0']
2025-01-05 16:51:17,942 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-05 16:51:17,944 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-05 16:51:17,945 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-05 16:51:17,947 - DEBUG - stack ['$6binary_subscr.2']
2025-01-05 16:51:17,948 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1042)
2025-01-05 16:51:17,949 - DEBUG - stack ['$6binary_subscr.2', '$x8.3']
2025-01-05 16:51:17,950 - DEBUG - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-05 16:51:17,952 - DEBUG - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2025-01-05 16:51:17,953 - DEBUG - dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=1042)
2025-01-05 16:51:17,955 - DEBUG - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2025-01-05 16:51:17,956 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-05 16:51:17,957 - DEBUG - stack ['$14compare_op.6']
2025-01-05 16:51:17,959 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1042)
2025-01-05 16:51:17,960 - DEBUG - stack ['$14compare_op.6', '$x16.7']
2025-01-05 16:51:17,961 - DEBUG - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-05 16:51:17,963 - DEBUG - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2025-01-05 16:51:17,964 - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-05 16:51:17,966 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9']
2025-01-05 16:51:17,967 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1042)
2025-01-05 16:51:17,969 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2025-01-05 16:51:17,970 - DEBUG - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-05 16:51:17,971 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2025-01-05 16:51:17,973 - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=1042)
2025-01-05 16:51:17,974 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2025-01-05 16:51:17,976 - DEBUG - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1042)
2025-01-05 16:51:17,977 - DEBUG - stack ['$14compare_op.6', '$28compare_op.13']
2025-01-05 16:51:17,978 - DEBUG - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1042)
2025-01-05 16:51:17,980 - DEBUG - stack ['$30binary_and.14']
2025-01-05 16:51:17,981 - DEBUG - end state. edges=[]
2025-01-05 16:51:17,982 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:51:17,983 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-05 16:51:17,985 - DEBUG - defmap: {}
2025-01-05 16:51:17,986 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:17,987 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:17,988 - DEBUG - keep phismap: {}
2025-01-05 16:51:17,989 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-05 16:51:17,990 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:51:17,992 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:18,000 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2025-01-05 16:51:18,015 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1045)
           2	LOAD_FAST(arg=0, lineno=1048)
           4	LOAD_CONST(arg=1, lineno=1048)
           6	BINARY_SUBSCR(arg=None, lineno=1048)
           8	LOAD_FAST(arg=0, lineno=1048)
          10	LOAD_CONST(arg=2, lineno=1048)
          12	BINARY_SUBSCR(arg=None, lineno=1048)
          14	COMPARE_OP(arg=0, lineno=1048)
          16	LOAD_FAST(arg=0, lineno=1048)
          18	LOAD_CONST(arg=1, lineno=1048)
          20	BINARY_SUBSCR(arg=None, lineno=1048)
          22	LOAD_FAST(arg=0, lineno=1048)
          24	LOAD_CONST(arg=3, lineno=1048)
          26	BINARY_SUBSCR(arg=None, lineno=1048)
          28	COMPARE_OP(arg=1, lineno=1048)
          30	BINARY_AND(arg=None, lineno=1048)
          32	RETURN_VALUE(arg=None, lineno=1048)
2025-01-05 16:51:18,024 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:51:18,025 - DEBUG - stack: []
2025-01-05 16:51:18,026 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:51:18,028 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1045)
2025-01-05 16:51:18,030 - DEBUG - stack []
2025-01-05 16:51:18,032 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-05 16:51:18,033 - DEBUG - stack []
2025-01-05 16:51:18,034 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1048)
2025-01-05 16:51:18,036 - DEBUG - stack ['$x2.0']
2025-01-05 16:51:18,037 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-05 16:51:18,038 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-05 16:51:18,039 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-05 16:51:18,041 - DEBUG - stack ['$6binary_subscr.2']
2025-01-05 16:51:18,042 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1048)
2025-01-05 16:51:18,043 - DEBUG - stack ['$6binary_subscr.2', '$x8.3']
2025-01-05 16:51:18,044 - DEBUG - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-05 16:51:18,045 - DEBUG - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2025-01-05 16:51:18,047 - DEBUG - dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=1048)
2025-01-05 16:51:18,049 - DEBUG - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2025-01-05 16:51:18,050 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-05 16:51:18,051 - DEBUG - stack ['$14compare_op.6']
2025-01-05 16:51:18,052 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1048)
2025-01-05 16:51:18,054 - DEBUG - stack ['$14compare_op.6', '$x16.7']
2025-01-05 16:51:18,055 - DEBUG - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-05 16:51:18,056 - DEBUG - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2025-01-05 16:51:18,058 - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-05 16:51:18,059 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9']
2025-01-05 16:51:18,060 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1048)
2025-01-05 16:51:18,062 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2025-01-05 16:51:18,064 - DEBUG - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-05 16:51:18,065 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2025-01-05 16:51:18,067 - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=1, lineno=1048)
2025-01-05 16:51:18,068 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2025-01-05 16:51:18,070 - DEBUG - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1048)
2025-01-05 16:51:18,071 - DEBUG - stack ['$14compare_op.6', '$28compare_op.13']
2025-01-05 16:51:18,072 - DEBUG - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1048)
2025-01-05 16:51:18,073 - DEBUG - stack ['$30binary_and.14']
2025-01-05 16:51:18,074 - DEBUG - end state. edges=[]
2025-01-05 16:51:18,075 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:51:18,077 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-05 16:51:18,079 - DEBUG - defmap: {}
2025-01-05 16:51:18,080 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:18,081 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:18,083 - DEBUG - keep phismap: {}
2025-01-05 16:51:18,084 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-05 16:51:18,085 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:51:18,087 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:18,095 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2025-01-05 16:51:18,809 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=425)
           2	LOAD_FAST(arg=0, lineno=428)
           4	LOAD_CONST(arg=1, lineno=428)
           6	BINARY_SUBSCR(arg=None, lineno=428)
           8	LOAD_FAST(arg=0, lineno=428)
          10	LOAD_CONST(arg=2, lineno=428)
          12	BINARY_SUBSCR(arg=None, lineno=428)
          14	BINARY_ADD(arg=None, lineno=428)
          16	LOAD_CONST(arg=3, lineno=428)
          18	LOAD_FAST(arg=0, lineno=428)
          20	LOAD_CONST(arg=4, lineno=428)
          22	BINARY_SUBSCR(arg=None, lineno=428)
          24	BINARY_MULTIPLY(arg=None, lineno=428)
          26	BINARY_SUBTRACT(arg=None, lineno=428)
          28	STORE_FAST(arg=1, lineno=428)
          30	LOAD_FAST(arg=0, lineno=429)
          32	LOAD_CONST(arg=1, lineno=429)
          34	BINARY_SUBSCR(arg=None, lineno=429)
          36	LOAD_FAST(arg=0, lineno=429)
          38	LOAD_CONST(arg=2, lineno=429)
          40	BINARY_SUBSCR(arg=None, lineno=429)
          42	BINARY_SUBTRACT(arg=None, lineno=429)
          44	LOAD_CONST(arg=3, lineno=429)
          46	BINARY_TRUE_DIVIDE(arg=None, lineno=429)
          48	STORE_FAST(arg=2, lineno=429)
          50	LOAD_GLOBAL(arg=0, lineno=431)
          52	LOAD_METHOD(arg=1, lineno=431)
          54	LOAD_FAST(arg=2, lineno=431)
          56	CALL_METHOD(arg=1, lineno=431)
          58	LOAD_GLOBAL(arg=0, lineno=431)
          60	LOAD_METHOD(arg=1, lineno=431)
          62	LOAD_FAST(arg=1, lineno=431)
          64	CALL_METHOD(arg=1, lineno=431)
          66	COMPARE_OP(arg=5, lineno=431)
          68	POP_JUMP_IF_FALSE(arg=74, lineno=431)
          70	LOAD_CONST(arg=4, lineno=434)
          72	RETURN_VALUE(arg=None, lineno=434)
>         74	LOAD_FAST(arg=2, lineno=436)
          76	UNARY_NEGATIVE(arg=None, lineno=436)
          78	LOAD_FAST(arg=1, lineno=436)
          80	BINARY_TRUE_DIVIDE(arg=None, lineno=436)
          82	RETURN_VALUE(arg=None, lineno=436)
2025-01-05 16:51:18,858 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:51:18,874 - DEBUG - stack: []
2025-01-05 16:51:18,878 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:51:18,880 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=425)
2025-01-05 16:51:18,882 - DEBUG - stack []
2025-01-05 16:51:18,883 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=428)
2025-01-05 16:51:18,886 - DEBUG - stack []
2025-01-05 16:51:18,888 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=428)
2025-01-05 16:51:18,890 - DEBUG - stack ['$x2.0']
2025-01-05 16:51:18,898 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=428)
2025-01-05 16:51:18,899 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-05 16:51:18,900 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=428)
2025-01-05 16:51:18,902 - DEBUG - stack ['$6binary_subscr.2']
2025-01-05 16:51:18,903 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=428)
2025-01-05 16:51:18,905 - DEBUG - stack ['$6binary_subscr.2', '$x8.3']
2025-01-05 16:51:18,907 - DEBUG - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=428)
2025-01-05 16:51:18,914 - DEBUG - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2025-01-05 16:51:18,915 - DEBUG - dispatch pc=14, inst=BINARY_ADD(arg=None, lineno=428)
2025-01-05 16:51:18,919 - DEBUG - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2025-01-05 16:51:18,925 - DEBUG - dispatch pc=16, inst=LOAD_CONST(arg=3, lineno=428)
2025-01-05 16:51:18,927 - DEBUG - stack ['$14binary_add.6']
2025-01-05 16:51:18,929 - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=428)
2025-01-05 16:51:18,932 - DEBUG - stack ['$14binary_add.6', '$const16.7']
2025-01-05 16:51:18,934 - DEBUG - dispatch pc=20, inst=LOAD_CONST(arg=4, lineno=428)
2025-01-05 16:51:18,937 - DEBUG - stack ['$14binary_add.6', '$const16.7', '$x18.8']
2025-01-05 16:51:18,939 - DEBUG - dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=428)
2025-01-05 16:51:18,942 - DEBUG - stack ['$14binary_add.6', '$const16.7', '$x18.8', '$const20.9']
2025-01-05 16:51:18,945 - DEBUG - dispatch pc=24, inst=BINARY_MULTIPLY(arg=None, lineno=428)
2025-01-05 16:51:18,947 - DEBUG - stack ['$14binary_add.6', '$const16.7', '$22binary_subscr.10']
2025-01-05 16:51:18,950 - DEBUG - dispatch pc=26, inst=BINARY_SUBTRACT(arg=None, lineno=428)
2025-01-05 16:51:18,952 - DEBUG - stack ['$14binary_add.6', '$24binary_multiply.11']
2025-01-05 16:51:18,954 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=428)
2025-01-05 16:51:18,955 - DEBUG - stack ['$26binary_subtract.12']
2025-01-05 16:51:18,957 - DEBUG - dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=429)
2025-01-05 16:51:18,958 - DEBUG - stack []
2025-01-05 16:51:18,959 - DEBUG - dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=429)
2025-01-05 16:51:18,960 - DEBUG - stack ['$x30.13']
2025-01-05 16:51:18,961 - DEBUG - dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=429)
2025-01-05 16:51:18,963 - DEBUG - stack ['$x30.13', '$const32.14']
2025-01-05 16:51:18,964 - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=429)
2025-01-05 16:51:18,965 - DEBUG - stack ['$34binary_subscr.15']
2025-01-05 16:51:18,966 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=429)
2025-01-05 16:51:18,968 - DEBUG - stack ['$34binary_subscr.15', '$x36.16']
2025-01-05 16:51:18,969 - DEBUG - dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=429)
2025-01-05 16:51:18,970 - DEBUG - stack ['$34binary_subscr.15', '$x36.16', '$const38.17']
2025-01-05 16:51:18,972 - DEBUG - dispatch pc=42, inst=BINARY_SUBTRACT(arg=None, lineno=429)
2025-01-05 16:51:18,973 - DEBUG - stack ['$34binary_subscr.15', '$40binary_subscr.18']
2025-01-05 16:51:18,975 - DEBUG - dispatch pc=44, inst=LOAD_CONST(arg=3, lineno=429)
2025-01-05 16:51:18,976 - DEBUG - stack ['$42binary_subtract.19']
2025-01-05 16:51:18,977 - DEBUG - dispatch pc=46, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=429)
2025-01-05 16:51:18,979 - DEBUG - stack ['$42binary_subtract.19', '$const44.20']
2025-01-05 16:51:18,981 - DEBUG - dispatch pc=48, inst=STORE_FAST(arg=2, lineno=429)
2025-01-05 16:51:18,982 - DEBUG - stack ['$46binary_true_divide.21']
2025-01-05 16:51:18,983 - DEBUG - dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=431)
2025-01-05 16:51:18,985 - DEBUG - stack []
2025-01-05 16:51:18,986 - DEBUG - dispatch pc=52, inst=LOAD_METHOD(arg=1, lineno=431)
2025-01-05 16:51:18,987 - DEBUG - stack ['$50load_global.22']
2025-01-05 16:51:18,988 - DEBUG - dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=431)
2025-01-05 16:51:18,989 - DEBUG - stack ['$52load_method.23']
2025-01-05 16:51:18,990 - DEBUG - dispatch pc=56, inst=CALL_METHOD(arg=1, lineno=431)
2025-01-05 16:51:18,992 - DEBUG - stack ['$52load_method.23', '$b54.24']
2025-01-05 16:51:18,993 - DEBUG - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=431)
2025-01-05 16:51:18,994 - DEBUG - stack ['$56call_method.25']
2025-01-05 16:51:18,995 - DEBUG - dispatch pc=60, inst=LOAD_METHOD(arg=1, lineno=431)
2025-01-05 16:51:18,997 - DEBUG - stack ['$56call_method.25', '$58load_global.26']
2025-01-05 16:51:18,999 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=431)
2025-01-05 16:51:19,000 - DEBUG - stack ['$56call_method.25', '$60load_method.27']
2025-01-05 16:51:19,002 - DEBUG - dispatch pc=64, inst=CALL_METHOD(arg=1, lineno=431)
2025-01-05 16:51:19,003 - DEBUG - stack ['$56call_method.25', '$60load_method.27', '$a62.28']
2025-01-05 16:51:19,006 - DEBUG - dispatch pc=66, inst=COMPARE_OP(arg=5, lineno=431)
2025-01-05 16:51:19,006 - DEBUG - stack ['$56call_method.25', '$64call_method.29']
2025-01-05 16:51:19,009 - DEBUG - dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=74, lineno=431)
2025-01-05 16:51:19,010 - DEBUG - stack ['$66compare_op.30']
2025-01-05 16:51:19,011 - DEBUG - end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=74, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:19,013 - DEBUG - pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2025-01-05 16:51:19,015 - DEBUG - stack: []
2025-01-05 16:51:19,016 - DEBUG - state.pc_initial: State(pc_initial=70 nstack_initial=0)
2025-01-05 16:51:19,017 - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=434)
2025-01-05 16:51:19,018 - DEBUG - stack []
2025-01-05 16:51:19,020 - DEBUG - dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=434)
2025-01-05 16:51:19,021 - DEBUG - stack ['$const70.0']
2025-01-05 16:51:19,022 - DEBUG - end state. edges=[]
2025-01-05 16:51:19,023 - DEBUG - pending: deque([State(pc_initial=74 nstack_initial=0)])
2025-01-05 16:51:19,025 - DEBUG - stack: []
2025-01-05 16:51:19,026 - DEBUG - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2025-01-05 16:51:19,027 - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=2, lineno=436)
2025-01-05 16:51:19,029 - DEBUG - stack []
2025-01-05 16:51:19,030 - DEBUG - dispatch pc=76, inst=UNARY_NEGATIVE(arg=None, lineno=436)
2025-01-05 16:51:19,032 - DEBUG - stack ['$b74.0']
2025-01-05 16:51:19,033 - DEBUG - dispatch pc=78, inst=LOAD_FAST(arg=1, lineno=436)
2025-01-05 16:51:19,034 - DEBUG - stack ['$76unary_negative.1']
2025-01-05 16:51:19,035 - DEBUG - dispatch pc=80, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=436)
2025-01-05 16:51:19,037 - DEBUG - stack ['$76unary_negative.1', '$a78.2']
2025-01-05 16:51:19,038 - DEBUG - dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=436)
2025-01-05 16:51:19,039 - DEBUG - stack ['$80binary_true_divide.3']
2025-01-05 16:51:19,040 - DEBUG - end state. edges=[]
2025-01-05 16:51:19,041 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:51:19,043 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set()})
2025-01-05 16:51:19,045 - DEBUG - defmap: {}
2025-01-05 16:51:19,046 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:19,048 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:19,049 - DEBUG - keep phismap: {}
2025-01-05 16:51:19,050 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-05 16:51:19,051 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:51:19,053 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14binary_add.6'}), (16, {'res': '$const16.7'}), (18, {'res': '$x18.8'}), (20, {'res': '$const20.9'}), (22, {'index': '$const20.9', 'target': '$x18.8', 'res': '$22binary_subscr.10'}), (24, {'lhs': '$const16.7', 'rhs': '$22binary_subscr.10', 'res': '$24binary_multiply.11'}), (26, {'lhs': '$14binary_add.6', 'rhs': '$24binary_multiply.11', 'res': '$26binary_subtract.12'}), (28, {'value': '$26binary_subtract.12'}), (30, {'res': '$x30.13'}), (32, {'res': '$const32.14'}), (34, {'index': '$const32.14', 'target': '$x30.13', 'res': '$34binary_subscr.15'}), (36, {'res': '$x36.16'}), (38, {'res': '$const38.17'}), (40, {'index': '$const38.17', 'target': '$x36.16', 'res': '$40binary_subscr.18'}), (42, {'lhs': '$34binary_subscr.15', 'rhs': '$40binary_subscr.18', 'res': '$42binary_subtract.19'}), (44, {'res': '$const44.20'}), (46, {'lhs': '$42binary_subtract.19', 'rhs': '$const44.20', 'res': '$46binary_true_divide.21'}), (48, {'value': '$46binary_true_divide.21'}), (50, {'res': '$50load_global.22'}), (52, {'item': '$50load_global.22', 'res': '$52load_method.23'}), (54, {'res': '$b54.24'}), (56, {'func': '$52load_method.23', 'args': ['$b54.24'], 'res': '$56call_method.25'}), (58, {'res': '$58load_global.26'}), (60, {'item': '$58load_global.26', 'res': '$60load_method.27'}), (62, {'res': '$a62.28'}), (64, {'func': '$60load_method.27', 'args': ['$a62.28'], 'res': '$64call_method.29'}), (66, {'lhs': '$56call_method.25', 'rhs': '$64call_method.29', 'res': '$66compare_op.30'}), (68, {'pred': '$66compare_op.30'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 74: ()})
2025-01-05 16:51:19,067 - DEBUG - block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$const70.0'}), (72, {'retval': '$const70.0', 'castval': '$72return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:19,071 - DEBUG - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$b74.0'}), (76, {'value': '$b74.0', 'res': '$76unary_negative.1'}), (78, {'res': '$a78.2'}), (80, {'lhs': '$76unary_negative.1', 'rhs': '$a78.2', 'res': '$80binary_true_divide.3'}), (82, {'retval': '$80binary_true_divide.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:19,077 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14binary_add.6 = $6binary_subscr.2 + $12binary_subscr.5 ['$12binary_subscr.5', '$14binary_add.6', '$6binary_subscr.2']
    $const16.7 = const(int, 2)               ['$const16.7']
    $const20.9 = const(int, 0)               ['$const20.9']
    $22binary_subscr.10 = getitem(value=x, index=$const20.9, fn=<built-in function getitem>) ['$22binary_subscr.10', '$const20.9', 'x']
    $24binary_multiply.11 = $const16.7 * $22binary_subscr.10 ['$22binary_subscr.10', '$24binary_multiply.11', '$const16.7']
    a = $14binary_add.6 - $24binary_multiply.11 ['$14binary_add.6', '$24binary_multiply.11', 'a']
    $const32.14 = const(int, 1)              ['$const32.14']
    $34binary_subscr.15 = getitem(value=x, index=$const32.14, fn=<built-in function getitem>) ['$34binary_subscr.15', '$const32.14', 'x']
    $const38.17 = const(int, -1)             ['$const38.17']
    $40binary_subscr.18 = getitem(value=x, index=$const38.17, fn=<built-in function getitem>) ['$40binary_subscr.18', '$const38.17', 'x']
    $42binary_subtract.19 = $34binary_subscr.15 - $40binary_subscr.18 ['$34binary_subscr.15', '$40binary_subscr.18', '$42binary_subtract.19']
    $const44.20 = const(int, 2)              ['$const44.20']
    b = $42binary_subtract.19 / $const44.20  ['$42binary_subtract.19', '$const44.20', 'b']
    $50load_global.22 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$50load_global.22']
    $52load_method.23 = getattr(value=$50load_global.22, attr=abs) ['$50load_global.22', '$52load_method.23']
    $56call_method.25 = call $52load_method.23(b, func=$52load_method.23, args=[Var(b, pitch.py:429)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_method.23', '$56call_method.25', 'b']
    $58load_global.26 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$58load_global.26']
    $60load_method.27 = getattr(value=$58load_global.26, attr=abs) ['$58load_global.26', '$60load_method.27']
    $64call_method.29 = call $60load_method.27(a, func=$60load_method.27, args=[Var(a, pitch.py:428)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.27', '$64call_method.29', 'a']
    $66compare_op.30 = $56call_method.25 >= $64call_method.29 ['$56call_method.25', '$64call_method.29', '$66compare_op.30']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.30, func=bool68, args=(Var($66compare_op.30, pitch.py:431),), kws=(), vararg=None, varkwarg=None, target=None) ['$66compare_op.30', '$68pred', 'bool68']
    branch $68pred, 70, 74                   ['$68pred']
label 70:
    $const70.0 = const(int, 0)               ['$const70.0']
    $72return_value.1 = cast(value=$const70.0) ['$72return_value.1', '$const70.0']
    return $72return_value.1                 ['$72return_value.1']
label 74:
    $76unary_negative.1 = unary(fn=<built-in function neg>, value=b) ['$76unary_negative.1', 'b']
    $80binary_true_divide.3 = $76unary_negative.1 / a ['$76unary_negative.1', '$80binary_true_divide.3', 'a']
    $82return_value.4 = cast(value=$80binary_true_divide.3) ['$80binary_true_divide.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']

2025-01-05 16:51:19,493 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=511)
           2	LOAD_GLOBAL(arg=0, lineno=523)
           4	LOAD_FAST(arg=0, lineno=523)
           6	CALL_FUNCTION(arg=1, lineno=523)
           8	STORE_FAST(arg=3, lineno=523)
          10	LOAD_GLOBAL(arg=0, lineno=525)
          12	LOAD_FAST(arg=1, lineno=525)
          14	CALL_FUNCTION(arg=1, lineno=525)
          16	LOAD_CONST(arg=1, lineno=525)
          18	COMPARE_OP(arg=2, lineno=525)
          20	POP_JUMP_IF_FALSE(arg=202, lineno=525)
          22	LOAD_GLOBAL(arg=1, lineno=529)
          24	LOAD_METHOD(arg=2, lineno=529)
          26	LOAD_CONST(arg=2, lineno=529)
          28	LOAD_GLOBAL(arg=1, lineno=529)
          30	LOAD_METHOD(arg=3, lineno=529)
          32	LOAD_FAST(arg=1, lineno=529)
          34	LOAD_CONST(arg=3, lineno=529)
          36	BINARY_SUBSCR(arg=None, lineno=529)
          38	UNARY_NEGATIVE(arg=None, lineno=529)
          40	LOAD_FAST(arg=1, lineno=529)
          42	LOAD_CONST(arg=3, lineno=529)
          44	BINARY_SUBSCR(arg=None, lineno=529)
          46	LOAD_CONST(arg=1, lineno=529)
          48	BINARY_ADD(arg=None, lineno=529)
          50	CALL_METHOD(arg=2, lineno=529)
          52	LOAD_CONST(arg=4, lineno=529)
          54	BINARY_MULTIPLY(arg=None, lineno=529)
          56	LOAD_FAST(arg=1, lineno=529)
          58	LOAD_CONST(arg=3, lineno=529)
          60	BINARY_SUBSCR(arg=None, lineno=529)
          62	BINARY_TRUE_DIVIDE(arg=None, lineno=529)
          64	LOAD_CONST(arg=5, lineno=529)
          66	BINARY_POWER(arg=None, lineno=529)
          68	BINARY_MULTIPLY(arg=None, lineno=529)
          70	CALL_METHOD(arg=1, lineno=529)
          72	STORE_FAST(arg=4, lineno=529)
          74	LOAD_GLOBAL(arg=0, lineno=530)
          76	LOAD_FAST(arg=4, lineno=530)
          78	CALL_FUNCTION(arg=1, lineno=530)
          80	STORE_FAST(arg=5, lineno=530)
          82	LOAD_GLOBAL(arg=4, lineno=532)
          84	LOAD_GLOBAL(arg=0, lineno=532)
          86	LOAD_FAST(arg=0, lineno=532)
          88	CALL_FUNCTION(arg=1, lineno=532)
          90	CALL_FUNCTION(arg=1, lineno=532)
          92	GET_ITER(arg=None, lineno=532)
>         94	FOR_ITER(arg=104, lineno=532)
          96	STORE_FAST(arg=6, lineno=532)
          98	LOAD_CONST(arg=6, lineno=533)
         100	LOAD_FAST(arg=2, lineno=533)
         102	LOAD_FAST(arg=6, lineno=533)
         104	STORE_SUBSCR(arg=None, lineno=533)
         106	LOAD_GLOBAL(arg=4, lineno=536)
         108	LOAD_GLOBAL(arg=5, lineno=536)
         110	LOAD_CONST(arg=3, lineno=536)
         112	LOAD_FAST(arg=6, lineno=536)
         114	LOAD_FAST(arg=5, lineno=536)
         116	LOAD_CONST(arg=5, lineno=536)
         118	BINARY_FLOOR_DIVIDE(arg=None, lineno=536)
         120	BINARY_ADD(arg=None, lineno=536)
         122	LOAD_FAST(arg=3, lineno=536)
         124	BINARY_SUBTRACT(arg=None, lineno=536)
         126	LOAD_CONST(arg=1, lineno=536)
         128	BINARY_ADD(arg=None, lineno=536)
         130	CALL_FUNCTION(arg=2, lineno=536)
         132	LOAD_GLOBAL(arg=6, lineno=536)
         134	LOAD_FAST(arg=6, lineno=536)
         136	LOAD_FAST(arg=5, lineno=536)
         138	LOAD_CONST(arg=5, lineno=536)
         140	BINARY_FLOOR_DIVIDE(arg=None, lineno=536)
         142	BINARY_ADD(arg=None, lineno=536)
         144	LOAD_FAST(arg=5, lineno=536)
         146	CALL_FUNCTION(arg=2, lineno=536)
         148	CALL_FUNCTION(arg=2, lineno=536)
         150	GET_ITER(arg=None, lineno=536)
>        152	FOR_ITER(arg=44, lineno=536)
         154	STORE_FAST(arg=7, lineno=536)
         156	LOAD_FAST(arg=2, lineno=537)
         158	LOAD_FAST(arg=6, lineno=537)
         160	DUP_TOP_TWO(arg=None, lineno=537)
         162	BINARY_SUBSCR(arg=None, lineno=537)
         164	LOAD_FAST(arg=4, lineno=537)
         166	LOAD_FAST(arg=7, lineno=537)
         168	BINARY_SUBSCR(arg=None, lineno=537)
         170	LOAD_FAST(arg=0, lineno=537)
         172	LOAD_FAST(arg=6, lineno=537)
         174	LOAD_FAST(arg=5, lineno=537)
         176	LOAD_CONST(arg=5, lineno=537)
         178	BINARY_FLOOR_DIVIDE(arg=None, lineno=537)
         180	BINARY_ADD(arg=None, lineno=537)
         182	LOAD_FAST(arg=7, lineno=537)
         184	BINARY_SUBTRACT(arg=None, lineno=537)
         186	BINARY_SUBSCR(arg=None, lineno=537)
         188	BINARY_MULTIPLY(arg=None, lineno=537)
         190	INPLACE_ADD(arg=None, lineno=537)
         192	ROT_THREE(arg=None, lineno=537)
         194	STORE_SUBSCR(arg=None, lineno=537)
         196	JUMP_ABSOLUTE(arg=152, lineno=537)
>        198	JUMP_ABSOLUTE(arg=94, lineno=537)
>        200	JUMP_FORWARD(arg=210, lineno=537)
>        202	LOAD_GLOBAL(arg=0, lineno=539)
         204	LOAD_FAST(arg=1, lineno=539)
         206	CALL_FUNCTION(arg=1, lineno=539)
         208	LOAD_GLOBAL(arg=0, lineno=539)
         210	LOAD_FAST(arg=0, lineno=539)
         212	CALL_FUNCTION(arg=1, lineno=539)
         214	COMPARE_OP(arg=2, lineno=539)
         216	NOP(arg=1, lineno=539)
         218	POP_JUMP_IF_FALSE(arg=412, lineno=539)
         220	LOAD_GLOBAL(arg=4, lineno=542)
         222	LOAD_GLOBAL(arg=0, lineno=542)
         224	LOAD_FAST(arg=0, lineno=542)
         226	CALL_FUNCTION(arg=1, lineno=542)
         228	CALL_FUNCTION(arg=1, lineno=542)
         230	GET_ITER(arg=None, lineno=542)
>        232	FOR_ITER(arg=178, lineno=542)
         234	STORE_FAST(arg=6, lineno=542)
         236	LOAD_GLOBAL(arg=1, lineno=543)
         238	LOAD_METHOD(arg=2, lineno=543)
         240	LOAD_CONST(arg=2, lineno=543)
         242	LOAD_GLOBAL(arg=1, lineno=543)
         244	LOAD_METHOD(arg=3, lineno=543)
         246	LOAD_FAST(arg=1, lineno=543)
         248	LOAD_FAST(arg=6, lineno=543)
         250	BINARY_SUBSCR(arg=None, lineno=543)
         252	UNARY_NEGATIVE(arg=None, lineno=543)
         254	LOAD_FAST(arg=1, lineno=543)
         256	LOAD_FAST(arg=6, lineno=543)
         258	BINARY_SUBSCR(arg=None, lineno=543)
         260	LOAD_CONST(arg=1, lineno=543)
         262	BINARY_ADD(arg=None, lineno=543)
         264	CALL_METHOD(arg=2, lineno=543)
         266	LOAD_CONST(arg=4, lineno=543)
         268	BINARY_MULTIPLY(arg=None, lineno=543)
         270	LOAD_FAST(arg=1, lineno=543)
         272	LOAD_FAST(arg=6, lineno=543)
         274	BINARY_SUBSCR(arg=None, lineno=543)
         276	BINARY_TRUE_DIVIDE(arg=None, lineno=543)
         278	LOAD_CONST(arg=5, lineno=543)
         280	BINARY_POWER(arg=None, lineno=543)
         282	BINARY_MULTIPLY(arg=None, lineno=543)
         284	CALL_METHOD(arg=1, lineno=543)
         286	STORE_FAST(arg=4, lineno=543)
         288	LOAD_CONST(arg=5, lineno=544)
         290	LOAD_GLOBAL(arg=7, lineno=544)
         292	LOAD_FAST(arg=1, lineno=544)
         294	LOAD_FAST(arg=6, lineno=544)
         296	BINARY_SUBSCR(arg=None, lineno=544)
         298	CALL_FUNCTION(arg=1, lineno=544)
         300	BINARY_MULTIPLY(arg=None, lineno=544)
         302	LOAD_CONST(arg=1, lineno=544)
         304	BINARY_ADD(arg=None, lineno=544)
         306	STORE_FAST(arg=5, lineno=544)
         308	LOAD_CONST(arg=6, lineno=546)
         310	LOAD_FAST(arg=2, lineno=546)
         312	LOAD_FAST(arg=6, lineno=546)
         314	STORE_SUBSCR(arg=None, lineno=546)
         316	LOAD_GLOBAL(arg=4, lineno=547)
         318	LOAD_GLOBAL(arg=5, lineno=547)
         320	LOAD_CONST(arg=3, lineno=547)
         322	LOAD_FAST(arg=6, lineno=547)
         324	LOAD_FAST(arg=5, lineno=547)
         326	LOAD_CONST(arg=5, lineno=547)
         328	BINARY_FLOOR_DIVIDE(arg=None, lineno=547)
         330	BINARY_ADD(arg=None, lineno=547)
         332	LOAD_FAST(arg=3, lineno=547)
         334	BINARY_SUBTRACT(arg=None, lineno=547)
         336	LOAD_CONST(arg=1, lineno=547)
         338	BINARY_ADD(arg=None, lineno=547)
         340	CALL_FUNCTION(arg=2, lineno=547)
         342	LOAD_GLOBAL(arg=6, lineno=547)
         344	LOAD_FAST(arg=6, lineno=547)
         346	LOAD_FAST(arg=5, lineno=547)
         348	LOAD_CONST(arg=5, lineno=547)
         350	BINARY_FLOOR_DIVIDE(arg=None, lineno=547)
         352	BINARY_ADD(arg=None, lineno=547)
         354	LOAD_FAST(arg=5, lineno=547)
         356	CALL_FUNCTION(arg=2, lineno=547)
         358	CALL_FUNCTION(arg=2, lineno=547)
         360	GET_ITER(arg=None, lineno=547)
>        362	FOR_ITER(arg=46, lineno=547)
         364	STORE_FAST(arg=7, lineno=547)
         366	LOAD_FAST(arg=2, lineno=548)
         368	LOAD_FAST(arg=6, lineno=548)
         370	DUP_TOP_TWO(arg=None, lineno=548)
         372	BINARY_SUBSCR(arg=None, lineno=548)
         374	LOAD_FAST(arg=4, lineno=548)
         376	LOAD_FAST(arg=7, lineno=548)
         378	BINARY_SUBSCR(arg=None, lineno=548)
         380	LOAD_FAST(arg=0, lineno=548)
         382	LOAD_FAST(arg=6, lineno=548)
         384	LOAD_FAST(arg=5, lineno=548)
         386	LOAD_CONST(arg=5, lineno=548)
         388	BINARY_FLOOR_DIVIDE(arg=None, lineno=548)
         390	BINARY_ADD(arg=None, lineno=548)
         392	LOAD_FAST(arg=7, lineno=548)
         394	BINARY_SUBTRACT(arg=None, lineno=548)
         396	BINARY_SUBSCR(arg=None, lineno=548)
         398	BINARY_MULTIPLY(arg=None, lineno=548)
         400	INPLACE_ADD(arg=None, lineno=548)
         402	ROT_THREE(arg=None, lineno=548)
         404	STORE_SUBSCR(arg=None, lineno=548)
         406	NOP(arg=1, lineno=548)
         408	JUMP_ABSOLUTE(arg=362, lineno=548)
>        410	JUMP_ABSOLUTE(arg=232, lineno=548)
>        412	LOAD_CONST(arg=0, lineno=548)
         414	RETURN_VALUE(arg=None, lineno=548)
2025-01-05 16:51:19,622 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:51:19,632 - DEBUG - stack: []
2025-01-05 16:51:19,634 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:51:19,637 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=511)
2025-01-05 16:51:19,643 - DEBUG - stack []
2025-01-05 16:51:19,644 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=523)
2025-01-05 16:51:19,647 - DEBUG - stack []
2025-01-05 16:51:19,648 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=523)
2025-01-05 16:51:19,650 - DEBUG - stack ['$2load_global.0']
2025-01-05 16:51:19,651 - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=523)
2025-01-05 16:51:19,652 - DEBUG - stack ['$2load_global.0', '$onset_envelope4.1']
2025-01-05 16:51:19,654 - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=523)
2025-01-05 16:51:19,656 - DEBUG - stack ['$6call_function.2']
2025-01-05 16:51:19,657 - DEBUG - dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=525)
2025-01-05 16:51:19,659 - DEBUG - stack []
2025-01-05 16:51:19,660 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=525)
2025-01-05 16:51:19,661 - DEBUG - stack ['$10load_global.3']
2025-01-05 16:51:19,663 - DEBUG - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=525)
2025-01-05 16:51:19,664 - DEBUG - stack ['$10load_global.3', '$frames_per_beat12.4']
2025-01-05 16:51:19,666 - DEBUG - dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=525)
2025-01-05 16:51:19,668 - DEBUG - stack ['$14call_function.5']
2025-01-05 16:51:19,670 - DEBUG - dispatch pc=18, inst=COMPARE_OP(arg=2, lineno=525)
2025-01-05 16:51:19,673 - DEBUG - stack ['$14call_function.5', '$const16.6']
2025-01-05 16:51:19,675 - DEBUG - dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=202, lineno=525)
2025-01-05 16:51:19,677 - DEBUG - stack ['$18compare_op.7']
2025-01-05 16:51:19,679 - DEBUG - end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=202, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:19,681 - DEBUG - pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=202 nstack_initial=0)])
2025-01-05 16:51:19,684 - DEBUG - stack: []
2025-01-05 16:51:19,685 - DEBUG - state.pc_initial: State(pc_initial=22 nstack_initial=0)
2025-01-05 16:51:19,688 - DEBUG - dispatch pc=22, inst=LOAD_GLOBAL(arg=1, lineno=529)
2025-01-05 16:51:19,690 - DEBUG - stack []
2025-01-05 16:51:19,692 - DEBUG - dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=529)
2025-01-05 16:51:19,694 - DEBUG - stack ['$22load_global.0']
2025-01-05 16:51:19,695 - DEBUG - dispatch pc=26, inst=LOAD_CONST(arg=2, lineno=529)
2025-01-05 16:51:19,697 - DEBUG - stack ['$24load_method.1']
2025-01-05 16:51:19,699 - DEBUG - dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=529)
2025-01-05 16:51:19,700 - DEBUG - stack ['$24load_method.1', '$const26.2']
2025-01-05 16:51:19,702 - DEBUG - dispatch pc=30, inst=LOAD_METHOD(arg=3, lineno=529)
2025-01-05 16:51:19,703 - DEBUG - stack ['$24load_method.1', '$const26.2', '$28load_global.3']
2025-01-05 16:51:19,705 - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=529)
2025-01-05 16:51:19,706 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4']
2025-01-05 16:51:19,708 - DEBUG - dispatch pc=34, inst=LOAD_CONST(arg=3, lineno=529)
2025-01-05 16:51:19,709 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4', '$frames_per_beat32.5']
2025-01-05 16:51:19,711 - DEBUG - dispatch pc=36, inst=BINARY_SUBSCR(arg=None, lineno=529)
2025-01-05 16:51:19,712 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4', '$frames_per_beat32.5', '$const34.6']
2025-01-05 16:51:19,714 - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=529)
2025-01-05 16:51:19,716 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4', '$36binary_subscr.7']
2025-01-05 16:51:19,717 - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=529)
2025-01-05 16:51:19,720 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4', '$38unary_negative.8']
2025-01-05 16:51:19,722 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=3, lineno=529)
2025-01-05 16:51:19,723 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4', '$38unary_negative.8', '$frames_per_beat40.9']
2025-01-05 16:51:19,725 - DEBUG - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=529)
2025-01-05 16:51:19,727 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4', '$38unary_negative.8', '$frames_per_beat40.9', '$const42.10']
2025-01-05 16:51:19,728 - DEBUG - dispatch pc=46, inst=LOAD_CONST(arg=1, lineno=529)
2025-01-05 16:51:19,730 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4', '$38unary_negative.8', '$44binary_subscr.11']
2025-01-05 16:51:19,732 - DEBUG - dispatch pc=48, inst=BINARY_ADD(arg=None, lineno=529)
2025-01-05 16:51:19,733 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4', '$38unary_negative.8', '$44binary_subscr.11', '$const46.12']
2025-01-05 16:51:19,735 - DEBUG - dispatch pc=50, inst=CALL_METHOD(arg=2, lineno=529)
2025-01-05 16:51:19,736 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4', '$38unary_negative.8', '$48binary_add.13']
2025-01-05 16:51:19,738 - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=4, lineno=529)
2025-01-05 16:51:19,739 - DEBUG - stack ['$24load_method.1', '$const26.2', '$50call_method.14']
2025-01-05 16:51:19,741 - DEBUG - dispatch pc=54, inst=BINARY_MULTIPLY(arg=None, lineno=529)
2025-01-05 16:51:19,742 - DEBUG - stack ['$24load_method.1', '$const26.2', '$50call_method.14', '$const52.15']
2025-01-05 16:51:19,744 - DEBUG - dispatch pc=56, inst=LOAD_FAST(arg=1, lineno=529)
2025-01-05 16:51:19,746 - DEBUG - stack ['$24load_method.1', '$const26.2', '$54binary_multiply.16']
2025-01-05 16:51:19,748 - DEBUG - dispatch pc=58, inst=LOAD_CONST(arg=3, lineno=529)
2025-01-05 16:51:19,749 - DEBUG - stack ['$24load_method.1', '$const26.2', '$54binary_multiply.16', '$frames_per_beat56.17']
2025-01-05 16:51:19,751 - DEBUG - dispatch pc=60, inst=BINARY_SUBSCR(arg=None, lineno=529)
2025-01-05 16:51:19,752 - DEBUG - stack ['$24load_method.1', '$const26.2', '$54binary_multiply.16', '$frames_per_beat56.17', '$const58.18']
2025-01-05 16:51:19,754 - DEBUG - dispatch pc=62, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=529)
2025-01-05 16:51:19,755 - DEBUG - stack ['$24load_method.1', '$const26.2', '$54binary_multiply.16', '$60binary_subscr.19']
2025-01-05 16:51:19,757 - DEBUG - dispatch pc=64, inst=LOAD_CONST(arg=5, lineno=529)
2025-01-05 16:51:19,758 - DEBUG - stack ['$24load_method.1', '$const26.2', '$62binary_true_divide.20']
2025-01-05 16:51:19,760 - DEBUG - dispatch pc=66, inst=BINARY_POWER(arg=None, lineno=529)
2025-01-05 16:51:19,761 - DEBUG - stack ['$24load_method.1', '$const26.2', '$62binary_true_divide.20', '$const64.21']
2025-01-05 16:51:19,763 - DEBUG - dispatch pc=68, inst=BINARY_MULTIPLY(arg=None, lineno=529)
2025-01-05 16:51:19,765 - DEBUG - stack ['$24load_method.1', '$const26.2', '$66binary_power.22']
2025-01-05 16:51:19,766 - DEBUG - dispatch pc=70, inst=CALL_METHOD(arg=1, lineno=529)
2025-01-05 16:51:19,768 - DEBUG - stack ['$24load_method.1', '$68binary_multiply.23']
2025-01-05 16:51:19,769 - DEBUG - dispatch pc=72, inst=STORE_FAST(arg=4, lineno=529)
2025-01-05 16:51:19,771 - DEBUG - stack ['$70call_method.24']
2025-01-05 16:51:19,772 - DEBUG - dispatch pc=74, inst=LOAD_GLOBAL(arg=0, lineno=530)
2025-01-05 16:51:19,773 - DEBUG - stack []
2025-01-05 16:51:19,774 - DEBUG - dispatch pc=76, inst=LOAD_FAST(arg=4, lineno=530)
2025-01-05 16:51:19,775 - DEBUG - stack ['$74load_global.25']
2025-01-05 16:51:19,777 - DEBUG - dispatch pc=78, inst=CALL_FUNCTION(arg=1, lineno=530)
2025-01-05 16:51:19,778 - DEBUG - stack ['$74load_global.25', '$window76.26']
2025-01-05 16:51:19,779 - DEBUG - dispatch pc=80, inst=STORE_FAST(arg=5, lineno=530)
2025-01-05 16:51:19,781 - DEBUG - stack ['$78call_function.27']
2025-01-05 16:51:19,782 - DEBUG - dispatch pc=82, inst=LOAD_GLOBAL(arg=4, lineno=532)
2025-01-05 16:51:19,783 - DEBUG - stack []
2025-01-05 16:51:19,784 - DEBUG - dispatch pc=84, inst=LOAD_GLOBAL(arg=0, lineno=532)
2025-01-05 16:51:19,786 - DEBUG - stack ['$82load_global.28']
2025-01-05 16:51:19,787 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=0, lineno=532)
2025-01-05 16:51:19,788 - DEBUG - stack ['$82load_global.28', '$84load_global.29']
2025-01-05 16:51:19,790 - DEBUG - dispatch pc=88, inst=CALL_FUNCTION(arg=1, lineno=532)
2025-01-05 16:51:19,791 - DEBUG - stack ['$82load_global.28', '$84load_global.29', '$onset_envelope86.30']
2025-01-05 16:51:19,793 - DEBUG - dispatch pc=90, inst=CALL_FUNCTION(arg=1, lineno=532)
2025-01-05 16:51:19,794 - DEBUG - stack ['$82load_global.28', '$88call_function.31']
2025-01-05 16:51:19,796 - DEBUG - dispatch pc=92, inst=GET_ITER(arg=None, lineno=532)
2025-01-05 16:51:19,798 - DEBUG - stack ['$90call_function.32']
2025-01-05 16:51:19,799 - DEBUG - end state. edges=[Edge(pc=94, stack=('$92get_iter.33',), blockstack=(), npush=0)]
2025-01-05 16:51:19,801 - DEBUG - pending: deque([State(pc_initial=202 nstack_initial=0), State(pc_initial=94 nstack_initial=1)])
2025-01-05 16:51:19,802 - DEBUG - stack: []
2025-01-05 16:51:19,803 - DEBUG - state.pc_initial: State(pc_initial=202 nstack_initial=0)
2025-01-05 16:51:19,805 - DEBUG - dispatch pc=202, inst=LOAD_GLOBAL(arg=0, lineno=539)
2025-01-05 16:51:19,806 - DEBUG - stack []
2025-01-05 16:51:19,807 - DEBUG - dispatch pc=204, inst=LOAD_FAST(arg=1, lineno=539)
2025-01-05 16:51:19,808 - DEBUG - stack ['$202load_global.0']
2025-01-05 16:51:19,810 - DEBUG - dispatch pc=206, inst=CALL_FUNCTION(arg=1, lineno=539)
2025-01-05 16:51:19,811 - DEBUG - stack ['$202load_global.0', '$frames_per_beat204.1']
2025-01-05 16:51:19,813 - DEBUG - dispatch pc=208, inst=LOAD_GLOBAL(arg=0, lineno=539)
2025-01-05 16:51:19,814 - DEBUG - stack ['$206call_function.2']
2025-01-05 16:51:19,816 - DEBUG - dispatch pc=210, inst=LOAD_FAST(arg=0, lineno=539)
2025-01-05 16:51:19,817 - DEBUG - stack ['$206call_function.2', '$208load_global.3']
2025-01-05 16:51:19,818 - DEBUG - dispatch pc=212, inst=CALL_FUNCTION(arg=1, lineno=539)
2025-01-05 16:51:19,820 - DEBUG - stack ['$206call_function.2', '$208load_global.3', '$onset_envelope210.4']
2025-01-05 16:51:19,821 - DEBUG - dispatch pc=214, inst=COMPARE_OP(arg=2, lineno=539)
2025-01-05 16:51:19,823 - DEBUG - stack ['$206call_function.2', '$212call_function.5']
2025-01-05 16:51:19,825 - DEBUG - dispatch pc=216, inst=NOP(arg=1, lineno=539)
2025-01-05 16:51:19,825 - DEBUG - stack ['$214compare_op.6']
2025-01-05 16:51:19,826 - DEBUG - dispatch pc=218, inst=POP_JUMP_IF_FALSE(arg=412, lineno=539)
2025-01-05 16:51:19,828 - DEBUG - stack ['$214compare_op.6']
2025-01-05 16:51:19,829 - DEBUG - end state. edges=[Edge(pc=220, stack=(), blockstack=(), npush=0), Edge(pc=412, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:19,830 - DEBUG - pending: deque([State(pc_initial=94 nstack_initial=1), State(pc_initial=220 nstack_initial=0), State(pc_initial=412 nstack_initial=0)])
2025-01-05 16:51:19,832 - DEBUG - stack: ['$phi94.0']
2025-01-05 16:51:19,834 - DEBUG - state.pc_initial: State(pc_initial=94 nstack_initial=1)
2025-01-05 16:51:19,835 - DEBUG - dispatch pc=94, inst=FOR_ITER(arg=104, lineno=532)
2025-01-05 16:51:19,836 - DEBUG - stack ['$phi94.0']
2025-01-05 16:51:19,838 - DEBUG - end state. edges=[Edge(pc=200, stack=(), blockstack=(), npush=0), Edge(pc=96, stack=('$phi94.0', '$94for_iter.2'), blockstack=(), npush=0)]
2025-01-05 16:51:19,840 - DEBUG - pending: deque([State(pc_initial=220 nstack_initial=0), State(pc_initial=412 nstack_initial=0), State(pc_initial=200 nstack_initial=0), State(pc_initial=96 nstack_initial=2)])
2025-01-05 16:51:19,842 - DEBUG - stack: []
2025-01-05 16:51:19,843 - DEBUG - state.pc_initial: State(pc_initial=220 nstack_initial=0)
2025-01-05 16:51:19,845 - DEBUG - dispatch pc=220, inst=LOAD_GLOBAL(arg=4, lineno=542)
2025-01-05 16:51:19,846 - DEBUG - stack []
2025-01-05 16:51:19,847 - DEBUG - dispatch pc=222, inst=LOAD_GLOBAL(arg=0, lineno=542)
2025-01-05 16:51:19,849 - DEBUG - stack ['$220load_global.0']
2025-01-05 16:51:19,850 - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=0, lineno=542)
2025-01-05 16:51:19,851 - DEBUG - stack ['$220load_global.0', '$222load_global.1']
2025-01-05 16:51:19,853 - DEBUG - dispatch pc=226, inst=CALL_FUNCTION(arg=1, lineno=542)
2025-01-05 16:51:19,854 - DEBUG - stack ['$220load_global.0', '$222load_global.1', '$onset_envelope224.2']
2025-01-05 16:51:19,856 - DEBUG - dispatch pc=228, inst=CALL_FUNCTION(arg=1, lineno=542)
2025-01-05 16:51:19,857 - DEBUG - stack ['$220load_global.0', '$226call_function.3']
2025-01-05 16:51:19,859 - DEBUG - dispatch pc=230, inst=GET_ITER(arg=None, lineno=542)
2025-01-05 16:51:19,860 - DEBUG - stack ['$228call_function.4']
2025-01-05 16:51:19,862 - DEBUG - end state. edges=[Edge(pc=232, stack=('$230get_iter.5',), blockstack=(), npush=0)]
2025-01-05 16:51:19,863 - DEBUG - pending: deque([State(pc_initial=412 nstack_initial=0), State(pc_initial=200 nstack_initial=0), State(pc_initial=96 nstack_initial=2), State(pc_initial=232 nstack_initial=1)])
2025-01-05 16:51:19,865 - DEBUG - stack: []
2025-01-05 16:51:19,866 - DEBUG - state.pc_initial: State(pc_initial=412 nstack_initial=0)
2025-01-05 16:51:19,868 - DEBUG - dispatch pc=412, inst=LOAD_CONST(arg=0, lineno=548)
2025-01-05 16:51:19,869 - DEBUG - stack []
2025-01-05 16:51:19,871 - DEBUG - dispatch pc=414, inst=RETURN_VALUE(arg=None, lineno=548)
2025-01-05 16:51:19,872 - DEBUG - stack ['$const412.0']
2025-01-05 16:51:19,873 - DEBUG - end state. edges=[]
2025-01-05 16:51:19,875 - DEBUG - pending: deque([State(pc_initial=200 nstack_initial=0), State(pc_initial=96 nstack_initial=2), State(pc_initial=232 nstack_initial=1)])
2025-01-05 16:51:19,877 - DEBUG - stack: []
2025-01-05 16:51:19,878 - DEBUG - state.pc_initial: State(pc_initial=200 nstack_initial=0)
2025-01-05 16:51:19,879 - DEBUG - dispatch pc=200, inst=JUMP_FORWARD(arg=210, lineno=537)
2025-01-05 16:51:19,881 - DEBUG - stack []
2025-01-05 16:51:19,882 - DEBUG - end state. edges=[Edge(pc=412, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:19,884 - DEBUG - pending: deque([State(pc_initial=96 nstack_initial=2), State(pc_initial=232 nstack_initial=1), State(pc_initial=412 nstack_initial=0)])
2025-01-05 16:51:19,886 - DEBUG - stack: ['$phi96.0', '$phi96.1']
2025-01-05 16:51:19,887 - DEBUG - state.pc_initial: State(pc_initial=96 nstack_initial=2)
2025-01-05 16:51:19,888 - DEBUG - dispatch pc=96, inst=STORE_FAST(arg=6, lineno=532)
2025-01-05 16:51:19,890 - DEBUG - stack ['$phi96.0', '$phi96.1']
2025-01-05 16:51:19,891 - DEBUG - dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=533)
2025-01-05 16:51:19,892 - DEBUG - stack ['$phi96.0']
2025-01-05 16:51:19,893 - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=2, lineno=533)
2025-01-05 16:51:19,894 - DEBUG - stack ['$phi96.0', '$const98.2']
2025-01-05 16:51:19,896 - DEBUG - dispatch pc=102, inst=LOAD_FAST(arg=6, lineno=533)
2025-01-05 16:51:19,897 - DEBUG - stack ['$phi96.0', '$const98.2', '$localscore100.3']
2025-01-05 16:51:19,899 - DEBUG - dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=533)
2025-01-05 16:51:19,900 - DEBUG - stack ['$phi96.0', '$const98.2', '$localscore100.3', '$i102.4']
2025-01-05 16:51:19,902 - DEBUG - dispatch pc=106, inst=LOAD_GLOBAL(arg=4, lineno=536)
2025-01-05 16:51:19,903 - DEBUG - stack ['$phi96.0']
2025-01-05 16:51:19,905 - DEBUG - dispatch pc=108, inst=LOAD_GLOBAL(arg=5, lineno=536)
2025-01-05 16:51:19,906 - DEBUG - stack ['$phi96.0', '$106load_global.5']
2025-01-05 16:51:19,907 - DEBUG - dispatch pc=110, inst=LOAD_CONST(arg=3, lineno=536)
2025-01-05 16:51:19,908 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6']
2025-01-05 16:51:19,910 - DEBUG - dispatch pc=112, inst=LOAD_FAST(arg=6, lineno=536)
2025-01-05 16:51:19,911 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7']
2025-01-05 16:51:19,913 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=5, lineno=536)
2025-01-05 16:51:19,915 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7', '$i112.8']
2025-01-05 16:51:19,917 - DEBUG - dispatch pc=116, inst=LOAD_CONST(arg=5, lineno=536)
2025-01-05 16:51:19,918 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7', '$i112.8', '$K114.9']
2025-01-05 16:51:19,920 - DEBUG - dispatch pc=118, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=536)
2025-01-05 16:51:19,921 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7', '$i112.8', '$K114.9', '$const116.10']
2025-01-05 16:51:19,923 - DEBUG - dispatch pc=120, inst=BINARY_ADD(arg=None, lineno=536)
2025-01-05 16:51:19,924 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7', '$i112.8', '$118binary_floor_divide.11']
2025-01-05 16:51:19,926 - DEBUG - dispatch pc=122, inst=LOAD_FAST(arg=3, lineno=536)
2025-01-05 16:51:19,928 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7', '$120binary_add.12']
2025-01-05 16:51:19,930 - DEBUG - dispatch pc=124, inst=BINARY_SUBTRACT(arg=None, lineno=536)
2025-01-05 16:51:19,932 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7', '$120binary_add.12', '$N122.13']
2025-01-05 16:51:19,934 - DEBUG - dispatch pc=126, inst=LOAD_CONST(arg=1, lineno=536)
2025-01-05 16:51:19,935 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7', '$124binary_subtract.14']
2025-01-05 16:51:19,937 - DEBUG - dispatch pc=128, inst=BINARY_ADD(arg=None, lineno=536)
2025-01-05 16:51:19,939 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7', '$124binary_subtract.14', '$const126.15']
2025-01-05 16:51:19,940 - DEBUG - dispatch pc=130, inst=CALL_FUNCTION(arg=2, lineno=536)
2025-01-05 16:51:19,942 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7', '$128binary_add.16']
2025-01-05 16:51:19,943 - DEBUG - dispatch pc=132, inst=LOAD_GLOBAL(arg=6, lineno=536)
2025-01-05 16:51:19,945 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$130call_function.17']
2025-01-05 16:51:19,947 - DEBUG - dispatch pc=134, inst=LOAD_FAST(arg=6, lineno=536)
2025-01-05 16:51:19,948 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$130call_function.17', '$132load_global.18']
2025-01-05 16:51:19,950 - DEBUG - dispatch pc=136, inst=LOAD_FAST(arg=5, lineno=536)
2025-01-05 16:51:19,952 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$130call_function.17', '$132load_global.18', '$i134.19']
2025-01-05 16:51:19,953 - DEBUG - dispatch pc=138, inst=LOAD_CONST(arg=5, lineno=536)
2025-01-05 16:51:19,955 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$130call_function.17', '$132load_global.18', '$i134.19', '$K136.20']
2025-01-05 16:51:19,956 - DEBUG - dispatch pc=140, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=536)
2025-01-05 16:51:19,958 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$130call_function.17', '$132load_global.18', '$i134.19', '$K136.20', '$const138.21']
2025-01-05 16:51:19,959 - DEBUG - dispatch pc=142, inst=BINARY_ADD(arg=None, lineno=536)
2025-01-05 16:51:19,961 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$130call_function.17', '$132load_global.18', '$i134.19', '$140binary_floor_divide.22']
2025-01-05 16:51:19,963 - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=5, lineno=536)
2025-01-05 16:51:19,965 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$130call_function.17', '$132load_global.18', '$142binary_add.23']
2025-01-05 16:51:19,966 - DEBUG - dispatch pc=146, inst=CALL_FUNCTION(arg=2, lineno=536)
2025-01-05 16:51:19,968 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$130call_function.17', '$132load_global.18', '$142binary_add.23', '$K144.24']
2025-01-05 16:51:19,969 - DEBUG - dispatch pc=148, inst=CALL_FUNCTION(arg=2, lineno=536)
2025-01-05 16:51:19,971 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$130call_function.17', '$146call_function.25']
2025-01-05 16:51:19,973 - DEBUG - dispatch pc=150, inst=GET_ITER(arg=None, lineno=536)
2025-01-05 16:51:19,974 - DEBUG - stack ['$phi96.0', '$148call_function.26']
2025-01-05 16:51:19,975 - DEBUG - end state. edges=[Edge(pc=152, stack=('$phi96.0', '$150get_iter.27'), blockstack=(), npush=0)]
2025-01-05 16:51:19,977 - DEBUG - pending: deque([State(pc_initial=232 nstack_initial=1), State(pc_initial=412 nstack_initial=0), State(pc_initial=152 nstack_initial=2)])
2025-01-05 16:51:19,978 - DEBUG - stack: ['$phi232.0']
2025-01-05 16:51:19,980 - DEBUG - state.pc_initial: State(pc_initial=232 nstack_initial=1)
2025-01-05 16:51:19,981 - DEBUG - dispatch pc=232, inst=FOR_ITER(arg=178, lineno=542)
2025-01-05 16:51:19,983 - DEBUG - stack ['$phi232.0']
2025-01-05 16:51:19,984 - DEBUG - end state. edges=[Edge(pc=412, stack=(), blockstack=(), npush=0), Edge(pc=234, stack=('$phi232.0', '$232for_iter.2'), blockstack=(), npush=0)]
2025-01-05 16:51:19,986 - DEBUG - pending: deque([State(pc_initial=412 nstack_initial=0), State(pc_initial=152 nstack_initial=2), State(pc_initial=412 nstack_initial=0), State(pc_initial=234 nstack_initial=2)])
2025-01-05 16:51:19,988 - DEBUG - pending: deque([State(pc_initial=152 nstack_initial=2), State(pc_initial=412 nstack_initial=0), State(pc_initial=234 nstack_initial=2)])
2025-01-05 16:51:19,990 - DEBUG - stack: ['$phi152.0', '$phi152.1']
2025-01-05 16:51:19,991 - DEBUG - state.pc_initial: State(pc_initial=152 nstack_initial=2)
2025-01-05 16:51:19,993 - DEBUG - dispatch pc=152, inst=FOR_ITER(arg=44, lineno=536)
2025-01-05 16:51:19,994 - DEBUG - stack ['$phi152.0', '$phi152.1']
2025-01-05 16:51:19,995 - DEBUG - end state. edges=[Edge(pc=198, stack=('$phi152.0',), blockstack=(), npush=0), Edge(pc=154, stack=('$phi152.0', '$phi152.1', '$152for_iter.3'), blockstack=(), npush=0)]
2025-01-05 16:51:19,998 - DEBUG - pending: deque([State(pc_initial=412 nstack_initial=0), State(pc_initial=234 nstack_initial=2), State(pc_initial=198 nstack_initial=1), State(pc_initial=154 nstack_initial=3)])
2025-01-05 16:51:20,000 - DEBUG - pending: deque([State(pc_initial=234 nstack_initial=2), State(pc_initial=198 nstack_initial=1), State(pc_initial=154 nstack_initial=3)])
2025-01-05 16:51:20,002 - DEBUG - stack: ['$phi234.0', '$phi234.1']
2025-01-05 16:51:20,003 - DEBUG - state.pc_initial: State(pc_initial=234 nstack_initial=2)
2025-01-05 16:51:20,004 - DEBUG - dispatch pc=234, inst=STORE_FAST(arg=6, lineno=542)
2025-01-05 16:51:20,006 - DEBUG - stack ['$phi234.0', '$phi234.1']
2025-01-05 16:51:20,007 - DEBUG - dispatch pc=236, inst=LOAD_GLOBAL(arg=1, lineno=543)
2025-01-05 16:51:20,008 - DEBUG - stack ['$phi234.0']
2025-01-05 16:51:20,010 - DEBUG - dispatch pc=238, inst=LOAD_METHOD(arg=2, lineno=543)
2025-01-05 16:51:20,011 - DEBUG - stack ['$phi234.0', '$236load_global.2']
2025-01-05 16:51:20,012 - DEBUG - dispatch pc=240, inst=LOAD_CONST(arg=2, lineno=543)
2025-01-05 16:51:20,014 - DEBUG - stack ['$phi234.0', '$238load_method.3']
2025-01-05 16:51:20,015 - DEBUG - dispatch pc=242, inst=LOAD_GLOBAL(arg=1, lineno=543)
2025-01-05 16:51:20,016 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4']
2025-01-05 16:51:20,018 - DEBUG - dispatch pc=244, inst=LOAD_METHOD(arg=3, lineno=543)
2025-01-05 16:51:20,019 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$242load_global.5']
2025-01-05 16:51:20,021 - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=543)
2025-01-05 16:51:20,022 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6']
2025-01-05 16:51:20,024 - DEBUG - dispatch pc=248, inst=LOAD_FAST(arg=6, lineno=543)
2025-01-05 16:51:20,026 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6', '$frames_per_beat246.7']
2025-01-05 16:51:20,028 - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=543)
2025-01-05 16:51:20,029 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6', '$frames_per_beat246.7', '$i248.8']
2025-01-05 16:51:20,031 - DEBUG - dispatch pc=252, inst=UNARY_NEGATIVE(arg=None, lineno=543)
2025-01-05 16:51:20,033 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6', '$250binary_subscr.9']
2025-01-05 16:51:20,034 - DEBUG - dispatch pc=254, inst=LOAD_FAST(arg=1, lineno=543)
2025-01-05 16:51:20,036 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6', '$252unary_negative.10']
2025-01-05 16:51:20,037 - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=6, lineno=543)
2025-01-05 16:51:20,039 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6', '$252unary_negative.10', '$frames_per_beat254.11']
2025-01-05 16:51:20,041 - DEBUG - dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=543)
2025-01-05 16:51:20,043 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6', '$252unary_negative.10', '$frames_per_beat254.11', '$i256.12']
2025-01-05 16:51:20,045 - DEBUG - dispatch pc=260, inst=LOAD_CONST(arg=1, lineno=543)
2025-01-05 16:51:20,046 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6', '$252unary_negative.10', '$258binary_subscr.13']
2025-01-05 16:51:20,048 - DEBUG - dispatch pc=262, inst=BINARY_ADD(arg=None, lineno=543)
2025-01-05 16:51:20,050 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6', '$252unary_negative.10', '$258binary_subscr.13', '$const260.14']
2025-01-05 16:51:20,052 - DEBUG - dispatch pc=264, inst=CALL_METHOD(arg=2, lineno=543)
2025-01-05 16:51:20,053 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6', '$252unary_negative.10', '$262binary_add.15']
2025-01-05 16:51:20,055 - DEBUG - dispatch pc=266, inst=LOAD_CONST(arg=4, lineno=543)
2025-01-05 16:51:20,056 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$264call_method.16']
2025-01-05 16:51:20,058 - DEBUG - dispatch pc=268, inst=BINARY_MULTIPLY(arg=None, lineno=543)
2025-01-05 16:51:20,059 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$264call_method.16', '$const266.17']
2025-01-05 16:51:20,061 - DEBUG - dispatch pc=270, inst=LOAD_FAST(arg=1, lineno=543)
2025-01-05 16:51:20,062 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$268binary_multiply.18']
2025-01-05 16:51:20,064 - DEBUG - dispatch pc=272, inst=LOAD_FAST(arg=6, lineno=543)
2025-01-05 16:51:20,066 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$268binary_multiply.18', '$frames_per_beat270.19']
2025-01-05 16:51:20,067 - DEBUG - dispatch pc=274, inst=BINARY_SUBSCR(arg=None, lineno=543)
2025-01-05 16:51:20,069 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$268binary_multiply.18', '$frames_per_beat270.19', '$i272.20']
2025-01-05 16:51:20,070 - DEBUG - dispatch pc=276, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=543)
2025-01-05 16:51:20,072 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$268binary_multiply.18', '$274binary_subscr.21']
2025-01-05 16:51:20,073 - DEBUG - dispatch pc=278, inst=LOAD_CONST(arg=5, lineno=543)
2025-01-05 16:51:20,075 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$276binary_true_divide.22']
2025-01-05 16:51:20,077 - DEBUG - dispatch pc=280, inst=BINARY_POWER(arg=None, lineno=543)
2025-01-05 16:51:20,078 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$276binary_true_divide.22', '$const278.23']
2025-01-05 16:51:20,080 - DEBUG - dispatch pc=282, inst=BINARY_MULTIPLY(arg=None, lineno=543)
2025-01-05 16:51:20,081 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$280binary_power.24']
2025-01-05 16:51:20,083 - DEBUG - dispatch pc=284, inst=CALL_METHOD(arg=1, lineno=543)
2025-01-05 16:51:20,085 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$282binary_multiply.25']
2025-01-05 16:51:20,086 - DEBUG - dispatch pc=286, inst=STORE_FAST(arg=4, lineno=543)
2025-01-05 16:51:20,088 - DEBUG - stack ['$phi234.0', '$284call_method.26']
2025-01-05 16:51:20,089 - DEBUG - dispatch pc=288, inst=LOAD_CONST(arg=5, lineno=544)
2025-01-05 16:51:20,090 - DEBUG - stack ['$phi234.0']
2025-01-05 16:51:20,091 - DEBUG - dispatch pc=290, inst=LOAD_GLOBAL(arg=7, lineno=544)
2025-01-05 16:51:20,093 - DEBUG - stack ['$phi234.0', '$const288.27']
2025-01-05 16:51:20,094 - DEBUG - dispatch pc=292, inst=LOAD_FAST(arg=1, lineno=544)
2025-01-05 16:51:20,095 - DEBUG - stack ['$phi234.0', '$const288.27', '$290load_global.28']
2025-01-05 16:51:20,097 - DEBUG - dispatch pc=294, inst=LOAD_FAST(arg=6, lineno=544)
2025-01-05 16:51:20,099 - DEBUG - stack ['$phi234.0', '$const288.27', '$290load_global.28', '$frames_per_beat292.29']
2025-01-05 16:51:20,101 - DEBUG - dispatch pc=296, inst=BINARY_SUBSCR(arg=None, lineno=544)
2025-01-05 16:51:20,102 - DEBUG - stack ['$phi234.0', '$const288.27', '$290load_global.28', '$frames_per_beat292.29', '$i294.30']
2025-01-05 16:51:20,104 - DEBUG - dispatch pc=298, inst=CALL_FUNCTION(arg=1, lineno=544)
2025-01-05 16:51:20,106 - DEBUG - stack ['$phi234.0', '$const288.27', '$290load_global.28', '$296binary_subscr.31']
2025-01-05 16:51:20,107 - DEBUG - dispatch pc=300, inst=BINARY_MULTIPLY(arg=None, lineno=544)
2025-01-05 16:51:20,109 - DEBUG - stack ['$phi234.0', '$const288.27', '$298call_function.32']
2025-01-05 16:51:20,111 - DEBUG - dispatch pc=302, inst=LOAD_CONST(arg=1, lineno=544)
2025-01-05 16:51:20,112 - DEBUG - stack ['$phi234.0', '$300binary_multiply.33']
2025-01-05 16:51:20,114 - DEBUG - dispatch pc=304, inst=BINARY_ADD(arg=None, lineno=544)
2025-01-05 16:51:20,115 - DEBUG - stack ['$phi234.0', '$300binary_multiply.33', '$const302.34']
2025-01-05 16:51:20,117 - DEBUG - dispatch pc=306, inst=STORE_FAST(arg=5, lineno=544)
2025-01-05 16:51:20,118 - DEBUG - stack ['$phi234.0', '$304binary_add.35']
2025-01-05 16:51:20,119 - DEBUG - dispatch pc=308, inst=LOAD_CONST(arg=6, lineno=546)
2025-01-05 16:51:20,121 - DEBUG - stack ['$phi234.0']
2025-01-05 16:51:20,122 - DEBUG - dispatch pc=310, inst=LOAD_FAST(arg=2, lineno=546)
2025-01-05 16:51:20,123 - DEBUG - stack ['$phi234.0', '$const308.36']
2025-01-05 16:51:20,124 - DEBUG - dispatch pc=312, inst=LOAD_FAST(arg=6, lineno=546)
2025-01-05 16:51:20,125 - DEBUG - stack ['$phi234.0', '$const308.36', '$localscore310.37']
2025-01-05 16:51:20,127 - DEBUG - dispatch pc=314, inst=STORE_SUBSCR(arg=None, lineno=546)
2025-01-05 16:51:20,129 - DEBUG - stack ['$phi234.0', '$const308.36', '$localscore310.37', '$i312.38']
2025-01-05 16:51:20,131 - DEBUG - dispatch pc=316, inst=LOAD_GLOBAL(arg=4, lineno=547)
2025-01-05 16:51:20,132 - DEBUG - stack ['$phi234.0']
2025-01-05 16:51:20,133 - DEBUG - dispatch pc=318, inst=LOAD_GLOBAL(arg=5, lineno=547)
2025-01-05 16:51:20,135 - DEBUG - stack ['$phi234.0', '$316load_global.39']
2025-01-05 16:51:20,136 - DEBUG - dispatch pc=320, inst=LOAD_CONST(arg=3, lineno=547)
2025-01-05 16:51:20,137 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40']
2025-01-05 16:51:20,139 - DEBUG - dispatch pc=322, inst=LOAD_FAST(arg=6, lineno=547)
2025-01-05 16:51:20,140 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41']
2025-01-05 16:51:20,142 - DEBUG - dispatch pc=324, inst=LOAD_FAST(arg=5, lineno=547)
2025-01-05 16:51:20,143 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41', '$i322.42']
2025-01-05 16:51:20,145 - DEBUG - dispatch pc=326, inst=LOAD_CONST(arg=5, lineno=547)
2025-01-05 16:51:20,146 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41', '$i322.42', '$K324.43']
2025-01-05 16:51:20,148 - DEBUG - dispatch pc=328, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=547)
2025-01-05 16:51:20,150 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41', '$i322.42', '$K324.43', '$const326.44']
2025-01-05 16:51:20,151 - DEBUG - dispatch pc=330, inst=BINARY_ADD(arg=None, lineno=547)
2025-01-05 16:51:20,153 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41', '$i322.42', '$328binary_floor_divide.45']
2025-01-05 16:51:20,154 - DEBUG - dispatch pc=332, inst=LOAD_FAST(arg=3, lineno=547)
2025-01-05 16:51:20,156 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41', '$330binary_add.46']
2025-01-05 16:51:20,158 - DEBUG - dispatch pc=334, inst=BINARY_SUBTRACT(arg=None, lineno=547)
2025-01-05 16:51:20,159 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41', '$330binary_add.46', '$N332.47']
2025-01-05 16:51:20,161 - DEBUG - dispatch pc=336, inst=LOAD_CONST(arg=1, lineno=547)
2025-01-05 16:51:20,162 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41', '$334binary_subtract.48']
2025-01-05 16:51:20,164 - DEBUG - dispatch pc=338, inst=BINARY_ADD(arg=None, lineno=547)
2025-01-05 16:51:20,165 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41', '$334binary_subtract.48', '$const336.49']
2025-01-05 16:51:20,167 - DEBUG - dispatch pc=340, inst=CALL_FUNCTION(arg=2, lineno=547)
2025-01-05 16:51:20,168 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41', '$338binary_add.50']
2025-01-05 16:51:20,170 - DEBUG - dispatch pc=342, inst=LOAD_GLOBAL(arg=6, lineno=547)
2025-01-05 16:51:20,171 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$340call_function.51']
2025-01-05 16:51:20,173 - DEBUG - dispatch pc=344, inst=LOAD_FAST(arg=6, lineno=547)
2025-01-05 16:51:20,175 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$340call_function.51', '$342load_global.52']
2025-01-05 16:51:20,177 - DEBUG - dispatch pc=346, inst=LOAD_FAST(arg=5, lineno=547)
2025-01-05 16:51:20,178 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$340call_function.51', '$342load_global.52', '$i344.53']
2025-01-05 16:51:20,180 - DEBUG - dispatch pc=348, inst=LOAD_CONST(arg=5, lineno=547)
2025-01-05 16:51:20,182 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$340call_function.51', '$342load_global.52', '$i344.53', '$K346.54']
2025-01-05 16:51:20,184 - DEBUG - dispatch pc=350, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=547)
2025-01-05 16:51:20,185 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$340call_function.51', '$342load_global.52', '$i344.53', '$K346.54', '$const348.55']
2025-01-05 16:51:20,187 - DEBUG - dispatch pc=352, inst=BINARY_ADD(arg=None, lineno=547)
2025-01-05 16:51:20,189 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$340call_function.51', '$342load_global.52', '$i344.53', '$350binary_floor_divide.56']
2025-01-05 16:51:20,191 - DEBUG - dispatch pc=354, inst=LOAD_FAST(arg=5, lineno=547)
2025-01-05 16:51:20,192 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$340call_function.51', '$342load_global.52', '$352binary_add.57']
2025-01-05 16:51:20,194 - DEBUG - dispatch pc=356, inst=CALL_FUNCTION(arg=2, lineno=547)
2025-01-05 16:51:20,195 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$340call_function.51', '$342load_global.52', '$352binary_add.57', '$K354.58']
2025-01-05 16:51:20,197 - DEBUG - dispatch pc=358, inst=CALL_FUNCTION(arg=2, lineno=547)
2025-01-05 16:51:20,199 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$340call_function.51', '$356call_function.59']
2025-01-05 16:51:20,201 - DEBUG - dispatch pc=360, inst=GET_ITER(arg=None, lineno=547)
2025-01-05 16:51:20,202 - DEBUG - stack ['$phi234.0', '$358call_function.60']
2025-01-05 16:51:20,203 - DEBUG - end state. edges=[Edge(pc=362, stack=('$phi234.0', '$360get_iter.61'), blockstack=(), npush=0)]
2025-01-05 16:51:20,204 - DEBUG - pending: deque([State(pc_initial=198 nstack_initial=1), State(pc_initial=154 nstack_initial=3), State(pc_initial=362 nstack_initial=2)])
2025-01-05 16:51:20,206 - DEBUG - stack: ['$phi198.0']
2025-01-05 16:51:20,208 - DEBUG - state.pc_initial: State(pc_initial=198 nstack_initial=1)
2025-01-05 16:51:20,209 - DEBUG - dispatch pc=198, inst=JUMP_ABSOLUTE(arg=94, lineno=537)
2025-01-05 16:51:20,210 - DEBUG - stack ['$phi198.0']
2025-01-05 16:51:20,212 - DEBUG - end state. edges=[Edge(pc=94, stack=('$phi198.0',), blockstack=(), npush=0)]
2025-01-05 16:51:20,213 - DEBUG - pending: deque([State(pc_initial=154 nstack_initial=3), State(pc_initial=362 nstack_initial=2), State(pc_initial=94 nstack_initial=1)])
2025-01-05 16:51:20,215 - DEBUG - stack: ['$phi154.0', '$phi154.1', '$phi154.2']
2025-01-05 16:51:20,217 - DEBUG - state.pc_initial: State(pc_initial=154 nstack_initial=3)
2025-01-05 16:51:20,219 - DEBUG - dispatch pc=154, inst=STORE_FAST(arg=7, lineno=536)
2025-01-05 16:51:20,220 - DEBUG - stack ['$phi154.0', '$phi154.1', '$phi154.2']
2025-01-05 16:51:20,221 - DEBUG - dispatch pc=156, inst=LOAD_FAST(arg=2, lineno=537)
2025-01-05 16:51:20,222 - DEBUG - stack ['$phi154.0', '$phi154.1']
2025-01-05 16:51:20,224 - DEBUG - dispatch pc=158, inst=LOAD_FAST(arg=6, lineno=537)
2025-01-05 16:51:20,225 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3']
2025-01-05 16:51:20,227 - DEBUG - dispatch pc=160, inst=DUP_TOP_TWO(arg=None, lineno=537)
2025-01-05 16:51:20,228 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4']
2025-01-05 16:51:20,230 - DEBUG - dispatch pc=162, inst=BINARY_SUBSCR(arg=None, lineno=537)
2025-01-05 16:51:20,231 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$160dup_top_two.5', '$160dup_top_two.6']
2025-01-05 16:51:20,233 - DEBUG - dispatch pc=164, inst=LOAD_FAST(arg=4, lineno=537)
2025-01-05 16:51:20,234 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7']
2025-01-05 16:51:20,236 - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=7, lineno=537)
2025-01-05 16:51:20,237 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$window164.8']
2025-01-05 16:51:20,239 - DEBUG - dispatch pc=168, inst=BINARY_SUBSCR(arg=None, lineno=537)
2025-01-05 16:51:20,240 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$window164.8', '$k166.9']
2025-01-05 16:51:20,242 - DEBUG - dispatch pc=170, inst=LOAD_FAST(arg=0, lineno=537)
2025-01-05 16:51:20,244 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10']
2025-01-05 16:51:20,245 - DEBUG - dispatch pc=172, inst=LOAD_FAST(arg=6, lineno=537)
2025-01-05 16:51:20,247 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10', '$onset_envelope170.11']
2025-01-05 16:51:20,249 - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=5, lineno=537)
2025-01-05 16:51:20,251 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10', '$onset_envelope170.11', '$i172.12']
2025-01-05 16:51:20,253 - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=5, lineno=537)
2025-01-05 16:51:20,255 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10', '$onset_envelope170.11', '$i172.12', '$K174.13']
2025-01-05 16:51:20,257 - DEBUG - dispatch pc=178, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=537)
2025-01-05 16:51:20,259 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10', '$onset_envelope170.11', '$i172.12', '$K174.13', '$const176.14']
2025-01-05 16:51:20,261 - DEBUG - dispatch pc=180, inst=BINARY_ADD(arg=None, lineno=537)
2025-01-05 16:51:20,263 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10', '$onset_envelope170.11', '$i172.12', '$178binary_floor_divide.15']
2025-01-05 16:51:20,265 - DEBUG - dispatch pc=182, inst=LOAD_FAST(arg=7, lineno=537)
2025-01-05 16:51:20,267 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10', '$onset_envelope170.11', '$180binary_add.16']
2025-01-05 16:51:20,269 - DEBUG - dispatch pc=184, inst=BINARY_SUBTRACT(arg=None, lineno=537)
2025-01-05 16:51:20,271 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10', '$onset_envelope170.11', '$180binary_add.16', '$k182.17']
2025-01-05 16:51:20,273 - DEBUG - dispatch pc=186, inst=BINARY_SUBSCR(arg=None, lineno=537)
2025-01-05 16:51:20,274 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10', '$onset_envelope170.11', '$184binary_subtract.18']
2025-01-05 16:51:20,277 - DEBUG - dispatch pc=188, inst=BINARY_MULTIPLY(arg=None, lineno=537)
2025-01-05 16:51:20,278 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10', '$186binary_subscr.19']
2025-01-05 16:51:20,281 - DEBUG - dispatch pc=190, inst=INPLACE_ADD(arg=None, lineno=537)
2025-01-05 16:51:20,282 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$188binary_multiply.20']
2025-01-05 16:51:20,284 - DEBUG - dispatch pc=192, inst=ROT_THREE(arg=None, lineno=537)
2025-01-05 16:51:20,285 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$190inplace_add.21']
2025-01-05 16:51:20,287 - DEBUG - dispatch pc=194, inst=STORE_SUBSCR(arg=None, lineno=537)
2025-01-05 16:51:20,288 - DEBUG - stack ['$phi154.0', '$phi154.1', '$190inplace_add.21', '$localscore156.3', '$i158.4']
2025-01-05 16:51:20,290 - DEBUG - dispatch pc=196, inst=JUMP_ABSOLUTE(arg=152, lineno=537)
2025-01-05 16:51:20,291 - DEBUG - stack ['$phi154.0', '$phi154.1']
2025-01-05 16:51:20,293 - DEBUG - end state. edges=[Edge(pc=152, stack=('$phi154.0', '$phi154.1'), blockstack=(), npush=0)]
2025-01-05 16:51:20,294 - DEBUG - pending: deque([State(pc_initial=362 nstack_initial=2), State(pc_initial=94 nstack_initial=1), State(pc_initial=152 nstack_initial=2)])
2025-01-05 16:51:20,296 - DEBUG - stack: ['$phi362.0', '$phi362.1']
2025-01-05 16:51:20,297 - DEBUG - state.pc_initial: State(pc_initial=362 nstack_initial=2)
2025-01-05 16:51:20,299 - DEBUG - dispatch pc=362, inst=FOR_ITER(arg=46, lineno=547)
2025-01-05 16:51:20,300 - DEBUG - stack ['$phi362.0', '$phi362.1']
2025-01-05 16:51:20,301 - DEBUG - end state. edges=[Edge(pc=410, stack=('$phi362.0',), blockstack=(), npush=0), Edge(pc=364, stack=('$phi362.0', '$phi362.1', '$362for_iter.3'), blockstack=(), npush=0)]
2025-01-05 16:51:20,303 - DEBUG - pending: deque([State(pc_initial=94 nstack_initial=1), State(pc_initial=152 nstack_initial=2), State(pc_initial=410 nstack_initial=1), State(pc_initial=364 nstack_initial=3)])
2025-01-05 16:51:20,305 - DEBUG - pending: deque([State(pc_initial=152 nstack_initial=2), State(pc_initial=410 nstack_initial=1), State(pc_initial=364 nstack_initial=3)])
2025-01-05 16:51:20,308 - DEBUG - pending: deque([State(pc_initial=410 nstack_initial=1), State(pc_initial=364 nstack_initial=3)])
2025-01-05 16:51:20,309 - DEBUG - stack: ['$phi410.0']
2025-01-05 16:51:20,310 - DEBUG - state.pc_initial: State(pc_initial=410 nstack_initial=1)
2025-01-05 16:51:20,312 - DEBUG - dispatch pc=410, inst=JUMP_ABSOLUTE(arg=232, lineno=548)
2025-01-05 16:51:20,314 - DEBUG - stack ['$phi410.0']
2025-01-05 16:51:20,315 - DEBUG - end state. edges=[Edge(pc=232, stack=('$phi410.0',), blockstack=(), npush=0)]
2025-01-05 16:51:20,316 - DEBUG - pending: deque([State(pc_initial=364 nstack_initial=3), State(pc_initial=232 nstack_initial=1)])
2025-01-05 16:51:20,318 - DEBUG - stack: ['$phi364.0', '$phi364.1', '$phi364.2']
2025-01-05 16:51:20,319 - DEBUG - state.pc_initial: State(pc_initial=364 nstack_initial=3)
2025-01-05 16:51:20,321 - DEBUG - dispatch pc=364, inst=STORE_FAST(arg=7, lineno=547)
2025-01-05 16:51:20,322 - DEBUG - stack ['$phi364.0', '$phi364.1', '$phi364.2']
2025-01-05 16:51:20,324 - DEBUG - dispatch pc=366, inst=LOAD_FAST(arg=2, lineno=548)
2025-01-05 16:51:20,325 - DEBUG - stack ['$phi364.0', '$phi364.1']
2025-01-05 16:51:20,326 - DEBUG - dispatch pc=368, inst=LOAD_FAST(arg=6, lineno=548)
2025-01-05 16:51:20,328 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3']
2025-01-05 16:51:20,329 - DEBUG - dispatch pc=370, inst=DUP_TOP_TWO(arg=None, lineno=548)
2025-01-05 16:51:20,331 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4']
2025-01-05 16:51:20,333 - DEBUG - dispatch pc=372, inst=BINARY_SUBSCR(arg=None, lineno=548)
2025-01-05 16:51:20,335 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$370dup_top_two.5', '$370dup_top_two.6']
2025-01-05 16:51:20,336 - DEBUG - dispatch pc=374, inst=LOAD_FAST(arg=4, lineno=548)
2025-01-05 16:51:20,338 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7']
2025-01-05 16:51:20,339 - DEBUG - dispatch pc=376, inst=LOAD_FAST(arg=7, lineno=548)
2025-01-05 16:51:20,341 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$window374.8']
2025-01-05 16:51:20,342 - DEBUG - dispatch pc=378, inst=BINARY_SUBSCR(arg=None, lineno=548)
2025-01-05 16:51:20,344 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$window374.8', '$k376.9']
2025-01-05 16:51:20,346 - DEBUG - dispatch pc=380, inst=LOAD_FAST(arg=0, lineno=548)
2025-01-05 16:51:20,347 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10']
2025-01-05 16:51:20,349 - DEBUG - dispatch pc=382, inst=LOAD_FAST(arg=6, lineno=548)
2025-01-05 16:51:20,350 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10', '$onset_envelope380.11']
2025-01-05 16:51:20,352 - DEBUG - dispatch pc=384, inst=LOAD_FAST(arg=5, lineno=548)
2025-01-05 16:51:20,354 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10', '$onset_envelope380.11', '$i382.12']
2025-01-05 16:51:20,356 - DEBUG - dispatch pc=386, inst=LOAD_CONST(arg=5, lineno=548)
2025-01-05 16:51:20,358 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10', '$onset_envelope380.11', '$i382.12', '$K384.13']
2025-01-05 16:51:20,360 - DEBUG - dispatch pc=388, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=548)
2025-01-05 16:51:20,362 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10', '$onset_envelope380.11', '$i382.12', '$K384.13', '$const386.14']
2025-01-05 16:51:20,364 - DEBUG - dispatch pc=390, inst=BINARY_ADD(arg=None, lineno=548)
2025-01-05 16:51:20,366 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10', '$onset_envelope380.11', '$i382.12', '$388binary_floor_divide.15']
2025-01-05 16:51:20,368 - DEBUG - dispatch pc=392, inst=LOAD_FAST(arg=7, lineno=548)
2025-01-05 16:51:20,369 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10', '$onset_envelope380.11', '$390binary_add.16']
2025-01-05 16:51:20,371 - DEBUG - dispatch pc=394, inst=BINARY_SUBTRACT(arg=None, lineno=548)
2025-01-05 16:51:20,373 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10', '$onset_envelope380.11', '$390binary_add.16', '$k392.17']
2025-01-05 16:51:20,375 - DEBUG - dispatch pc=396, inst=BINARY_SUBSCR(arg=None, lineno=548)
2025-01-05 16:51:20,377 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10', '$onset_envelope380.11', '$394binary_subtract.18']
2025-01-05 16:51:20,379 - DEBUG - dispatch pc=398, inst=BINARY_MULTIPLY(arg=None, lineno=548)
2025-01-05 16:51:20,381 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10', '$396binary_subscr.19']
2025-01-05 16:51:20,383 - DEBUG - dispatch pc=400, inst=INPLACE_ADD(arg=None, lineno=548)
2025-01-05 16:51:20,384 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$398binary_multiply.20']
2025-01-05 16:51:20,386 - DEBUG - dispatch pc=402, inst=ROT_THREE(arg=None, lineno=548)
2025-01-05 16:51:20,387 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$400inplace_add.21']
2025-01-05 16:51:20,389 - DEBUG - dispatch pc=404, inst=STORE_SUBSCR(arg=None, lineno=548)
2025-01-05 16:51:20,390 - DEBUG - stack ['$phi364.0', '$phi364.1', '$400inplace_add.21', '$localscore366.3', '$i368.4']
2025-01-05 16:51:20,392 - DEBUG - dispatch pc=406, inst=NOP(arg=1, lineno=548)
2025-01-05 16:51:20,393 - DEBUG - stack ['$phi364.0', '$phi364.1']
2025-01-05 16:51:20,394 - DEBUG - dispatch pc=408, inst=JUMP_ABSOLUTE(arg=362, lineno=548)
2025-01-05 16:51:20,395 - DEBUG - stack ['$phi364.0', '$phi364.1']
2025-01-05 16:51:20,396 - DEBUG - end state. edges=[Edge(pc=362, stack=('$phi364.0', '$phi364.1'), blockstack=(), npush=0)]
2025-01-05 16:51:20,398 - DEBUG - pending: deque([State(pc_initial=232 nstack_initial=1), State(pc_initial=362 nstack_initial=2)])
2025-01-05 16:51:20,400 - DEBUG - pending: deque([State(pc_initial=362 nstack_initial=2)])
2025-01-05 16:51:20,401 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:51:20,404 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=1): {'$phi94.0'},
             State(pc_initial=96 nstack_initial=2): {'$phi96.1'},
             State(pc_initial=152 nstack_initial=2): {'$phi152.1'},
             State(pc_initial=154 nstack_initial=3): {'$phi154.2'},
             State(pc_initial=198 nstack_initial=1): set(),
             State(pc_initial=200 nstack_initial=0): set(),
             State(pc_initial=202 nstack_initial=0): set(),
             State(pc_initial=220 nstack_initial=0): set(),
             State(pc_initial=232 nstack_initial=1): {'$phi232.0'},
             State(pc_initial=234 nstack_initial=2): {'$phi234.1'},
             State(pc_initial=362 nstack_initial=2): {'$phi362.1'},
             State(pc_initial=364 nstack_initial=3): {'$phi364.2'},
             State(pc_initial=410 nstack_initial=1): set(),
             State(pc_initial=412 nstack_initial=0): set()})
2025-01-05 16:51:20,415 - DEBUG - defmap: {'$phi152.1': State(pc_initial=96 nstack_initial=2),
 '$phi154.2': State(pc_initial=152 nstack_initial=2),
 '$phi232.0': State(pc_initial=220 nstack_initial=0),
 '$phi234.1': State(pc_initial=232 nstack_initial=1),
 '$phi362.1': State(pc_initial=234 nstack_initial=2),
 '$phi364.2': State(pc_initial=362 nstack_initial=2),
 '$phi94.0': State(pc_initial=22 nstack_initial=0),
 '$phi96.1': State(pc_initial=94 nstack_initial=1)}
2025-01-05 16:51:20,420 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$phi154.0',
                            State(pc_initial=154 nstack_initial=3)),
                           ('$phi96.0', State(pc_initial=96 nstack_initial=2))},
             '$phi152.1': {('$150get_iter.27',
                            State(pc_initial=96 nstack_initial=2)),
                           ('$phi154.1',
                            State(pc_initial=154 nstack_initial=3))},
             '$phi154.0': {('$phi152.0',
                            State(pc_initial=152 nstack_initial=2))},
             '$phi154.1': {('$phi152.1',
                            State(pc_initial=152 nstack_initial=2))},
             '$phi154.2': {('$152for_iter.3',
                            State(pc_initial=152 nstack_initial=2))},
             '$phi198.0': {('$phi152.0',
                            State(pc_initial=152 nstack_initial=2))},
             '$phi232.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0)),
                           ('$phi410.0',
                            State(pc_initial=410 nstack_initial=1))},
             '$phi234.0': {('$phi232.0',
                            State(pc_initial=232 nstack_initial=1))},
             '$phi234.1': {('$232for_iter.2',
                            State(pc_initial=232 nstack_initial=1))},
             '$phi362.0': {('$phi234.0',
                            State(pc_initial=234 nstack_initial=2)),
                           ('$phi364.0',
                            State(pc_initial=364 nstack_initial=3))},
             '$phi362.1': {('$360get_iter.61',
                            State(pc_initial=234 nstack_initial=2)),
                           ('$phi364.1',
                            State(pc_initial=364 nstack_initial=3))},
             '$phi364.0': {('$phi362.0',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi364.1': {('$phi362.1',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi364.2': {('$362for_iter.3',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi410.0': {('$phi362.0',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi94.0': {('$92get_iter.33',
                           State(pc_initial=22 nstack_initial=0)),
                          ('$phi198.0',
                           State(pc_initial=198 nstack_initial=1))},
             '$phi96.0': {('$phi94.0', State(pc_initial=94 nstack_initial=1))},
             '$phi96.1': {('$94for_iter.2',
                           State(pc_initial=94 nstack_initial=1))}})
2025-01-05 16:51:20,446 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$phi152.0',
                            State(pc_initial=152 nstack_initial=2)),
                           ('$phi94.0', State(pc_initial=94 nstack_initial=1))},
             '$phi152.1': {('$150get_iter.27',
                            State(pc_initial=96 nstack_initial=2)),
                           ('$phi152.1',
                            State(pc_initial=152 nstack_initial=2))},
             '$phi154.0': {('$phi94.0', State(pc_initial=94 nstack_initial=1))},
             '$phi154.1': {('$150get_iter.27',
                            State(pc_initial=96 nstack_initial=2))},
             '$phi154.2': {('$152for_iter.3',
                            State(pc_initial=152 nstack_initial=2))},
             '$phi198.0': {('$phi94.0', State(pc_initial=94 nstack_initial=1))},
             '$phi232.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0)),
                           ('$phi362.0',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi234.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0)),
                           ('$phi362.0',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi234.1': {('$232for_iter.2',
                            State(pc_initial=232 nstack_initial=1))},
             '$phi362.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0)),
                           ('$phi362.0',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi362.1': {('$360get_iter.61',
                            State(pc_initial=234 nstack_initial=2)),
                           ('$phi362.1',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi364.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi364.1': {('$360get_iter.61',
                            State(pc_initial=234 nstack_initial=2))},
             '$phi364.2': {('$362for_iter.3',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi410.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi94.0': {('$92get_iter.33',
                           State(pc_initial=22 nstack_initial=0)),
                          ('$phi94.0', State(pc_initial=94 nstack_initial=1))},
             '$phi96.0': {('$92get_iter.33',
                           State(pc_initial=22 nstack_initial=0))},
             '$phi96.1': {('$94for_iter.2',
                           State(pc_initial=94 nstack_initial=1))}})
2025-01-05 16:51:20,474 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$92get_iter.33',
                            State(pc_initial=22 nstack_initial=0))},
             '$phi152.1': {('$150get_iter.27',
                            State(pc_initial=96 nstack_initial=2))},
             '$phi154.0': {('$92get_iter.33',
                            State(pc_initial=22 nstack_initial=0))},
             '$phi154.1': {('$150get_iter.27',
                            State(pc_initial=96 nstack_initial=2))},
             '$phi154.2': {('$152for_iter.3',
                            State(pc_initial=152 nstack_initial=2))},
             '$phi198.0': {('$92get_iter.33',
                            State(pc_initial=22 nstack_initial=0))},
             '$phi232.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi234.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi234.1': {('$232for_iter.2',
                            State(pc_initial=232 nstack_initial=1))},
             '$phi362.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi362.1': {('$360get_iter.61',
                            State(pc_initial=234 nstack_initial=2))},
             '$phi364.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi364.1': {('$360get_iter.61',
                            State(pc_initial=234 nstack_initial=2))},
             '$phi364.2': {('$362for_iter.3',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi410.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi94.0': {('$92get_iter.33',
                           State(pc_initial=22 nstack_initial=0))},
             '$phi96.0': {('$92get_iter.33',
                           State(pc_initial=22 nstack_initial=0))},
             '$phi96.1': {('$94for_iter.2',
                           State(pc_initial=94 nstack_initial=1))}})
2025-01-05 16:51:20,496 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$92get_iter.33',
                            State(pc_initial=22 nstack_initial=0))},
             '$phi152.1': {('$150get_iter.27',
                            State(pc_initial=96 nstack_initial=2))},
             '$phi154.0': {('$92get_iter.33',
                            State(pc_initial=22 nstack_initial=0))},
             '$phi154.1': {('$150get_iter.27',
                            State(pc_initial=96 nstack_initial=2))},
             '$phi154.2': {('$152for_iter.3',
                            State(pc_initial=152 nstack_initial=2))},
             '$phi198.0': {('$92get_iter.33',
                            State(pc_initial=22 nstack_initial=0))},
             '$phi232.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi234.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi234.1': {('$232for_iter.2',
                            State(pc_initial=232 nstack_initial=1))},
             '$phi362.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi362.1': {('$360get_iter.61',
                            State(pc_initial=234 nstack_initial=2))},
             '$phi364.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi364.1': {('$360get_iter.61',
                            State(pc_initial=234 nstack_initial=2))},
             '$phi364.2': {('$362for_iter.3',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi410.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi94.0': {('$92get_iter.33',
                           State(pc_initial=22 nstack_initial=0))},
             '$phi96.0': {('$92get_iter.33',
                           State(pc_initial=22 nstack_initial=0))},
             '$phi96.1': {('$94for_iter.2',
                           State(pc_initial=94 nstack_initial=1))}})
2025-01-05 16:51:20,517 - DEBUG - keep phismap: {'$phi152.1': {('$150get_iter.27', State(pc_initial=96 nstack_initial=2))},
 '$phi154.2': {('$152for_iter.3', State(pc_initial=152 nstack_initial=2))},
 '$phi232.0': {('$230get_iter.5', State(pc_initial=220 nstack_initial=0))},
 '$phi234.1': {('$232for_iter.2', State(pc_initial=232 nstack_initial=1))},
 '$phi362.1': {('$360get_iter.61', State(pc_initial=234 nstack_initial=2))},
 '$phi364.2': {('$362for_iter.3', State(pc_initial=362 nstack_initial=2))},
 '$phi94.0': {('$92get_iter.33', State(pc_initial=22 nstack_initial=0))},
 '$phi96.1': {('$94for_iter.2', State(pc_initial=94 nstack_initial=1))}}
2025-01-05 16:51:20,523 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=22 nstack_initial=0): {'$phi94.0': '$92get_iter.33'},
             State(pc_initial=94 nstack_initial=1): {'$phi96.1': '$94for_iter.2'},
             State(pc_initial=96 nstack_initial=2): {'$phi152.1': '$150get_iter.27'},
             State(pc_initial=152 nstack_initial=2): {'$phi154.2': '$152for_iter.3'},
             State(pc_initial=220 nstack_initial=0): {'$phi232.0': '$230get_iter.5'},
             State(pc_initial=232 nstack_initial=1): {'$phi234.1': '$232for_iter.2'},
             State(pc_initial=234 nstack_initial=2): {'$phi362.1': '$360get_iter.61'},
             State(pc_initial=362 nstack_initial=2): {'$phi364.2': '$362for_iter.3'}})
2025-01-05 16:51:20,534 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:51:20,536 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$onset_envelope4.1'}), (6, {'func': '$2load_global.0', 'args': ['$onset_envelope4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$frames_per_beat12.4'}), (14, {'func': '$10load_global.3', 'args': ['$frames_per_beat12.4'], 'res': '$14call_function.5'}), (16, {'res': '$const16.6'}), (18, {'lhs': '$14call_function.5', 'rhs': '$const16.6', 'res': '$18compare_op.7'}), (20, {'pred': '$18compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 202: ()})
2025-01-05 16:51:20,542 - DEBUG - block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$22load_global.0'}), (24, {'item': '$22load_global.0', 'res': '$24load_method.1'}), (26, {'res': '$const26.2'}), (28, {'res': '$28load_global.3'}), (30, {'item': '$28load_global.3', 'res': '$30load_method.4'}), (32, {'res': '$frames_per_beat32.5'}), (34, {'res': '$const34.6'}), (36, {'index': '$const34.6', 'target': '$frames_per_beat32.5', 'res': '$36binary_subscr.7'}), (38, {'value': '$36binary_subscr.7', 'res': '$38unary_negative.8'}), (40, {'res': '$frames_per_beat40.9'}), (42, {'res': '$const42.10'}), (44, {'index': '$const42.10', 'target': '$frames_per_beat40.9', 'res': '$44binary_subscr.11'}), (46, {'res': '$const46.12'}), (48, {'lhs': '$44binary_subscr.11', 'rhs': '$const46.12', 'res': '$48binary_add.13'}), (50, {'func': '$30load_method.4', 'args': ['$38unary_negative.8', '$48binary_add.13'], 'res': '$50call_method.14'}), (52, {'res': '$const52.15'}), (54, {'lhs': '$50call_method.14', 'rhs': '$const52.15', 'res': '$54binary_multiply.16'}), (56, {'res': '$frames_per_beat56.17'}), (58, {'res': '$const58.18'}), (60, {'index': '$const58.18', 'target': '$frames_per_beat56.17', 'res': '$60binary_subscr.19'}), (62, {'lhs': '$54binary_multiply.16', 'rhs': '$60binary_subscr.19', 'res': '$62binary_true_divide.20'}), (64, {'res': '$const64.21'}), (66, {'lhs': '$62binary_true_divide.20', 'rhs': '$const64.21', 'res': '$66binary_power.22'}), (68, {'lhs': '$const26.2', 'rhs': '$66binary_power.22', 'res': '$68binary_multiply.23'}), (70, {'func': '$24load_method.1', 'args': ['$68binary_multiply.23'], 'res': '$70call_method.24'}), (72, {'value': '$70call_method.24'}), (74, {'res': '$74load_global.25'}), (76, {'res': '$window76.26'}), (78, {'func': '$74load_global.25', 'args': ['$window76.26'], 'res': '$78call_function.27'}), (80, {'value': '$78call_function.27'}), (82, {'res': '$82load_global.28'}), (84, {'res': '$84load_global.29'}), (86, {'res': '$onset_envelope86.30'}), (88, {'func': '$84load_global.29', 'args': ['$onset_envelope86.30'], 'res': '$88call_function.31'}), (90, {'func': '$82load_global.28', 'args': ['$88call_function.31'], 'res': '$90call_function.32'}), (92, {'value': '$90call_function.32', 'res': '$92get_iter.33'})), outgoing_phis={'$phi94.0': '$92get_iter.33'}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: ('$92get_iter.33',)})
2025-01-05 16:51:20,559 - DEBUG - block_infos State(pc_initial=94 nstack_initial=1):
AdaptBlockInfo(insts=((94, {'iterator': '$phi94.0', 'pair': '$94for_iter.1', 'indval': '$94for_iter.2', 'pred': '$94for_iter.3'}),), outgoing_phis={'$phi96.1': '$94for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={200: (), 96: ('$phi94.0', '$94for_iter.2')})
2025-01-05 16:51:20,564 - DEBUG - block_infos State(pc_initial=96 nstack_initial=2):
AdaptBlockInfo(insts=((96, {'value': '$phi96.1'}), (98, {'res': '$const98.2'}), (100, {'res': '$localscore100.3'}), (102, {'res': '$i102.4'}), (104, {'target': '$localscore100.3', 'index': '$i102.4', 'value': '$const98.2'}), (106, {'res': '$106load_global.5'}), (108, {'res': '$108load_global.6'}), (110, {'res': '$const110.7'}), (112, {'res': '$i112.8'}), (114, {'res': '$K114.9'}), (116, {'res': '$const116.10'}), (118, {'lhs': '$K114.9', 'rhs': '$const116.10', 'res': '$118binary_floor_divide.11'}), (120, {'lhs': '$i112.8', 'rhs': '$118binary_floor_divide.11', 'res': '$120binary_add.12'}), (122, {'res': '$N122.13'}), (124, {'lhs': '$120binary_add.12', 'rhs': '$N122.13', 'res': '$124binary_subtract.14'}), (126, {'res': '$const126.15'}), (128, {'lhs': '$124binary_subtract.14', 'rhs': '$const126.15', 'res': '$128binary_add.16'}), (130, {'func': '$108load_global.6', 'args': ['$const110.7', '$128binary_add.16'], 'res': '$130call_function.17'}), (132, {'res': '$132load_global.18'}), (134, {'res': '$i134.19'}), (136, {'res': '$K136.20'}), (138, {'res': '$const138.21'}), (140, {'lhs': '$K136.20', 'rhs': '$const138.21', 'res': '$140binary_floor_divide.22'}), (142, {'lhs': '$i134.19', 'rhs': '$140binary_floor_divide.22', 'res': '$142binary_add.23'}), (144, {'res': '$K144.24'}), (146, {'func': '$132load_global.18', 'args': ['$142binary_add.23', '$K144.24'], 'res': '$146call_function.25'}), (148, {'func': '$106load_global.5', 'args': ['$130call_function.17', '$146call_function.25'], 'res': '$148call_function.26'}), (150, {'value': '$148call_function.26', 'res': '$150get_iter.27'})), outgoing_phis={'$phi152.1': '$150get_iter.27'}, blockstack=(), active_try_block=None, outgoing_edgepushed={152: ('$phi96.0', '$150get_iter.27')})
2025-01-05 16:51:20,577 - DEBUG - block_infos State(pc_initial=152 nstack_initial=2):
AdaptBlockInfo(insts=((152, {'iterator': '$phi152.1', 'pair': '$152for_iter.2', 'indval': '$152for_iter.3', 'pred': '$152for_iter.4'}),), outgoing_phis={'$phi154.2': '$152for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={198: ('$phi152.0',), 154: ('$phi152.0', '$phi152.1', '$152for_iter.3')})
2025-01-05 16:51:20,581 - DEBUG - block_infos State(pc_initial=154 nstack_initial=3):
AdaptBlockInfo(insts=((154, {'value': '$phi154.2'}), (156, {'res': '$localscore156.3'}), (158, {'res': '$i158.4'}), (160, {'orig': ['$localscore156.3', '$i158.4'], 'duped': ['$160dup_top_two.5', '$160dup_top_two.6']}), (162, {'index': '$160dup_top_two.6', 'target': '$160dup_top_two.5', 'res': '$162binary_subscr.7'}), (164, {'res': '$window164.8'}), (166, {'res': '$k166.9'}), (168, {'index': '$k166.9', 'target': '$window164.8', 'res': '$168binary_subscr.10'}), (170, {'res': '$onset_envelope170.11'}), (172, {'res': '$i172.12'}), (174, {'res': '$K174.13'}), (176, {'res': '$const176.14'}), (178, {'lhs': '$K174.13', 'rhs': '$const176.14', 'res': '$178binary_floor_divide.15'}), (180, {'lhs': '$i172.12', 'rhs': '$178binary_floor_divide.15', 'res': '$180binary_add.16'}), (182, {'res': '$k182.17'}), (184, {'lhs': '$180binary_add.16', 'rhs': '$k182.17', 'res': '$184binary_subtract.18'}), (186, {'index': '$184binary_subtract.18', 'target': '$onset_envelope170.11', 'res': '$186binary_subscr.19'}), (188, {'lhs': '$168binary_subscr.10', 'rhs': '$186binary_subscr.19', 'res': '$188binary_multiply.20'}), (190, {'lhs': '$162binary_subscr.7', 'rhs': '$188binary_multiply.20', 'res': '$190inplace_add.21'}), (194, {'target': '$localscore156.3', 'index': '$i158.4', 'value': '$190inplace_add.21'}), (196, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={152: ('$phi154.0', '$phi154.1')})
2025-01-05 16:51:20,592 - DEBUG - block_infos State(pc_initial=198 nstack_initial=1):
AdaptBlockInfo(insts=((198, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: ('$phi198.0',)})
2025-01-05 16:51:20,595 - DEBUG - block_infos State(pc_initial=200 nstack_initial=0):
AdaptBlockInfo(insts=((200, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={412: ()})
2025-01-05 16:51:20,598 - DEBUG - block_infos State(pc_initial=202 nstack_initial=0):
AdaptBlockInfo(insts=((202, {'res': '$202load_global.0'}), (204, {'res': '$frames_per_beat204.1'}), (206, {'func': '$202load_global.0', 'args': ['$frames_per_beat204.1'], 'res': '$206call_function.2'}), (208, {'res': '$208load_global.3'}), (210, {'res': '$onset_envelope210.4'}), (212, {'func': '$208load_global.3', 'args': ['$onset_envelope210.4'], 'res': '$212call_function.5'}), (214, {'lhs': '$206call_function.2', 'rhs': '$212call_function.5', 'res': '$214compare_op.6'}), (216, {}), (218, {'pred': '$214compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={220: (), 412: ()})
2025-01-05 16:51:20,603 - DEBUG - block_infos State(pc_initial=220 nstack_initial=0):
AdaptBlockInfo(insts=((220, {'res': '$220load_global.0'}), (222, {'res': '$222load_global.1'}), (224, {'res': '$onset_envelope224.2'}), (226, {'func': '$222load_global.1', 'args': ['$onset_envelope224.2'], 'res': '$226call_function.3'}), (228, {'func': '$220load_global.0', 'args': ['$226call_function.3'], 'res': '$228call_function.4'}), (230, {'value': '$228call_function.4', 'res': '$230get_iter.5'})), outgoing_phis={'$phi232.0': '$230get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={232: ('$230get_iter.5',)})
2025-01-05 16:51:20,609 - DEBUG - block_infos State(pc_initial=232 nstack_initial=1):
AdaptBlockInfo(insts=((232, {'iterator': '$phi232.0', 'pair': '$232for_iter.1', 'indval': '$232for_iter.2', 'pred': '$232for_iter.3'}),), outgoing_phis={'$phi234.1': '$232for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={412: (), 234: ('$phi232.0', '$232for_iter.2')})
2025-01-05 16:51:20,612 - DEBUG - block_infos State(pc_initial=234 nstack_initial=2):
AdaptBlockInfo(insts=((234, {'value': '$phi234.1'}), (236, {'res': '$236load_global.2'}), (238, {'item': '$236load_global.2', 'res': '$238load_method.3'}), (240, {'res': '$const240.4'}), (242, {'res': '$242load_global.5'}), (244, {'item': '$242load_global.5', 'res': '$244load_method.6'}), (246, {'res': '$frames_per_beat246.7'}), (248, {'res': '$i248.8'}), (250, {'index': '$i248.8', 'target': '$frames_per_beat246.7', 'res': '$250binary_subscr.9'}), (252, {'value': '$250binary_subscr.9', 'res': '$252unary_negative.10'}), (254, {'res': '$frames_per_beat254.11'}), (256, {'res': '$i256.12'}), (258, {'index': '$i256.12', 'target': '$frames_per_beat254.11', 'res': '$258binary_subscr.13'}), (260, {'res': '$const260.14'}), (262, {'lhs': '$258binary_subscr.13', 'rhs': '$const260.14', 'res': '$262binary_add.15'}), (264, {'func': '$244load_method.6', 'args': ['$252unary_negative.10', '$262binary_add.15'], 'res': '$264call_method.16'}), (266, {'res': '$const266.17'}), (268, {'lhs': '$264call_method.16', 'rhs': '$const266.17', 'res': '$268binary_multiply.18'}), (270, {'res': '$frames_per_beat270.19'}), (272, {'res': '$i272.20'}), (274, {'index': '$i272.20', 'target': '$frames_per_beat270.19', 'res': '$274binary_subscr.21'}), (276, {'lhs': '$268binary_multiply.18', 'rhs': '$274binary_subscr.21', 'res': '$276binary_true_divide.22'}), (278, {'res': '$const278.23'}), (280, {'lhs': '$276binary_true_divide.22', 'rhs': '$const278.23', 'res': '$280binary_power.24'}), (282, {'lhs': '$const240.4', 'rhs': '$280binary_power.24', 'res': '$282binary_multiply.25'}), (284, {'func': '$238load_method.3', 'args': ['$282binary_multiply.25'], 'res': '$284call_method.26'}), (286, {'value': '$284call_method.26'}), (288, {'res': '$const288.27'}), (290, {'res': '$290load_global.28'}), (292, {'res': '$frames_per_beat292.29'}), (294, {'res': '$i294.30'}), (296, {'index': '$i294.30', 'target': '$frames_per_beat292.29', 'res': '$296binary_subscr.31'}), (298, {'func': '$290load_global.28', 'args': ['$296binary_subscr.31'], 'res': '$298call_function.32'}), (300, {'lhs': '$const288.27', 'rhs': '$298call_function.32', 'res': '$300binary_multiply.33'}), (302, {'res': '$const302.34'}), (304, {'lhs': '$300binary_multiply.33', 'rhs': '$const302.34', 'res': '$304binary_add.35'}), (306, {'value': '$304binary_add.35'}), (308, {'res': '$const308.36'}), (310, {'res': '$localscore310.37'}), (312, {'res': '$i312.38'}), (314, {'target': '$localscore310.37', 'index': '$i312.38', 'value': '$const308.36'}), (316, {'res': '$316load_global.39'}), (318, {'res': '$318load_global.40'}), (320, {'res': '$const320.41'}), (322, {'res': '$i322.42'}), (324, {'res': '$K324.43'}), (326, {'res': '$const326.44'}), (328, {'lhs': '$K324.43', 'rhs': '$const326.44', 'res': '$328binary_floor_divide.45'}), (330, {'lhs': '$i322.42', 'rhs': '$328binary_floor_divide.45', 'res': '$330binary_add.46'}), (332, {'res': '$N332.47'}), (334, {'lhs': '$330binary_add.46', 'rhs': '$N332.47', 'res': '$334binary_subtract.48'}), (336, {'res': '$const336.49'}), (338, {'lhs': '$334binary_subtract.48', 'rhs': '$const336.49', 'res': '$338binary_add.50'}), (340, {'func': '$318load_global.40', 'args': ['$const320.41', '$338binary_add.50'], 'res': '$340call_function.51'}), (342, {'res': '$342load_global.52'}), (344, {'res': '$i344.53'}), (346, {'res': '$K346.54'}), (348, {'res': '$const348.55'}), (350, {'lhs': '$K346.54', 'rhs': '$const348.55', 'res': '$350binary_floor_divide.56'}), (352, {'lhs': '$i344.53', 'rhs': '$350binary_floor_divide.56', 'res': '$352binary_add.57'}), (354, {'res': '$K354.58'}), (356, {'func': '$342load_global.52', 'args': ['$352binary_add.57', '$K354.58'], 'res': '$356call_function.59'}), (358, {'func': '$316load_global.39', 'args': ['$340call_function.51', '$356call_function.59'], 'res': '$358call_function.60'}), (360, {'value': '$358call_function.60', 'res': '$360get_iter.61'})), outgoing_phis={'$phi362.1': '$360get_iter.61'}, blockstack=(), active_try_block=None, outgoing_edgepushed={362: ('$phi234.0', '$360get_iter.61')})
2025-01-05 16:51:20,641 - DEBUG - block_infos State(pc_initial=362 nstack_initial=2):
AdaptBlockInfo(insts=((362, {'iterator': '$phi362.1', 'pair': '$362for_iter.2', 'indval': '$362for_iter.3', 'pred': '$362for_iter.4'}),), outgoing_phis={'$phi364.2': '$362for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={410: ('$phi362.0',), 364: ('$phi362.0', '$phi362.1', '$362for_iter.3')})
2025-01-05 16:51:20,645 - DEBUG - block_infos State(pc_initial=364 nstack_initial=3):
AdaptBlockInfo(insts=((364, {'value': '$phi364.2'}), (366, {'res': '$localscore366.3'}), (368, {'res': '$i368.4'}), (370, {'orig': ['$localscore366.3', '$i368.4'], 'duped': ['$370dup_top_two.5', '$370dup_top_two.6']}), (372, {'index': '$370dup_top_two.6', 'target': '$370dup_top_two.5', 'res': '$372binary_subscr.7'}), (374, {'res': '$window374.8'}), (376, {'res': '$k376.9'}), (378, {'index': '$k376.9', 'target': '$window374.8', 'res': '$378binary_subscr.10'}), (380, {'res': '$onset_envelope380.11'}), (382, {'res': '$i382.12'}), (384, {'res': '$K384.13'}), (386, {'res': '$const386.14'}), (388, {'lhs': '$K384.13', 'rhs': '$const386.14', 'res': '$388binary_floor_divide.15'}), (390, {'lhs': '$i382.12', 'rhs': '$388binary_floor_divide.15', 'res': '$390binary_add.16'}), (392, {'res': '$k392.17'}), (394, {'lhs': '$390binary_add.16', 'rhs': '$k392.17', 'res': '$394binary_subtract.18'}), (396, {'index': '$394binary_subtract.18', 'target': '$onset_envelope380.11', 'res': '$396binary_subscr.19'}), (398, {'lhs': '$378binary_subscr.10', 'rhs': '$396binary_subscr.19', 'res': '$398binary_multiply.20'}), (400, {'lhs': '$372binary_subscr.7', 'rhs': '$398binary_multiply.20', 'res': '$400inplace_add.21'}), (404, {'target': '$localscore366.3', 'index': '$i368.4', 'value': '$400inplace_add.21'}), (406, {}), (408, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={362: ('$phi364.0', '$phi364.1')})
2025-01-05 16:51:20,657 - DEBUG - block_infos State(pc_initial=410 nstack_initial=1):
AdaptBlockInfo(insts=((410, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={232: ('$phi410.0',)})
2025-01-05 16:51:20,660 - DEBUG - block_infos State(pc_initial=412 nstack_initial=0):
AdaptBlockInfo(insts=((412, {'res': '$const412.0'}), (414, {'retval': '$const412.0', 'castval': '$414return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:20,672 - DEBUG - label 0:
    onset_envelope = arg(0, name=onset_envelope) ['onset_envelope']
    frames_per_beat = arg(1, name=frames_per_beat) ['frames_per_beat']
    localscore = arg(2, name=localscore)     ['localscore']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'N', 'onset_envelope']
    $10load_global.3 = global(len: <built-in function len>) ['$10load_global.3']
    $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.3', '$14call_function.5', 'frames_per_beat']
    $const16.6 = const(int, 1)               ['$const16.6']
    $18compare_op.7 = $14call_function.5 == $const16.6 ['$14call_function.5', '$18compare_op.7', '$const16.6']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None) ['$18compare_op.7', '$20pred', 'bool20']
    branch $20pred, 22, 202                  ['$20pred']
label 22:
    $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$22load_global.0']
    $24load_method.1 = getattr(value=$22load_global.0, attr=exp) ['$22load_global.0', '$24load_method.1']
    $const26.2 = const(float, -0.5)          ['$const26.2']
    $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$28load_global.3']
    $30load_method.4 = getattr(value=$28load_global.3, attr=arange) ['$28load_global.3', '$30load_method.4']
    $const34.6 = const(int, 0)               ['$const34.6']
    $36binary_subscr.7 = getitem(value=frames_per_beat, index=$const34.6, fn=<built-in function getitem>) ['$36binary_subscr.7', '$const34.6', 'frames_per_beat']
    $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7) ['$36binary_subscr.7', '$38unary_negative.8']
    $const42.10 = const(int, 0)              ['$const42.10']
    $44binary_subscr.11 = getitem(value=frames_per_beat, index=$const42.10, fn=<built-in function getitem>) ['$44binary_subscr.11', '$const42.10', 'frames_per_beat']
    $const46.12 = const(int, 1)              ['$const46.12']
    $48binary_add.13 = $44binary_subscr.11 + $const46.12 ['$44binary_subscr.11', '$48binary_add.13', '$const46.12']
    $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_method.4', '$38unary_negative.8', '$48binary_add.13', '$50call_method.14']
    $const52.15 = const(float, 32.0)         ['$const52.15']
    $54binary_multiply.16 = $50call_method.14 * $const52.15 ['$50call_method.14', '$54binary_multiply.16', '$const52.15']
    $const58.18 = const(int, 0)              ['$const58.18']
    $60binary_subscr.19 = getitem(value=frames_per_beat, index=$const58.18, fn=<built-in function getitem>) ['$60binary_subscr.19', '$const58.18', 'frames_per_beat']
    $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19 ['$54binary_multiply.16', '$60binary_subscr.19', '$62binary_true_divide.20']
    $const64.21 = const(int, 2)              ['$const64.21']
    $66binary_power.22 = $62binary_true_divide.20 ** $const64.21 ['$62binary_true_divide.20', '$66binary_power.22', '$const64.21']
    $68binary_multiply.23 = $const26.2 * $66binary_power.22 ['$66binary_power.22', '$68binary_multiply.23', '$const26.2']
    window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None) ['$24load_method.1', '$68binary_multiply.23', 'window']
    $74load_global.25 = global(len: <built-in function len>) ['$74load_global.25']
    K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None) ['$74load_global.25', 'K', 'window']
    $82load_global.28 = global(range: <class 'range'>) ['$82load_global.28']
    $84load_global.29 = global(len: <built-in function len>) ['$84load_global.29']
    $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None) ['$84load_global.29', '$88call_function.31', 'onset_envelope']
    $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None) ['$82load_global.28', '$88call_function.31', '$90call_function.32']
    $92get_iter.33 = getiter(value=$90call_function.32) ['$90call_function.32', '$92get_iter.33']
    $phi94.0 = $92get_iter.33                ['$92get_iter.33', '$phi94.0']
    jump 94                                  []
label 94:
    $94for_iter.1 = iternext(value=$phi94.0) ['$94for_iter.1', '$phi94.0']
    $94for_iter.2 = pair_first(value=$94for_iter.1) ['$94for_iter.1', '$94for_iter.2']
    $94for_iter.3 = pair_second(value=$94for_iter.1) ['$94for_iter.1', '$94for_iter.3']
    $phi96.1 = $94for_iter.2                 ['$94for_iter.2', '$phi96.1']
    branch $94for_iter.3, 96, 200            ['$94for_iter.3']
label 96:
    i = $phi96.1                             ['$phi96.1', 'i']
    $const98.2 = const(float, 0.0)           ['$const98.2']
    localscore[i] = $const98.2               ['$const98.2', 'i', 'localscore']
    $106load_global.5 = global(range: <class 'range'>) ['$106load_global.5']
    $108load_global.6 = global(max: <built-in function max>) ['$108load_global.6']
    $const110.7 = const(int, 0)              ['$const110.7']
    $const116.10 = const(int, 2)             ['$const116.10']
    $118binary_floor_divide.11 = K // $const116.10 ['$118binary_floor_divide.11', '$const116.10', 'K']
    $120binary_add.12 = i + $118binary_floor_divide.11 ['$118binary_floor_divide.11', '$120binary_add.12', 'i']
    $124binary_subtract.14 = $120binary_add.12 - N ['$120binary_add.12', '$124binary_subtract.14', 'N']
    $const126.15 = const(int, 1)             ['$const126.15']
    $128binary_add.16 = $124binary_subtract.14 + $const126.15 ['$124binary_subtract.14', '$128binary_add.16', '$const126.15']
    $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None) ['$108load_global.6', '$128binary_add.16', '$130call_function.17', '$const110.7']
    $132load_global.18 = global(min: <built-in function min>) ['$132load_global.18']
    $const138.21 = const(int, 2)             ['$const138.21']
    $140binary_floor_divide.22 = K // $const138.21 ['$140binary_floor_divide.22', '$const138.21', 'K']
    $142binary_add.23 = i + $140binary_floor_divide.22 ['$140binary_floor_divide.22', '$142binary_add.23', 'i']
    $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None) ['$132load_global.18', '$142binary_add.23', '$146call_function.25', 'K']
    $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None) ['$106load_global.5', '$130call_function.17', '$146call_function.25', '$148call_function.26']
    $150get_iter.27 = getiter(value=$148call_function.26) ['$148call_function.26', '$150get_iter.27']
    $phi152.1 = $150get_iter.27              ['$150get_iter.27', '$phi152.1']
    jump 152                                 []
label 152:
    $152for_iter.2 = iternext(value=$phi152.1) ['$152for_iter.2', '$phi152.1']
    $152for_iter.3 = pair_first(value=$152for_iter.2) ['$152for_iter.2', '$152for_iter.3']
    $152for_iter.4 = pair_second(value=$152for_iter.2) ['$152for_iter.2', '$152for_iter.4']
    $phi154.2 = $152for_iter.3               ['$152for_iter.3', '$phi154.2']
    branch $152for_iter.4, 154, 198          ['$152for_iter.4']
label 154:
    k = $phi154.2                            ['$phi154.2', 'k']
    $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>) ['$162binary_subscr.7', 'i', 'localscore']
    $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>) ['$168binary_subscr.10', 'k', 'window']
    $const176.14 = const(int, 2)             ['$const176.14']
    $178binary_floor_divide.15 = K // $const176.14 ['$178binary_floor_divide.15', '$const176.14', 'K']
    $180binary_add.16 = i + $178binary_floor_divide.15 ['$178binary_floor_divide.15', '$180binary_add.16', 'i']
    $184binary_subtract.18 = $180binary_add.16 - k ['$180binary_add.16', '$184binary_subtract.18', 'k']
    $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>) ['$184binary_subtract.18', '$186binary_subscr.19', 'onset_envelope']
    $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19 ['$168binary_subscr.10', '$186binary_subscr.19', '$188binary_multiply.20']
    $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined) ['$162binary_subscr.7', '$188binary_multiply.20', '$190inplace_add.21']
    localscore[i] = $190inplace_add.21       ['$190inplace_add.21', 'i', 'localscore']
    jump 152                                 []
label 198:
    jump 94                                  []
label 200:
    jump 412                                 []
label 202:
    $202load_global.0 = global(len: <built-in function len>) ['$202load_global.0']
    $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None) ['$202load_global.0', '$206call_function.2', 'frames_per_beat']
    $208load_global.3 = global(len: <built-in function len>) ['$208load_global.3']
    $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None) ['$208load_global.3', '$212call_function.5', 'onset_envelope']
    $214compare_op.6 = $206call_function.2 == $212call_function.5 ['$206call_function.2', '$212call_function.5', '$214compare_op.6']
    bool218 = global(bool: <class 'bool'>)   ['bool218']
    $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None) ['$214compare_op.6', '$218pred', 'bool218']
    branch $218pred, 220, 412                ['$218pred']
label 220:
    $220load_global.0 = global(range: <class 'range'>) ['$220load_global.0']
    $222load_global.1 = global(len: <built-in function len>) ['$222load_global.1']
    $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None) ['$222load_global.1', '$226call_function.3', 'onset_envelope']
    $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None) ['$220load_global.0', '$226call_function.3', '$228call_function.4']
    $230get_iter.5 = getiter(value=$228call_function.4) ['$228call_function.4', '$230get_iter.5']
    $phi232.0 = $230get_iter.5               ['$230get_iter.5', '$phi232.0']
    jump 232                                 []
label 232:
    $232for_iter.1 = iternext(value=$phi232.0) ['$232for_iter.1', '$phi232.0']
    $232for_iter.2 = pair_first(value=$232for_iter.1) ['$232for_iter.1', '$232for_iter.2']
    $232for_iter.3 = pair_second(value=$232for_iter.1) ['$232for_iter.1', '$232for_iter.3']
    $phi234.1 = $232for_iter.2               ['$232for_iter.2', '$phi234.1']
    branch $232for_iter.3, 234, 412          ['$232for_iter.3']
label 234:
    i = $phi234.1                            ['$phi234.1', 'i']
    $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$236load_global.2']
    $238load_method.3 = getattr(value=$236load_global.2, attr=exp) ['$236load_global.2', '$238load_method.3']
    $const240.4 = const(float, -0.5)         ['$const240.4']
    $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$242load_global.5']
    $244load_method.6 = getattr(value=$242load_global.5, attr=arange) ['$242load_global.5', '$244load_method.6']
    $250binary_subscr.9 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>) ['$250binary_subscr.9', 'frames_per_beat', 'i']
    $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9) ['$250binary_subscr.9', '$252unary_negative.10']
    $258binary_subscr.13 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>) ['$258binary_subscr.13', 'frames_per_beat', 'i']
    $const260.14 = const(int, 1)             ['$const260.14']
    $262binary_add.15 = $258binary_subscr.13 + $const260.14 ['$258binary_subscr.13', '$262binary_add.15', '$const260.14']
    $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None) ['$244load_method.6', '$252unary_negative.10', '$262binary_add.15', '$264call_method.16']
    $const266.17 = const(float, 32.0)        ['$const266.17']
    $268binary_multiply.18 = $264call_method.16 * $const266.17 ['$264call_method.16', '$268binary_multiply.18', '$const266.17']
    $274binary_subscr.21 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>) ['$274binary_subscr.21', 'frames_per_beat', 'i']
    $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21 ['$268binary_multiply.18', '$274binary_subscr.21', '$276binary_true_divide.22']
    $const278.23 = const(int, 2)             ['$const278.23']
    $280binary_power.24 = $276binary_true_divide.22 ** $const278.23 ['$276binary_true_divide.22', '$280binary_power.24', '$const278.23']
    $282binary_multiply.25 = $const240.4 * $280binary_power.24 ['$280binary_power.24', '$282binary_multiply.25', '$const240.4']
    window = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None) ['$238load_method.3', '$282binary_multiply.25', 'window']
    $const288.27 = const(int, 2)             ['$const288.27']
    $290load_global.28 = global(int: <class 'int'>) ['$290load_global.28']
    $296binary_subscr.31 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>) ['$296binary_subscr.31', 'frames_per_beat', 'i']
    $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None) ['$290load_global.28', '$296binary_subscr.31', '$298call_function.32']
    $300binary_multiply.33 = $const288.27 * $298call_function.32 ['$298call_function.32', '$300binary_multiply.33', '$const288.27']
    $const302.34 = const(int, 1)             ['$const302.34']
    K = $300binary_multiply.33 + $const302.34 ['$300binary_multiply.33', '$const302.34', 'K']
    $const308.36 = const(float, 0.0)         ['$const308.36']
    localscore[i] = $const308.36             ['$const308.36', 'i', 'localscore']
    $316load_global.39 = global(range: <class 'range'>) ['$316load_global.39']
    $318load_global.40 = global(max: <built-in function max>) ['$318load_global.40']
    $const320.41 = const(int, 0)             ['$const320.41']
    $const326.44 = const(int, 2)             ['$const326.44']
    $328binary_floor_divide.45 = K // $const326.44 ['$328binary_floor_divide.45', '$const326.44', 'K']
    $330binary_add.46 = i + $328binary_floor_divide.45 ['$328binary_floor_divide.45', '$330binary_add.46', 'i']
    $334binary_subtract.48 = $330binary_add.46 - N ['$330binary_add.46', '$334binary_subtract.48', 'N']
    $const336.49 = const(int, 1)             ['$const336.49']
    $338binary_add.50 = $334binary_subtract.48 + $const336.49 ['$334binary_subtract.48', '$338binary_add.50', '$const336.49']
    $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None) ['$318load_global.40', '$338binary_add.50', '$340call_function.51', '$const320.41']
    $342load_global.52 = global(min: <built-in function min>) ['$342load_global.52']
    $const348.55 = const(int, 2)             ['$const348.55']
    $350binary_floor_divide.56 = K // $const348.55 ['$350binary_floor_divide.56', '$const348.55', 'K']
    $352binary_add.57 = i + $350binary_floor_divide.56 ['$350binary_floor_divide.56', '$352binary_add.57', 'i']
    $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None) ['$342load_global.52', '$352binary_add.57', '$356call_function.59', 'K']
    $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None) ['$316load_global.39', '$340call_function.51', '$356call_function.59', '$358call_function.60']
    $360get_iter.61 = getiter(value=$358call_function.60) ['$358call_function.60', '$360get_iter.61']
    $phi362.1 = $360get_iter.61              ['$360get_iter.61', '$phi362.1']
    jump 362                                 []
label 362:
    $362for_iter.2 = iternext(value=$phi362.1) ['$362for_iter.2', '$phi362.1']
    $362for_iter.3 = pair_first(value=$362for_iter.2) ['$362for_iter.2', '$362for_iter.3']
    $362for_iter.4 = pair_second(value=$362for_iter.2) ['$362for_iter.2', '$362for_iter.4']
    $phi364.2 = $362for_iter.3               ['$362for_iter.3', '$phi364.2']
    branch $362for_iter.4, 364, 410          ['$362for_iter.4']
label 364:
    k = $phi364.2                            ['$phi364.2', 'k']
    $372binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>) ['$372binary_subscr.7', 'i', 'localscore']
    $378binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>) ['$378binary_subscr.10', 'k', 'window']
    $const386.14 = const(int, 2)             ['$const386.14']
    $388binary_floor_divide.15 = K // $const386.14 ['$388binary_floor_divide.15', '$const386.14', 'K']
    $390binary_add.16 = i + $388binary_floor_divide.15 ['$388binary_floor_divide.15', '$390binary_add.16', 'i']
    $394binary_subtract.18 = $390binary_add.16 - k ['$390binary_add.16', '$394binary_subtract.18', 'k']
    $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>) ['$394binary_subtract.18', '$396binary_subscr.19', 'onset_envelope']
    $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19 ['$378binary_subscr.10', '$396binary_subscr.19', '$398binary_multiply.20']
    $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined) ['$372binary_subscr.7', '$398binary_multiply.20', '$400inplace_add.21']
    localscore[i] = $400inplace_add.21       ['$400inplace_add.21', 'i', 'localscore']
    jump 362                                 []
label 410:
    jump 232                                 []
label 412:
    $const412.0 = const(NoneType, None)      ['$const412.0']
    $414return_value.1 = cast(value=$const412.0) ['$414return_value.1', '$const412.0']
    return $414return_value.1                ['$414return_value.1']

2025-01-05 16:51:21,018 - DEBUG - ==== SSA block analysis pass on 0
2025-01-05 16:51:21,019 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000182A7670>
2025-01-05 16:51:21,020 - DEBUG - on stmt: onset_envelope = arg(0, name=onset_envelope)
2025-01-05 16:51:21,022 - DEBUG - on stmt: frames_per_beat = arg(1, name=frames_per_beat)
2025-01-05 16:51:21,024 - DEBUG - on stmt: localscore = arg(2, name=localscore)
2025-01-05 16:51:21,025 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:21,026 - DEBUG - on stmt: N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,028 - DEBUG - on stmt: $10load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:21,030 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,032 - DEBUG - on stmt: $const16.6 = const(int, 1)
2025-01-05 16:51:21,033 - DEBUG - on stmt: $18compare_op.7 = $14call_function.5 == $const16.6
2025-01-05 16:51:21,035 - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-01-05 16:51:21,036 - DEBUG - on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,038 - DEBUG - on stmt: branch $20pred, 22, 202
2025-01-05 16:51:21,039 - DEBUG - ==== SSA block analysis pass on 22
2025-01-05 16:51:21,040 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000182A7670>
2025-01-05 16:51:21,041 - DEBUG - on stmt: $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:21,043 - DEBUG - on stmt: $24load_method.1 = getattr(value=$22load_global.0, attr=exp)
2025-01-05 16:51:21,045 - DEBUG - on stmt: $const26.2 = const(float, -0.5)
2025-01-05 16:51:21,046 - DEBUG - on stmt: $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:21,048 - DEBUG - on stmt: $30load_method.4 = getattr(value=$28load_global.3, attr=arange)
2025-01-05 16:51:21,050 - DEBUG - on stmt: $const34.6 = const(int, 0)
2025-01-05 16:51:21,051 - DEBUG - on stmt: $36binary_subscr.7 = static_getitem(value=frames_per_beat, index=0, index_var=$const34.6, fn=<built-in function getitem>)
2025-01-05 16:51:21,052 - DEBUG - on stmt: $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7)
2025-01-05 16:51:21,054 - DEBUG - on stmt: $const42.10 = const(int, 0)
2025-01-05 16:51:21,055 - DEBUG - on stmt: $44binary_subscr.11 = static_getitem(value=frames_per_beat, index=0, index_var=$const42.10, fn=<built-in function getitem>)
2025-01-05 16:51:21,057 - DEBUG - on stmt: $const46.12 = const(int, 1)
2025-01-05 16:51:21,058 - DEBUG - on stmt: $48binary_add.13 = $44binary_subscr.11 + $const46.12
2025-01-05 16:51:21,060 - DEBUG - on stmt: $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,062 - DEBUG - on stmt: $const52.15 = const(float, 32.0)
2025-01-05 16:51:21,064 - DEBUG - on stmt: $54binary_multiply.16 = $50call_method.14 * $const52.15
2025-01-05 16:51:21,065 - DEBUG - on stmt: $const58.18 = const(int, 0)
2025-01-05 16:51:21,066 - DEBUG - on stmt: $60binary_subscr.19 = static_getitem(value=frames_per_beat, index=0, index_var=$const58.18, fn=<built-in function getitem>)
2025-01-05 16:51:21,068 - DEBUG - on stmt: $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19
2025-01-05 16:51:21,069 - DEBUG - on stmt: $const64.21 = const(int, 2)
2025-01-05 16:51:21,071 - DEBUG - on stmt: $66binary_power.22 = $62binary_true_divide.20 ** $const64.21
2025-01-05 16:51:21,072 - DEBUG - on stmt: $68binary_multiply.23 = $const26.2 * $66binary_power.22
2025-01-05 16:51:21,073 - DEBUG - on stmt: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,076 - DEBUG - on stmt: $74load_global.25 = global(len: <built-in function len>)
2025-01-05 16:51:21,077 - DEBUG - on stmt: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,079 - DEBUG - on stmt: $82load_global.28 = global(range: <class 'range'>)
2025-01-05 16:51:21,081 - DEBUG - on stmt: $84load_global.29 = global(len: <built-in function len>)
2025-01-05 16:51:21,082 - DEBUG - on stmt: $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,085 - DEBUG - on stmt: $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,087 - DEBUG - on stmt: $92get_iter.33 = getiter(value=$90call_function.32)
2025-01-05 16:51:21,089 - DEBUG - on stmt: $phi94.0 = $92get_iter.33
2025-01-05 16:51:21,090 - DEBUG - on stmt: jump 94
2025-01-05 16:51:21,091 - DEBUG - ==== SSA block analysis pass on 94
2025-01-05 16:51:21,092 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000182A7670>
2025-01-05 16:51:21,093 - DEBUG - on stmt: $94for_iter.1 = iternext(value=$phi94.0)
2025-01-05 16:51:21,095 - DEBUG - on stmt: $94for_iter.2 = pair_first(value=$94for_iter.1)
2025-01-05 16:51:21,097 - DEBUG - on stmt: $94for_iter.3 = pair_second(value=$94for_iter.1)
2025-01-05 16:51:21,099 - DEBUG - on stmt: $phi96.1 = $94for_iter.2
2025-01-05 16:51:21,100 - DEBUG - on stmt: branch $94for_iter.3, 96, 200
2025-01-05 16:51:21,101 - DEBUG - ==== SSA block analysis pass on 96
2025-01-05 16:51:21,102 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000182A7670>
2025-01-05 16:51:21,103 - DEBUG - on stmt: i = $phi96.1
2025-01-05 16:51:21,104 - DEBUG - on stmt: $const98.2 = const(float, 0.0)
2025-01-05 16:51:21,105 - DEBUG - on stmt: localscore[i] = $const98.2
2025-01-05 16:51:21,106 - DEBUG - on stmt: $106load_global.5 = global(range: <class 'range'>)
2025-01-05 16:51:21,108 - DEBUG - on stmt: $108load_global.6 = global(max: <built-in function max>)
2025-01-05 16:51:21,109 - DEBUG - on stmt: $const110.7 = const(int, 0)
2025-01-05 16:51:21,110 - DEBUG - on stmt: $const116.10 = const(int, 2)
2025-01-05 16:51:21,111 - DEBUG - on stmt: $118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:21,113 - DEBUG - on stmt: $120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:21,115 - DEBUG - on stmt: $124binary_subtract.14 = $120binary_add.12 - N
2025-01-05 16:51:21,116 - DEBUG - on stmt: $const126.15 = const(int, 1)
2025-01-05 16:51:21,117 - DEBUG - on stmt: $128binary_add.16 = $124binary_subtract.14 + $const126.15
2025-01-05 16:51:21,119 - DEBUG - on stmt: $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,121 - DEBUG - on stmt: $132load_global.18 = global(min: <built-in function min>)
2025-01-05 16:51:21,123 - DEBUG - on stmt: $const138.21 = const(int, 2)
2025-01-05 16:51:21,124 - DEBUG - on stmt: $140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:21,125 - DEBUG - on stmt: $142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:21,127 - DEBUG - on stmt: $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,129 - DEBUG - on stmt: $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,132 - DEBUG - on stmt: $150get_iter.27 = getiter(value=$148call_function.26)
2025-01-05 16:51:21,133 - DEBUG - on stmt: $phi152.1 = $150get_iter.27
2025-01-05 16:51:21,134 - DEBUG - on stmt: jump 152
2025-01-05 16:51:21,135 - DEBUG - ==== SSA block analysis pass on 152
2025-01-05 16:51:21,136 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000182A7670>
2025-01-05 16:51:21,138 - DEBUG - on stmt: $152for_iter.2 = iternext(value=$phi152.1)
2025-01-05 16:51:21,139 - DEBUG - on stmt: $152for_iter.3 = pair_first(value=$152for_iter.2)
2025-01-05 16:51:21,140 - DEBUG - on stmt: $152for_iter.4 = pair_second(value=$152for_iter.2)
2025-01-05 16:51:21,142 - DEBUG - on stmt: $phi154.2 = $152for_iter.3
2025-01-05 16:51:21,143 - DEBUG - on stmt: branch $152for_iter.4, 154, 198
2025-01-05 16:51:21,144 - DEBUG - ==== SSA block analysis pass on 154
2025-01-05 16:51:21,145 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000182A7670>
2025-01-05 16:51:21,146 - DEBUG - on stmt: k = $phi154.2
2025-01-05 16:51:21,148 - DEBUG - on stmt: $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:21,149 - DEBUG - on stmt: $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:21,150 - DEBUG - on stmt: $const176.14 = const(int, 2)
2025-01-05 16:51:21,152 - DEBUG - on stmt: $178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:21,153 - DEBUG - on stmt: $180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:21,155 - DEBUG - on stmt: $184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:21,156 - DEBUG - on stmt: $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:21,158 - DEBUG - on stmt: $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19
2025-01-05 16:51:21,159 - DEBUG - on stmt: $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:21,162 - DEBUG - on stmt: localscore[i] = $190inplace_add.21
2025-01-05 16:51:21,164 - DEBUG - on stmt: jump 152
2025-01-05 16:51:21,165 - DEBUG - ==== SSA block analysis pass on 198
2025-01-05 16:51:21,166 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000182A7670>
2025-01-05 16:51:21,168 - DEBUG - on stmt: jump 94
2025-01-05 16:51:21,169 - DEBUG - ==== SSA block analysis pass on 200
2025-01-05 16:51:21,170 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000182A7670>
2025-01-05 16:51:21,171 - DEBUG - on stmt: jump 412
2025-01-05 16:51:21,172 - DEBUG - ==== SSA block analysis pass on 202
2025-01-05 16:51:21,173 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000182A7670>
2025-01-05 16:51:21,174 - DEBUG - on stmt: $202load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:21,176 - DEBUG - on stmt: $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,178 - DEBUG - on stmt: $208load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:21,179 - DEBUG - on stmt: $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,182 - DEBUG - on stmt: $214compare_op.6 = $206call_function.2 == $212call_function.5
2025-01-05 16:51:21,184 - DEBUG - on stmt: bool218 = global(bool: <class 'bool'>)
2025-01-05 16:51:21,185 - DEBUG - on stmt: $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,187 - DEBUG - on stmt: branch $218pred, 220, 412
2025-01-05 16:51:21,189 - DEBUG - ==== SSA block analysis pass on 220
2025-01-05 16:51:21,190 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000182A7670>
2025-01-05 16:51:21,191 - DEBUG - on stmt: $220load_global.0 = global(range: <class 'range'>)
2025-01-05 16:51:21,192 - DEBUG - on stmt: $222load_global.1 = global(len: <built-in function len>)
2025-01-05 16:51:21,194 - DEBUG - on stmt: $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,196 - DEBUG - on stmt: $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,199 - DEBUG - on stmt: $230get_iter.5 = getiter(value=$228call_function.4)
2025-01-05 16:51:21,200 - DEBUG - on stmt: $phi232.0 = $230get_iter.5
2025-01-05 16:51:21,201 - DEBUG - on stmt: jump 232
2025-01-05 16:51:21,202 - DEBUG - ==== SSA block analysis pass on 232
2025-01-05 16:51:21,203 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000182A7670>
2025-01-05 16:51:21,205 - DEBUG - on stmt: $232for_iter.1 = iternext(value=$phi232.0)
2025-01-05 16:51:21,206 - DEBUG - on stmt: $232for_iter.2 = pair_first(value=$232for_iter.1)
2025-01-05 16:51:21,208 - DEBUG - on stmt: $232for_iter.3 = pair_second(value=$232for_iter.1)
2025-01-05 16:51:21,209 - DEBUG - on stmt: $phi234.1 = $232for_iter.2
2025-01-05 16:51:21,210 - DEBUG - on stmt: branch $232for_iter.3, 234, 412
2025-01-05 16:51:21,211 - DEBUG - ==== SSA block analysis pass on 234
2025-01-05 16:51:21,212 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000182A7670>
2025-01-05 16:51:21,214 - DEBUG - on stmt: i = $phi234.1
2025-01-05 16:51:21,215 - DEBUG - on stmt: $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:21,217 - DEBUG - on stmt: $238load_method.3 = getattr(value=$236load_global.2, attr=exp)
2025-01-05 16:51:21,219 - DEBUG - on stmt: $const240.4 = const(float, -0.5)
2025-01-05 16:51:21,220 - DEBUG - on stmt: $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:21,222 - DEBUG - on stmt: $244load_method.6 = getattr(value=$242load_global.5, attr=arange)
2025-01-05 16:51:21,223 - DEBUG - on stmt: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:21,225 - DEBUG - on stmt: $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9)
2025-01-05 16:51:21,226 - DEBUG - on stmt: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:21,228 - DEBUG - on stmt: $const260.14 = const(int, 1)
2025-01-05 16:51:21,229 - DEBUG - on stmt: $262binary_add.15 = $258binary_subscr.13 + $const260.14
2025-01-05 16:51:21,231 - DEBUG - on stmt: $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,233 - DEBUG - on stmt: $const266.17 = const(float, 32.0)
2025-01-05 16:51:21,234 - DEBUG - on stmt: $268binary_multiply.18 = $264call_method.16 * $const266.17
2025-01-05 16:51:21,236 - DEBUG - on stmt: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:21,238 - DEBUG - on stmt: $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21
2025-01-05 16:51:21,240 - DEBUG - on stmt: $const278.23 = const(int, 2)
2025-01-05 16:51:21,241 - DEBUG - on stmt: $280binary_power.24 = $276binary_true_divide.22 ** $const278.23
2025-01-05 16:51:21,242 - DEBUG - on stmt: $282binary_multiply.25 = $const240.4 * $280binary_power.24
2025-01-05 16:51:21,244 - DEBUG - on stmt: window = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,247 - DEBUG - on stmt: $const288.27 = const(int, 2)
2025-01-05 16:51:21,248 - DEBUG - on stmt: $290load_global.28 = global(int: <class 'int'>)
2025-01-05 16:51:21,250 - DEBUG - on stmt: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:21,251 - DEBUG - on stmt: $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,254 - DEBUG - on stmt: $300binary_multiply.33 = $const288.27 * $298call_function.32
2025-01-05 16:51:21,255 - DEBUG - on stmt: $const302.34 = const(int, 1)
2025-01-05 16:51:21,256 - DEBUG - on stmt: K = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:21,258 - DEBUG - on stmt: $const308.36 = const(float, 0.0)
2025-01-05 16:51:21,259 - DEBUG - on stmt: localscore[i] = $const308.36
2025-01-05 16:51:21,260 - DEBUG - on stmt: $316load_global.39 = global(range: <class 'range'>)
2025-01-05 16:51:21,261 - DEBUG - on stmt: $318load_global.40 = global(max: <built-in function max>)
2025-01-05 16:51:21,263 - DEBUG - on stmt: $const320.41 = const(int, 0)
2025-01-05 16:51:21,264 - DEBUG - on stmt: $const326.44 = const(int, 2)
2025-01-05 16:51:21,265 - DEBUG - on stmt: $328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:21,266 - DEBUG - on stmt: $330binary_add.46 = i + $328binary_floor_divide.45
2025-01-05 16:51:21,268 - DEBUG - on stmt: $334binary_subtract.48 = $330binary_add.46 - N
2025-01-05 16:51:21,269 - DEBUG - on stmt: $const336.49 = const(int, 1)
2025-01-05 16:51:21,270 - DEBUG - on stmt: $338binary_add.50 = $334binary_subtract.48 + $const336.49
2025-01-05 16:51:21,272 - DEBUG - on stmt: $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,275 - DEBUG - on stmt: $342load_global.52 = global(min: <built-in function min>)
2025-01-05 16:51:21,276 - DEBUG - on stmt: $const348.55 = const(int, 2)
2025-01-05 16:51:21,278 - DEBUG - on stmt: $350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:21,279 - DEBUG - on stmt: $352binary_add.57 = i + $350binary_floor_divide.56
2025-01-05 16:51:21,281 - DEBUG - on stmt: $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,284 - DEBUG - on stmt: $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,287 - DEBUG - on stmt: $360get_iter.61 = getiter(value=$358call_function.60)
2025-01-05 16:51:21,289 - DEBUG - on stmt: $phi362.1 = $360get_iter.61
2025-01-05 16:51:21,290 - DEBUG - on stmt: jump 362
2025-01-05 16:51:21,291 - DEBUG - ==== SSA block analysis pass on 362
2025-01-05 16:51:21,292 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000182A7670>
2025-01-05 16:51:21,293 - DEBUG - on stmt: $362for_iter.2 = iternext(value=$phi362.1)
2025-01-05 16:51:21,295 - DEBUG - on stmt: $362for_iter.3 = pair_first(value=$362for_iter.2)
2025-01-05 16:51:21,296 - DEBUG - on stmt: $362for_iter.4 = pair_second(value=$362for_iter.2)
2025-01-05 16:51:21,298 - DEBUG - on stmt: $phi364.2 = $362for_iter.3
2025-01-05 16:51:21,299 - DEBUG - on stmt: branch $362for_iter.4, 364, 410
2025-01-05 16:51:21,300 - DEBUG - ==== SSA block analysis pass on 364
2025-01-05 16:51:21,301 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000182A7670>
2025-01-05 16:51:21,302 - DEBUG - on stmt: k = $phi364.2
2025-01-05 16:51:21,304 - DEBUG - on stmt: $372binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:21,305 - DEBUG - on stmt: $378binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:21,307 - DEBUG - on stmt: $const386.14 = const(int, 2)
2025-01-05 16:51:21,308 - DEBUG - on stmt: $388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:21,309 - DEBUG - on stmt: $390binary_add.16 = i + $388binary_floor_divide.15
2025-01-05 16:51:21,311 - DEBUG - on stmt: $394binary_subtract.18 = $390binary_add.16 - k
2025-01-05 16:51:21,312 - DEBUG - on stmt: $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:21,314 - DEBUG - on stmt: $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19
2025-01-05 16:51:21,317 - DEBUG - on stmt: $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:21,320 - DEBUG - on stmt: localscore[i] = $400inplace_add.21
2025-01-05 16:51:21,321 - DEBUG - on stmt: jump 362
2025-01-05 16:51:21,322 - DEBUG - ==== SSA block analysis pass on 410
2025-01-05 16:51:21,323 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000182A7670>
2025-01-05 16:51:21,324 - DEBUG - on stmt: jump 232
2025-01-05 16:51:21,325 - DEBUG - ==== SSA block analysis pass on 412
2025-01-05 16:51:21,326 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000182A7670>
2025-01-05 16:51:21,327 - DEBUG - on stmt: $const412.0 = const(NoneType, None)
2025-01-05 16:51:21,328 - DEBUG - on stmt: $414return_value.1 = cast(value=$const412.0)
2025-01-05 16:51:21,330 - DEBUG - on stmt: return $414return_value.1
2025-01-05 16:51:21,335 - DEBUG - defs defaultdict(<class 'list'>,
            {'$106load_global.5': [<numba.core.ir.Assign object at 0x0000000014681E50>],
             '$108load_global.6': [<numba.core.ir.Assign object at 0x0000000014681FD0>],
             '$10load_global.3': [<numba.core.ir.Assign object at 0x00000000146545B0>],
             '$118binary_floor_divide.11': [<numba.core.ir.Assign object at 0x00000000146866D0>],
             '$120binary_add.12': [<numba.core.ir.Assign object at 0x0000000014686850>],
             '$124binary_subtract.14': [<numba.core.ir.Assign object at 0x0000000018303220>],
             '$128binary_add.16': [<numba.core.ir.Assign object at 0x0000000018303F10>],
             '$130call_function.17': [<numba.core.ir.Assign object at 0x0000000018303F70>],
             '$132load_global.18': [<numba.core.ir.Assign object at 0x0000000018303B50>],
             '$140binary_floor_divide.22': [<numba.core.ir.Assign object at 0x00000000183031F0>],
             '$142binary_add.23': [<numba.core.ir.Assign object at 0x00000000183039A0>],
             '$146call_function.25': [<numba.core.ir.Assign object at 0x000000001831CE50>],
             '$148call_function.26': [<numba.core.ir.Assign object at 0x000000001831C8E0>],
             '$14call_function.5': [<numba.core.ir.Assign object at 0x0000000014654880>],
             '$150get_iter.27': [<numba.core.ir.Assign object at 0x000000001831CD90>],
             '$152for_iter.2': [<numba.core.ir.Assign object at 0x000000001831CC10>],
             '$152for_iter.3': [<numba.core.ir.Assign object at 0x000000001831C970>],
             '$152for_iter.4': [<numba.core.ir.Assign object at 0x000000001831C220>],
             '$162binary_subscr.7': [<numba.core.ir.Assign object at 0x000000001832CE50>],
             '$168binary_subscr.10': [<numba.core.ir.Assign object at 0x000000001832CC10>],
             '$178binary_floor_divide.15': [<numba.core.ir.Assign object at 0x000000001832C760>],
             '$180binary_add.16': [<numba.core.ir.Assign object at 0x000000001832C580>],
             '$184binary_subtract.18': [<numba.core.ir.Assign object at 0x00000000183009D0>],
             '$186binary_subscr.19': [<numba.core.ir.Assign object at 0x00000000183009A0>],
             '$188binary_multiply.20': [<numba.core.ir.Assign object at 0x0000000018300E50>],
             '$18compare_op.7': [<numba.core.ir.Assign object at 0x0000000014654B50>],
             '$190inplace_add.21': [<numba.core.ir.Assign object at 0x0000000018300850>],
             '$202load_global.0': [<numba.core.ir.Assign object at 0x00000000183002E0>],
             '$206call_function.2': [<numba.core.ir.Assign object at 0x0000000018300E80>],
             '$208load_global.3': [<numba.core.ir.Assign object at 0x0000000018300070>],
             '$20pred': [<numba.core.ir.Assign object at 0x0000000014654DF0>],
             '$212call_function.5': [<numba.core.ir.Assign object at 0x0000000018317FA0>],
             '$214compare_op.6': [<numba.core.ir.Assign object at 0x0000000018317D90>],
             '$218pred': [<numba.core.ir.Assign object at 0x0000000018317880>],
             '$220load_global.0': [<numba.core.ir.Assign object at 0x00000000183176A0>],
             '$222load_global.1': [<numba.core.ir.Assign object at 0x00000000183170D0>],
             '$226call_function.3': [<numba.core.ir.Assign object at 0x0000000018317A30>],
             '$228call_function.4': [<numba.core.ir.Assign object at 0x0000000018317B80>],
             '$22load_global.0': [<numba.core.ir.Assign object at 0x0000000014654F70>],
             '$230get_iter.5': [<numba.core.ir.Assign object at 0x0000000018317520>],
             '$232for_iter.1': [<numba.core.ir.Assign object at 0x00000000145FDCA0>],
             '$232for_iter.2': [<numba.core.ir.Assign object at 0x0000000018296580>],
             '$232for_iter.3': [<numba.core.ir.Assign object at 0x0000000018296F10>],
             '$236load_global.2': [<numba.core.ir.Assign object at 0x0000000018296550>],
             '$238load_method.3': [<numba.core.ir.Assign object at 0x0000000018296820>],
             '$242load_global.5': [<numba.core.ir.Assign object at 0x0000000018296CD0>],
             '$244load_method.6': [<numba.core.ir.Assign object at 0x0000000018296FD0>],
             '$24load_method.1': [<numba.core.ir.Assign object at 0x000000001467B130>],
             '$250binary_subscr.9': [<numba.core.ir.Assign object at 0x0000000018296F40>],
             '$252unary_negative.10': [<numba.core.ir.Assign object at 0x00000000182F5FD0>],
             '$258binary_subscr.13': [<numba.core.ir.Assign object at 0x00000000182F5BE0>],
             '$262binary_add.15': [<numba.core.ir.Assign object at 0x00000000182F57C0>],
             '$264call_method.16': [<numba.core.ir.Assign object at 0x00000000182F5670>],
             '$268binary_multiply.18': [<numba.core.ir.Assign object at 0x00000000182F5400>],
             '$274binary_subscr.21': [<numba.core.ir.Assign object at 0x000000001724DF10>],
             '$276binary_true_divide.22': [<numba.core.ir.Assign object at 0x000000001724DD60>],
             '$280binary_power.24': [<numba.core.ir.Assign object at 0x000000001724DFD0>],
             '$282binary_multiply.25': [<numba.core.ir.Assign object at 0x000000001828BD00>],
             '$28load_global.3': [<numba.core.ir.Assign object at 0x000000001467B430>],
             '$290load_global.28': [<numba.core.ir.Assign object at 0x000000001828B610>],
             '$296binary_subscr.31': [<numba.core.ir.Assign object at 0x000000001828B0A0>],
             '$298call_function.32': [<numba.core.ir.Assign object at 0x000000001828B1C0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000000014654070>],
             '$300binary_multiply.33': [<numba.core.ir.Assign object at 0x000000001828BC70>],
             '$30load_method.4': [<numba.core.ir.Assign object at 0x000000001467B5B0>],
             '$316load_global.39': [<numba.core.ir.Assign object at 0x0000000018274760>],
             '$318load_global.40': [<numba.core.ir.Assign object at 0x0000000018274250>],
             '$328binary_floor_divide.45': [<numba.core.ir.Assign object at 0x0000000018290B20>],
             '$330binary_add.46': [<numba.core.ir.Assign object at 0x0000000018290F70>],
             '$334binary_subtract.48': [<numba.core.ir.Assign object at 0x0000000018290040>],
             '$338binary_add.50': [<numba.core.ir.Assign object at 0x0000000018290910>],
             '$340call_function.51': [<numba.core.ir.Assign object at 0x0000000018290700>],
             '$342load_global.52': [<numba.core.ir.Assign object at 0x0000000018290E20>],
             '$350binary_floor_divide.56': [<numba.core.ir.Assign object at 0x00000000182E2EB0>],
             '$352binary_add.57': [<numba.core.ir.Assign object at 0x00000000182E2D90>],
             '$356call_function.59': [<numba.core.ir.Assign object at 0x000000001829C070>],
             '$358call_function.60': [<numba.core.ir.Assign object at 0x000000001829CC70>],
             '$360get_iter.61': [<numba.core.ir.Assign object at 0x000000001829CE50>],
             '$362for_iter.2': [<numba.core.ir.Assign object at 0x000000001828B400>],
             '$362for_iter.3': [<numba.core.ir.Assign object at 0x0000000018274310>],
             '$362for_iter.4': [<numba.core.ir.Assign object at 0x0000000018274AC0>],
             '$36binary_subscr.7': [<numba.core.ir.Assign object at 0x0000000017256580>],
             '$372binary_subscr.7': [<numba.core.ir.Assign object at 0x000000001829C490>],
             '$378binary_subscr.10': [<numba.core.ir.Assign object at 0x000000001829C3D0>],
             '$388binary_floor_divide.15': [<numba.core.ir.Assign object at 0x0000000018270A60>],
             '$38unary_negative.8': [<numba.core.ir.Assign object at 0x000000001467BB50>],
             '$390binary_add.16': [<numba.core.ir.Assign object at 0x0000000018270280>],
             '$394binary_subtract.18': [<numba.core.ir.Assign object at 0x0000000018270F70>],
             '$396binary_subscr.19': [<numba.core.ir.Assign object at 0x0000000018270490>],
             '$398binary_multiply.20': [<numba.core.ir.Assign object at 0x0000000018270C40>],
             '$400inplace_add.21': [<numba.core.ir.Assign object at 0x0000000018270E80>],
             '$414return_value.1': [<numba.core.ir.Assign object at 0x000000001828CDC0>],
             '$44binary_subscr.11': [<numba.core.ir.Assign object at 0x0000000017256520>],
             '$48binary_add.13': [<numba.core.ir.Assign object at 0x000000001467C2B0>],
             '$50call_method.14': [<numba.core.ir.Assign object at 0x000000001467C460>],
             '$54binary_multiply.16': [<numba.core.ir.Assign object at 0x000000001467C730>],
             '$60binary_subscr.19': [<numba.core.ir.Assign object at 0x0000000017256640>],
             '$62binary_true_divide.20': [<numba.core.ir.Assign object at 0x000000001467CCD0>],
             '$66binary_power.22': [<numba.core.ir.Assign object at 0x000000001467CFD0>],
             '$68binary_multiply.23': [<numba.core.ir.Assign object at 0x000000001467E190>],
             '$74load_global.25': [<numba.core.ir.Assign object at 0x000000001467E5B0>],
             '$82load_global.28': [<numba.core.ir.Assign object at 0x000000001467EAF0>],
             '$84load_global.29': [<numba.core.ir.Assign object at 0x000000001467EC70>],
             '$88call_function.31': [<numba.core.ir.Assign object at 0x000000001467EF40>],
             '$90call_function.32': [<numba.core.ir.Assign object at 0x0000000014681100>],
             '$92get_iter.33': [<numba.core.ir.Assign object at 0x0000000014681250>],
             '$94for_iter.1': [<numba.core.ir.Assign object at 0x0000000014681370>],
             '$94for_iter.2': [<numba.core.ir.Assign object at 0x0000000014681490>],
             '$94for_iter.3': [<numba.core.ir.Assign object at 0x00000000146815B0>],
             '$const110.7': [<numba.core.ir.Assign object at 0x0000000014686190>],
             '$const116.10': [<numba.core.ir.Assign object at 0x0000000014686550>],
             '$const126.15': [<numba.core.ir.Assign object at 0x0000000018303E20>],
             '$const138.21': [<numba.core.ir.Assign object at 0x0000000018303EB0>],
             '$const16.6': [<numba.core.ir.Assign object at 0x00000000146549D0>],
             '$const176.14': [<numba.core.ir.Assign object at 0x000000001832C970>],
             '$const240.4': [<numba.core.ir.Assign object at 0x0000000018296B20>],
             '$const26.2': [<numba.core.ir.Assign object at 0x000000001467B2B0>],
             '$const260.14': [<numba.core.ir.Assign object at 0x00000000182F5AF0>],
             '$const266.17': [<numba.core.ir.Assign object at 0x00000000182F5490>],
             '$const278.23': [<numba.core.ir.Assign object at 0x000000001724D6A0>],
             '$const288.27': [<numba.core.ir.Assign object at 0x000000001828B820>],
             '$const302.34': [<numba.core.ir.Assign object at 0x000000001828BDF0>],
             '$const308.36': [<numba.core.ir.Assign object at 0x0000000018274370>],
             '$const320.41': [<numba.core.ir.Assign object at 0x00000000182746D0>],
             '$const326.44': [<numba.core.ir.Assign object at 0x0000000018274940>],
             '$const336.49': [<numba.core.ir.Assign object at 0x00000000182901F0>],
             '$const34.6': [<numba.core.ir.Assign object at 0x000000001467B850>],
             '$const348.55': [<numba.core.ir.Assign object at 0x0000000018290FD0>],
             '$const386.14': [<numba.core.ir.Assign object at 0x0000000018270BE0>],
             '$const412.0': [<numba.core.ir.Assign object at 0x0000000018270700>],
             '$const42.10': [<numba.core.ir.Assign object at 0x000000001467BDF0>],
             '$const46.12': [<numba.core.ir.Assign object at 0x000000001467C130>],
             '$const52.15': [<numba.core.ir.Assign object at 0x000000001467C5B0>],
             '$const58.18': [<numba.core.ir.Assign object at 0x000000001467C9D0>],
             '$const64.21': [<numba.core.ir.Assign object at 0x000000001467CE50>],
             '$const98.2': [<numba.core.ir.Assign object at 0x00000000146819D0>],
             '$phi152.1': [<numba.core.ir.Assign object at 0x0000000014681C10>],
             '$phi154.2': [<numba.core.ir.Assign object at 0x000000001831CBB0>],
             '$phi232.0': [<numba.core.ir.Assign object at 0x0000000018317040>],
             '$phi234.1': [<numba.core.ir.Assign object at 0x0000000014587190>],
             '$phi362.1': [<numba.core.ir.Assign object at 0x0000000018296E80>],
             '$phi364.2': [<numba.core.ir.Assign object at 0x000000001828BBB0>],
             '$phi94.0': [<numba.core.ir.Assign object at 0x000000001467BC70>],
             '$phi96.1': [<numba.core.ir.Assign object at 0x0000000014656850>],
             'K': [<numba.core.ir.Assign object at 0x000000001467E880>,
                   <numba.core.ir.Assign object at 0x0000000018274610>],
             'N': [<numba.core.ir.Assign object at 0x0000000014654340>],
             'bool20': [<numba.core.ir.Assign object at 0x0000000014654CD0>],
             'bool218': [<numba.core.ir.Assign object at 0x00000000183179D0>],
             'frames_per_beat': [<numba.core.ir.Assign object at 0x0000000014656670>],
             'i': [<numba.core.ir.Assign object at 0x0000000014681850>,
                   <numba.core.ir.Assign object at 0x0000000018296BB0>],
             'k': [<numba.core.ir.Assign object at 0x000000001831C100>,
                   <numba.core.ir.Assign object at 0x000000001829CD00>],
             'localscore': [<numba.core.ir.Assign object at 0x0000000014656430>],
             'onset_envelope': [<numba.core.ir.Assign object at 0x00000000146567F0>],
             'window': [<numba.core.ir.Assign object at 0x000000001467E340>,
                        <numba.core.ir.Assign object at 0x000000001828B940>]})
2025-01-05 16:51:21,493 - DEBUG - SSA violators {'k', 'i', 'window', 'K'}
2025-01-05 16:51:21,494 - DEBUG - Fix SSA violator on var k
2025-01-05 16:51:21,495 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:21,496 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146467C0>
2025-01-05 16:51:21,498 - DEBUG - on stmt: onset_envelope = arg(0, name=onset_envelope)
2025-01-05 16:51:21,499 - DEBUG - on stmt: frames_per_beat = arg(1, name=frames_per_beat)
2025-01-05 16:51:21,501 - DEBUG - on stmt: localscore = arg(2, name=localscore)
2025-01-05 16:51:21,502 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:21,503 - DEBUG - on stmt: N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,505 - DEBUG - on stmt: $10load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:21,507 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,509 - DEBUG - on stmt: $const16.6 = const(int, 1)
2025-01-05 16:51:21,510 - DEBUG - on stmt: $18compare_op.7 = $14call_function.5 == $const16.6
2025-01-05 16:51:21,512 - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-01-05 16:51:21,513 - DEBUG - on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,516 - DEBUG - on stmt: branch $20pred, 22, 202
2025-01-05 16:51:21,517 - DEBUG - ==== SSA block rewrite pass on 22
2025-01-05 16:51:21,518 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146467C0>
2025-01-05 16:51:21,519 - DEBUG - on stmt: $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:21,521 - DEBUG - on stmt: $24load_method.1 = getattr(value=$22load_global.0, attr=exp)
2025-01-05 16:51:21,523 - DEBUG - on stmt: $const26.2 = const(float, -0.5)
2025-01-05 16:51:21,524 - DEBUG - on stmt: $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:21,526 - DEBUG - on stmt: $30load_method.4 = getattr(value=$28load_global.3, attr=arange)
2025-01-05 16:51:21,527 - DEBUG - on stmt: $const34.6 = const(int, 0)
2025-01-05 16:51:21,528 - DEBUG - on stmt: $36binary_subscr.7 = static_getitem(value=frames_per_beat, index=0, index_var=$const34.6, fn=<built-in function getitem>)
2025-01-05 16:51:21,531 - DEBUG - on stmt: $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7)
2025-01-05 16:51:21,533 - DEBUG - on stmt: $const42.10 = const(int, 0)
2025-01-05 16:51:21,534 - DEBUG - on stmt: $44binary_subscr.11 = static_getitem(value=frames_per_beat, index=0, index_var=$const42.10, fn=<built-in function getitem>)
2025-01-05 16:51:21,535 - DEBUG - on stmt: $const46.12 = const(int, 1)
2025-01-05 16:51:21,537 - DEBUG - on stmt: $48binary_add.13 = $44binary_subscr.11 + $const46.12
2025-01-05 16:51:21,538 - DEBUG - on stmt: $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,541 - DEBUG - on stmt: $const52.15 = const(float, 32.0)
2025-01-05 16:51:21,542 - DEBUG - on stmt: $54binary_multiply.16 = $50call_method.14 * $const52.15
2025-01-05 16:51:21,544 - DEBUG - on stmt: $const58.18 = const(int, 0)
2025-01-05 16:51:21,545 - DEBUG - on stmt: $60binary_subscr.19 = static_getitem(value=frames_per_beat, index=0, index_var=$const58.18, fn=<built-in function getitem>)
2025-01-05 16:51:21,548 - DEBUG - on stmt: $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19
2025-01-05 16:51:21,549 - DEBUG - on stmt: $const64.21 = const(int, 2)
2025-01-05 16:51:21,550 - DEBUG - on stmt: $66binary_power.22 = $62binary_true_divide.20 ** $const64.21
2025-01-05 16:51:21,552 - DEBUG - on stmt: $68binary_multiply.23 = $const26.2 * $66binary_power.22
2025-01-05 16:51:21,554 - DEBUG - on stmt: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,556 - DEBUG - on stmt: $74load_global.25 = global(len: <built-in function len>)
2025-01-05 16:51:21,557 - DEBUG - on stmt: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,560 - DEBUG - on stmt: $82load_global.28 = global(range: <class 'range'>)
2025-01-05 16:51:21,561 - DEBUG - on stmt: $84load_global.29 = global(len: <built-in function len>)
2025-01-05 16:51:21,563 - DEBUG - on stmt: $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,565 - DEBUG - on stmt: $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,567 - DEBUG - on stmt: $92get_iter.33 = getiter(value=$90call_function.32)
2025-01-05 16:51:21,569 - DEBUG - on stmt: $phi94.0 = $92get_iter.33
2025-01-05 16:51:21,570 - DEBUG - on stmt: jump 94
2025-01-05 16:51:21,571 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:21,572 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146467C0>
2025-01-05 16:51:21,573 - DEBUG - on stmt: $94for_iter.1 = iternext(value=$phi94.0)
2025-01-05 16:51:21,575 - DEBUG - on stmt: $94for_iter.2 = pair_first(value=$94for_iter.1)
2025-01-05 16:51:21,576 - DEBUG - on stmt: $94for_iter.3 = pair_second(value=$94for_iter.1)
2025-01-05 16:51:21,578 - DEBUG - on stmt: $phi96.1 = $94for_iter.2
2025-01-05 16:51:21,579 - DEBUG - on stmt: branch $94for_iter.3, 96, 200
2025-01-05 16:51:21,580 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:21,581 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146467C0>
2025-01-05 16:51:21,583 - DEBUG - on stmt: i = $phi96.1
2025-01-05 16:51:21,584 - DEBUG - on stmt: $const98.2 = const(float, 0.0)
2025-01-05 16:51:21,585 - DEBUG - on stmt: localscore[i] = $const98.2
2025-01-05 16:51:21,585 - DEBUG - on stmt: $106load_global.5 = global(range: <class 'range'>)
2025-01-05 16:51:21,587 - DEBUG - on stmt: $108load_global.6 = global(max: <built-in function max>)
2025-01-05 16:51:21,588 - DEBUG - on stmt: $const110.7 = const(int, 0)
2025-01-05 16:51:21,590 - DEBUG - on stmt: $const116.10 = const(int, 2)
2025-01-05 16:51:21,590 - DEBUG - on stmt: $118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:21,592 - DEBUG - on stmt: $120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:21,594 - DEBUG - on stmt: $124binary_subtract.14 = $120binary_add.12 - N
2025-01-05 16:51:21,595 - DEBUG - on stmt: $const126.15 = const(int, 1)
2025-01-05 16:51:21,596 - DEBUG - on stmt: $128binary_add.16 = $124binary_subtract.14 + $const126.15
2025-01-05 16:51:21,598 - DEBUG - on stmt: $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,600 - DEBUG - on stmt: $132load_global.18 = global(min: <built-in function min>)
2025-01-05 16:51:21,602 - DEBUG - on stmt: $const138.21 = const(int, 2)
2025-01-05 16:51:21,603 - DEBUG - on stmt: $140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:21,605 - DEBUG - on stmt: $142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:21,606 - DEBUG - on stmt: $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,609 - DEBUG - on stmt: $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,612 - DEBUG - on stmt: $150get_iter.27 = getiter(value=$148call_function.26)
2025-01-05 16:51:21,614 - DEBUG - on stmt: $phi152.1 = $150get_iter.27
2025-01-05 16:51:21,615 - DEBUG - on stmt: jump 152
2025-01-05 16:51:21,616 - DEBUG - ==== SSA block rewrite pass on 152
2025-01-05 16:51:21,617 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146467C0>
2025-01-05 16:51:21,618 - DEBUG - on stmt: $152for_iter.2 = iternext(value=$phi152.1)
2025-01-05 16:51:21,620 - DEBUG - on stmt: $152for_iter.3 = pair_first(value=$152for_iter.2)
2025-01-05 16:51:21,622 - DEBUG - on stmt: $152for_iter.4 = pair_second(value=$152for_iter.2)
2025-01-05 16:51:21,623 - DEBUG - on stmt: $phi154.2 = $152for_iter.3
2025-01-05 16:51:21,624 - DEBUG - on stmt: branch $152for_iter.4, 154, 198
2025-01-05 16:51:21,625 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:21,626 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146467C0>
2025-01-05 16:51:21,628 - DEBUG - on stmt: k = $phi154.2
2025-01-05 16:51:21,629 - DEBUG - first assign: k
2025-01-05 16:51:21,630 - DEBUG - replaced with: k = $phi154.2
2025-01-05 16:51:21,631 - DEBUG - on stmt: $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:21,632 - DEBUG - on stmt: $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:21,634 - DEBUG - on stmt: $const176.14 = const(int, 2)
2025-01-05 16:51:21,635 - DEBUG - on stmt: $178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:21,636 - DEBUG - on stmt: $180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:21,638 - DEBUG - on stmt: $184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:21,639 - DEBUG - on stmt: $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:21,641 - DEBUG - on stmt: $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19
2025-01-05 16:51:21,643 - DEBUG - on stmt: $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:21,645 - DEBUG - on stmt: localscore[i] = $190inplace_add.21
2025-01-05 16:51:21,646 - DEBUG - on stmt: jump 152
2025-01-05 16:51:21,647 - DEBUG - ==== SSA block rewrite pass on 198
2025-01-05 16:51:21,648 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146467C0>
2025-01-05 16:51:21,650 - DEBUG - on stmt: jump 94
2025-01-05 16:51:21,651 - DEBUG - ==== SSA block rewrite pass on 200
2025-01-05 16:51:21,652 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146467C0>
2025-01-05 16:51:21,653 - DEBUG - on stmt: jump 412
2025-01-05 16:51:21,654 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-05 16:51:21,655 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146467C0>
2025-01-05 16:51:21,657 - DEBUG - on stmt: $202load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:21,658 - DEBUG - on stmt: $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,660 - DEBUG - on stmt: $208load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:21,662 - DEBUG - on stmt: $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,664 - DEBUG - on stmt: $214compare_op.6 = $206call_function.2 == $212call_function.5
2025-01-05 16:51:21,666 - DEBUG - on stmt: bool218 = global(bool: <class 'bool'>)
2025-01-05 16:51:21,668 - DEBUG - on stmt: $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,670 - DEBUG - on stmt: branch $218pred, 220, 412
2025-01-05 16:51:21,671 - DEBUG - ==== SSA block rewrite pass on 220
2025-01-05 16:51:21,672 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146467C0>
2025-01-05 16:51:21,673 - DEBUG - on stmt: $220load_global.0 = global(range: <class 'range'>)
2025-01-05 16:51:21,675 - DEBUG - on stmt: $222load_global.1 = global(len: <built-in function len>)
2025-01-05 16:51:21,676 - DEBUG - on stmt: $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,678 - DEBUG - on stmt: $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,681 - DEBUG - on stmt: $230get_iter.5 = getiter(value=$228call_function.4)
2025-01-05 16:51:21,682 - DEBUG - on stmt: $phi232.0 = $230get_iter.5
2025-01-05 16:51:21,684 - DEBUG - on stmt: jump 232
2025-01-05 16:51:21,685 - DEBUG - ==== SSA block rewrite pass on 232
2025-01-05 16:51:21,685 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146467C0>
2025-01-05 16:51:21,687 - DEBUG - on stmt: $232for_iter.1 = iternext(value=$phi232.0)
2025-01-05 16:51:21,688 - DEBUG - on stmt: $232for_iter.2 = pair_first(value=$232for_iter.1)
2025-01-05 16:51:21,690 - DEBUG - on stmt: $232for_iter.3 = pair_second(value=$232for_iter.1)
2025-01-05 16:51:21,691 - DEBUG - on stmt: $phi234.1 = $232for_iter.2
2025-01-05 16:51:21,693 - DEBUG - on stmt: branch $232for_iter.3, 234, 412
2025-01-05 16:51:21,693 - DEBUG - ==== SSA block rewrite pass on 234
2025-01-05 16:51:21,695 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146467C0>
2025-01-05 16:51:21,696 - DEBUG - on stmt: i = $phi234.1
2025-01-05 16:51:21,698 - DEBUG - on stmt: $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:21,700 - DEBUG - on stmt: $238load_method.3 = getattr(value=$236load_global.2, attr=exp)
2025-01-05 16:51:21,702 - DEBUG - on stmt: $const240.4 = const(float, -0.5)
2025-01-05 16:51:21,703 - DEBUG - on stmt: $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:21,705 - DEBUG - on stmt: $244load_method.6 = getattr(value=$242load_global.5, attr=arange)
2025-01-05 16:51:21,706 - DEBUG - on stmt: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:21,708 - DEBUG - on stmt: $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9)
2025-01-05 16:51:21,710 - DEBUG - on stmt: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:21,711 - DEBUG - on stmt: $const260.14 = const(int, 1)
2025-01-05 16:51:21,712 - DEBUG - on stmt: $262binary_add.15 = $258binary_subscr.13 + $const260.14
2025-01-05 16:51:21,714 - DEBUG - on stmt: $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,717 - DEBUG - on stmt: $const266.17 = const(float, 32.0)
2025-01-05 16:51:21,718 - DEBUG - on stmt: $268binary_multiply.18 = $264call_method.16 * $const266.17
2025-01-05 16:51:21,720 - DEBUG - on stmt: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:21,721 - DEBUG - on stmt: $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21
2025-01-05 16:51:21,723 - DEBUG - on stmt: $const278.23 = const(int, 2)
2025-01-05 16:51:21,724 - DEBUG - on stmt: $280binary_power.24 = $276binary_true_divide.22 ** $const278.23
2025-01-05 16:51:21,725 - DEBUG - on stmt: $282binary_multiply.25 = $const240.4 * $280binary_power.24
2025-01-05 16:51:21,727 - DEBUG - on stmt: window = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,729 - DEBUG - on stmt: $const288.27 = const(int, 2)
2025-01-05 16:51:21,730 - DEBUG - on stmt: $290load_global.28 = global(int: <class 'int'>)
2025-01-05 16:51:21,732 - DEBUG - on stmt: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:21,733 - DEBUG - on stmt: $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,735 - DEBUG - on stmt: $300binary_multiply.33 = $const288.27 * $298call_function.32
2025-01-05 16:51:21,737 - DEBUG - on stmt: $const302.34 = const(int, 1)
2025-01-05 16:51:21,738 - DEBUG - on stmt: K = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:21,740 - DEBUG - on stmt: $const308.36 = const(float, 0.0)
2025-01-05 16:51:21,741 - DEBUG - on stmt: localscore[i] = $const308.36
2025-01-05 16:51:21,742 - DEBUG - on stmt: $316load_global.39 = global(range: <class 'range'>)
2025-01-05 16:51:21,743 - DEBUG - on stmt: $318load_global.40 = global(max: <built-in function max>)
2025-01-05 16:51:21,744 - DEBUG - on stmt: $const320.41 = const(int, 0)
2025-01-05 16:51:21,746 - DEBUG - on stmt: $const326.44 = const(int, 2)
2025-01-05 16:51:21,747 - DEBUG - on stmt: $328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:21,748 - DEBUG - on stmt: $330binary_add.46 = i + $328binary_floor_divide.45
2025-01-05 16:51:21,750 - DEBUG - on stmt: $334binary_subtract.48 = $330binary_add.46 - N
2025-01-05 16:51:21,751 - DEBUG - on stmt: $const336.49 = const(int, 1)
2025-01-05 16:51:21,752 - DEBUG - on stmt: $338binary_add.50 = $334binary_subtract.48 + $const336.49
2025-01-05 16:51:21,754 - DEBUG - on stmt: $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,756 - DEBUG - on stmt: $342load_global.52 = global(min: <built-in function min>)
2025-01-05 16:51:21,758 - DEBUG - on stmt: $const348.55 = const(int, 2)
2025-01-05 16:51:21,759 - DEBUG - on stmt: $350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:21,761 - DEBUG - on stmt: $352binary_add.57 = i + $350binary_floor_divide.56
2025-01-05 16:51:21,762 - DEBUG - on stmt: $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,765 - DEBUG - on stmt: $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,768 - DEBUG - on stmt: $360get_iter.61 = getiter(value=$358call_function.60)
2025-01-05 16:51:21,770 - DEBUG - on stmt: $phi362.1 = $360get_iter.61
2025-01-05 16:51:21,771 - DEBUG - on stmt: jump 362
2025-01-05 16:51:21,772 - DEBUG - ==== SSA block rewrite pass on 362
2025-01-05 16:51:21,773 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146467C0>
2025-01-05 16:51:21,775 - DEBUG - on stmt: $362for_iter.2 = iternext(value=$phi362.1)
2025-01-05 16:51:21,777 - DEBUG - on stmt: $362for_iter.3 = pair_first(value=$362for_iter.2)
2025-01-05 16:51:21,778 - DEBUG - on stmt: $362for_iter.4 = pair_second(value=$362for_iter.2)
2025-01-05 16:51:21,780 - DEBUG - on stmt: $phi364.2 = $362for_iter.3
2025-01-05 16:51:21,781 - DEBUG - on stmt: branch $362for_iter.4, 364, 410
2025-01-05 16:51:21,782 - DEBUG - ==== SSA block rewrite pass on 364
2025-01-05 16:51:21,783 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146467C0>
2025-01-05 16:51:21,784 - DEBUG - on stmt: k = $phi364.2
2025-01-05 16:51:21,785 - DEBUG - replaced with: k.1 = $phi364.2
2025-01-05 16:51:21,786 - DEBUG - on stmt: $372binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:21,787 - DEBUG - on stmt: $378binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:21,789 - DEBUG - on stmt: $const386.14 = const(int, 2)
2025-01-05 16:51:21,790 - DEBUG - on stmt: $388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:21,792 - DEBUG - on stmt: $390binary_add.16 = i + $388binary_floor_divide.15
2025-01-05 16:51:21,793 - DEBUG - on stmt: $394binary_subtract.18 = $390binary_add.16 - k
2025-01-05 16:51:21,795 - DEBUG - on stmt: $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:21,796 - DEBUG - on stmt: $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19
2025-01-05 16:51:21,798 - DEBUG - on stmt: $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:21,801 - DEBUG - on stmt: localscore[i] = $400inplace_add.21
2025-01-05 16:51:21,802 - DEBUG - on stmt: jump 362
2025-01-05 16:51:21,803 - DEBUG - ==== SSA block rewrite pass on 410
2025-01-05 16:51:21,804 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146467C0>
2025-01-05 16:51:21,805 - DEBUG - on stmt: jump 232
2025-01-05 16:51:21,807 - DEBUG - ==== SSA block rewrite pass on 412
2025-01-05 16:51:21,807 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146467C0>
2025-01-05 16:51:21,809 - DEBUG - on stmt: $const412.0 = const(NoneType, None)
2025-01-05 16:51:21,810 - DEBUG - on stmt: $414return_value.1 = cast(value=$const412.0)
2025-01-05 16:51:21,811 - DEBUG - on stmt: return $414return_value.1
2025-01-05 16:51:21,813 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {154: [<numba.core.ir.Assign object at 0x00000000182A73A0>],
             364: [<numba.core.ir.Assign object at 0x0000000014686B20>]})
2025-01-05 16:51:21,815 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:21,817 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146467C0>
2025-01-05 16:51:21,818 - DEBUG - on stmt: onset_envelope = arg(0, name=onset_envelope)
2025-01-05 16:51:21,820 - DEBUG - on stmt: frames_per_beat = arg(1, name=frames_per_beat)
2025-01-05 16:51:21,822 - DEBUG - on stmt: localscore = arg(2, name=localscore)
2025-01-05 16:51:21,823 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:21,824 - DEBUG - on stmt: N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,826 - DEBUG - on stmt: $10load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:21,828 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,830 - DEBUG - on stmt: $const16.6 = const(int, 1)
2025-01-05 16:51:21,831 - DEBUG - on stmt: $18compare_op.7 = $14call_function.5 == $const16.6
2025-01-05 16:51:21,833 - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-01-05 16:51:21,834 - DEBUG - on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,837 - DEBUG - on stmt: branch $20pred, 22, 202
2025-01-05 16:51:21,838 - DEBUG - ==== SSA block rewrite pass on 22
2025-01-05 16:51:21,839 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146467C0>
2025-01-05 16:51:21,840 - DEBUG - on stmt: $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:21,842 - DEBUG - on stmt: $24load_method.1 = getattr(value=$22load_global.0, attr=exp)
2025-01-05 16:51:21,844 - DEBUG - on stmt: $const26.2 = const(float, -0.5)
2025-01-05 16:51:21,845 - DEBUG - on stmt: $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:21,848 - DEBUG - on stmt: $30load_method.4 = getattr(value=$28load_global.3, attr=arange)
2025-01-05 16:51:21,850 - DEBUG - on stmt: $const34.6 = const(int, 0)
2025-01-05 16:51:21,851 - DEBUG - on stmt: $36binary_subscr.7 = static_getitem(value=frames_per_beat, index=0, index_var=$const34.6, fn=<built-in function getitem>)
2025-01-05 16:51:21,853 - DEBUG - on stmt: $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7)
2025-01-05 16:51:21,855 - DEBUG - on stmt: $const42.10 = const(int, 0)
2025-01-05 16:51:21,856 - DEBUG - on stmt: $44binary_subscr.11 = static_getitem(value=frames_per_beat, index=0, index_var=$const42.10, fn=<built-in function getitem>)
2025-01-05 16:51:21,858 - DEBUG - on stmt: $const46.12 = const(int, 1)
2025-01-05 16:51:21,859 - DEBUG - on stmt: $48binary_add.13 = $44binary_subscr.11 + $const46.12
2025-01-05 16:51:21,861 - DEBUG - on stmt: $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,864 - DEBUG - on stmt: $const52.15 = const(float, 32.0)
2025-01-05 16:51:21,865 - DEBUG - on stmt: $54binary_multiply.16 = $50call_method.14 * $const52.15
2025-01-05 16:51:21,867 - DEBUG - on stmt: $const58.18 = const(int, 0)
2025-01-05 16:51:21,868 - DEBUG - on stmt: $60binary_subscr.19 = static_getitem(value=frames_per_beat, index=0, index_var=$const58.18, fn=<built-in function getitem>)
2025-01-05 16:51:21,869 - DEBUG - on stmt: $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19
2025-01-05 16:51:21,871 - DEBUG - on stmt: $const64.21 = const(int, 2)
2025-01-05 16:51:21,872 - DEBUG - on stmt: $66binary_power.22 = $62binary_true_divide.20 ** $const64.21
2025-01-05 16:51:21,874 - DEBUG - on stmt: $68binary_multiply.23 = $const26.2 * $66binary_power.22
2025-01-05 16:51:21,875 - DEBUG - on stmt: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,877 - DEBUG - on stmt: $74load_global.25 = global(len: <built-in function len>)
2025-01-05 16:51:21,879 - DEBUG - on stmt: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,881 - DEBUG - on stmt: $82load_global.28 = global(range: <class 'range'>)
2025-01-05 16:51:21,883 - DEBUG - on stmt: $84load_global.29 = global(len: <built-in function len>)
2025-01-05 16:51:21,885 - DEBUG - on stmt: $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,887 - DEBUG - on stmt: $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,889 - DEBUG - on stmt: $92get_iter.33 = getiter(value=$90call_function.32)
2025-01-05 16:51:21,891 - DEBUG - on stmt: $phi94.0 = $92get_iter.33
2025-01-05 16:51:21,892 - DEBUG - on stmt: jump 94
2025-01-05 16:51:21,892 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:21,893 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146467C0>
2025-01-05 16:51:21,895 - DEBUG - on stmt: $94for_iter.1 = iternext(value=$phi94.0)
2025-01-05 16:51:21,896 - DEBUG - on stmt: $94for_iter.2 = pair_first(value=$94for_iter.1)
2025-01-05 16:51:21,898 - DEBUG - on stmt: $94for_iter.3 = pair_second(value=$94for_iter.1)
2025-01-05 16:51:21,900 - DEBUG - on stmt: $phi96.1 = $94for_iter.2
2025-01-05 16:51:21,901 - DEBUG - on stmt: branch $94for_iter.3, 96, 200
2025-01-05 16:51:21,902 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:21,903 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146467C0>
2025-01-05 16:51:21,904 - DEBUG - on stmt: i = $phi96.1
2025-01-05 16:51:21,905 - DEBUG - on stmt: $const98.2 = const(float, 0.0)
2025-01-05 16:51:21,906 - DEBUG - on stmt: localscore[i] = $const98.2
2025-01-05 16:51:21,907 - DEBUG - on stmt: $106load_global.5 = global(range: <class 'range'>)
2025-01-05 16:51:21,908 - DEBUG - on stmt: $108load_global.6 = global(max: <built-in function max>)
2025-01-05 16:51:21,910 - DEBUG - on stmt: $const110.7 = const(int, 0)
2025-01-05 16:51:21,911 - DEBUG - on stmt: $const116.10 = const(int, 2)
2025-01-05 16:51:21,912 - DEBUG - on stmt: $118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:21,913 - DEBUG - on stmt: $120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:21,915 - DEBUG - on stmt: $124binary_subtract.14 = $120binary_add.12 - N
2025-01-05 16:51:21,917 - DEBUG - on stmt: $const126.15 = const(int, 1)
2025-01-05 16:51:21,919 - DEBUG - on stmt: $128binary_add.16 = $124binary_subtract.14 + $const126.15
2025-01-05 16:51:21,920 - DEBUG - on stmt: $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,925 - DEBUG - on stmt: $132load_global.18 = global(min: <built-in function min>)
2025-01-05 16:51:21,927 - DEBUG - on stmt: $const138.21 = const(int, 2)
2025-01-05 16:51:21,928 - DEBUG - on stmt: $140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:21,930 - DEBUG - on stmt: $142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:21,932 - DEBUG - on stmt: $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,935 - DEBUG - on stmt: $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,938 - DEBUG - on stmt: $150get_iter.27 = getiter(value=$148call_function.26)
2025-01-05 16:51:21,940 - DEBUG - on stmt: $phi152.1 = $150get_iter.27
2025-01-05 16:51:21,941 - DEBUG - on stmt: jump 152
2025-01-05 16:51:21,942 - DEBUG - ==== SSA block rewrite pass on 152
2025-01-05 16:51:21,943 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146467C0>
2025-01-05 16:51:21,944 - DEBUG - on stmt: $152for_iter.2 = iternext(value=$phi152.1)
2025-01-05 16:51:21,946 - DEBUG - on stmt: $152for_iter.3 = pair_first(value=$152for_iter.2)
2025-01-05 16:51:21,948 - DEBUG - on stmt: $152for_iter.4 = pair_second(value=$152for_iter.2)
2025-01-05 16:51:21,949 - DEBUG - on stmt: $phi154.2 = $152for_iter.3
2025-01-05 16:51:21,950 - DEBUG - on stmt: branch $152for_iter.4, 154, 198
2025-01-05 16:51:21,951 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:21,952 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146467C0>
2025-01-05 16:51:21,953 - DEBUG - on stmt: k = $phi154.2
2025-01-05 16:51:21,955 - DEBUG - on stmt: $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:21,956 - DEBUG - on stmt: $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:21,957 - DEBUG - find_def var='k' stmt=$168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:21,959 - DEBUG - on stmt: $const176.14 = const(int, 2)
2025-01-05 16:51:21,960 - DEBUG - on stmt: $178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:21,961 - DEBUG - on stmt: $180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:21,963 - DEBUG - on stmt: $184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:21,965 - DEBUG - find_def var='k' stmt=$184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:21,966 - DEBUG - on stmt: $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:21,968 - DEBUG - on stmt: $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19
2025-01-05 16:51:21,969 - DEBUG - on stmt: $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:21,972 - DEBUG - on stmt: localscore[i] = $190inplace_add.21
2025-01-05 16:51:21,973 - DEBUG - on stmt: jump 152
2025-01-05 16:51:21,974 - DEBUG - ==== SSA block rewrite pass on 198
2025-01-05 16:51:21,975 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146467C0>
2025-01-05 16:51:21,976 - DEBUG - on stmt: jump 94
2025-01-05 16:51:21,978 - DEBUG - ==== SSA block rewrite pass on 200
2025-01-05 16:51:21,978 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146467C0>
2025-01-05 16:51:21,980 - DEBUG - on stmt: jump 412
2025-01-05 16:51:21,981 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-05 16:51:21,982 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146467C0>
2025-01-05 16:51:21,983 - DEBUG - on stmt: $202load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:21,985 - DEBUG - on stmt: $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,987 - DEBUG - on stmt: $208load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:21,989 - DEBUG - on stmt: $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,991 - DEBUG - on stmt: $214compare_op.6 = $206call_function.2 == $212call_function.5
2025-01-05 16:51:21,993 - DEBUG - on stmt: bool218 = global(bool: <class 'bool'>)
2025-01-05 16:51:21,994 - DEBUG - on stmt: $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:21,996 - DEBUG - on stmt: branch $218pred, 220, 412
2025-01-05 16:51:21,998 - DEBUG - ==== SSA block rewrite pass on 220
2025-01-05 16:51:21,999 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146467C0>
2025-01-05 16:51:22,001 - DEBUG - on stmt: $220load_global.0 = global(range: <class 'range'>)
2025-01-05 16:51:22,002 - DEBUG - on stmt: $222load_global.1 = global(len: <built-in function len>)
2025-01-05 16:51:22,004 - DEBUG - on stmt: $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,006 - DEBUG - on stmt: $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,008 - DEBUG - on stmt: $230get_iter.5 = getiter(value=$228call_function.4)
2025-01-05 16:51:22,010 - DEBUG - on stmt: $phi232.0 = $230get_iter.5
2025-01-05 16:51:22,011 - DEBUG - on stmt: jump 232
2025-01-05 16:51:22,012 - DEBUG - ==== SSA block rewrite pass on 232
2025-01-05 16:51:22,013 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146467C0>
2025-01-05 16:51:22,014 - DEBUG - on stmt: $232for_iter.1 = iternext(value=$phi232.0)
2025-01-05 16:51:22,016 - DEBUG - on stmt: $232for_iter.2 = pair_first(value=$232for_iter.1)
2025-01-05 16:51:22,017 - DEBUG - on stmt: $232for_iter.3 = pair_second(value=$232for_iter.1)
2025-01-05 16:51:22,019 - DEBUG - on stmt: $phi234.1 = $232for_iter.2
2025-01-05 16:51:22,020 - DEBUG - on stmt: branch $232for_iter.3, 234, 412
2025-01-05 16:51:22,021 - DEBUG - ==== SSA block rewrite pass on 234
2025-01-05 16:51:22,022 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146467C0>
2025-01-05 16:51:22,023 - DEBUG - on stmt: i = $phi234.1
2025-01-05 16:51:22,024 - DEBUG - on stmt: $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:22,026 - DEBUG - on stmt: $238load_method.3 = getattr(value=$236load_global.2, attr=exp)
2025-01-05 16:51:22,028 - DEBUG - on stmt: $const240.4 = const(float, -0.5)
2025-01-05 16:51:22,029 - DEBUG - on stmt: $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:22,031 - DEBUG - on stmt: $244load_method.6 = getattr(value=$242load_global.5, attr=arange)
2025-01-05 16:51:22,033 - DEBUG - on stmt: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,034 - DEBUG - on stmt: $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9)
2025-01-05 16:51:22,036 - DEBUG - on stmt: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,037 - DEBUG - on stmt: $const260.14 = const(int, 1)
2025-01-05 16:51:22,038 - DEBUG - on stmt: $262binary_add.15 = $258binary_subscr.13 + $const260.14
2025-01-05 16:51:22,040 - DEBUG - on stmt: $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,042 - DEBUG - on stmt: $const266.17 = const(float, 32.0)
2025-01-05 16:51:22,044 - DEBUG - on stmt: $268binary_multiply.18 = $264call_method.16 * $const266.17
2025-01-05 16:51:22,045 - DEBUG - on stmt: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,047 - DEBUG - on stmt: $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21
2025-01-05 16:51:22,049 - DEBUG - on stmt: $const278.23 = const(int, 2)
2025-01-05 16:51:22,050 - DEBUG - on stmt: $280binary_power.24 = $276binary_true_divide.22 ** $const278.23
2025-01-05 16:51:22,051 - DEBUG - on stmt: $282binary_multiply.25 = $const240.4 * $280binary_power.24
2025-01-05 16:51:22,053 - DEBUG - on stmt: window = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,055 - DEBUG - on stmt: $const288.27 = const(int, 2)
2025-01-05 16:51:22,056 - DEBUG - on stmt: $290load_global.28 = global(int: <class 'int'>)
2025-01-05 16:51:22,057 - DEBUG - on stmt: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,059 - DEBUG - on stmt: $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,061 - DEBUG - on stmt: $300binary_multiply.33 = $const288.27 * $298call_function.32
2025-01-05 16:51:22,062 - DEBUG - on stmt: $const302.34 = const(int, 1)
2025-01-05 16:51:22,064 - DEBUG - on stmt: K = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:22,065 - DEBUG - on stmt: $const308.36 = const(float, 0.0)
2025-01-05 16:51:22,066 - DEBUG - on stmt: localscore[i] = $const308.36
2025-01-05 16:51:22,067 - DEBUG - on stmt: $316load_global.39 = global(range: <class 'range'>)
2025-01-05 16:51:22,068 - DEBUG - on stmt: $318load_global.40 = global(max: <built-in function max>)
2025-01-05 16:51:22,070 - DEBUG - on stmt: $const320.41 = const(int, 0)
2025-01-05 16:51:22,071 - DEBUG - on stmt: $const326.44 = const(int, 2)
2025-01-05 16:51:22,072 - DEBUG - on stmt: $328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:22,073 - DEBUG - on stmt: $330binary_add.46 = i + $328binary_floor_divide.45
2025-01-05 16:51:22,075 - DEBUG - on stmt: $334binary_subtract.48 = $330binary_add.46 - N
2025-01-05 16:51:22,077 - DEBUG - on stmt: $const336.49 = const(int, 1)
2025-01-05 16:51:22,078 - DEBUG - on stmt: $338binary_add.50 = $334binary_subtract.48 + $const336.49
2025-01-05 16:51:22,079 - DEBUG - on stmt: $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,083 - DEBUG - on stmt: $342load_global.52 = global(min: <built-in function min>)
2025-01-05 16:51:22,084 - DEBUG - on stmt: $const348.55 = const(int, 2)
2025-01-05 16:51:22,086 - DEBUG - on stmt: $350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:22,087 - DEBUG - on stmt: $352binary_add.57 = i + $350binary_floor_divide.56
2025-01-05 16:51:22,089 - DEBUG - on stmt: $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,091 - DEBUG - on stmt: $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,094 - DEBUG - on stmt: $360get_iter.61 = getiter(value=$358call_function.60)
2025-01-05 16:51:22,096 - DEBUG - on stmt: $phi362.1 = $360get_iter.61
2025-01-05 16:51:22,097 - DEBUG - on stmt: jump 362
2025-01-05 16:51:22,098 - DEBUG - ==== SSA block rewrite pass on 362
2025-01-05 16:51:22,099 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146467C0>
2025-01-05 16:51:22,101 - DEBUG - on stmt: $362for_iter.2 = iternext(value=$phi362.1)
2025-01-05 16:51:22,102 - DEBUG - on stmt: $362for_iter.3 = pair_first(value=$362for_iter.2)
2025-01-05 16:51:22,104 - DEBUG - on stmt: $362for_iter.4 = pair_second(value=$362for_iter.2)
2025-01-05 16:51:22,105 - DEBUG - on stmt: $phi364.2 = $362for_iter.3
2025-01-05 16:51:22,106 - DEBUG - on stmt: branch $362for_iter.4, 364, 410
2025-01-05 16:51:22,107 - DEBUG - ==== SSA block rewrite pass on 364
2025-01-05 16:51:22,108 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146467C0>
2025-01-05 16:51:22,109 - DEBUG - on stmt: k.1 = $phi364.2
2025-01-05 16:51:22,111 - DEBUG - on stmt: $372binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,112 - DEBUG - on stmt: $378binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:22,114 - DEBUG - find_def var='k' stmt=$378binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:22,115 - DEBUG - replaced with: $378binary_subscr.10 = getitem(value=window, index=k.1, fn=<built-in function getitem>)
2025-01-05 16:51:22,117 - DEBUG - on stmt: $const386.14 = const(int, 2)
2025-01-05 16:51:22,118 - DEBUG - on stmt: $388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:22,119 - DEBUG - on stmt: $390binary_add.16 = i + $388binary_floor_divide.15
2025-01-05 16:51:22,121 - DEBUG - on stmt: $394binary_subtract.18 = $390binary_add.16 - k
2025-01-05 16:51:22,122 - DEBUG - find_def var='k' stmt=$394binary_subtract.18 = $390binary_add.16 - k
2025-01-05 16:51:22,124 - DEBUG - replaced with: $394binary_subtract.18 = $390binary_add.16 - k.1
2025-01-05 16:51:22,125 - DEBUG - on stmt: $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:22,127 - DEBUG - on stmt: $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19
2025-01-05 16:51:22,129 - DEBUG - on stmt: $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:22,132 - DEBUG - on stmt: localscore[i] = $400inplace_add.21
2025-01-05 16:51:22,133 - DEBUG - on stmt: jump 362
2025-01-05 16:51:22,134 - DEBUG - ==== SSA block rewrite pass on 410
2025-01-05 16:51:22,135 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146467C0>
2025-01-05 16:51:22,136 - DEBUG - on stmt: jump 232
2025-01-05 16:51:22,137 - DEBUG - ==== SSA block rewrite pass on 412
2025-01-05 16:51:22,138 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146467C0>
2025-01-05 16:51:22,139 - DEBUG - on stmt: $const412.0 = const(NoneType, None)
2025-01-05 16:51:22,140 - DEBUG - on stmt: $414return_value.1 = cast(value=$const412.0)
2025-01-05 16:51:22,142 - DEBUG - on stmt: return $414return_value.1
2025-01-05 16:51:22,143 - DEBUG - Fix SSA violator on var i
2025-01-05 16:51:22,144 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:22,145 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014656040>
2025-01-05 16:51:22,146 - DEBUG - on stmt: onset_envelope = arg(0, name=onset_envelope)
2025-01-05 16:51:22,148 - DEBUG - on stmt: frames_per_beat = arg(1, name=frames_per_beat)
2025-01-05 16:51:22,149 - DEBUG - on stmt: localscore = arg(2, name=localscore)
2025-01-05 16:51:22,151 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:22,152 - DEBUG - on stmt: N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,155 - DEBUG - on stmt: $10load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:22,156 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,159 - DEBUG - on stmt: $const16.6 = const(int, 1)
2025-01-05 16:51:22,160 - DEBUG - on stmt: $18compare_op.7 = $14call_function.5 == $const16.6
2025-01-05 16:51:22,161 - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-01-05 16:51:22,163 - DEBUG - on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,165 - DEBUG - on stmt: branch $20pred, 22, 202
2025-01-05 16:51:22,166 - DEBUG - ==== SSA block rewrite pass on 22
2025-01-05 16:51:22,167 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014656040>
2025-01-05 16:51:22,168 - DEBUG - on stmt: $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:22,171 - DEBUG - on stmt: $24load_method.1 = getattr(value=$22load_global.0, attr=exp)
2025-01-05 16:51:22,172 - DEBUG - on stmt: $const26.2 = const(float, -0.5)
2025-01-05 16:51:22,173 - DEBUG - on stmt: $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:22,175 - DEBUG - on stmt: $30load_method.4 = getattr(value=$28load_global.3, attr=arange)
2025-01-05 16:51:22,177 - DEBUG - on stmt: $const34.6 = const(int, 0)
2025-01-05 16:51:22,178 - DEBUG - on stmt: $36binary_subscr.7 = static_getitem(value=frames_per_beat, index=0, index_var=$const34.6, fn=<built-in function getitem>)
2025-01-05 16:51:22,180 - DEBUG - on stmt: $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7)
2025-01-05 16:51:22,182 - DEBUG - on stmt: $const42.10 = const(int, 0)
2025-01-05 16:51:22,183 - DEBUG - on stmt: $44binary_subscr.11 = static_getitem(value=frames_per_beat, index=0, index_var=$const42.10, fn=<built-in function getitem>)
2025-01-05 16:51:22,185 - DEBUG - on stmt: $const46.12 = const(int, 1)
2025-01-05 16:51:22,186 - DEBUG - on stmt: $48binary_add.13 = $44binary_subscr.11 + $const46.12
2025-01-05 16:51:22,187 - DEBUG - on stmt: $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,190 - DEBUG - on stmt: $const52.15 = const(float, 32.0)
2025-01-05 16:51:22,191 - DEBUG - on stmt: $54binary_multiply.16 = $50call_method.14 * $const52.15
2025-01-05 16:51:22,192 - DEBUG - on stmt: $const58.18 = const(int, 0)
2025-01-05 16:51:22,193 - DEBUG - on stmt: $60binary_subscr.19 = static_getitem(value=frames_per_beat, index=0, index_var=$const58.18, fn=<built-in function getitem>)
2025-01-05 16:51:22,195 - DEBUG - on stmt: $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19
2025-01-05 16:51:22,197 - DEBUG - on stmt: $const64.21 = const(int, 2)
2025-01-05 16:51:22,198 - DEBUG - on stmt: $66binary_power.22 = $62binary_true_divide.20 ** $const64.21
2025-01-05 16:51:22,200 - DEBUG - on stmt: $68binary_multiply.23 = $const26.2 * $66binary_power.22
2025-01-05 16:51:22,201 - DEBUG - on stmt: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,203 - DEBUG - on stmt: $74load_global.25 = global(len: <built-in function len>)
2025-01-05 16:51:22,205 - DEBUG - on stmt: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,207 - DEBUG - on stmt: $82load_global.28 = global(range: <class 'range'>)
2025-01-05 16:51:22,209 - DEBUG - on stmt: $84load_global.29 = global(len: <built-in function len>)
2025-01-05 16:51:22,210 - DEBUG - on stmt: $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,212 - DEBUG - on stmt: $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,215 - DEBUG - on stmt: $92get_iter.33 = getiter(value=$90call_function.32)
2025-01-05 16:51:22,216 - DEBUG - on stmt: $phi94.0 = $92get_iter.33
2025-01-05 16:51:22,218 - DEBUG - on stmt: jump 94
2025-01-05 16:51:22,218 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:22,219 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014656040>
2025-01-05 16:51:22,221 - DEBUG - on stmt: $94for_iter.1 = iternext(value=$phi94.0)
2025-01-05 16:51:22,222 - DEBUG - on stmt: $94for_iter.2 = pair_first(value=$94for_iter.1)
2025-01-05 16:51:22,224 - DEBUG - on stmt: $94for_iter.3 = pair_second(value=$94for_iter.1)
2025-01-05 16:51:22,225 - DEBUG - on stmt: $phi96.1 = $94for_iter.2
2025-01-05 16:51:22,227 - DEBUG - on stmt: branch $94for_iter.3, 96, 200
2025-01-05 16:51:22,227 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:22,229 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014656040>
2025-01-05 16:51:22,230 - DEBUG - on stmt: i = $phi96.1
2025-01-05 16:51:22,231 - DEBUG - first assign: i
2025-01-05 16:51:22,232 - DEBUG - replaced with: i = $phi96.1
2025-01-05 16:51:22,233 - DEBUG - on stmt: $const98.2 = const(float, 0.0)
2025-01-05 16:51:22,234 - DEBUG - on stmt: localscore[i] = $const98.2
2025-01-05 16:51:22,235 - DEBUG - on stmt: $106load_global.5 = global(range: <class 'range'>)
2025-01-05 16:51:22,237 - DEBUG - on stmt: $108load_global.6 = global(max: <built-in function max>)
2025-01-05 16:51:22,238 - DEBUG - on stmt: $const110.7 = const(int, 0)
2025-01-05 16:51:22,239 - DEBUG - on stmt: $const116.10 = const(int, 2)
2025-01-05 16:51:22,240 - DEBUG - on stmt: $118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:22,242 - DEBUG - on stmt: $120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:22,243 - DEBUG - on stmt: $124binary_subtract.14 = $120binary_add.12 - N
2025-01-05 16:51:22,245 - DEBUG - on stmt: $const126.15 = const(int, 1)
2025-01-05 16:51:22,246 - DEBUG - on stmt: $128binary_add.16 = $124binary_subtract.14 + $const126.15
2025-01-05 16:51:22,247 - DEBUG - on stmt: $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,250 - DEBUG - on stmt: $132load_global.18 = global(min: <built-in function min>)
2025-01-05 16:51:22,252 - DEBUG - on stmt: $const138.21 = const(int, 2)
2025-01-05 16:51:22,253 - DEBUG - on stmt: $140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:22,254 - DEBUG - on stmt: $142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:22,256 - DEBUG - on stmt: $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,259 - DEBUG - on stmt: $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,261 - DEBUG - on stmt: $150get_iter.27 = getiter(value=$148call_function.26)
2025-01-05 16:51:22,263 - DEBUG - on stmt: $phi152.1 = $150get_iter.27
2025-01-05 16:51:22,264 - DEBUG - on stmt: jump 152
2025-01-05 16:51:22,265 - DEBUG - ==== SSA block rewrite pass on 152
2025-01-05 16:51:22,266 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014656040>
2025-01-05 16:51:22,268 - DEBUG - on stmt: $152for_iter.2 = iternext(value=$phi152.1)
2025-01-05 16:51:22,269 - DEBUG - on stmt: $152for_iter.3 = pair_first(value=$152for_iter.2)
2025-01-05 16:51:22,271 - DEBUG - on stmt: $152for_iter.4 = pair_second(value=$152for_iter.2)
2025-01-05 16:51:22,272 - DEBUG - on stmt: $phi154.2 = $152for_iter.3
2025-01-05 16:51:22,273 - DEBUG - on stmt: branch $152for_iter.4, 154, 198
2025-01-05 16:51:22,274 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:22,275 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014656040>
2025-01-05 16:51:22,277 - DEBUG - on stmt: k = $phi154.2
2025-01-05 16:51:22,278 - DEBUG - on stmt: $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,279 - DEBUG - on stmt: $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:22,281 - DEBUG - on stmt: $const176.14 = const(int, 2)
2025-01-05 16:51:22,282 - DEBUG - on stmt: $178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:22,283 - DEBUG - on stmt: $180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:22,285 - DEBUG - on stmt: $184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:22,286 - DEBUG - on stmt: $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:22,288 - DEBUG - on stmt: $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19
2025-01-05 16:51:22,289 - DEBUG - on stmt: $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:22,292 - DEBUG - on stmt: localscore[i] = $190inplace_add.21
2025-01-05 16:51:22,293 - DEBUG - on stmt: jump 152
2025-01-05 16:51:22,294 - DEBUG - ==== SSA block rewrite pass on 198
2025-01-05 16:51:22,295 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014656040>
2025-01-05 16:51:22,296 - DEBUG - on stmt: jump 94
2025-01-05 16:51:22,298 - DEBUG - ==== SSA block rewrite pass on 200
2025-01-05 16:51:22,299 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014656040>
2025-01-05 16:51:22,300 - DEBUG - on stmt: jump 412
2025-01-05 16:51:22,301 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-05 16:51:22,302 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014656040>
2025-01-05 16:51:22,304 - DEBUG - on stmt: $202load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:22,306 - DEBUG - on stmt: $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,308 - DEBUG - on stmt: $208load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:22,309 - DEBUG - on stmt: $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,311 - DEBUG - on stmt: $214compare_op.6 = $206call_function.2 == $212call_function.5
2025-01-05 16:51:22,313 - DEBUG - on stmt: bool218 = global(bool: <class 'bool'>)
2025-01-05 16:51:22,315 - DEBUG - on stmt: $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,317 - DEBUG - on stmt: branch $218pred, 220, 412
2025-01-05 16:51:22,318 - DEBUG - ==== SSA block rewrite pass on 220
2025-01-05 16:51:22,319 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014656040>
2025-01-05 16:51:22,321 - DEBUG - on stmt: $220load_global.0 = global(range: <class 'range'>)
2025-01-05 16:51:22,322 - DEBUG - on stmt: $222load_global.1 = global(len: <built-in function len>)
2025-01-05 16:51:22,324 - DEBUG - on stmt: $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,326 - DEBUG - on stmt: $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,328 - DEBUG - on stmt: $230get_iter.5 = getiter(value=$228call_function.4)
2025-01-05 16:51:22,330 - DEBUG - on stmt: $phi232.0 = $230get_iter.5
2025-01-05 16:51:22,331 - DEBUG - on stmt: jump 232
2025-01-05 16:51:22,332 - DEBUG - ==== SSA block rewrite pass on 232
2025-01-05 16:51:22,333 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014656040>
2025-01-05 16:51:22,334 - DEBUG - on stmt: $232for_iter.1 = iternext(value=$phi232.0)
2025-01-05 16:51:22,336 - DEBUG - on stmt: $232for_iter.2 = pair_first(value=$232for_iter.1)
2025-01-05 16:51:22,338 - DEBUG - on stmt: $232for_iter.3 = pair_second(value=$232for_iter.1)
2025-01-05 16:51:22,339 - DEBUG - on stmt: $phi234.1 = $232for_iter.2
2025-01-05 16:51:22,340 - DEBUG - on stmt: branch $232for_iter.3, 234, 412
2025-01-05 16:51:22,341 - DEBUG - ==== SSA block rewrite pass on 234
2025-01-05 16:51:22,342 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014656040>
2025-01-05 16:51:22,343 - DEBUG - on stmt: i = $phi234.1
2025-01-05 16:51:22,344 - DEBUG - replaced with: i.1 = $phi234.1
2025-01-05 16:51:22,345 - DEBUG - on stmt: $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:22,347 - DEBUG - on stmt: $238load_method.3 = getattr(value=$236load_global.2, attr=exp)
2025-01-05 16:51:22,349 - DEBUG - on stmt: $const240.4 = const(float, -0.5)
2025-01-05 16:51:22,350 - DEBUG - on stmt: $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:22,352 - DEBUG - on stmt: $244load_method.6 = getattr(value=$242load_global.5, attr=arange)
2025-01-05 16:51:22,354 - DEBUG - on stmt: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,355 - DEBUG - on stmt: $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9)
2025-01-05 16:51:22,357 - DEBUG - on stmt: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,358 - DEBUG - on stmt: $const260.14 = const(int, 1)
2025-01-05 16:51:22,359 - DEBUG - on stmt: $262binary_add.15 = $258binary_subscr.13 + $const260.14
2025-01-05 16:51:22,361 - DEBUG - on stmt: $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,364 - DEBUG - on stmt: $const266.17 = const(float, 32.0)
2025-01-05 16:51:22,365 - DEBUG - on stmt: $268binary_multiply.18 = $264call_method.16 * $const266.17
2025-01-05 16:51:22,366 - DEBUG - on stmt: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,368 - DEBUG - on stmt: $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21
2025-01-05 16:51:22,369 - DEBUG - on stmt: $const278.23 = const(int, 2)
2025-01-05 16:51:22,370 - DEBUG - on stmt: $280binary_power.24 = $276binary_true_divide.22 ** $const278.23
2025-01-05 16:51:22,372 - DEBUG - on stmt: $282binary_multiply.25 = $const240.4 * $280binary_power.24
2025-01-05 16:51:22,373 - DEBUG - on stmt: window = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,375 - DEBUG - on stmt: $const288.27 = const(int, 2)
2025-01-05 16:51:22,377 - DEBUG - on stmt: $290load_global.28 = global(int: <class 'int'>)
2025-01-05 16:51:22,378 - DEBUG - on stmt: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,380 - DEBUG - on stmt: $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,383 - DEBUG - on stmt: $300binary_multiply.33 = $const288.27 * $298call_function.32
2025-01-05 16:51:22,385 - DEBUG - on stmt: $const302.34 = const(int, 1)
2025-01-05 16:51:22,386 - DEBUG - on stmt: K = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:22,387 - DEBUG - on stmt: $const308.36 = const(float, 0.0)
2025-01-05 16:51:22,388 - DEBUG - on stmt: localscore[i] = $const308.36
2025-01-05 16:51:22,389 - DEBUG - on stmt: $316load_global.39 = global(range: <class 'range'>)
2025-01-05 16:51:22,390 - DEBUG - on stmt: $318load_global.40 = global(max: <built-in function max>)
2025-01-05 16:51:22,392 - DEBUG - on stmt: $const320.41 = const(int, 0)
2025-01-05 16:51:22,393 - DEBUG - on stmt: $const326.44 = const(int, 2)
2025-01-05 16:51:22,394 - DEBUG - on stmt: $328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:22,395 - DEBUG - on stmt: $330binary_add.46 = i + $328binary_floor_divide.45
2025-01-05 16:51:22,397 - DEBUG - on stmt: $334binary_subtract.48 = $330binary_add.46 - N
2025-01-05 16:51:22,399 - DEBUG - on stmt: $const336.49 = const(int, 1)
2025-01-05 16:51:22,400 - DEBUG - on stmt: $338binary_add.50 = $334binary_subtract.48 + $const336.49
2025-01-05 16:51:22,401 - DEBUG - on stmt: $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,404 - DEBUG - on stmt: $342load_global.52 = global(min: <built-in function min>)
2025-01-05 16:51:22,406 - DEBUG - on stmt: $const348.55 = const(int, 2)
2025-01-05 16:51:22,407 - DEBUG - on stmt: $350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:22,408 - DEBUG - on stmt: $352binary_add.57 = i + $350binary_floor_divide.56
2025-01-05 16:51:22,410 - DEBUG - on stmt: $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,412 - DEBUG - on stmt: $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,416 - DEBUG - on stmt: $360get_iter.61 = getiter(value=$358call_function.60)
2025-01-05 16:51:22,417 - DEBUG - on stmt: $phi362.1 = $360get_iter.61
2025-01-05 16:51:22,418 - DEBUG - on stmt: jump 362
2025-01-05 16:51:22,419 - DEBUG - ==== SSA block rewrite pass on 362
2025-01-05 16:51:22,420 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014656040>
2025-01-05 16:51:22,421 - DEBUG - on stmt: $362for_iter.2 = iternext(value=$phi362.1)
2025-01-05 16:51:22,423 - DEBUG - on stmt: $362for_iter.3 = pair_first(value=$362for_iter.2)
2025-01-05 16:51:22,425 - DEBUG - on stmt: $362for_iter.4 = pair_second(value=$362for_iter.2)
2025-01-05 16:51:22,426 - DEBUG - on stmt: $phi364.2 = $362for_iter.3
2025-01-05 16:51:22,427 - DEBUG - on stmt: branch $362for_iter.4, 364, 410
2025-01-05 16:51:22,428 - DEBUG - ==== SSA block rewrite pass on 364
2025-01-05 16:51:22,429 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014656040>
2025-01-05 16:51:22,431 - DEBUG - on stmt: k.1 = $phi364.2
2025-01-05 16:51:22,432 - DEBUG - on stmt: $372binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,433 - DEBUG - on stmt: $378binary_subscr.10 = getitem(value=window, index=k.1, fn=<built-in function getitem>)
2025-01-05 16:51:22,435 - DEBUG - on stmt: $const386.14 = const(int, 2)
2025-01-05 16:51:22,436 - DEBUG - on stmt: $388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:22,437 - DEBUG - on stmt: $390binary_add.16 = i + $388binary_floor_divide.15
2025-01-05 16:51:22,439 - DEBUG - on stmt: $394binary_subtract.18 = $390binary_add.16 - k.1
2025-01-05 16:51:22,440 - DEBUG - on stmt: $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:22,442 - DEBUG - on stmt: $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19
2025-01-05 16:51:22,443 - DEBUG - on stmt: $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:22,446 - DEBUG - on stmt: localscore[i] = $400inplace_add.21
2025-01-05 16:51:22,447 - DEBUG - on stmt: jump 362
2025-01-05 16:51:22,448 - DEBUG - ==== SSA block rewrite pass on 410
2025-01-05 16:51:22,449 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014656040>
2025-01-05 16:51:22,451 - DEBUG - on stmt: jump 232
2025-01-05 16:51:22,452 - DEBUG - ==== SSA block rewrite pass on 412
2025-01-05 16:51:22,453 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014656040>
2025-01-05 16:51:22,454 - DEBUG - on stmt: $const412.0 = const(NoneType, None)
2025-01-05 16:51:22,455 - DEBUG - on stmt: $414return_value.1 = cast(value=$const412.0)
2025-01-05 16:51:22,457 - DEBUG - on stmt: return $414return_value.1
2025-01-05 16:51:22,458 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {96: [<numba.core.ir.Assign object at 0x0000000017256F40>],
             234: [<numba.core.ir.Assign object at 0x0000000014686A30>]})
2025-01-05 16:51:22,461 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:22,462 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146863D0>
2025-01-05 16:51:22,464 - DEBUG - on stmt: onset_envelope = arg(0, name=onset_envelope)
2025-01-05 16:51:22,465 - DEBUG - on stmt: frames_per_beat = arg(1, name=frames_per_beat)
2025-01-05 16:51:22,467 - DEBUG - on stmt: localscore = arg(2, name=localscore)
2025-01-05 16:51:22,468 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:22,469 - DEBUG - on stmt: N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,471 - DEBUG - on stmt: $10load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:22,473 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,475 - DEBUG - on stmt: $const16.6 = const(int, 1)
2025-01-05 16:51:22,476 - DEBUG - on stmt: $18compare_op.7 = $14call_function.5 == $const16.6
2025-01-05 16:51:22,477 - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-01-05 16:51:22,479 - DEBUG - on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,481 - DEBUG - on stmt: branch $20pred, 22, 202
2025-01-05 16:51:22,482 - DEBUG - ==== SSA block rewrite pass on 22
2025-01-05 16:51:22,483 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146863D0>
2025-01-05 16:51:22,485 - DEBUG - on stmt: $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:22,487 - DEBUG - on stmt: $24load_method.1 = getattr(value=$22load_global.0, attr=exp)
2025-01-05 16:51:22,488 - DEBUG - on stmt: $const26.2 = const(float, -0.5)
2025-01-05 16:51:22,489 - DEBUG - on stmt: $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:22,491 - DEBUG - on stmt: $30load_method.4 = getattr(value=$28load_global.3, attr=arange)
2025-01-05 16:51:22,493 - DEBUG - on stmt: $const34.6 = const(int, 0)
2025-01-05 16:51:22,494 - DEBUG - on stmt: $36binary_subscr.7 = static_getitem(value=frames_per_beat, index=0, index_var=$const34.6, fn=<built-in function getitem>)
2025-01-05 16:51:22,496 - DEBUG - on stmt: $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7)
2025-01-05 16:51:22,498 - DEBUG - on stmt: $const42.10 = const(int, 0)
2025-01-05 16:51:22,499 - DEBUG - on stmt: $44binary_subscr.11 = static_getitem(value=frames_per_beat, index=0, index_var=$const42.10, fn=<built-in function getitem>)
2025-01-05 16:51:22,501 - DEBUG - on stmt: $const46.12 = const(int, 1)
2025-01-05 16:51:22,502 - DEBUG - on stmt: $48binary_add.13 = $44binary_subscr.11 + $const46.12
2025-01-05 16:51:22,503 - DEBUG - on stmt: $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,506 - DEBUG - on stmt: $const52.15 = const(float, 32.0)
2025-01-05 16:51:22,507 - DEBUG - on stmt: $54binary_multiply.16 = $50call_method.14 * $const52.15
2025-01-05 16:51:22,509 - DEBUG - on stmt: $const58.18 = const(int, 0)
2025-01-05 16:51:22,510 - DEBUG - on stmt: $60binary_subscr.19 = static_getitem(value=frames_per_beat, index=0, index_var=$const58.18, fn=<built-in function getitem>)
2025-01-05 16:51:22,511 - DEBUG - on stmt: $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19
2025-01-05 16:51:22,513 - DEBUG - on stmt: $const64.21 = const(int, 2)
2025-01-05 16:51:22,514 - DEBUG - on stmt: $66binary_power.22 = $62binary_true_divide.20 ** $const64.21
2025-01-05 16:51:22,516 - DEBUG - on stmt: $68binary_multiply.23 = $const26.2 * $66binary_power.22
2025-01-05 16:51:22,517 - DEBUG - on stmt: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,519 - DEBUG - on stmt: $74load_global.25 = global(len: <built-in function len>)
2025-01-05 16:51:22,521 - DEBUG - on stmt: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,524 - DEBUG - on stmt: $82load_global.28 = global(range: <class 'range'>)
2025-01-05 16:51:22,800 - DEBUG - on stmt: $84load_global.29 = global(len: <built-in function len>)
2025-01-05 16:51:22,802 - DEBUG - on stmt: $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,804 - DEBUG - on stmt: $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,806 - DEBUG - on stmt: $92get_iter.33 = getiter(value=$90call_function.32)
2025-01-05 16:51:22,808 - DEBUG - on stmt: $phi94.0 = $92get_iter.33
2025-01-05 16:51:22,809 - DEBUG - on stmt: jump 94
2025-01-05 16:51:22,810 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:22,811 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146863D0>
2025-01-05 16:51:22,812 - DEBUG - on stmt: $94for_iter.1 = iternext(value=$phi94.0)
2025-01-05 16:51:22,814 - DEBUG - on stmt: $94for_iter.2 = pair_first(value=$94for_iter.1)
2025-01-05 16:51:22,816 - DEBUG - on stmt: $94for_iter.3 = pair_second(value=$94for_iter.1)
2025-01-05 16:51:22,817 - DEBUG - on stmt: $phi96.1 = $94for_iter.2
2025-01-05 16:51:22,818 - DEBUG - on stmt: branch $94for_iter.3, 96, 200
2025-01-05 16:51:22,819 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:22,820 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146863D0>
2025-01-05 16:51:22,822 - DEBUG - on stmt: i = $phi96.1
2025-01-05 16:51:22,822 - DEBUG - on stmt: $const98.2 = const(float, 0.0)
2025-01-05 16:51:22,823 - DEBUG - on stmt: localscore[i] = $const98.2
2025-01-05 16:51:22,824 - DEBUG - find_def var='i' stmt=localscore[i] = $const98.2
2025-01-05 16:51:22,826 - DEBUG - on stmt: $106load_global.5 = global(range: <class 'range'>)
2025-01-05 16:51:22,827 - DEBUG - on stmt: $108load_global.6 = global(max: <built-in function max>)
2025-01-05 16:51:22,828 - DEBUG - on stmt: $const110.7 = const(int, 0)
2025-01-05 16:51:22,829 - DEBUG - on stmt: $const116.10 = const(int, 2)
2025-01-05 16:51:22,831 - DEBUG - on stmt: $118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:22,832 - DEBUG - on stmt: $120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:22,834 - DEBUG - find_def var='i' stmt=$120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:22,835 - DEBUG - on stmt: $124binary_subtract.14 = $120binary_add.12 - N
2025-01-05 16:51:22,837 - DEBUG - on stmt: $const126.15 = const(int, 1)
2025-01-05 16:51:22,838 - DEBUG - on stmt: $128binary_add.16 = $124binary_subtract.14 + $const126.15
2025-01-05 16:51:22,840 - DEBUG - on stmt: $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,843 - DEBUG - on stmt: $132load_global.18 = global(min: <built-in function min>)
2025-01-05 16:51:22,844 - DEBUG - on stmt: $const138.21 = const(int, 2)
2025-01-05 16:51:22,845 - DEBUG - on stmt: $140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:22,847 - DEBUG - on stmt: $142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:22,849 - DEBUG - find_def var='i' stmt=$142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:22,850 - DEBUG - on stmt: $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,853 - DEBUG - on stmt: $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,855 - DEBUG - on stmt: $150get_iter.27 = getiter(value=$148call_function.26)
2025-01-05 16:51:22,856 - DEBUG - on stmt: $phi152.1 = $150get_iter.27
2025-01-05 16:51:22,857 - DEBUG - on stmt: jump 152
2025-01-05 16:51:22,858 - DEBUG - ==== SSA block rewrite pass on 152
2025-01-05 16:51:22,859 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146863D0>
2025-01-05 16:51:22,861 - DEBUG - on stmt: $152for_iter.2 = iternext(value=$phi152.1)
2025-01-05 16:51:22,862 - DEBUG - on stmt: $152for_iter.3 = pair_first(value=$152for_iter.2)
2025-01-05 16:51:22,864 - DEBUG - on stmt: $152for_iter.4 = pair_second(value=$152for_iter.2)
2025-01-05 16:51:22,865 - DEBUG - on stmt: $phi154.2 = $152for_iter.3
2025-01-05 16:51:22,866 - DEBUG - on stmt: branch $152for_iter.4, 154, 198
2025-01-05 16:51:22,867 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:22,868 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146863D0>
2025-01-05 16:51:22,870 - DEBUG - on stmt: k = $phi154.2
2025-01-05 16:51:22,871 - DEBUG - on stmt: $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,872 - DEBUG - find_def var='i' stmt=$162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,874 - DEBUG - find_def_from_top label 154
2025-01-05 16:51:22,874 - DEBUG - idom 152 from label 154
2025-01-05 16:51:22,875 - DEBUG - find_def_from_bottom label 152
2025-01-05 16:51:22,876 - DEBUG - find_def_from_top label 152
2025-01-05 16:51:22,877 - DEBUG - idom 96 from label 152
2025-01-05 16:51:22,878 - DEBUG - find_def_from_bottom label 96
2025-01-05 16:51:22,879 - DEBUG - on stmt: $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:22,881 - DEBUG - on stmt: $const176.14 = const(int, 2)
2025-01-05 16:51:22,882 - DEBUG - on stmt: $178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:22,884 - DEBUG - on stmt: $180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:22,885 - DEBUG - find_def var='i' stmt=$180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:22,886 - DEBUG - find_def_from_top label 154
2025-01-05 16:51:22,887 - DEBUG - idom 152 from label 154
2025-01-05 16:51:22,888 - DEBUG - find_def_from_bottom label 152
2025-01-05 16:51:22,889 - DEBUG - find_def_from_top label 152
2025-01-05 16:51:22,890 - DEBUG - idom 96 from label 152
2025-01-05 16:51:22,891 - DEBUG - find_def_from_bottom label 96
2025-01-05 16:51:22,892 - DEBUG - on stmt: $184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:22,893 - DEBUG - on stmt: $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:22,894 - DEBUG - on stmt: $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19
2025-01-05 16:51:22,896 - DEBUG - on stmt: $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:22,899 - DEBUG - on stmt: localscore[i] = $190inplace_add.21
2025-01-05 16:51:22,900 - DEBUG - find_def var='i' stmt=localscore[i] = $190inplace_add.21
2025-01-05 16:51:22,901 - DEBUG - find_def_from_top label 154
2025-01-05 16:51:22,902 - DEBUG - idom 152 from label 154
2025-01-05 16:51:22,903 - DEBUG - find_def_from_bottom label 152
2025-01-05 16:51:22,904 - DEBUG - find_def_from_top label 152
2025-01-05 16:51:22,905 - DEBUG - idom 96 from label 152
2025-01-05 16:51:22,906 - DEBUG - find_def_from_bottom label 96
2025-01-05 16:51:22,907 - DEBUG - on stmt: jump 152
2025-01-05 16:51:22,908 - DEBUG - ==== SSA block rewrite pass on 198
2025-01-05 16:51:22,909 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146863D0>
2025-01-05 16:51:22,910 - DEBUG - on stmt: jump 94
2025-01-05 16:51:22,911 - DEBUG - ==== SSA block rewrite pass on 200
2025-01-05 16:51:22,912 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146863D0>
2025-01-05 16:51:22,914 - DEBUG - on stmt: jump 412
2025-01-05 16:51:22,915 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-05 16:51:22,916 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146863D0>
2025-01-05 16:51:22,917 - DEBUG - on stmt: $202load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:22,919 - DEBUG - on stmt: $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,921 - DEBUG - on stmt: $208load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:22,922 - DEBUG - on stmt: $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,925 - DEBUG - on stmt: $214compare_op.6 = $206call_function.2 == $212call_function.5
2025-01-05 16:51:22,926 - DEBUG - on stmt: bool218 = global(bool: <class 'bool'>)
2025-01-05 16:51:22,928 - DEBUG - on stmt: $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,930 - DEBUG - on stmt: branch $218pred, 220, 412
2025-01-05 16:51:22,932 - DEBUG - ==== SSA block rewrite pass on 220
2025-01-05 16:51:22,933 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146863D0>
2025-01-05 16:51:22,934 - DEBUG - on stmt: $220load_global.0 = global(range: <class 'range'>)
2025-01-05 16:51:22,936 - DEBUG - on stmt: $222load_global.1 = global(len: <built-in function len>)
2025-01-05 16:51:22,937 - DEBUG - on stmt: $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,939 - DEBUG - on stmt: $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,942 - DEBUG - on stmt: $230get_iter.5 = getiter(value=$228call_function.4)
2025-01-05 16:51:22,943 - DEBUG - on stmt: $phi232.0 = $230get_iter.5
2025-01-05 16:51:22,944 - DEBUG - on stmt: jump 232
2025-01-05 16:51:22,945 - DEBUG - ==== SSA block rewrite pass on 232
2025-01-05 16:51:22,946 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146863D0>
2025-01-05 16:51:22,948 - DEBUG - on stmt: $232for_iter.1 = iternext(value=$phi232.0)
2025-01-05 16:51:22,950 - DEBUG - on stmt: $232for_iter.2 = pair_first(value=$232for_iter.1)
2025-01-05 16:51:22,951 - DEBUG - on stmt: $232for_iter.3 = pair_second(value=$232for_iter.1)
2025-01-05 16:51:22,953 - DEBUG - on stmt: $phi234.1 = $232for_iter.2
2025-01-05 16:51:22,954 - DEBUG - on stmt: branch $232for_iter.3, 234, 412
2025-01-05 16:51:22,955 - DEBUG - ==== SSA block rewrite pass on 234
2025-01-05 16:51:22,956 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146863D0>
2025-01-05 16:51:22,957 - DEBUG - on stmt: i.1 = $phi234.1
2025-01-05 16:51:22,958 - DEBUG - on stmt: $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:22,960 - DEBUG - on stmt: $238load_method.3 = getattr(value=$236load_global.2, attr=exp)
2025-01-05 16:51:22,962 - DEBUG - on stmt: $const240.4 = const(float, -0.5)
2025-01-05 16:51:22,963 - DEBUG - on stmt: $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:22,965 - DEBUG - on stmt: $244load_method.6 = getattr(value=$242load_global.5, attr=arange)
2025-01-05 16:51:22,967 - DEBUG - on stmt: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,968 - DEBUG - find_def var='i' stmt=$250binary_subscr.9 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,970 - DEBUG - replaced with: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:22,971 - DEBUG - on stmt: $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9)
2025-01-05 16:51:22,973 - DEBUG - on stmt: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,975 - DEBUG - find_def var='i' stmt=$258binary_subscr.13 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,976 - DEBUG - replaced with: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:22,978 - DEBUG - on stmt: $const260.14 = const(int, 1)
2025-01-05 16:51:22,979 - DEBUG - on stmt: $262binary_add.15 = $258binary_subscr.13 + $const260.14
2025-01-05 16:51:22,980 - DEBUG - on stmt: $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:22,983 - DEBUG - on stmt: $const266.17 = const(float, 32.0)
2025-01-05 16:51:22,984 - DEBUG - on stmt: $268binary_multiply.18 = $264call_method.16 * $const266.17
2025-01-05 16:51:22,986 - DEBUG - on stmt: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,988 - DEBUG - find_def var='i' stmt=$274binary_subscr.21 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:22,990 - DEBUG - replaced with: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:22,992 - DEBUG - on stmt: $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21
2025-01-05 16:51:22,993 - DEBUG - on stmt: $const278.23 = const(int, 2)
2025-01-05 16:51:22,994 - DEBUG - on stmt: $280binary_power.24 = $276binary_true_divide.22 ** $const278.23
2025-01-05 16:51:22,996 - DEBUG - on stmt: $282binary_multiply.25 = $const240.4 * $280binary_power.24
2025-01-05 16:51:22,998 - DEBUG - on stmt: window = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,000 - DEBUG - on stmt: $const288.27 = const(int, 2)
2025-01-05 16:51:23,001 - DEBUG - on stmt: $290load_global.28 = global(int: <class 'int'>)
2025-01-05 16:51:23,002 - DEBUG - on stmt: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:23,004 - DEBUG - find_def var='i' stmt=$296binary_subscr.31 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:23,006 - DEBUG - replaced with: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:23,007 - DEBUG - on stmt: $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,009 - DEBUG - on stmt: $300binary_multiply.33 = $const288.27 * $298call_function.32
2025-01-05 16:51:23,011 - DEBUG - on stmt: $const302.34 = const(int, 1)
2025-01-05 16:51:23,012 - DEBUG - on stmt: K = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:23,013 - DEBUG - on stmt: $const308.36 = const(float, 0.0)
2025-01-05 16:51:23,015 - DEBUG - on stmt: localscore[i] = $const308.36
2025-01-05 16:51:23,015 - DEBUG - find_def var='i' stmt=localscore[i] = $const308.36
2025-01-05 16:51:23,017 - DEBUG - replaced with: localscore[i.1] = $const308.36
2025-01-05 16:51:23,018 - DEBUG - on stmt: $316load_global.39 = global(range: <class 'range'>)
2025-01-05 16:51:23,019 - DEBUG - on stmt: $318load_global.40 = global(max: <built-in function max>)
2025-01-05 16:51:23,021 - DEBUG - on stmt: $const320.41 = const(int, 0)
2025-01-05 16:51:23,022 - DEBUG - on stmt: $const326.44 = const(int, 2)
2025-01-05 16:51:23,023 - DEBUG - on stmt: $328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:23,025 - DEBUG - on stmt: $330binary_add.46 = i + $328binary_floor_divide.45
2025-01-05 16:51:23,026 - DEBUG - find_def var='i' stmt=$330binary_add.46 = i + $328binary_floor_divide.45
2025-01-05 16:51:23,028 - DEBUG - replaced with: $330binary_add.46 = i.1 + $328binary_floor_divide.45
2025-01-05 16:51:23,029 - DEBUG - on stmt: $334binary_subtract.48 = $330binary_add.46 - N
2025-01-05 16:51:23,031 - DEBUG - on stmt: $const336.49 = const(int, 1)
2025-01-05 16:51:23,032 - DEBUG - on stmt: $338binary_add.50 = $334binary_subtract.48 + $const336.49
2025-01-05 16:51:23,034 - DEBUG - on stmt: $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,036 - DEBUG - on stmt: $342load_global.52 = global(min: <built-in function min>)
2025-01-05 16:51:23,038 - DEBUG - on stmt: $const348.55 = const(int, 2)
2025-01-05 16:51:23,039 - DEBUG - on stmt: $350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:23,041 - DEBUG - on stmt: $352binary_add.57 = i + $350binary_floor_divide.56
2025-01-05 16:51:23,042 - DEBUG - find_def var='i' stmt=$352binary_add.57 = i + $350binary_floor_divide.56
2025-01-05 16:51:23,044 - DEBUG - replaced with: $352binary_add.57 = i.1 + $350binary_floor_divide.56
2025-01-05 16:51:23,045 - DEBUG - on stmt: $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,048 - DEBUG - on stmt: $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,051 - DEBUG - on stmt: $360get_iter.61 = getiter(value=$358call_function.60)
2025-01-05 16:51:23,053 - DEBUG - on stmt: $phi362.1 = $360get_iter.61
2025-01-05 16:51:23,054 - DEBUG - on stmt: jump 362
2025-01-05 16:51:23,055 - DEBUG - ==== SSA block rewrite pass on 362
2025-01-05 16:51:23,056 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146863D0>
2025-01-05 16:51:23,057 - DEBUG - on stmt: $362for_iter.2 = iternext(value=$phi362.1)
2025-01-05 16:51:23,059 - DEBUG - on stmt: $362for_iter.3 = pair_first(value=$362for_iter.2)
2025-01-05 16:51:23,060 - DEBUG - on stmt: $362for_iter.4 = pair_second(value=$362for_iter.2)
2025-01-05 16:51:23,062 - DEBUG - on stmt: $phi364.2 = $362for_iter.3
2025-01-05 16:51:23,064 - DEBUG - on stmt: branch $362for_iter.4, 364, 410
2025-01-05 16:51:23,065 - DEBUG - ==== SSA block rewrite pass on 364
2025-01-05 16:51:23,066 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146863D0>
2025-01-05 16:51:23,067 - DEBUG - on stmt: k.1 = $phi364.2
2025-01-05 16:51:23,068 - DEBUG - on stmt: $372binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:23,070 - DEBUG - find_def var='i' stmt=$372binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:23,072 - DEBUG - find_def_from_top label 364
2025-01-05 16:51:23,073 - DEBUG - idom 362 from label 364
2025-01-05 16:51:23,074 - DEBUG - find_def_from_bottom label 362
2025-01-05 16:51:23,075 - DEBUG - find_def_from_top label 362
2025-01-05 16:51:23,075 - DEBUG - idom 234 from label 362
2025-01-05 16:51:23,076 - DEBUG - find_def_from_bottom label 234
2025-01-05 16:51:23,077 - DEBUG - replaced with: $372binary_subscr.7 = getitem(value=localscore, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:23,079 - DEBUG - on stmt: $378binary_subscr.10 = getitem(value=window, index=k.1, fn=<built-in function getitem>)
2025-01-05 16:51:23,080 - DEBUG - on stmt: $const386.14 = const(int, 2)
2025-01-05 16:51:23,082 - DEBUG - on stmt: $388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:23,083 - DEBUG - on stmt: $390binary_add.16 = i + $388binary_floor_divide.15
2025-01-05 16:51:23,084 - DEBUG - find_def var='i' stmt=$390binary_add.16 = i + $388binary_floor_divide.15
2025-01-05 16:51:23,086 - DEBUG - find_def_from_top label 364
2025-01-05 16:51:23,087 - DEBUG - idom 362 from label 364
2025-01-05 16:51:23,088 - DEBUG - find_def_from_bottom label 362
2025-01-05 16:51:23,089 - DEBUG - find_def_from_top label 362
2025-01-05 16:51:23,090 - DEBUG - idom 234 from label 362
2025-01-05 16:51:23,091 - DEBUG - find_def_from_bottom label 234
2025-01-05 16:51:23,092 - DEBUG - replaced with: $390binary_add.16 = i.1 + $388binary_floor_divide.15
2025-01-05 16:51:23,093 - DEBUG - on stmt: $394binary_subtract.18 = $390binary_add.16 - k.1
2025-01-05 16:51:23,095 - DEBUG - on stmt: $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:23,096 - DEBUG - on stmt: $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19
2025-01-05 16:51:23,098 - DEBUG - on stmt: $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:23,100 - DEBUG - on stmt: localscore[i] = $400inplace_add.21
2025-01-05 16:51:23,102 - DEBUG - find_def var='i' stmt=localscore[i] = $400inplace_add.21
2025-01-05 16:51:23,103 - DEBUG - find_def_from_top label 364
2025-01-05 16:51:23,104 - DEBUG - idom 362 from label 364
2025-01-05 16:51:23,105 - DEBUG - find_def_from_bottom label 362
2025-01-05 16:51:23,106 - DEBUG - find_def_from_top label 362
2025-01-05 16:51:23,107 - DEBUG - idom 234 from label 362
2025-01-05 16:51:23,108 - DEBUG - find_def_from_bottom label 234
2025-01-05 16:51:23,109 - DEBUG - replaced with: localscore[i.1] = $400inplace_add.21
2025-01-05 16:51:23,110 - DEBUG - on stmt: jump 362
2025-01-05 16:51:23,111 - DEBUG - ==== SSA block rewrite pass on 410
2025-01-05 16:51:23,112 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146863D0>
2025-01-05 16:51:23,114 - DEBUG - on stmt: jump 232
2025-01-05 16:51:23,115 - DEBUG - ==== SSA block rewrite pass on 412
2025-01-05 16:51:23,116 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146863D0>
2025-01-05 16:51:23,117 - DEBUG - on stmt: $const412.0 = const(NoneType, None)
2025-01-05 16:51:23,118 - DEBUG - on stmt: $414return_value.1 = cast(value=$const412.0)
2025-01-05 16:51:23,119 - DEBUG - on stmt: return $414return_value.1
2025-01-05 16:51:23,120 - DEBUG - Fix SSA violator on var window
2025-01-05 16:51:23,121 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:23,122 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001828C4F0>
2025-01-05 16:51:23,123 - DEBUG - on stmt: onset_envelope = arg(0, name=onset_envelope)
2025-01-05 16:51:23,125 - DEBUG - on stmt: frames_per_beat = arg(1, name=frames_per_beat)
2025-01-05 16:51:23,127 - DEBUG - on stmt: localscore = arg(2, name=localscore)
2025-01-05 16:51:23,128 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:23,129 - DEBUG - on stmt: N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,131 - DEBUG - on stmt: $10load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:23,133 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,135 - DEBUG - on stmt: $const16.6 = const(int, 1)
2025-01-05 16:51:23,136 - DEBUG - on stmt: $18compare_op.7 = $14call_function.5 == $const16.6
2025-01-05 16:51:23,138 - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-01-05 16:51:23,139 - DEBUG - on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,142 - DEBUG - on stmt: branch $20pred, 22, 202
2025-01-05 16:51:23,143 - DEBUG - ==== SSA block rewrite pass on 22
2025-01-05 16:51:23,144 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001828C4F0>
2025-01-05 16:51:23,145 - DEBUG - on stmt: $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:23,147 - DEBUG - on stmt: $24load_method.1 = getattr(value=$22load_global.0, attr=exp)
2025-01-05 16:51:23,149 - DEBUG - on stmt: $const26.2 = const(float, -0.5)
2025-01-05 16:51:23,150 - DEBUG - on stmt: $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:23,152 - DEBUG - on stmt: $30load_method.4 = getattr(value=$28load_global.3, attr=arange)
2025-01-05 16:51:23,154 - DEBUG - on stmt: $const34.6 = const(int, 0)
2025-01-05 16:51:23,155 - DEBUG - on stmt: $36binary_subscr.7 = static_getitem(value=frames_per_beat, index=0, index_var=$const34.6, fn=<built-in function getitem>)
2025-01-05 16:51:23,157 - DEBUG - on stmt: $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7)
2025-01-05 16:51:23,158 - DEBUG - on stmt: $const42.10 = const(int, 0)
2025-01-05 16:51:23,160 - DEBUG - on stmt: $44binary_subscr.11 = static_getitem(value=frames_per_beat, index=0, index_var=$const42.10, fn=<built-in function getitem>)
2025-01-05 16:51:23,161 - DEBUG - on stmt: $const46.12 = const(int, 1)
2025-01-05 16:51:23,163 - DEBUG - on stmt: $48binary_add.13 = $44binary_subscr.11 + $const46.12
2025-01-05 16:51:23,164 - DEBUG - on stmt: $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,167 - DEBUG - on stmt: $const52.15 = const(float, 32.0)
2025-01-05 16:51:23,168 - DEBUG - on stmt: $54binary_multiply.16 = $50call_method.14 * $const52.15
2025-01-05 16:51:23,170 - DEBUG - on stmt: $const58.18 = const(int, 0)
2025-01-05 16:51:23,171 - DEBUG - on stmt: $60binary_subscr.19 = static_getitem(value=frames_per_beat, index=0, index_var=$const58.18, fn=<built-in function getitem>)
2025-01-05 16:51:23,173 - DEBUG - on stmt: $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19
2025-01-05 16:51:23,174 - DEBUG - on stmt: $const64.21 = const(int, 2)
2025-01-05 16:51:23,175 - DEBUG - on stmt: $66binary_power.22 = $62binary_true_divide.20 ** $const64.21
2025-01-05 16:51:23,177 - DEBUG - on stmt: $68binary_multiply.23 = $const26.2 * $66binary_power.22
2025-01-05 16:51:23,178 - DEBUG - on stmt: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,181 - DEBUG - first assign: window
2025-01-05 16:51:23,182 - DEBUG - replaced with: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,184 - DEBUG - on stmt: $74load_global.25 = global(len: <built-in function len>)
2025-01-05 16:51:23,186 - DEBUG - on stmt: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,188 - DEBUG - on stmt: $82load_global.28 = global(range: <class 'range'>)
2025-01-05 16:51:23,190 - DEBUG - on stmt: $84load_global.29 = global(len: <built-in function len>)
2025-01-05 16:51:23,191 - DEBUG - on stmt: $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,193 - DEBUG - on stmt: $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,196 - DEBUG - on stmt: $92get_iter.33 = getiter(value=$90call_function.32)
2025-01-05 16:51:23,198 - DEBUG - on stmt: $phi94.0 = $92get_iter.33
2025-01-05 16:51:23,199 - DEBUG - on stmt: jump 94
2025-01-05 16:51:23,200 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:23,201 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001828C4F0>
2025-01-05 16:51:23,202 - DEBUG - on stmt: $94for_iter.1 = iternext(value=$phi94.0)
2025-01-05 16:51:23,204 - DEBUG - on stmt: $94for_iter.2 = pair_first(value=$94for_iter.1)
2025-01-05 16:51:23,205 - DEBUG - on stmt: $94for_iter.3 = pair_second(value=$94for_iter.1)
2025-01-05 16:51:23,207 - DEBUG - on stmt: $phi96.1 = $94for_iter.2
2025-01-05 16:51:23,208 - DEBUG - on stmt: branch $94for_iter.3, 96, 200
2025-01-05 16:51:23,209 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:23,210 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001828C4F0>
2025-01-05 16:51:23,211 - DEBUG - on stmt: i = $phi96.1
2025-01-05 16:51:23,212 - DEBUG - on stmt: $const98.2 = const(float, 0.0)
2025-01-05 16:51:23,213 - DEBUG - on stmt: localscore[i] = $const98.2
2025-01-05 16:51:23,214 - DEBUG - on stmt: $106load_global.5 = global(range: <class 'range'>)
2025-01-05 16:51:23,216 - DEBUG - on stmt: $108load_global.6 = global(max: <built-in function max>)
2025-01-05 16:51:23,218 - DEBUG - on stmt: $const110.7 = const(int, 0)
2025-01-05 16:51:23,219 - DEBUG - on stmt: $const116.10 = const(int, 2)
2025-01-05 16:51:23,220 - DEBUG - on stmt: $118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:23,221 - DEBUG - on stmt: $120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:23,223 - DEBUG - on stmt: $124binary_subtract.14 = $120binary_add.12 - N
2025-01-05 16:51:23,225 - DEBUG - on stmt: $const126.15 = const(int, 1)
2025-01-05 16:51:23,226 - DEBUG - on stmt: $128binary_add.16 = $124binary_subtract.14 + $const126.15
2025-01-05 16:51:23,227 - DEBUG - on stmt: $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,230 - DEBUG - on stmt: $132load_global.18 = global(min: <built-in function min>)
2025-01-05 16:51:23,232 - DEBUG - on stmt: $const138.21 = const(int, 2)
2025-01-05 16:51:23,233 - DEBUG - on stmt: $140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:23,234 - DEBUG - on stmt: $142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:23,236 - DEBUG - on stmt: $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,239 - DEBUG - on stmt: $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,241 - DEBUG - on stmt: $150get_iter.27 = getiter(value=$148call_function.26)
2025-01-05 16:51:23,243 - DEBUG - on stmt: $phi152.1 = $150get_iter.27
2025-01-05 16:51:23,244 - DEBUG - on stmt: jump 152
2025-01-05 16:51:23,245 - DEBUG - ==== SSA block rewrite pass on 152
2025-01-05 16:51:23,246 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001828C4F0>
2025-01-05 16:51:23,248 - DEBUG - on stmt: $152for_iter.2 = iternext(value=$phi152.1)
2025-01-05 16:51:23,249 - DEBUG - on stmt: $152for_iter.3 = pair_first(value=$152for_iter.2)
2025-01-05 16:51:23,251 - DEBUG - on stmt: $152for_iter.4 = pair_second(value=$152for_iter.2)
2025-01-05 16:51:23,253 - DEBUG - on stmt: $phi154.2 = $152for_iter.3
2025-01-05 16:51:23,254 - DEBUG - on stmt: branch $152for_iter.4, 154, 198
2025-01-05 16:51:23,255 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:23,255 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001828C4F0>
2025-01-05 16:51:23,257 - DEBUG - on stmt: k = $phi154.2
2025-01-05 16:51:23,258 - DEBUG - on stmt: $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:23,259 - DEBUG - on stmt: $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:23,261 - DEBUG - on stmt: $const176.14 = const(int, 2)
2025-01-05 16:51:23,262 - DEBUG - on stmt: $178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:23,264 - DEBUG - on stmt: $180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:23,265 - DEBUG - on stmt: $184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:23,267 - DEBUG - on stmt: $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:23,268 - DEBUG - on stmt: $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19
2025-01-05 16:51:23,270 - DEBUG - on stmt: $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:23,273 - DEBUG - on stmt: localscore[i] = $190inplace_add.21
2025-01-05 16:51:23,274 - DEBUG - on stmt: jump 152
2025-01-05 16:51:23,275 - DEBUG - ==== SSA block rewrite pass on 198
2025-01-05 16:51:23,276 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001828C4F0>
2025-01-05 16:51:23,277 - DEBUG - on stmt: jump 94
2025-01-05 16:51:23,278 - DEBUG - ==== SSA block rewrite pass on 200
2025-01-05 16:51:23,279 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001828C4F0>
2025-01-05 16:51:23,281 - DEBUG - on stmt: jump 412
2025-01-05 16:51:23,282 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-05 16:51:23,283 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001828C4F0>
2025-01-05 16:51:23,284 - DEBUG - on stmt: $202load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:23,285 - DEBUG - on stmt: $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,287 - DEBUG - on stmt: $208load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:23,289 - DEBUG - on stmt: $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,292 - DEBUG - on stmt: $214compare_op.6 = $206call_function.2 == $212call_function.5
2025-01-05 16:51:23,294 - DEBUG - on stmt: bool218 = global(bool: <class 'bool'>)
2025-01-05 16:51:23,295 - DEBUG - on stmt: $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,298 - DEBUG - on stmt: branch $218pred, 220, 412
2025-01-05 16:51:23,299 - DEBUG - ==== SSA block rewrite pass on 220
2025-01-05 16:51:23,300 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001828C4F0>
2025-01-05 16:51:23,301 - DEBUG - on stmt: $220load_global.0 = global(range: <class 'range'>)
2025-01-05 16:51:23,302 - DEBUG - on stmt: $222load_global.1 = global(len: <built-in function len>)
2025-01-05 16:51:23,304 - DEBUG - on stmt: $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,306 - DEBUG - on stmt: $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,308 - DEBUG - on stmt: $230get_iter.5 = getiter(value=$228call_function.4)
2025-01-05 16:51:23,310 - DEBUG - on stmt: $phi232.0 = $230get_iter.5
2025-01-05 16:51:23,311 - DEBUG - on stmt: jump 232
2025-01-05 16:51:23,312 - DEBUG - ==== SSA block rewrite pass on 232
2025-01-05 16:51:23,313 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001828C4F0>
2025-01-05 16:51:23,314 - DEBUG - on stmt: $232for_iter.1 = iternext(value=$phi232.0)
2025-01-05 16:51:23,316 - DEBUG - on stmt: $232for_iter.2 = pair_first(value=$232for_iter.1)
2025-01-05 16:51:23,318 - DEBUG - on stmt: $232for_iter.3 = pair_second(value=$232for_iter.1)
2025-01-05 16:51:23,319 - DEBUG - on stmt: $phi234.1 = $232for_iter.2
2025-01-05 16:51:23,320 - DEBUG - on stmt: branch $232for_iter.3, 234, 412
2025-01-05 16:51:23,321 - DEBUG - ==== SSA block rewrite pass on 234
2025-01-05 16:51:23,322 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001828C4F0>
2025-01-05 16:51:23,324 - DEBUG - on stmt: i.1 = $phi234.1
2025-01-05 16:51:23,325 - DEBUG - on stmt: $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:23,327 - DEBUG - on stmt: $238load_method.3 = getattr(value=$236load_global.2, attr=exp)
2025-01-05 16:51:23,328 - DEBUG - on stmt: $const240.4 = const(float, -0.5)
2025-01-05 16:51:23,329 - DEBUG - on stmt: $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:23,332 - DEBUG - on stmt: $244load_method.6 = getattr(value=$242load_global.5, attr=arange)
2025-01-05 16:51:23,333 - DEBUG - on stmt: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:23,335 - DEBUG - on stmt: $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9)
2025-01-05 16:51:23,337 - DEBUG - on stmt: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:23,338 - DEBUG - on stmt: $const260.14 = const(int, 1)
2025-01-05 16:51:23,339 - DEBUG - on stmt: $262binary_add.15 = $258binary_subscr.13 + $const260.14
2025-01-05 16:51:23,340 - DEBUG - on stmt: $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,343 - DEBUG - on stmt: $const266.17 = const(float, 32.0)
2025-01-05 16:51:23,344 - DEBUG - on stmt: $268binary_multiply.18 = $264call_method.16 * $const266.17
2025-01-05 16:51:23,346 - DEBUG - on stmt: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:23,348 - DEBUG - on stmt: $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21
2025-01-05 16:51:23,349 - DEBUG - on stmt: $const278.23 = const(int, 2)
2025-01-05 16:51:23,350 - DEBUG - on stmt: $280binary_power.24 = $276binary_true_divide.22 ** $const278.23
2025-01-05 16:51:23,351 - DEBUG - on stmt: $282binary_multiply.25 = $const240.4 * $280binary_power.24
2025-01-05 16:51:23,353 - DEBUG - on stmt: window = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,355 - DEBUG - replaced with: window.1 = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,357 - DEBUG - on stmt: $const288.27 = const(int, 2)
2025-01-05 16:51:23,359 - DEBUG - on stmt: $290load_global.28 = global(int: <class 'int'>)
2025-01-05 16:51:23,360 - DEBUG - on stmt: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:23,362 - DEBUG - on stmt: $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,364 - DEBUG - on stmt: $300binary_multiply.33 = $const288.27 * $298call_function.32
2025-01-05 16:51:23,366 - DEBUG - on stmt: $const302.34 = const(int, 1)
2025-01-05 16:51:23,367 - DEBUG - on stmt: K = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:23,369 - DEBUG - on stmt: $const308.36 = const(float, 0.0)
2025-01-05 16:51:23,370 - DEBUG - on stmt: localscore[i.1] = $const308.36
2025-01-05 16:51:23,371 - DEBUG - on stmt: $316load_global.39 = global(range: <class 'range'>)
2025-01-05 16:51:23,372 - DEBUG - on stmt: $318load_global.40 = global(max: <built-in function max>)
2025-01-05 16:51:23,374 - DEBUG - on stmt: $const320.41 = const(int, 0)
2025-01-05 16:51:23,375 - DEBUG - on stmt: $const326.44 = const(int, 2)
2025-01-05 16:51:23,376 - DEBUG - on stmt: $328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:23,378 - DEBUG - on stmt: $330binary_add.46 = i.1 + $328binary_floor_divide.45
2025-01-05 16:51:23,379 - DEBUG - on stmt: $334binary_subtract.48 = $330binary_add.46 - N
2025-01-05 16:51:23,381 - DEBUG - on stmt: $const336.49 = const(int, 1)
2025-01-05 16:51:23,382 - DEBUG - on stmt: $338binary_add.50 = $334binary_subtract.48 + $const336.49
2025-01-05 16:51:23,383 - DEBUG - on stmt: $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,386 - DEBUG - on stmt: $342load_global.52 = global(min: <built-in function min>)
2025-01-05 16:51:23,388 - DEBUG - on stmt: $const348.55 = const(int, 2)
2025-01-05 16:51:23,389 - DEBUG - on stmt: $350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:23,390 - DEBUG - on stmt: $352binary_add.57 = i.1 + $350binary_floor_divide.56
2025-01-05 16:51:23,392 - DEBUG - on stmt: $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,394 - DEBUG - on stmt: $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,397 - DEBUG - on stmt: $360get_iter.61 = getiter(value=$358call_function.60)
2025-01-05 16:51:23,399 - DEBUG - on stmt: $phi362.1 = $360get_iter.61
2025-01-05 16:51:23,400 - DEBUG - on stmt: jump 362
2025-01-05 16:51:23,401 - DEBUG - ==== SSA block rewrite pass on 362
2025-01-05 16:51:23,402 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001828C4F0>
2025-01-05 16:51:23,404 - DEBUG - on stmt: $362for_iter.2 = iternext(value=$phi362.1)
2025-01-05 16:51:23,405 - DEBUG - on stmt: $362for_iter.3 = pair_first(value=$362for_iter.2)
2025-01-05 16:51:23,407 - DEBUG - on stmt: $362for_iter.4 = pair_second(value=$362for_iter.2)
2025-01-05 16:51:23,408 - DEBUG - on stmt: $phi364.2 = $362for_iter.3
2025-01-05 16:51:23,409 - DEBUG - on stmt: branch $362for_iter.4, 364, 410
2025-01-05 16:51:23,410 - DEBUG - ==== SSA block rewrite pass on 364
2025-01-05 16:51:23,411 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001828C4F0>
2025-01-05 16:51:23,412 - DEBUG - on stmt: k.1 = $phi364.2
2025-01-05 16:51:23,414 - DEBUG - on stmt: $372binary_subscr.7 = getitem(value=localscore, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:23,415 - DEBUG - on stmt: $378binary_subscr.10 = getitem(value=window, index=k.1, fn=<built-in function getitem>)
2025-01-05 16:51:23,416 - DEBUG - on stmt: $const386.14 = const(int, 2)
2025-01-05 16:51:23,418 - DEBUG - on stmt: $388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:23,419 - DEBUG - on stmt: $390binary_add.16 = i.1 + $388binary_floor_divide.15
2025-01-05 16:51:23,420 - DEBUG - on stmt: $394binary_subtract.18 = $390binary_add.16 - k.1
2025-01-05 16:51:23,422 - DEBUG - on stmt: $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:23,423 - DEBUG - on stmt: $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19
2025-01-05 16:51:23,425 - DEBUG - on stmt: $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:23,428 - DEBUG - on stmt: localscore[i.1] = $400inplace_add.21
2025-01-05 16:51:23,429 - DEBUG - on stmt: jump 362
2025-01-05 16:51:23,430 - DEBUG - ==== SSA block rewrite pass on 410
2025-01-05 16:51:23,431 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001828C4F0>
2025-01-05 16:51:23,432 - DEBUG - on stmt: jump 232
2025-01-05 16:51:23,433 - DEBUG - ==== SSA block rewrite pass on 412
2025-01-05 16:51:23,434 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001828C4F0>
2025-01-05 16:51:23,436 - DEBUG - on stmt: $const412.0 = const(NoneType, None)
2025-01-05 16:51:23,437 - DEBUG - on stmt: $414return_value.1 = cast(value=$const412.0)
2025-01-05 16:51:23,438 - DEBUG - on stmt: return $414return_value.1
2025-01-05 16:51:23,439 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {22: [<numba.core.ir.Assign object at 0x00000000182A72E0>],
             234: [<numba.core.ir.Assign object at 0x0000000014686E20>]})
2025-01-05 16:51:23,442 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:23,443 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014656040>
2025-01-05 16:51:23,445 - DEBUG - on stmt: onset_envelope = arg(0, name=onset_envelope)
2025-01-05 16:51:23,446 - DEBUG - on stmt: frames_per_beat = arg(1, name=frames_per_beat)
2025-01-05 16:51:23,449 - DEBUG - on stmt: localscore = arg(2, name=localscore)
2025-01-05 16:51:23,450 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:23,451 - DEBUG - on stmt: N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,453 - DEBUG - on stmt: $10load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:23,455 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,457 - DEBUG - on stmt: $const16.6 = const(int, 1)
2025-01-05 16:51:23,458 - DEBUG - on stmt: $18compare_op.7 = $14call_function.5 == $const16.6
2025-01-05 16:51:23,459 - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-01-05 16:51:23,461 - DEBUG - on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,463 - DEBUG - on stmt: branch $20pred, 22, 202
2025-01-05 16:51:23,465 - DEBUG - ==== SSA block rewrite pass on 22
2025-01-05 16:51:23,465 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014656040>
2025-01-05 16:51:23,467 - DEBUG - on stmt: $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:23,469 - DEBUG - on stmt: $24load_method.1 = getattr(value=$22load_global.0, attr=exp)
2025-01-05 16:51:23,471 - DEBUG - on stmt: $const26.2 = const(float, -0.5)
2025-01-05 16:51:23,472 - DEBUG - on stmt: $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:23,474 - DEBUG - on stmt: $30load_method.4 = getattr(value=$28load_global.3, attr=arange)
2025-01-05 16:51:23,475 - DEBUG - on stmt: $const34.6 = const(int, 0)
2025-01-05 16:51:23,476 - DEBUG - on stmt: $36binary_subscr.7 = static_getitem(value=frames_per_beat, index=0, index_var=$const34.6, fn=<built-in function getitem>)
2025-01-05 16:51:23,478 - DEBUG - on stmt: $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7)
2025-01-05 16:51:23,480 - DEBUG - on stmt: $const42.10 = const(int, 0)
2025-01-05 16:51:23,481 - DEBUG - on stmt: $44binary_subscr.11 = static_getitem(value=frames_per_beat, index=0, index_var=$const42.10, fn=<built-in function getitem>)
2025-01-05 16:51:23,483 - DEBUG - on stmt: $const46.12 = const(int, 1)
2025-01-05 16:51:23,484 - DEBUG - on stmt: $48binary_add.13 = $44binary_subscr.11 + $const46.12
2025-01-05 16:51:23,486 - DEBUG - on stmt: $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,488 - DEBUG - on stmt: $const52.15 = const(float, 32.0)
2025-01-05 16:51:23,489 - DEBUG - on stmt: $54binary_multiply.16 = $50call_method.14 * $const52.15
2025-01-05 16:51:23,491 - DEBUG - on stmt: $const58.18 = const(int, 0)
2025-01-05 16:51:23,492 - DEBUG - on stmt: $60binary_subscr.19 = static_getitem(value=frames_per_beat, index=0, index_var=$const58.18, fn=<built-in function getitem>)
2025-01-05 16:51:23,494 - DEBUG - on stmt: $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19
2025-01-05 16:51:23,495 - DEBUG - on stmt: $const64.21 = const(int, 2)
2025-01-05 16:51:23,497 - DEBUG - on stmt: $66binary_power.22 = $62binary_true_divide.20 ** $const64.21
2025-01-05 16:51:23,498 - DEBUG - on stmt: $68binary_multiply.23 = $const26.2 * $66binary_power.22
2025-01-05 16:51:23,500 - DEBUG - on stmt: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,502 - DEBUG - on stmt: $74load_global.25 = global(len: <built-in function len>)
2025-01-05 16:51:23,504 - DEBUG - on stmt: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,506 - DEBUG - find_def var='window' stmt=K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,508 - DEBUG - on stmt: $82load_global.28 = global(range: <class 'range'>)
2025-01-05 16:51:23,509 - DEBUG - on stmt: $84load_global.29 = global(len: <built-in function len>)
2025-01-05 16:51:23,511 - DEBUG - on stmt: $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,513 - DEBUG - on stmt: $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,516 - DEBUG - on stmt: $92get_iter.33 = getiter(value=$90call_function.32)
2025-01-05 16:51:23,517 - DEBUG - on stmt: $phi94.0 = $92get_iter.33
2025-01-05 16:51:23,519 - DEBUG - on stmt: jump 94
2025-01-05 16:51:23,520 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:23,521 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014656040>
2025-01-05 16:51:23,523 - DEBUG - on stmt: $94for_iter.1 = iternext(value=$phi94.0)
2025-01-05 16:51:23,524 - DEBUG - on stmt: $94for_iter.2 = pair_first(value=$94for_iter.1)
2025-01-05 16:51:23,526 - DEBUG - on stmt: $94for_iter.3 = pair_second(value=$94for_iter.1)
2025-01-05 16:51:23,528 - DEBUG - on stmt: $phi96.1 = $94for_iter.2
2025-01-05 16:51:23,529 - DEBUG - on stmt: branch $94for_iter.3, 96, 200
2025-01-05 16:51:23,530 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:23,531 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014656040>
2025-01-05 16:51:23,532 - DEBUG - on stmt: i = $phi96.1
2025-01-05 16:51:23,533 - DEBUG - on stmt: $const98.2 = const(float, 0.0)
2025-01-05 16:51:23,534 - DEBUG - on stmt: localscore[i] = $const98.2
2025-01-05 16:51:23,535 - DEBUG - on stmt: $106load_global.5 = global(range: <class 'range'>)
2025-01-05 16:51:23,536 - DEBUG - on stmt: $108load_global.6 = global(max: <built-in function max>)
2025-01-05 16:51:23,538 - DEBUG - on stmt: $const110.7 = const(int, 0)
2025-01-05 16:51:23,539 - DEBUG - on stmt: $const116.10 = const(int, 2)
2025-01-05 16:51:23,540 - DEBUG - on stmt: $118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:23,541 - DEBUG - on stmt: $120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:23,543 - DEBUG - on stmt: $124binary_subtract.14 = $120binary_add.12 - N
2025-01-05 16:51:23,544 - DEBUG - on stmt: $const126.15 = const(int, 1)
2025-01-05 16:51:23,545 - DEBUG - on stmt: $128binary_add.16 = $124binary_subtract.14 + $const126.15
2025-01-05 16:51:23,547 - DEBUG - on stmt: $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,550 - DEBUG - on stmt: $132load_global.18 = global(min: <built-in function min>)
2025-01-05 16:51:23,551 - DEBUG - on stmt: $const138.21 = const(int, 2)
2025-01-05 16:51:23,553 - DEBUG - on stmt: $140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:23,554 - DEBUG - on stmt: $142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:23,555 - DEBUG - on stmt: $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,558 - DEBUG - on stmt: $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,561 - DEBUG - on stmt: $150get_iter.27 = getiter(value=$148call_function.26)
2025-01-05 16:51:23,563 - DEBUG - on stmt: $phi152.1 = $150get_iter.27
2025-01-05 16:51:23,564 - DEBUG - on stmt: jump 152
2025-01-05 16:51:23,565 - DEBUG - ==== SSA block rewrite pass on 152
2025-01-05 16:51:23,566 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014656040>
2025-01-05 16:51:23,567 - DEBUG - on stmt: $152for_iter.2 = iternext(value=$phi152.1)
2025-01-05 16:51:23,569 - DEBUG - on stmt: $152for_iter.3 = pair_first(value=$152for_iter.2)
2025-01-05 16:51:23,570 - DEBUG - on stmt: $152for_iter.4 = pair_second(value=$152for_iter.2)
2025-01-05 16:51:23,572 - DEBUG - on stmt: $phi154.2 = $152for_iter.3
2025-01-05 16:51:23,573 - DEBUG - on stmt: branch $152for_iter.4, 154, 198
2025-01-05 16:51:23,574 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:23,575 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014656040>
2025-01-05 16:51:23,576 - DEBUG - on stmt: k = $phi154.2
2025-01-05 16:51:23,577 - DEBUG - on stmt: $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:23,578 - DEBUG - on stmt: $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:23,580 - DEBUG - find_def var='window' stmt=$168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:23,582 - DEBUG - find_def_from_top label 154
2025-01-05 16:51:23,583 - DEBUG - idom 152 from label 154
2025-01-05 16:51:23,584 - DEBUG - find_def_from_bottom label 152
2025-01-05 16:51:23,585 - DEBUG - find_def_from_top label 152
2025-01-05 16:51:23,586 - DEBUG - idom 96 from label 152
2025-01-05 16:51:23,587 - DEBUG - find_def_from_bottom label 96
2025-01-05 16:51:23,588 - DEBUG - find_def_from_top label 96
2025-01-05 16:51:23,588 - DEBUG - idom 94 from label 96
2025-01-05 16:51:23,589 - DEBUG - find_def_from_bottom label 94
2025-01-05 16:51:23,590 - DEBUG - find_def_from_top label 94
2025-01-05 16:51:23,591 - DEBUG - idom 22 from label 94
2025-01-05 16:51:23,592 - DEBUG - find_def_from_bottom label 22
2025-01-05 16:51:23,593 - DEBUG - on stmt: $const176.14 = const(int, 2)
2025-01-05 16:51:23,594 - DEBUG - on stmt: $178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:23,596 - DEBUG - on stmt: $180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:23,598 - DEBUG - on stmt: $184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:23,599 - DEBUG - on stmt: $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:23,601 - DEBUG - on stmt: $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19
2025-01-05 16:51:23,602 - DEBUG - on stmt: $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:23,605 - DEBUG - on stmt: localscore[i] = $190inplace_add.21
2025-01-05 16:51:23,606 - DEBUG - on stmt: jump 152
2025-01-05 16:51:23,607 - DEBUG - ==== SSA block rewrite pass on 198
2025-01-05 16:51:23,608 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014656040>
2025-01-05 16:51:23,609 - DEBUG - on stmt: jump 94
2025-01-05 16:51:23,610 - DEBUG - ==== SSA block rewrite pass on 200
2025-01-05 16:51:23,611 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014656040>
2025-01-05 16:51:23,613 - DEBUG - on stmt: jump 412
2025-01-05 16:51:23,614 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-05 16:51:23,615 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014656040>
2025-01-05 16:51:23,617 - DEBUG - on stmt: $202load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:23,619 - DEBUG - on stmt: $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,621 - DEBUG - on stmt: $208load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:23,623 - DEBUG - on stmt: $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,625 - DEBUG - on stmt: $214compare_op.6 = $206call_function.2 == $212call_function.5
2025-01-05 16:51:23,627 - DEBUG - on stmt: bool218 = global(bool: <class 'bool'>)
2025-01-05 16:51:23,629 - DEBUG - on stmt: $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,632 - DEBUG - on stmt: branch $218pred, 220, 412
2025-01-05 16:51:23,633 - DEBUG - ==== SSA block rewrite pass on 220
2025-01-05 16:51:23,634 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014656040>
2025-01-05 16:51:23,635 - DEBUG - on stmt: $220load_global.0 = global(range: <class 'range'>)
2025-01-05 16:51:23,637 - DEBUG - on stmt: $222load_global.1 = global(len: <built-in function len>)
2025-01-05 16:51:23,639 - DEBUG - on stmt: $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,641 - DEBUG - on stmt: $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,643 - DEBUG - on stmt: $230get_iter.5 = getiter(value=$228call_function.4)
2025-01-05 16:51:23,645 - DEBUG - on stmt: $phi232.0 = $230get_iter.5
2025-01-05 16:51:23,647 - DEBUG - on stmt: jump 232
2025-01-05 16:51:23,648 - DEBUG - ==== SSA block rewrite pass on 232
2025-01-05 16:51:23,649 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014656040>
2025-01-05 16:51:23,651 - DEBUG - on stmt: $232for_iter.1 = iternext(value=$phi232.0)
2025-01-05 16:51:23,652 - DEBUG - on stmt: $232for_iter.2 = pair_first(value=$232for_iter.1)
2025-01-05 16:51:23,654 - DEBUG - on stmt: $232for_iter.3 = pair_second(value=$232for_iter.1)
2025-01-05 16:51:23,656 - DEBUG - on stmt: $phi234.1 = $232for_iter.2
2025-01-05 16:51:23,657 - DEBUG - on stmt: branch $232for_iter.3, 234, 412
2025-01-05 16:51:23,658 - DEBUG - ==== SSA block rewrite pass on 234
2025-01-05 16:51:23,659 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014656040>
2025-01-05 16:51:23,660 - DEBUG - on stmt: i.1 = $phi234.1
2025-01-05 16:51:23,662 - DEBUG - on stmt: $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:23,664 - DEBUG - on stmt: $238load_method.3 = getattr(value=$236load_global.2, attr=exp)
2025-01-05 16:51:23,666 - DEBUG - on stmt: $const240.4 = const(float, -0.5)
2025-01-05 16:51:23,667 - DEBUG - on stmt: $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:23,670 - DEBUG - on stmt: $244load_method.6 = getattr(value=$242load_global.5, attr=arange)
2025-01-05 16:51:23,672 - DEBUG - on stmt: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:23,674 - DEBUG - on stmt: $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9)
2025-01-05 16:51:23,676 - DEBUG - on stmt: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:23,677 - DEBUG - on stmt: $const260.14 = const(int, 1)
2025-01-05 16:51:23,679 - DEBUG - on stmt: $262binary_add.15 = $258binary_subscr.13 + $const260.14
2025-01-05 16:51:23,681 - DEBUG - on stmt: $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,684 - DEBUG - on stmt: $const266.17 = const(float, 32.0)
2025-01-05 16:51:23,685 - DEBUG - on stmt: $268binary_multiply.18 = $264call_method.16 * $const266.17
2025-01-05 16:51:23,687 - DEBUG - on stmt: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:23,689 - DEBUG - on stmt: $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21
2025-01-05 16:51:23,690 - DEBUG - on stmt: $const278.23 = const(int, 2)
2025-01-05 16:51:23,692 - DEBUG - on stmt: $280binary_power.24 = $276binary_true_divide.22 ** $const278.23
2025-01-05 16:51:23,693 - DEBUG - on stmt: $282binary_multiply.25 = $const240.4 * $280binary_power.24
2025-01-05 16:51:23,695 - DEBUG - on stmt: window.1 = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,698 - DEBUG - on stmt: $const288.27 = const(int, 2)
2025-01-05 16:51:23,699 - DEBUG - on stmt: $290load_global.28 = global(int: <class 'int'>)
2025-01-05 16:51:23,701 - DEBUG - on stmt: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:23,702 - DEBUG - on stmt: $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,705 - DEBUG - on stmt: $300binary_multiply.33 = $const288.27 * $298call_function.32
2025-01-05 16:51:23,707 - DEBUG - on stmt: $const302.34 = const(int, 1)
2025-01-05 16:51:23,708 - DEBUG - on stmt: K = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:23,709 - DEBUG - on stmt: $const308.36 = const(float, 0.0)
2025-01-05 16:51:23,710 - DEBUG - on stmt: localscore[i.1] = $const308.36
2025-01-05 16:51:23,711 - DEBUG - on stmt: $316load_global.39 = global(range: <class 'range'>)
2025-01-05 16:51:23,713 - DEBUG - on stmt: $318load_global.40 = global(max: <built-in function max>)
2025-01-05 16:51:23,715 - DEBUG - on stmt: $const320.41 = const(int, 0)
2025-01-05 16:51:23,716 - DEBUG - on stmt: $const326.44 = const(int, 2)
2025-01-05 16:51:23,717 - DEBUG - on stmt: $328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:23,719 - DEBUG - on stmt: $330binary_add.46 = i.1 + $328binary_floor_divide.45
2025-01-05 16:51:23,721 - DEBUG - on stmt: $334binary_subtract.48 = $330binary_add.46 - N
2025-01-05 16:51:23,723 - DEBUG - on stmt: $const336.49 = const(int, 1)
2025-01-05 16:51:23,724 - DEBUG - on stmt: $338binary_add.50 = $334binary_subtract.48 + $const336.49
2025-01-05 16:51:23,725 - DEBUG - on stmt: $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,728 - DEBUG - on stmt: $342load_global.52 = global(min: <built-in function min>)
2025-01-05 16:51:23,730 - DEBUG - on stmt: $const348.55 = const(int, 2)
2025-01-05 16:51:23,732 - DEBUG - on stmt: $350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:23,733 - DEBUG - on stmt: $352binary_add.57 = i.1 + $350binary_floor_divide.56
2025-01-05 16:51:23,735 - DEBUG - on stmt: $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,738 - DEBUG - on stmt: $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,741 - DEBUG - on stmt: $360get_iter.61 = getiter(value=$358call_function.60)
2025-01-05 16:51:23,743 - DEBUG - on stmt: $phi362.1 = $360get_iter.61
2025-01-05 16:51:23,745 - DEBUG - on stmt: jump 362
2025-01-05 16:51:23,746 - DEBUG - ==== SSA block rewrite pass on 362
2025-01-05 16:51:23,747 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014656040>
2025-01-05 16:51:23,749 - DEBUG - on stmt: $362for_iter.2 = iternext(value=$phi362.1)
2025-01-05 16:51:23,751 - DEBUG - on stmt: $362for_iter.3 = pair_first(value=$362for_iter.2)
2025-01-05 16:51:23,752 - DEBUG - on stmt: $362for_iter.4 = pair_second(value=$362for_iter.2)
2025-01-05 16:51:23,754 - DEBUG - on stmt: $phi364.2 = $362for_iter.3
2025-01-05 16:51:23,755 - DEBUG - on stmt: branch $362for_iter.4, 364, 410
2025-01-05 16:51:23,756 - DEBUG - ==== SSA block rewrite pass on 364
2025-01-05 16:51:23,757 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014656040>
2025-01-05 16:51:23,759 - DEBUG - on stmt: k.1 = $phi364.2
2025-01-05 16:51:23,760 - DEBUG - on stmt: $372binary_subscr.7 = getitem(value=localscore, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:23,762 - DEBUG - on stmt: $378binary_subscr.10 = getitem(value=window, index=k.1, fn=<built-in function getitem>)
2025-01-05 16:51:23,764 - DEBUG - find_def var='window' stmt=$378binary_subscr.10 = getitem(value=window, index=k.1, fn=<built-in function getitem>)
2025-01-05 16:51:23,765 - DEBUG - find_def_from_top label 364
2025-01-05 16:51:23,766 - DEBUG - idom 362 from label 364
2025-01-05 16:51:23,768 - DEBUG - find_def_from_bottom label 362
2025-01-05 16:51:23,769 - DEBUG - find_def_from_top label 362
2025-01-05 16:51:23,770 - DEBUG - idom 234 from label 362
2025-01-05 16:51:23,770 - DEBUG - find_def_from_bottom label 234
2025-01-05 16:51:23,772 - DEBUG - replaced with: $378binary_subscr.10 = getitem(value=window.1, index=k.1, fn=<built-in function getitem>)
2025-01-05 16:51:23,773 - DEBUG - on stmt: $const386.14 = const(int, 2)
2025-01-05 16:51:23,774 - DEBUG - on stmt: $388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:23,776 - DEBUG - on stmt: $390binary_add.16 = i.1 + $388binary_floor_divide.15
2025-01-05 16:51:23,778 - DEBUG - on stmt: $394binary_subtract.18 = $390binary_add.16 - k.1
2025-01-05 16:51:23,780 - DEBUG - on stmt: $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:23,782 - DEBUG - on stmt: $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19
2025-01-05 16:51:23,784 - DEBUG - on stmt: $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:23,787 - DEBUG - on stmt: localscore[i.1] = $400inplace_add.21
2025-01-05 16:51:23,788 - DEBUG - on stmt: jump 362
2025-01-05 16:51:23,789 - DEBUG - ==== SSA block rewrite pass on 410
2025-01-05 16:51:23,790 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014656040>
2025-01-05 16:51:23,791 - DEBUG - on stmt: jump 232
2025-01-05 16:51:23,793 - DEBUG - ==== SSA block rewrite pass on 412
2025-01-05 16:51:23,794 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014656040>
2025-01-05 16:51:23,795 - DEBUG - on stmt: $const412.0 = const(NoneType, None)
2025-01-05 16:51:23,796 - DEBUG - on stmt: $414return_value.1 = cast(value=$const412.0)
2025-01-05 16:51:23,798 - DEBUG - on stmt: return $414return_value.1
2025-01-05 16:51:23,799 - DEBUG - Fix SSA violator on var K
2025-01-05 16:51:23,801 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:23,802 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000017256940>
2025-01-05 16:51:23,803 - DEBUG - on stmt: onset_envelope = arg(0, name=onset_envelope)
2025-01-05 16:51:23,805 - DEBUG - on stmt: frames_per_beat = arg(1, name=frames_per_beat)
2025-01-05 16:51:23,807 - DEBUG - on stmt: localscore = arg(2, name=localscore)
2025-01-05 16:51:23,808 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:23,809 - DEBUG - on stmt: N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,812 - DEBUG - on stmt: $10load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:23,814 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,816 - DEBUG - on stmt: $const16.6 = const(int, 1)
2025-01-05 16:51:23,818 - DEBUG - on stmt: $18compare_op.7 = $14call_function.5 == $const16.6
2025-01-05 16:51:23,819 - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-01-05 16:51:23,821 - DEBUG - on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,824 - DEBUG - on stmt: branch $20pred, 22, 202
2025-01-05 16:51:23,826 - DEBUG - ==== SSA block rewrite pass on 22
2025-01-05 16:51:23,827 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000017256940>
2025-01-05 16:51:23,828 - DEBUG - on stmt: $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:23,831 - DEBUG - on stmt: $24load_method.1 = getattr(value=$22load_global.0, attr=exp)
2025-01-05 16:51:23,833 - DEBUG - on stmt: $const26.2 = const(float, -0.5)
2025-01-05 16:51:23,834 - DEBUG - on stmt: $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:23,836 - DEBUG - on stmt: $30load_method.4 = getattr(value=$28load_global.3, attr=arange)
2025-01-05 16:51:23,838 - DEBUG - on stmt: $const34.6 = const(int, 0)
2025-01-05 16:51:23,839 - DEBUG - on stmt: $36binary_subscr.7 = static_getitem(value=frames_per_beat, index=0, index_var=$const34.6, fn=<built-in function getitem>)
2025-01-05 16:51:23,841 - DEBUG - on stmt: $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7)
2025-01-05 16:51:23,843 - DEBUG - on stmt: $const42.10 = const(int, 0)
2025-01-05 16:51:23,844 - DEBUG - on stmt: $44binary_subscr.11 = static_getitem(value=frames_per_beat, index=0, index_var=$const42.10, fn=<built-in function getitem>)
2025-01-05 16:51:23,847 - DEBUG - on stmt: $const46.12 = const(int, 1)
2025-01-05 16:51:23,848 - DEBUG - on stmt: $48binary_add.13 = $44binary_subscr.11 + $const46.12
2025-01-05 16:51:23,850 - DEBUG - on stmt: $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,853 - DEBUG - on stmt: $const52.15 = const(float, 32.0)
2025-01-05 16:51:23,854 - DEBUG - on stmt: $54binary_multiply.16 = $50call_method.14 * $const52.15
2025-01-05 16:51:23,856 - DEBUG - on stmt: $const58.18 = const(int, 0)
2025-01-05 16:51:23,857 - DEBUG - on stmt: $60binary_subscr.19 = static_getitem(value=frames_per_beat, index=0, index_var=$const58.18, fn=<built-in function getitem>)
2025-01-05 16:51:23,859 - DEBUG - on stmt: $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19
2025-01-05 16:51:23,861 - DEBUG - on stmt: $const64.21 = const(int, 2)
2025-01-05 16:51:23,862 - DEBUG - on stmt: $66binary_power.22 = $62binary_true_divide.20 ** $const64.21
2025-01-05 16:51:23,864 - DEBUG - on stmt: $68binary_multiply.23 = $const26.2 * $66binary_power.22
2025-01-05 16:51:23,866 - DEBUG - on stmt: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,868 - DEBUG - on stmt: $74load_global.25 = global(len: <built-in function len>)
2025-01-05 16:51:23,869 - DEBUG - on stmt: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,872 - DEBUG - first assign: K
2025-01-05 16:51:23,873 - DEBUG - replaced with: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,876 - DEBUG - on stmt: $82load_global.28 = global(range: <class 'range'>)
2025-01-05 16:51:23,878 - DEBUG - on stmt: $84load_global.29 = global(len: <built-in function len>)
2025-01-05 16:51:23,879 - DEBUG - on stmt: $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,882 - DEBUG - on stmt: $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,885 - DEBUG - on stmt: $92get_iter.33 = getiter(value=$90call_function.32)
2025-01-05 16:51:23,887 - DEBUG - on stmt: $phi94.0 = $92get_iter.33
2025-01-05 16:51:23,888 - DEBUG - on stmt: jump 94
2025-01-05 16:51:23,889 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:23,890 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000017256940>
2025-01-05 16:51:23,891 - DEBUG - on stmt: $94for_iter.1 = iternext(value=$phi94.0)
2025-01-05 16:51:23,893 - DEBUG - on stmt: $94for_iter.2 = pair_first(value=$94for_iter.1)
2025-01-05 16:51:23,895 - DEBUG - on stmt: $94for_iter.3 = pair_second(value=$94for_iter.1)
2025-01-05 16:51:23,897 - DEBUG - on stmt: $phi96.1 = $94for_iter.2
2025-01-05 16:51:23,898 - DEBUG - on stmt: branch $94for_iter.3, 96, 200
2025-01-05 16:51:23,900 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:23,901 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000017256940>
2025-01-05 16:51:23,902 - DEBUG - on stmt: i = $phi96.1
2025-01-05 16:51:23,903 - DEBUG - on stmt: $const98.2 = const(float, 0.0)
2025-01-05 16:51:23,904 - DEBUG - on stmt: localscore[i] = $const98.2
2025-01-05 16:51:23,905 - DEBUG - on stmt: $106load_global.5 = global(range: <class 'range'>)
2025-01-05 16:51:23,907 - DEBUG - on stmt: $108load_global.6 = global(max: <built-in function max>)
2025-01-05 16:51:23,909 - DEBUG - on stmt: $const110.7 = const(int, 0)
2025-01-05 16:51:23,910 - DEBUG - on stmt: $const116.10 = const(int, 2)
2025-01-05 16:51:23,911 - DEBUG - on stmt: $118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:23,913 - DEBUG - on stmt: $120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:23,915 - DEBUG - on stmt: $124binary_subtract.14 = $120binary_add.12 - N
2025-01-05 16:51:23,917 - DEBUG - on stmt: $const126.15 = const(int, 1)
2025-01-05 16:51:23,918 - DEBUG - on stmt: $128binary_add.16 = $124binary_subtract.14 + $const126.15
2025-01-05 16:51:23,920 - DEBUG - on stmt: $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,923 - DEBUG - on stmt: $132load_global.18 = global(min: <built-in function min>)
2025-01-05 16:51:23,924 - DEBUG - on stmt: $const138.21 = const(int, 2)
2025-01-05 16:51:23,926 - DEBUG - on stmt: $140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:23,927 - DEBUG - on stmt: $142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:23,929 - DEBUG - on stmt: $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,932 - DEBUG - on stmt: $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,936 - DEBUG - on stmt: $150get_iter.27 = getiter(value=$148call_function.26)
2025-01-05 16:51:23,937 - DEBUG - on stmt: $phi152.1 = $150get_iter.27
2025-01-05 16:51:23,939 - DEBUG - on stmt: jump 152
2025-01-05 16:51:23,940 - DEBUG - ==== SSA block rewrite pass on 152
2025-01-05 16:51:23,941 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000017256940>
2025-01-05 16:51:23,942 - DEBUG - on stmt: $152for_iter.2 = iternext(value=$phi152.1)
2025-01-05 16:51:23,944 - DEBUG - on stmt: $152for_iter.3 = pair_first(value=$152for_iter.2)
2025-01-05 16:51:23,946 - DEBUG - on stmt: $152for_iter.4 = pair_second(value=$152for_iter.2)
2025-01-05 16:51:23,948 - DEBUG - on stmt: $phi154.2 = $152for_iter.3
2025-01-05 16:51:23,949 - DEBUG - on stmt: branch $152for_iter.4, 154, 198
2025-01-05 16:51:23,950 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:23,951 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000017256940>
2025-01-05 16:51:23,953 - DEBUG - on stmt: k = $phi154.2
2025-01-05 16:51:23,954 - DEBUG - on stmt: $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:23,955 - DEBUG - on stmt: $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:23,957 - DEBUG - on stmt: $const176.14 = const(int, 2)
2025-01-05 16:51:23,958 - DEBUG - on stmt: $178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:23,960 - DEBUG - on stmt: $180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:23,961 - DEBUG - on stmt: $184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:23,963 - DEBUG - on stmt: $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:23,965 - DEBUG - on stmt: $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19
2025-01-05 16:51:23,967 - DEBUG - on stmt: $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:23,969 - DEBUG - on stmt: localscore[i] = $190inplace_add.21
2025-01-05 16:51:23,971 - DEBUG - on stmt: jump 152
2025-01-05 16:51:23,972 - DEBUG - ==== SSA block rewrite pass on 198
2025-01-05 16:51:23,973 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000017256940>
2025-01-05 16:51:23,976 - DEBUG - on stmt: jump 94
2025-01-05 16:51:23,977 - DEBUG - ==== SSA block rewrite pass on 200
2025-01-05 16:51:23,978 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000017256940>
2025-01-05 16:51:23,980 - DEBUG - on stmt: jump 412
2025-01-05 16:51:23,981 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-05 16:51:23,982 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000017256940>
2025-01-05 16:51:23,984 - DEBUG - on stmt: $202load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:23,985 - DEBUG - on stmt: $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,988 - DEBUG - on stmt: $208load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:23,990 - DEBUG - on stmt: $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,992 - DEBUG - on stmt: $214compare_op.6 = $206call_function.2 == $212call_function.5
2025-01-05 16:51:23,994 - DEBUG - on stmt: bool218 = global(bool: <class 'bool'>)
2025-01-05 16:51:23,996 - DEBUG - on stmt: $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:23,998 - DEBUG - on stmt: branch $218pred, 220, 412
2025-01-05 16:51:24,000 - DEBUG - ==== SSA block rewrite pass on 220
2025-01-05 16:51:24,001 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000017256940>
2025-01-05 16:51:24,002 - DEBUG - on stmt: $220load_global.0 = global(range: <class 'range'>)
2025-01-05 16:51:24,004 - DEBUG - on stmt: $222load_global.1 = global(len: <built-in function len>)
2025-01-05 16:51:24,005 - DEBUG - on stmt: $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,008 - DEBUG - on stmt: $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,010 - DEBUG - on stmt: $230get_iter.5 = getiter(value=$228call_function.4)
2025-01-05 16:51:24,012 - DEBUG - on stmt: $phi232.0 = $230get_iter.5
2025-01-05 16:51:24,013 - DEBUG - on stmt: jump 232
2025-01-05 16:51:24,014 - DEBUG - ==== SSA block rewrite pass on 232
2025-01-05 16:51:24,015 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000017256940>
2025-01-05 16:51:24,017 - DEBUG - on stmt: $232for_iter.1 = iternext(value=$phi232.0)
2025-01-05 16:51:24,019 - DEBUG - on stmt: $232for_iter.2 = pair_first(value=$232for_iter.1)
2025-01-05 16:51:24,021 - DEBUG - on stmt: $232for_iter.3 = pair_second(value=$232for_iter.1)
2025-01-05 16:51:24,022 - DEBUG - on stmt: $phi234.1 = $232for_iter.2
2025-01-05 16:51:24,023 - DEBUG - on stmt: branch $232for_iter.3, 234, 412
2025-01-05 16:51:24,024 - DEBUG - ==== SSA block rewrite pass on 234
2025-01-05 16:51:24,026 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000017256940>
2025-01-05 16:51:24,027 - DEBUG - on stmt: i.1 = $phi234.1
2025-01-05 16:51:24,028 - DEBUG - on stmt: $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:24,031 - DEBUG - on stmt: $238load_method.3 = getattr(value=$236load_global.2, attr=exp)
2025-01-05 16:51:24,033 - DEBUG - on stmt: $const240.4 = const(float, -0.5)
2025-01-05 16:51:24,034 - DEBUG - on stmt: $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:24,036 - DEBUG - on stmt: $244load_method.6 = getattr(value=$242load_global.5, attr=arange)
2025-01-05 16:51:24,038 - DEBUG - on stmt: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:24,040 - DEBUG - on stmt: $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9)
2025-01-05 16:51:24,041 - DEBUG - on stmt: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:24,043 - DEBUG - on stmt: $const260.14 = const(int, 1)
2025-01-05 16:51:24,044 - DEBUG - on stmt: $262binary_add.15 = $258binary_subscr.13 + $const260.14
2025-01-05 16:51:24,046 - DEBUG - on stmt: $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,050 - DEBUG - on stmt: $const266.17 = const(float, 32.0)
2025-01-05 16:51:24,051 - DEBUG - on stmt: $268binary_multiply.18 = $264call_method.16 * $const266.17
2025-01-05 16:51:24,053 - DEBUG - on stmt: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:24,055 - DEBUG - on stmt: $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21
2025-01-05 16:51:24,057 - DEBUG - on stmt: $const278.23 = const(int, 2)
2025-01-05 16:51:24,058 - DEBUG - on stmt: $280binary_power.24 = $276binary_true_divide.22 ** $const278.23
2025-01-05 16:51:24,060 - DEBUG - on stmt: $282binary_multiply.25 = $const240.4 * $280binary_power.24
2025-01-05 16:51:24,062 - DEBUG - on stmt: window.1 = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,065 - DEBUG - on stmt: $const288.27 = const(int, 2)
2025-01-05 16:51:24,066 - DEBUG - on stmt: $290load_global.28 = global(int: <class 'int'>)
2025-01-05 16:51:24,068 - DEBUG - on stmt: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:24,070 - DEBUG - on stmt: $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,072 - DEBUG - on stmt: $300binary_multiply.33 = $const288.27 * $298call_function.32
2025-01-05 16:51:24,074 - DEBUG - on stmt: $const302.34 = const(int, 1)
2025-01-05 16:51:24,075 - DEBUG - on stmt: K = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:24,077 - DEBUG - replaced with: K.1 = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:24,078 - DEBUG - on stmt: $const308.36 = const(float, 0.0)
2025-01-05 16:51:24,080 - DEBUG - on stmt: localscore[i.1] = $const308.36
2025-01-05 16:51:24,081 - DEBUG - on stmt: $316load_global.39 = global(range: <class 'range'>)
2025-01-05 16:51:24,082 - DEBUG - on stmt: $318load_global.40 = global(max: <built-in function max>)
2025-01-05 16:51:24,084 - DEBUG - on stmt: $const320.41 = const(int, 0)
2025-01-05 16:51:24,085 - DEBUG - on stmt: $const326.44 = const(int, 2)
2025-01-05 16:51:24,086 - DEBUG - on stmt: $328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:24,088 - DEBUG - on stmt: $330binary_add.46 = i.1 + $328binary_floor_divide.45
2025-01-05 16:51:24,090 - DEBUG - on stmt: $334binary_subtract.48 = $330binary_add.46 - N
2025-01-05 16:51:24,091 - DEBUG - on stmt: $const336.49 = const(int, 1)
2025-01-05 16:51:24,093 - DEBUG - on stmt: $338binary_add.50 = $334binary_subtract.48 + $const336.49
2025-01-05 16:51:24,094 - DEBUG - on stmt: $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,098 - DEBUG - on stmt: $342load_global.52 = global(min: <built-in function min>)
2025-01-05 16:51:24,099 - DEBUG - on stmt: $const348.55 = const(int, 2)
2025-01-05 16:51:24,101 - DEBUG - on stmt: $350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:24,102 - DEBUG - on stmt: $352binary_add.57 = i.1 + $350binary_floor_divide.56
2025-01-05 16:51:24,104 - DEBUG - on stmt: $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,107 - DEBUG - on stmt: $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,111 - DEBUG - on stmt: $360get_iter.61 = getiter(value=$358call_function.60)
2025-01-05 16:51:24,112 - DEBUG - on stmt: $phi362.1 = $360get_iter.61
2025-01-05 16:51:24,114 - DEBUG - on stmt: jump 362
2025-01-05 16:51:24,115 - DEBUG - ==== SSA block rewrite pass on 362
2025-01-05 16:51:24,116 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000017256940>
2025-01-05 16:51:24,118 - DEBUG - on stmt: $362for_iter.2 = iternext(value=$phi362.1)
2025-01-05 16:51:24,119 - DEBUG - on stmt: $362for_iter.3 = pair_first(value=$362for_iter.2)
2025-01-05 16:51:24,121 - DEBUG - on stmt: $362for_iter.4 = pair_second(value=$362for_iter.2)
2025-01-05 16:51:24,123 - DEBUG - on stmt: $phi364.2 = $362for_iter.3
2025-01-05 16:51:24,124 - DEBUG - on stmt: branch $362for_iter.4, 364, 410
2025-01-05 16:51:24,125 - DEBUG - ==== SSA block rewrite pass on 364
2025-01-05 16:51:24,126 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000017256940>
2025-01-05 16:51:24,129 - DEBUG - on stmt: k.1 = $phi364.2
2025-01-05 16:51:24,130 - DEBUG - on stmt: $372binary_subscr.7 = getitem(value=localscore, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:24,132 - DEBUG - on stmt: $378binary_subscr.10 = getitem(value=window.1, index=k.1, fn=<built-in function getitem>)
2025-01-05 16:51:24,134 - DEBUG - on stmt: $const386.14 = const(int, 2)
2025-01-05 16:51:24,135 - DEBUG - on stmt: $388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:24,136 - DEBUG - on stmt: $390binary_add.16 = i.1 + $388binary_floor_divide.15
2025-01-05 16:51:24,138 - DEBUG - on stmt: $394binary_subtract.18 = $390binary_add.16 - k.1
2025-01-05 16:51:24,140 - DEBUG - on stmt: $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:24,142 - DEBUG - on stmt: $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19
2025-01-05 16:51:24,143 - DEBUG - on stmt: $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:24,146 - DEBUG - on stmt: localscore[i.1] = $400inplace_add.21
2025-01-05 16:51:24,148 - DEBUG - on stmt: jump 362
2025-01-05 16:51:24,149 - DEBUG - ==== SSA block rewrite pass on 410
2025-01-05 16:51:24,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000017256940>
2025-01-05 16:51:24,152 - DEBUG - on stmt: jump 232
2025-01-05 16:51:24,153 - DEBUG - ==== SSA block rewrite pass on 412
2025-01-05 16:51:24,154 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000017256940>
2025-01-05 16:51:24,155 - DEBUG - on stmt: $const412.0 = const(NoneType, None)
2025-01-05 16:51:24,157 - DEBUG - on stmt: $414return_value.1 = cast(value=$const412.0)
2025-01-05 16:51:24,158 - DEBUG - on stmt: return $414return_value.1
2025-01-05 16:51:24,160 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {22: [<numba.core.ir.Assign object at 0x0000000017256B50>],
             234: [<numba.core.ir.Assign object at 0x0000000014686C40>]})
2025-01-05 16:51:24,162 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:24,164 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001828C670>
2025-01-05 16:51:24,166 - DEBUG - on stmt: onset_envelope = arg(0, name=onset_envelope)
2025-01-05 16:51:24,167 - DEBUG - on stmt: frames_per_beat = arg(1, name=frames_per_beat)
2025-01-05 16:51:24,169 - DEBUG - on stmt: localscore = arg(2, name=localscore)
2025-01-05 16:51:24,170 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:24,171 - DEBUG - on stmt: N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,174 - DEBUG - on stmt: $10load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:24,176 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,178 - DEBUG - on stmt: $const16.6 = const(int, 1)
2025-01-05 16:51:24,179 - DEBUG - on stmt: $18compare_op.7 = $14call_function.5 == $const16.6
2025-01-05 16:51:24,181 - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-01-05 16:51:24,183 - DEBUG - on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,185 - DEBUG - on stmt: branch $20pred, 22, 202
2025-01-05 16:51:24,186 - DEBUG - ==== SSA block rewrite pass on 22
2025-01-05 16:51:24,188 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001828C670>
2025-01-05 16:51:24,189 - DEBUG - on stmt: $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:24,191 - DEBUG - on stmt: $24load_method.1 = getattr(value=$22load_global.0, attr=exp)
2025-01-05 16:51:24,193 - DEBUG - on stmt: $const26.2 = const(float, -0.5)
2025-01-05 16:51:24,194 - DEBUG - on stmt: $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:24,197 - DEBUG - on stmt: $30load_method.4 = getattr(value=$28load_global.3, attr=arange)
2025-01-05 16:51:24,199 - DEBUG - on stmt: $const34.6 = const(int, 0)
2025-01-05 16:51:24,200 - DEBUG - on stmt: $36binary_subscr.7 = static_getitem(value=frames_per_beat, index=0, index_var=$const34.6, fn=<built-in function getitem>)
2025-01-05 16:51:24,202 - DEBUG - on stmt: $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7)
2025-01-05 16:51:24,205 - DEBUG - on stmt: $const42.10 = const(int, 0)
2025-01-05 16:51:24,206 - DEBUG - on stmt: $44binary_subscr.11 = static_getitem(value=frames_per_beat, index=0, index_var=$const42.10, fn=<built-in function getitem>)
2025-01-05 16:51:24,208 - DEBUG - on stmt: $const46.12 = const(int, 1)
2025-01-05 16:51:24,209 - DEBUG - on stmt: $48binary_add.13 = $44binary_subscr.11 + $const46.12
2025-01-05 16:51:24,211 - DEBUG - on stmt: $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,215 - DEBUG - on stmt: $const52.15 = const(float, 32.0)
2025-01-05 16:51:24,216 - DEBUG - on stmt: $54binary_multiply.16 = $50call_method.14 * $const52.15
2025-01-05 16:51:24,218 - DEBUG - on stmt: $const58.18 = const(int, 0)
2025-01-05 16:51:24,219 - DEBUG - on stmt: $60binary_subscr.19 = static_getitem(value=frames_per_beat, index=0, index_var=$const58.18, fn=<built-in function getitem>)
2025-01-05 16:51:24,221 - DEBUG - on stmt: $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19
2025-01-05 16:51:24,223 - DEBUG - on stmt: $const64.21 = const(int, 2)
2025-01-05 16:51:24,224 - DEBUG - on stmt: $66binary_power.22 = $62binary_true_divide.20 ** $const64.21
2025-01-05 16:51:24,226 - DEBUG - on stmt: $68binary_multiply.23 = $const26.2 * $66binary_power.22
2025-01-05 16:51:24,227 - DEBUG - on stmt: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,230 - DEBUG - on stmt: $74load_global.25 = global(len: <built-in function len>)
2025-01-05 16:51:24,232 - DEBUG - on stmt: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,234 - DEBUG - on stmt: $82load_global.28 = global(range: <class 'range'>)
2025-01-05 16:51:24,236 - DEBUG - on stmt: $84load_global.29 = global(len: <built-in function len>)
2025-01-05 16:51:24,238 - DEBUG - on stmt: $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,241 - DEBUG - on stmt: $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,243 - DEBUG - on stmt: $92get_iter.33 = getiter(value=$90call_function.32)
2025-01-05 16:51:24,245 - DEBUG - on stmt: $phi94.0 = $92get_iter.33
2025-01-05 16:51:24,246 - DEBUG - on stmt: jump 94
2025-01-05 16:51:24,247 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:24,248 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001828C670>
2025-01-05 16:51:24,250 - DEBUG - on stmt: $94for_iter.1 = iternext(value=$phi94.0)
2025-01-05 16:51:24,252 - DEBUG - on stmt: $94for_iter.2 = pair_first(value=$94for_iter.1)
2025-01-05 16:51:24,253 - DEBUG - on stmt: $94for_iter.3 = pair_second(value=$94for_iter.1)
2025-01-05 16:51:24,255 - DEBUG - on stmt: $phi96.1 = $94for_iter.2
2025-01-05 16:51:24,256 - DEBUG - on stmt: branch $94for_iter.3, 96, 200
2025-01-05 16:51:24,257 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:24,258 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001828C670>
2025-01-05 16:51:24,260 - DEBUG - on stmt: i = $phi96.1
2025-01-05 16:51:24,261 - DEBUG - on stmt: $const98.2 = const(float, 0.0)
2025-01-05 16:51:24,262 - DEBUG - on stmt: localscore[i] = $const98.2
2025-01-05 16:51:24,263 - DEBUG - on stmt: $106load_global.5 = global(range: <class 'range'>)
2025-01-05 16:51:24,265 - DEBUG - on stmt: $108load_global.6 = global(max: <built-in function max>)
2025-01-05 16:51:24,266 - DEBUG - on stmt: $const110.7 = const(int, 0)
2025-01-05 16:51:24,267 - DEBUG - on stmt: $const116.10 = const(int, 2)
2025-01-05 16:51:24,268 - DEBUG - on stmt: $118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:24,269 - DEBUG - find_def var='K' stmt=$118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:24,271 - DEBUG - find_def_from_top label 96
2025-01-05 16:51:24,272 - DEBUG - idom 94 from label 96
2025-01-05 16:51:24,273 - DEBUG - find_def_from_bottom label 94
2025-01-05 16:51:24,274 - DEBUG - find_def_from_top label 94
2025-01-05 16:51:24,275 - DEBUG - idom 22 from label 94
2025-01-05 16:51:24,276 - DEBUG - find_def_from_bottom label 22
2025-01-05 16:51:24,277 - DEBUG - on stmt: $120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:24,278 - DEBUG - on stmt: $124binary_subtract.14 = $120binary_add.12 - N
2025-01-05 16:51:24,280 - DEBUG - on stmt: $const126.15 = const(int, 1)
2025-01-05 16:51:24,282 - DEBUG - on stmt: $128binary_add.16 = $124binary_subtract.14 + $const126.15
2025-01-05 16:51:24,283 - DEBUG - on stmt: $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,286 - DEBUG - on stmt: $132load_global.18 = global(min: <built-in function min>)
2025-01-05 16:51:24,287 - DEBUG - on stmt: $const138.21 = const(int, 2)
2025-01-05 16:51:24,289 - DEBUG - on stmt: $140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:24,290 - DEBUG - find_def var='K' stmt=$140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:24,291 - DEBUG - find_def_from_top label 96
2025-01-05 16:51:24,292 - DEBUG - idom 94 from label 96
2025-01-05 16:51:24,293 - DEBUG - find_def_from_bottom label 94
2025-01-05 16:51:24,294 - DEBUG - find_def_from_top label 94
2025-01-05 16:51:24,295 - DEBUG - idom 22 from label 94
2025-01-05 16:51:24,296 - DEBUG - find_def_from_bottom label 22
2025-01-05 16:51:24,297 - DEBUG - on stmt: $142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:24,299 - DEBUG - on stmt: $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,301 - DEBUG - find_def var='K' stmt=$146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,304 - DEBUG - find_def_from_top label 96
2025-01-05 16:51:24,305 - DEBUG - idom 94 from label 96
2025-01-05 16:51:24,306 - DEBUG - find_def_from_bottom label 94
2025-01-05 16:51:24,307 - DEBUG - find_def_from_top label 94
2025-01-05 16:51:24,308 - DEBUG - idom 22 from label 94
2025-01-05 16:51:24,309 - DEBUG - find_def_from_bottom label 22
2025-01-05 16:51:24,310 - DEBUG - on stmt: $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,312 - DEBUG - on stmt: $150get_iter.27 = getiter(value=$148call_function.26)
2025-01-05 16:51:24,315 - DEBUG - on stmt: $phi152.1 = $150get_iter.27
2025-01-05 16:51:24,316 - DEBUG - on stmt: jump 152
2025-01-05 16:51:24,316 - DEBUG - ==== SSA block rewrite pass on 152
2025-01-05 16:51:24,317 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001828C670>
2025-01-05 16:51:24,319 - DEBUG - on stmt: $152for_iter.2 = iternext(value=$phi152.1)
2025-01-05 16:51:24,320 - DEBUG - on stmt: $152for_iter.3 = pair_first(value=$152for_iter.2)
2025-01-05 16:51:24,322 - DEBUG - on stmt: $152for_iter.4 = pair_second(value=$152for_iter.2)
2025-01-05 16:51:24,324 - DEBUG - on stmt: $phi154.2 = $152for_iter.3
2025-01-05 16:51:24,325 - DEBUG - on stmt: branch $152for_iter.4, 154, 198
2025-01-05 16:51:24,326 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:24,326 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001828C670>
2025-01-05 16:51:24,328 - DEBUG - on stmt: k = $phi154.2
2025-01-05 16:51:24,329 - DEBUG - on stmt: $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:24,331 - DEBUG - on stmt: $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:24,332 - DEBUG - on stmt: $const176.14 = const(int, 2)
2025-01-05 16:51:24,333 - DEBUG - on stmt: $178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:24,335 - DEBUG - find_def var='K' stmt=$178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:24,336 - DEBUG - find_def_from_top label 154
2025-01-05 16:51:24,337 - DEBUG - idom 152 from label 154
2025-01-05 16:51:24,338 - DEBUG - find_def_from_bottom label 152
2025-01-05 16:51:24,339 - DEBUG - find_def_from_top label 152
2025-01-05 16:51:24,340 - DEBUG - idom 96 from label 152
2025-01-05 16:51:24,341 - DEBUG - find_def_from_bottom label 96
2025-01-05 16:51:24,342 - DEBUG - find_def_from_top label 96
2025-01-05 16:51:24,343 - DEBUG - idom 94 from label 96
2025-01-05 16:51:24,343 - DEBUG - find_def_from_bottom label 94
2025-01-05 16:51:24,344 - DEBUG - find_def_from_top label 94
2025-01-05 16:51:24,345 - DEBUG - idom 22 from label 94
2025-01-05 16:51:24,346 - DEBUG - find_def_from_bottom label 22
2025-01-05 16:51:24,347 - DEBUG - on stmt: $180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:24,349 - DEBUG - on stmt: $184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:24,350 - DEBUG - on stmt: $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:24,352 - DEBUG - on stmt: $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19
2025-01-05 16:51:24,353 - DEBUG - on stmt: $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:24,356 - DEBUG - on stmt: localscore[i] = $190inplace_add.21
2025-01-05 16:51:24,357 - DEBUG - on stmt: jump 152
2025-01-05 16:51:24,358 - DEBUG - ==== SSA block rewrite pass on 198
2025-01-05 16:51:24,359 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001828C670>
2025-01-05 16:51:24,361 - DEBUG - on stmt: jump 94
2025-01-05 16:51:24,362 - DEBUG - ==== SSA block rewrite pass on 200
2025-01-05 16:51:24,363 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001828C670>
2025-01-05 16:51:24,365 - DEBUG - on stmt: jump 412
2025-01-05 16:51:24,366 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-05 16:51:24,367 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001828C670>
2025-01-05 16:51:24,368 - DEBUG - on stmt: $202load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:24,370 - DEBUG - on stmt: $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,372 - DEBUG - on stmt: $208load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:24,373 - DEBUG - on stmt: $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,375 - DEBUG - on stmt: $214compare_op.6 = $206call_function.2 == $212call_function.5
2025-01-05 16:51:24,377 - DEBUG - on stmt: bool218 = global(bool: <class 'bool'>)
2025-01-05 16:51:24,379 - DEBUG - on stmt: $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,381 - DEBUG - on stmt: branch $218pred, 220, 412
2025-01-05 16:51:24,382 - DEBUG - ==== SSA block rewrite pass on 220
2025-01-05 16:51:24,383 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001828C670>
2025-01-05 16:51:24,385 - DEBUG - on stmt: $220load_global.0 = global(range: <class 'range'>)
2025-01-05 16:51:24,386 - DEBUG - on stmt: $222load_global.1 = global(len: <built-in function len>)
2025-01-05 16:51:24,388 - DEBUG - on stmt: $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,390 - DEBUG - on stmt: $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,392 - DEBUG - on stmt: $230get_iter.5 = getiter(value=$228call_function.4)
2025-01-05 16:51:24,394 - DEBUG - on stmt: $phi232.0 = $230get_iter.5
2025-01-05 16:51:24,395 - DEBUG - on stmt: jump 232
2025-01-05 16:51:24,396 - DEBUG - ==== SSA block rewrite pass on 232
2025-01-05 16:51:24,397 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001828C670>
2025-01-05 16:51:24,398 - DEBUG - on stmt: $232for_iter.1 = iternext(value=$phi232.0)
2025-01-05 16:51:24,400 - DEBUG - on stmt: $232for_iter.2 = pair_first(value=$232for_iter.1)
2025-01-05 16:51:24,401 - DEBUG - on stmt: $232for_iter.3 = pair_second(value=$232for_iter.1)
2025-01-05 16:51:24,403 - DEBUG - on stmt: $phi234.1 = $232for_iter.2
2025-01-05 16:51:24,404 - DEBUG - on stmt: branch $232for_iter.3, 234, 412
2025-01-05 16:51:24,405 - DEBUG - ==== SSA block rewrite pass on 234
2025-01-05 16:51:24,406 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001828C670>
2025-01-05 16:51:24,407 - DEBUG - on stmt: i.1 = $phi234.1
2025-01-05 16:51:24,408 - DEBUG - on stmt: $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:24,410 - DEBUG - on stmt: $238load_method.3 = getattr(value=$236load_global.2, attr=exp)
2025-01-05 16:51:24,411 - DEBUG - on stmt: $const240.4 = const(float, -0.5)
2025-01-05 16:51:24,413 - DEBUG - on stmt: $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:24,415 - DEBUG - on stmt: $244load_method.6 = getattr(value=$242load_global.5, attr=arange)
2025-01-05 16:51:24,417 - DEBUG - on stmt: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:24,418 - DEBUG - on stmt: $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9)
2025-01-05 16:51:24,420 - DEBUG - on stmt: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:24,421 - DEBUG - on stmt: $const260.14 = const(int, 1)
2025-01-05 16:51:24,422 - DEBUG - on stmt: $262binary_add.15 = $258binary_subscr.13 + $const260.14
2025-01-05 16:51:24,424 - DEBUG - on stmt: $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,427 - DEBUG - on stmt: $const266.17 = const(float, 32.0)
2025-01-05 16:51:24,428 - DEBUG - on stmt: $268binary_multiply.18 = $264call_method.16 * $const266.17
2025-01-05 16:51:24,429 - DEBUG - on stmt: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:24,432 - DEBUG - on stmt: $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21
2025-01-05 16:51:24,433 - DEBUG - on stmt: $const278.23 = const(int, 2)
2025-01-05 16:51:24,434 - DEBUG - on stmt: $280binary_power.24 = $276binary_true_divide.22 ** $const278.23
2025-01-05 16:51:24,436 - DEBUG - on stmt: $282binary_multiply.25 = $const240.4 * $280binary_power.24
2025-01-05 16:51:24,437 - DEBUG - on stmt: window.1 = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,439 - DEBUG - on stmt: $const288.27 = const(int, 2)
2025-01-05 16:51:24,440 - DEBUG - on stmt: $290load_global.28 = global(int: <class 'int'>)
2025-01-05 16:51:24,442 - DEBUG - on stmt: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:24,443 - DEBUG - on stmt: $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,446 - DEBUG - on stmt: $300binary_multiply.33 = $const288.27 * $298call_function.32
2025-01-05 16:51:24,448 - DEBUG - on stmt: $const302.34 = const(int, 1)
2025-01-05 16:51:24,449 - DEBUG - on stmt: K.1 = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:24,450 - DEBUG - on stmt: $const308.36 = const(float, 0.0)
2025-01-05 16:51:24,451 - DEBUG - on stmt: localscore[i.1] = $const308.36
2025-01-05 16:51:24,452 - DEBUG - on stmt: $316load_global.39 = global(range: <class 'range'>)
2025-01-05 16:51:24,453 - DEBUG - on stmt: $318load_global.40 = global(max: <built-in function max>)
2025-01-05 16:51:24,455 - DEBUG - on stmt: $const320.41 = const(int, 0)
2025-01-05 16:51:24,456 - DEBUG - on stmt: $const326.44 = const(int, 2)
2025-01-05 16:51:24,457 - DEBUG - on stmt: $328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:24,458 - DEBUG - find_def var='K' stmt=$328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:24,460 - DEBUG - replaced with: $328binary_floor_divide.45 = K.1 // $const326.44
2025-01-05 16:51:24,461 - DEBUG - on stmt: $330binary_add.46 = i.1 + $328binary_floor_divide.45
2025-01-05 16:51:24,463 - DEBUG - on stmt: $334binary_subtract.48 = $330binary_add.46 - N
2025-01-05 16:51:24,465 - DEBUG - on stmt: $const336.49 = const(int, 1)
2025-01-05 16:51:24,466 - DEBUG - on stmt: $338binary_add.50 = $334binary_subtract.48 + $const336.49
2025-01-05 16:51:24,467 - DEBUG - on stmt: $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,470 - DEBUG - on stmt: $342load_global.52 = global(min: <built-in function min>)
2025-01-05 16:51:24,471 - DEBUG - on stmt: $const348.55 = const(int, 2)
2025-01-05 16:51:24,473 - DEBUG - on stmt: $350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:24,474 - DEBUG - find_def var='K' stmt=$350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:24,476 - DEBUG - replaced with: $350binary_floor_divide.56 = K.1 // $const348.55
2025-01-05 16:51:24,477 - DEBUG - on stmt: $352binary_add.57 = i.1 + $350binary_floor_divide.56
2025-01-05 16:51:24,479 - DEBUG - on stmt: $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,482 - DEBUG - find_def var='K' stmt=$356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,485 - DEBUG - replaced with: $356call_function.59 = call $342load_global.52($352binary_add.57, K.1, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K.1, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,488 - DEBUG - on stmt: $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:24,490 - DEBUG - on stmt: $360get_iter.61 = getiter(value=$358call_function.60)
2025-01-05 16:51:24,492 - DEBUG - on stmt: $phi362.1 = $360get_iter.61
2025-01-05 16:51:24,493 - DEBUG - on stmt: jump 362
2025-01-05 16:51:24,494 - DEBUG - ==== SSA block rewrite pass on 362
2025-01-05 16:51:24,495 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001828C670>
2025-01-05 16:51:24,497 - DEBUG - on stmt: $362for_iter.2 = iternext(value=$phi362.1)
2025-01-05 16:51:24,498 - DEBUG - on stmt: $362for_iter.3 = pair_first(value=$362for_iter.2)
2025-01-05 16:51:24,500 - DEBUG - on stmt: $362for_iter.4 = pair_second(value=$362for_iter.2)
2025-01-05 16:51:24,501 - DEBUG - on stmt: $phi364.2 = $362for_iter.3
2025-01-05 16:51:24,503 - DEBUG - on stmt: branch $362for_iter.4, 364, 410
2025-01-05 16:51:24,503 - DEBUG - ==== SSA block rewrite pass on 364
2025-01-05 16:51:24,504 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001828C670>
2025-01-05 16:51:24,506 - DEBUG - on stmt: k.1 = $phi364.2
2025-01-05 16:51:24,507 - DEBUG - on stmt: $372binary_subscr.7 = getitem(value=localscore, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:24,509 - DEBUG - on stmt: $378binary_subscr.10 = getitem(value=window.1, index=k.1, fn=<built-in function getitem>)
2025-01-05 16:51:24,511 - DEBUG - on stmt: $const386.14 = const(int, 2)
2025-01-05 16:51:24,512 - DEBUG - on stmt: $388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:24,514 - DEBUG - find_def var='K' stmt=$388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:24,516 - DEBUG - find_def_from_top label 364
2025-01-05 16:51:24,517 - DEBUG - idom 362 from label 364
2025-01-05 16:51:24,518 - DEBUG - find_def_from_bottom label 362
2025-01-05 16:51:24,519 - DEBUG - find_def_from_top label 362
2025-01-05 16:51:24,520 - DEBUG - idom 234 from label 362
2025-01-05 16:51:24,521 - DEBUG - find_def_from_bottom label 234
2025-01-05 16:51:24,522 - DEBUG - replaced with: $388binary_floor_divide.15 = K.1 // $const386.14
2025-01-05 16:51:24,523 - DEBUG - on stmt: $390binary_add.16 = i.1 + $388binary_floor_divide.15
2025-01-05 16:51:24,527 - DEBUG - on stmt: $394binary_subtract.18 = $390binary_add.16 - k.1
2025-01-05 16:51:24,529 - DEBUG - on stmt: $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:24,531 - DEBUG - on stmt: $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19
2025-01-05 16:51:24,533 - DEBUG - on stmt: $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:24,535 - DEBUG - on stmt: localscore[i.1] = $400inplace_add.21
2025-01-05 16:51:24,537 - DEBUG - on stmt: jump 362
2025-01-05 16:51:24,538 - DEBUG - ==== SSA block rewrite pass on 410
2025-01-05 16:51:24,539 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001828C670>
2025-01-05 16:51:24,541 - DEBUG - on stmt: jump 232
2025-01-05 16:51:24,542 - DEBUG - ==== SSA block rewrite pass on 412
2025-01-05 16:51:24,543 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001828C670>
2025-01-05 16:51:24,544 - DEBUG - on stmt: $const412.0 = const(NoneType, None)
2025-01-05 16:51:24,545 - DEBUG - on stmt: $414return_value.1 = cast(value=$const412.0)
2025-01-05 16:51:24,547 - DEBUG - on stmt: return $414return_value.1
2025-01-05 16:51:24,588 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=4747)
           2	LOAD_DEREF(arg=0, lineno=4749)
           4	LOAD_CONST(arg=0, lineno=4749)
           6	COMPARE_OP(arg=9, lineno=4749)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=4749)
          10	LOAD_DEREF(arg=0, lineno=4749)
          12	JUMP_FORWARD(arg=2, lineno=4749)
>         14	LOAD_FAST(arg=0, lineno=4749)
>         16	STORE_FAST(arg=4, lineno=4749)
          18	LOAD_DEREF(arg=2, lineno=4750)
          20	LOAD_CONST(arg=0, lineno=4750)
          22	COMPARE_OP(arg=9, lineno=4750)
          24	POP_JUMP_IF_FALSE(arg=30, lineno=4750)
          26	LOAD_DEREF(arg=2, lineno=4750)
          28	JUMP_FORWARD(arg=2, lineno=4750)
>         30	LOAD_FAST(arg=1, lineno=4750)
>         32	STORE_FAST(arg=5, lineno=4750)
          34	LOAD_DEREF(arg=1, lineno=4751)
          36	LOAD_CONST(arg=0, lineno=4751)
          38	COMPARE_OP(arg=9, lineno=4751)
          40	POP_JUMP_IF_FALSE(arg=46, lineno=4751)
          42	LOAD_DEREF(arg=1, lineno=4751)
          44	JUMP_FORWARD(arg=2, lineno=4751)
>         46	LOAD_FAST(arg=2, lineno=4751)
>         48	STORE_FAST(arg=6, lineno=4751)
          50	LOAD_FAST(arg=6, lineno=4753)
          52	LOAD_CONST(arg=0, lineno=4753)
          54	COMPARE_OP(arg=9, lineno=4753)
          56	POP_JUMP_IF_FALSE(arg=62, lineno=4753)
          58	LOAD_FAST(arg=6, lineno=4753)
          60	JUMP_FORWARD(arg=2, lineno=4753)
>         62	LOAD_CONST(arg=1, lineno=4753)
>         64	STORE_FAST(arg=7, lineno=4753)
          66	LOAD_FAST(arg=5, lineno=4754)
          68	LOAD_CONST(arg=0, lineno=4754)
          70	COMPARE_OP(arg=8, lineno=4754)
          72	POP_JUMP_IF_FALSE(arg=86, lineno=4754)
          74	LOAD_CONST(arg=2, lineno=4755)
          76	LOAD_FAST(arg=4, lineno=4755)
          78	ROT_TWO(arg=None, lineno=4755)
          80	STORE_FAST(arg=8, lineno=4755)
          82	STORE_FAST(arg=9, lineno=4755)
          84	JUMP_FORWARD(arg=10, lineno=4755)
>         86	LOAD_FAST(arg=4, lineno=4757)
          88	LOAD_FAST(arg=5, lineno=4757)
          90	ROT_TWO(arg=None, lineno=4757)
          92	STORE_FAST(arg=8, lineno=4757)
          94	STORE_FAST(arg=9, lineno=4757)
>         96	LOAD_FAST(arg=7, lineno=4759)
          98	LOAD_CONST(arg=2, lineno=4759)
         100	COMPARE_OP(arg=2, lineno=4759)
         102	POP_JUMP_IF_FALSE(arg=112, lineno=4759)
         104	LOAD_GLOBAL(arg=0, lineno=4760)
         106	LOAD_CONST(arg=3, lineno=4760)
         108	CALL_FUNCTION(arg=1, lineno=4760)
         110	RAISE_VARARGS(arg=1, lineno=4760)
>        112	LOAD_FAST(arg=9, lineno=4762)
         114	LOAD_FAST(arg=8, lineno=4762)
         116	BINARY_SUBTRACT(arg=None, lineno=4762)
         118	LOAD_FAST(arg=7, lineno=4762)
         120	BINARY_TRUE_DIVIDE(arg=None, lineno=4762)
         122	STORE_FAST(arg=10, lineno=4762)
         124	LOAD_GLOBAL(arg=1, lineno=4763)
         126	LOAD_GLOBAL(arg=2, lineno=4763)
         128	LOAD_METHOD(arg=3, lineno=4763)
         130	LOAD_FAST(arg=10, lineno=4763)
         132	LOAD_ATTR(arg=4, lineno=4763)
         134	CALL_METHOD(arg=1, lineno=4763)
         136	CALL_FUNCTION(arg=1, lineno=4763)
         138	STORE_FAST(arg=11, lineno=4763)
         140	LOAD_DEREF(arg=4, lineno=4766)
         142	LOAD_CONST(arg=4, lineno=4766)
         144	COMPARE_OP(arg=8, lineno=4766)
         146	POP_JUMP_IF_FALSE(arg=182, lineno=4766)
         148	LOAD_GLOBAL(arg=1, lineno=4767)
         150	LOAD_GLOBAL(arg=2, lineno=4767)
         152	LOAD_METHOD(arg=3, lineno=4767)
         154	LOAD_FAST(arg=10, lineno=4767)
         156	LOAD_ATTR(arg=5, lineno=4767)
         158	CALL_METHOD(arg=1, lineno=4767)
         160	CALL_FUNCTION(arg=1, lineno=4767)
         162	STORE_FAST(arg=12, lineno=4767)
         164	LOAD_GLOBAL(arg=6, lineno=4768)
         166	LOAD_GLOBAL(arg=7, lineno=4768)
         168	LOAD_FAST(arg=12, lineno=4768)
         170	LOAD_FAST(arg=11, lineno=4768)
         172	CALL_FUNCTION(arg=2, lineno=4768)
         174	LOAD_CONST(arg=2, lineno=4768)
         176	CALL_FUNCTION(arg=2, lineno=4768)
         178	STORE_FAST(arg=13, lineno=4768)
         180	JUMP_FORWARD(arg=10, lineno=4768)
>        182	LOAD_GLOBAL(arg=6, lineno=4770)
         184	LOAD_FAST(arg=11, lineno=4770)
         186	LOAD_CONST(arg=2, lineno=4770)
         188	CALL_FUNCTION(arg=2, lineno=4770)
         190	STORE_FAST(arg=13, lineno=4770)
>        192	LOAD_GLOBAL(arg=8, lineno=4771)
         194	LOAD_METHOD(arg=9, lineno=4771)
         196	LOAD_FAST(arg=13, lineno=4771)
         198	LOAD_DEREF(arg=3, lineno=4771)
         200	CALL_METHOD(arg=2, lineno=4771)
         202	STORE_FAST(arg=14, lineno=4771)
         204	LOAD_FAST(arg=8, lineno=4772)
         206	STORE_FAST(arg=15, lineno=4772)
         208	LOAD_GLOBAL(arg=10, lineno=4773)
         210	LOAD_FAST(arg=13, lineno=4773)
         212	CALL_FUNCTION(arg=1, lineno=4773)
         214	GET_ITER(arg=None, lineno=4773)
>        216	FOR_ITER(arg=20, lineno=4773)
         218	STORE_FAST(arg=16, lineno=4773)
         220	LOAD_FAST(arg=15, lineno=4774)
         222	LOAD_FAST(arg=16, lineno=4774)
         224	LOAD_FAST(arg=7, lineno=4774)
         226	BINARY_MULTIPLY(arg=None, lineno=4774)
         228	BINARY_ADD(arg=None, lineno=4774)
         230	LOAD_FAST(arg=14, lineno=4774)
         232	LOAD_FAST(arg=16, lineno=4774)
         234	STORE_SUBSCR(arg=None, lineno=4774)
         236	JUMP_ABSOLUTE(arg=216, lineno=4774)
>        238	LOAD_FAST(arg=14, lineno=4775)
         240	RETURN_VALUE(arg=None, lineno=4775)
2025-01-05 16:51:24,641 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:51:24,643 - DEBUG - stack: []
2025-01-05 16:51:24,644 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:51:24,645 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=4747)
2025-01-05 16:51:24,647 - DEBUG - stack []
2025-01-05 16:51:24,648 - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=4749)
2025-01-05 16:51:24,650 - DEBUG - stack []
2025-01-05 16:51:24,651 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=0, lineno=4749)
2025-01-05 16:51:24,652 - DEBUG - stack ['$2load_deref.0']
2025-01-05 16:51:24,653 - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=9, lineno=4749)
2025-01-05 16:51:24,655 - DEBUG - stack ['$2load_deref.0', '$const4.1']
2025-01-05 16:51:24,656 - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=4749)
2025-01-05 16:51:24,657 - DEBUG - stack ['$6compare_op.2']
2025-01-05 16:51:24,658 - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:24,660 - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
2025-01-05 16:51:24,662 - DEBUG - stack: []
2025-01-05 16:51:24,663 - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
2025-01-05 16:51:24,665 - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=0, lineno=4749)
2025-01-05 16:51:24,667 - DEBUG - stack []
2025-01-05 16:51:24,668 - DEBUG - dispatch pc=12, inst=JUMP_FORWARD(arg=2, lineno=4749)
2025-01-05 16:51:24,669 - DEBUG - stack ['$10load_deref.0']
2025-01-05 16:51:24,670 - DEBUG - end state. edges=[Edge(pc=16, stack=('$10load_deref.0',), blockstack=(), npush=0)]
2025-01-05 16:51:24,672 - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=0), State(pc_initial=16 nstack_initial=1)])
2025-01-05 16:51:24,673 - DEBUG - stack: []
2025-01-05 16:51:24,675 - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=0)
2025-01-05 16:51:24,676 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=4749)
2025-01-05 16:51:24,678 - DEBUG - stack []
2025-01-05 16:51:24,679 - DEBUG - end state. edges=[Edge(pc=16, stack=('$start14.0',), blockstack=(), npush=0)]
2025-01-05 16:51:24,680 - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=1), State(pc_initial=16 nstack_initial=1)])
2025-01-05 16:51:24,682 - DEBUG - stack: ['$phi16.0']
2025-01-05 16:51:24,683 - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=1)
2025-01-05 16:51:24,684 - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=4749)
2025-01-05 16:51:24,686 - DEBUG - stack ['$phi16.0']
2025-01-05 16:51:24,687 - DEBUG - dispatch pc=18, inst=LOAD_DEREF(arg=2, lineno=4750)
2025-01-05 16:51:24,688 - DEBUG - stack []
2025-01-05 16:51:24,689 - DEBUG - dispatch pc=20, inst=LOAD_CONST(arg=0, lineno=4750)
2025-01-05 16:51:24,691 - DEBUG - stack ['$18load_deref.1']
2025-01-05 16:51:24,692 - DEBUG - dispatch pc=22, inst=COMPARE_OP(arg=9, lineno=4750)
2025-01-05 16:51:24,693 - DEBUG - stack ['$18load_deref.1', '$const20.2']
2025-01-05 16:51:24,694 - DEBUG - dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=30, lineno=4750)
2025-01-05 16:51:24,696 - DEBUG - stack ['$22compare_op.3']
2025-01-05 16:51:24,697 - DEBUG - end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=30, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:24,699 - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=1), State(pc_initial=26 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
2025-01-05 16:51:24,701 - DEBUG - pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
2025-01-05 16:51:24,702 - DEBUG - stack: []
2025-01-05 16:51:24,703 - DEBUG - state.pc_initial: State(pc_initial=26 nstack_initial=0)
2025-01-05 16:51:24,705 - DEBUG - dispatch pc=26, inst=LOAD_DEREF(arg=2, lineno=4750)
2025-01-05 16:51:24,706 - DEBUG - stack []
2025-01-05 16:51:24,708 - DEBUG - dispatch pc=28, inst=JUMP_FORWARD(arg=2, lineno=4750)
2025-01-05 16:51:24,709 - DEBUG - stack ['$26load_deref.0']
2025-01-05 16:51:24,710 - DEBUG - end state. edges=[Edge(pc=32, stack=('$26load_deref.0',), blockstack=(), npush=0)]
2025-01-05 16:51:24,712 - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=32 nstack_initial=1)])
2025-01-05 16:51:24,713 - DEBUG - stack: []
2025-01-05 16:51:24,714 - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2025-01-05 16:51:24,716 - DEBUG - dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=4750)
2025-01-05 16:51:24,717 - DEBUG - stack []
2025-01-05 16:51:24,719 - DEBUG - end state. edges=[Edge(pc=32, stack=('$stop30.0',), blockstack=(), npush=0)]
2025-01-05 16:51:24,720 - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2025-01-05 16:51:24,722 - DEBUG - stack: ['$phi32.0']
2025-01-05 16:51:24,723 - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2025-01-05 16:51:24,724 - DEBUG - dispatch pc=32, inst=STORE_FAST(arg=5, lineno=4750)
2025-01-05 16:51:24,726 - DEBUG - stack ['$phi32.0']
2025-01-05 16:51:24,727 - DEBUG - dispatch pc=34, inst=LOAD_DEREF(arg=1, lineno=4751)
2025-01-05 16:51:24,728 - DEBUG - stack []
2025-01-05 16:51:24,729 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=0, lineno=4751)
2025-01-05 16:51:24,731 - DEBUG - stack ['$34load_deref.1']
2025-01-05 16:51:24,732 - DEBUG - dispatch pc=38, inst=COMPARE_OP(arg=9, lineno=4751)
2025-01-05 16:51:24,734 - DEBUG - stack ['$34load_deref.1', '$const36.2']
2025-01-05 16:51:24,735 - DEBUG - dispatch pc=40, inst=POP_JUMP_IF_FALSE(arg=46, lineno=4751)
2025-01-05 16:51:24,737 - DEBUG - stack ['$38compare_op.3']
2025-01-05 16:51:24,738 - DEBUG - end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=46, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:24,739 - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=42 nstack_initial=0), State(pc_initial=46 nstack_initial=0)])
2025-01-05 16:51:24,741 - DEBUG - pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=46 nstack_initial=0)])
2025-01-05 16:51:24,743 - DEBUG - stack: []
2025-01-05 16:51:24,744 - DEBUG - state.pc_initial: State(pc_initial=42 nstack_initial=0)
2025-01-05 16:51:24,746 - DEBUG - dispatch pc=42, inst=LOAD_DEREF(arg=1, lineno=4751)
2025-01-05 16:51:24,747 - DEBUG - stack []
2025-01-05 16:51:24,749 - DEBUG - dispatch pc=44, inst=JUMP_FORWARD(arg=2, lineno=4751)
2025-01-05 16:51:24,750 - DEBUG - stack ['$42load_deref.0']
2025-01-05 16:51:24,751 - DEBUG - end state. edges=[Edge(pc=48, stack=('$42load_deref.0',), blockstack=(), npush=0)]
2025-01-05 16:51:24,752 - DEBUG - pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=48 nstack_initial=1)])
2025-01-05 16:51:24,754 - DEBUG - stack: []
2025-01-05 16:51:24,755 - DEBUG - state.pc_initial: State(pc_initial=46 nstack_initial=0)
2025-01-05 16:51:24,756 - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=4751)
2025-01-05 16:51:24,758 - DEBUG - stack []
2025-01-05 16:51:24,759 - DEBUG - end state. edges=[Edge(pc=48, stack=('$step46.0',), blockstack=(), npush=0)]
2025-01-05 16:51:24,760 - DEBUG - pending: deque([State(pc_initial=48 nstack_initial=1), State(pc_initial=48 nstack_initial=1)])
2025-01-05 16:51:24,762 - DEBUG - stack: ['$phi48.0']
2025-01-05 16:51:24,763 - DEBUG - state.pc_initial: State(pc_initial=48 nstack_initial=1)
2025-01-05 16:51:24,765 - DEBUG - dispatch pc=48, inst=STORE_FAST(arg=6, lineno=4751)
2025-01-05 16:51:24,767 - DEBUG - stack ['$phi48.0']
2025-01-05 16:51:24,768 - DEBUG - dispatch pc=50, inst=LOAD_FAST(arg=6, lineno=4753)
2025-01-05 16:51:24,770 - DEBUG - stack []
2025-01-05 16:51:24,771 - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=0, lineno=4753)
2025-01-05 16:51:24,772 - DEBUG - stack ['$lit_step50.1']
2025-01-05 16:51:24,774 - DEBUG - dispatch pc=54, inst=COMPARE_OP(arg=9, lineno=4753)
2025-01-05 16:51:24,775 - DEBUG - stack ['$lit_step50.1', '$const52.2']
2025-01-05 16:51:24,776 - DEBUG - dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=62, lineno=4753)
2025-01-05 16:51:24,778 - DEBUG - stack ['$54compare_op.3']
2025-01-05 16:51:24,779 - DEBUG - end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:24,781 - DEBUG - pending: deque([State(pc_initial=48 nstack_initial=1), State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2025-01-05 16:51:24,783 - DEBUG - pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2025-01-05 16:51:24,785 - DEBUG - stack: []
2025-01-05 16:51:24,786 - DEBUG - state.pc_initial: State(pc_initial=58 nstack_initial=0)
2025-01-05 16:51:24,788 - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=6, lineno=4753)
2025-01-05 16:51:24,790 - DEBUG - stack []
2025-01-05 16:51:24,791 - DEBUG - dispatch pc=60, inst=JUMP_FORWARD(arg=2, lineno=4753)
2025-01-05 16:51:24,792 - DEBUG - stack ['$lit_step58.0']
2025-01-05 16:51:24,794 - DEBUG - end state. edges=[Edge(pc=64, stack=('$lit_step58.0',), blockstack=(), npush=0)]
2025-01-05 16:51:24,795 - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=64 nstack_initial=1)])
2025-01-05 16:51:24,797 - DEBUG - stack: []
2025-01-05 16:51:24,799 - DEBUG - state.pc_initial: State(pc_initial=62 nstack_initial=0)
2025-01-05 16:51:24,800 - DEBUG - dispatch pc=62, inst=LOAD_CONST(arg=1, lineno=4753)
2025-01-05 16:51:24,802 - DEBUG - stack []
2025-01-05 16:51:24,803 - DEBUG - end state. edges=[Edge(pc=64, stack=('$const62.0',), blockstack=(), npush=0)]
2025-01-05 16:51:24,805 - DEBUG - pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=64 nstack_initial=1)])
2025-01-05 16:51:24,806 - DEBUG - stack: ['$phi64.0']
2025-01-05 16:51:24,808 - DEBUG - state.pc_initial: State(pc_initial=64 nstack_initial=1)
2025-01-05 16:51:24,809 - DEBUG - dispatch pc=64, inst=STORE_FAST(arg=7, lineno=4753)
2025-01-05 16:51:24,811 - DEBUG - stack ['$phi64.0']
2025-01-05 16:51:24,813 - DEBUG - dispatch pc=66, inst=LOAD_FAST(arg=5, lineno=4754)
2025-01-05 16:51:24,815 - DEBUG - stack []
2025-01-05 16:51:24,816 - DEBUG - dispatch pc=68, inst=LOAD_CONST(arg=0, lineno=4754)
2025-01-05 16:51:24,817 - DEBUG - stack ['$lit_stop66.1']
2025-01-05 16:51:24,819 - DEBUG - dispatch pc=70, inst=COMPARE_OP(arg=8, lineno=4754)
2025-01-05 16:51:24,820 - DEBUG - stack ['$lit_stop66.1', '$const68.2']
2025-01-05 16:51:24,822 - DEBUG - dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=86, lineno=4754)
2025-01-05 16:51:24,823 - DEBUG - stack ['$70compare_op.3']
2025-01-05 16:51:24,824 - DEBUG - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:24,826 - DEBUG - pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
2025-01-05 16:51:24,828 - DEBUG - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
2025-01-05 16:51:24,830 - DEBUG - stack: []
2025-01-05 16:51:24,832 - DEBUG - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2025-01-05 16:51:24,833 - DEBUG - dispatch pc=74, inst=LOAD_CONST(arg=2, lineno=4755)
2025-01-05 16:51:24,835 - DEBUG - stack []
2025-01-05 16:51:24,836 - DEBUG - dispatch pc=76, inst=LOAD_FAST(arg=4, lineno=4755)
2025-01-05 16:51:24,838 - DEBUG - stack ['$const74.0']
2025-01-05 16:51:24,839 - DEBUG - dispatch pc=78, inst=ROT_TWO(arg=None, lineno=4755)
2025-01-05 16:51:24,840 - DEBUG - stack ['$const74.0', '$lit_start76.1']
2025-01-05 16:51:24,842 - DEBUG - dispatch pc=80, inst=STORE_FAST(arg=8, lineno=4755)
2025-01-05 16:51:24,843 - DEBUG - stack ['$lit_start76.1', '$const74.0']
2025-01-05 16:51:24,844 - DEBUG - dispatch pc=82, inst=STORE_FAST(arg=9, lineno=4755)
2025-01-05 16:51:24,846 - DEBUG - stack ['$lit_start76.1']
2025-01-05 16:51:24,847 - DEBUG - dispatch pc=84, inst=JUMP_FORWARD(arg=10, lineno=4755)
2025-01-05 16:51:24,849 - DEBUG - stack []
2025-01-05 16:51:24,850 - DEBUG - end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:24,852 - DEBUG - pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2025-01-05 16:51:24,853 - DEBUG - stack: []
2025-01-05 16:51:24,855 - DEBUG - state.pc_initial: State(pc_initial=86 nstack_initial=0)
2025-01-05 16:51:24,856 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=4, lineno=4757)
2025-01-05 16:51:24,858 - DEBUG - stack []
2025-01-05 16:51:24,859 - DEBUG - dispatch pc=88, inst=LOAD_FAST(arg=5, lineno=4757)
2025-01-05 16:51:24,861 - DEBUG - stack ['$lit_start86.0']
2025-01-05 16:51:24,862 - DEBUG - dispatch pc=90, inst=ROT_TWO(arg=None, lineno=4757)
2025-01-05 16:51:24,863 - DEBUG - stack ['$lit_start86.0', '$lit_stop88.1']
2025-01-05 16:51:24,865 - DEBUG - dispatch pc=92, inst=STORE_FAST(arg=8, lineno=4757)
2025-01-05 16:51:24,866 - DEBUG - stack ['$lit_stop88.1', '$lit_start86.0']
2025-01-05 16:51:24,868 - DEBUG - dispatch pc=94, inst=STORE_FAST(arg=9, lineno=4757)
2025-01-05 16:51:24,869 - DEBUG - stack ['$lit_stop88.1']
2025-01-05 16:51:24,870 - DEBUG - end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:24,872 - DEBUG - pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2025-01-05 16:51:24,874 - DEBUG - stack: []
2025-01-05 16:51:24,875 - DEBUG - state.pc_initial: State(pc_initial=96 nstack_initial=0)
2025-01-05 16:51:24,876 - DEBUG - dispatch pc=96, inst=LOAD_FAST(arg=7, lineno=4759)
2025-01-05 16:51:24,878 - DEBUG - stack []
2025-01-05 16:51:24,879 - DEBUG - dispatch pc=98, inst=LOAD_CONST(arg=2, lineno=4759)
2025-01-05 16:51:24,881 - DEBUG - stack ['$_step96.0']
2025-01-05 16:51:24,882 - DEBUG - dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=4759)
2025-01-05 16:51:24,884 - DEBUG - stack ['$_step96.0', '$const98.1']
2025-01-05 16:51:24,885 - DEBUG - dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=112, lineno=4759)
2025-01-05 16:51:24,887 - DEBUG - stack ['$100compare_op.2']
2025-01-05 16:51:24,888 - DEBUG - end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=112, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:24,890 - DEBUG - pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=112 nstack_initial=0)])
2025-01-05 16:51:24,892 - DEBUG - pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=112 nstack_initial=0)])
2025-01-05 16:51:24,895 - DEBUG - stack: []
2025-01-05 16:51:24,896 - DEBUG - state.pc_initial: State(pc_initial=104 nstack_initial=0)
2025-01-05 16:51:24,898 - DEBUG - dispatch pc=104, inst=LOAD_GLOBAL(arg=0, lineno=4760)
2025-01-05 16:51:24,900 - DEBUG - stack []
2025-01-05 16:51:24,901 - DEBUG - dispatch pc=106, inst=LOAD_CONST(arg=3, lineno=4760)
2025-01-05 16:51:24,903 - DEBUG - stack ['$104load_global.0']
2025-01-05 16:51:24,904 - DEBUG - dispatch pc=108, inst=CALL_FUNCTION(arg=1, lineno=4760)
2025-01-05 16:51:24,905 - DEBUG - stack ['$104load_global.0', '$const106.1']
2025-01-05 16:51:24,906 - DEBUG - dispatch pc=110, inst=RAISE_VARARGS(arg=1, lineno=4760)
2025-01-05 16:51:24,908 - DEBUG - stack ['$108call_function.2']
2025-01-05 16:51:24,909 - DEBUG - end state. edges=[]
2025-01-05 16:51:24,910 - DEBUG - pending: deque([State(pc_initial=112 nstack_initial=0)])
2025-01-05 16:51:24,911 - DEBUG - stack: []
2025-01-05 16:51:24,912 - DEBUG - state.pc_initial: State(pc_initial=112 nstack_initial=0)
2025-01-05 16:51:24,914 - DEBUG - dispatch pc=112, inst=LOAD_FAST(arg=9, lineno=4762)
2025-01-05 16:51:24,915 - DEBUG - stack []
2025-01-05 16:51:24,916 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=8, lineno=4762)
2025-01-05 16:51:24,917 - DEBUG - stack ['$_stop112.0']
2025-01-05 16:51:24,918 - DEBUG - dispatch pc=116, inst=BINARY_SUBTRACT(arg=None, lineno=4762)
2025-01-05 16:51:24,920 - DEBUG - stack ['$_stop112.0', '$_start114.1']
2025-01-05 16:51:24,921 - DEBUG - dispatch pc=118, inst=LOAD_FAST(arg=7, lineno=4762)
2025-01-05 16:51:24,922 - DEBUG - stack ['$116binary_subtract.2']
2025-01-05 16:51:24,924 - DEBUG - dispatch pc=120, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=4762)
2025-01-05 16:51:24,925 - DEBUG - stack ['$116binary_subtract.2', '$_step118.3']
2025-01-05 16:51:24,927 - DEBUG - dispatch pc=122, inst=STORE_FAST(arg=10, lineno=4762)
2025-01-05 16:51:24,929 - DEBUG - stack ['$120binary_true_divide.4']
2025-01-05 16:51:24,930 - DEBUG - dispatch pc=124, inst=LOAD_GLOBAL(arg=1, lineno=4763)
2025-01-05 16:51:24,932 - DEBUG - stack []
2025-01-05 16:51:24,933 - DEBUG - dispatch pc=126, inst=LOAD_GLOBAL(arg=2, lineno=4763)
2025-01-05 16:51:24,935 - DEBUG - stack ['$124load_global.5']
2025-01-05 16:51:24,936 - DEBUG - dispatch pc=128, inst=LOAD_METHOD(arg=3, lineno=4763)
2025-01-05 16:51:24,937 - DEBUG - stack ['$124load_global.5', '$126load_global.6']
2025-01-05 16:51:24,939 - DEBUG - dispatch pc=130, inst=LOAD_FAST(arg=10, lineno=4763)
2025-01-05 16:51:24,940 - DEBUG - stack ['$124load_global.5', '$128load_method.7']
2025-01-05 16:51:24,942 - DEBUG - dispatch pc=132, inst=LOAD_ATTR(arg=4, lineno=4763)
2025-01-05 16:51:24,943 - DEBUG - stack ['$124load_global.5', '$128load_method.7', '$nitems_c130.8']
2025-01-05 16:51:24,945 - DEBUG - dispatch pc=134, inst=CALL_METHOD(arg=1, lineno=4763)
2025-01-05 16:51:24,947 - DEBUG - stack ['$124load_global.5', '$128load_method.7', '$132load_attr.9']
2025-01-05 16:51:24,949 - DEBUG - dispatch pc=136, inst=CALL_FUNCTION(arg=1, lineno=4763)
2025-01-05 16:51:24,950 - DEBUG - stack ['$124load_global.5', '$134call_method.10']
2025-01-05 16:51:24,952 - DEBUG - dispatch pc=138, inst=STORE_FAST(arg=11, lineno=4763)
2025-01-05 16:51:24,953 - DEBUG - stack ['$136call_function.11']
2025-01-05 16:51:24,954 - DEBUG - dispatch pc=140, inst=LOAD_DEREF(arg=4, lineno=4766)
2025-01-05 16:51:24,956 - DEBUG - stack []
2025-01-05 16:51:24,957 - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=4, lineno=4766)
2025-01-05 16:51:24,958 - DEBUG - stack ['$140load_deref.12']
2025-01-05 16:51:24,959 - DEBUG - dispatch pc=144, inst=COMPARE_OP(arg=8, lineno=4766)
2025-01-05 16:51:24,961 - DEBUG - stack ['$140load_deref.12', '$const142.13']
2025-01-05 16:51:24,962 - DEBUG - dispatch pc=146, inst=POP_JUMP_IF_FALSE(arg=182, lineno=4766)
2025-01-05 16:51:24,964 - DEBUG - stack ['$144compare_op.14']
2025-01-05 16:51:24,965 - DEBUG - end state. edges=[Edge(pc=148, stack=(), blockstack=(), npush=0), Edge(pc=182, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:24,967 - DEBUG - pending: deque([State(pc_initial=148 nstack_initial=0), State(pc_initial=182 nstack_initial=0)])
2025-01-05 16:51:24,969 - DEBUG - stack: []
2025-01-05 16:51:24,970 - DEBUG - state.pc_initial: State(pc_initial=148 nstack_initial=0)
2025-01-05 16:51:24,971 - DEBUG - dispatch pc=148, inst=LOAD_GLOBAL(arg=1, lineno=4767)
2025-01-05 16:51:24,972 - DEBUG - stack []
2025-01-05 16:51:24,974 - DEBUG - dispatch pc=150, inst=LOAD_GLOBAL(arg=2, lineno=4767)
2025-01-05 16:51:24,975 - DEBUG - stack ['$148load_global.0']
2025-01-05 16:51:24,976 - DEBUG - dispatch pc=152, inst=LOAD_METHOD(arg=3, lineno=4767)
2025-01-05 16:51:24,977 - DEBUG - stack ['$148load_global.0', '$150load_global.1']
2025-01-05 16:51:24,979 - DEBUG - dispatch pc=154, inst=LOAD_FAST(arg=10, lineno=4767)
2025-01-05 16:51:24,981 - DEBUG - stack ['$148load_global.0', '$152load_method.2']
2025-01-05 16:51:24,982 - DEBUG - dispatch pc=156, inst=LOAD_ATTR(arg=5, lineno=4767)
2025-01-05 16:51:24,984 - DEBUG - stack ['$148load_global.0', '$152load_method.2', '$nitems_c154.3']
2025-01-05 16:51:24,985 - DEBUG - dispatch pc=158, inst=CALL_METHOD(arg=1, lineno=4767)
2025-01-05 16:51:24,987 - DEBUG - stack ['$148load_global.0', '$152load_method.2', '$156load_attr.4']
2025-01-05 16:51:24,988 - DEBUG - dispatch pc=160, inst=CALL_FUNCTION(arg=1, lineno=4767)
2025-01-05 16:51:24,990 - DEBUG - stack ['$148load_global.0', '$158call_method.5']
2025-01-05 16:51:24,992 - DEBUG - dispatch pc=162, inst=STORE_FAST(arg=12, lineno=4767)
2025-01-05 16:51:24,993 - DEBUG - stack ['$160call_function.6']
2025-01-05 16:51:24,994 - DEBUG - dispatch pc=164, inst=LOAD_GLOBAL(arg=6, lineno=4768)
2025-01-05 16:51:24,996 - DEBUG - stack []
2025-01-05 16:51:24,997 - DEBUG - dispatch pc=166, inst=LOAD_GLOBAL(arg=7, lineno=4768)
2025-01-05 16:51:24,998 - DEBUG - stack ['$164load_global.7']
2025-01-05 16:51:25,000 - DEBUG - dispatch pc=168, inst=LOAD_FAST(arg=12, lineno=4768)
2025-01-05 16:51:25,001 - DEBUG - stack ['$164load_global.7', '$166load_global.8']
2025-01-05 16:51:25,002 - DEBUG - dispatch pc=170, inst=LOAD_FAST(arg=11, lineno=4768)
2025-01-05 16:51:25,004 - DEBUG - stack ['$164load_global.7', '$166load_global.8', '$nitems_i168.9']
2025-01-05 16:51:25,006 - DEBUG - dispatch pc=172, inst=CALL_FUNCTION(arg=2, lineno=4768)
2025-01-05 16:51:25,007 - DEBUG - stack ['$164load_global.7', '$166load_global.8', '$nitems_i168.9', '$nitems_r170.10']
2025-01-05 16:51:25,009 - DEBUG - dispatch pc=174, inst=LOAD_CONST(arg=2, lineno=4768)
2025-01-05 16:51:25,010 - DEBUG - stack ['$164load_global.7', '$172call_function.11']
2025-01-05 16:51:25,012 - DEBUG - dispatch pc=176, inst=CALL_FUNCTION(arg=2, lineno=4768)
2025-01-05 16:51:25,013 - DEBUG - stack ['$164load_global.7', '$172call_function.11', '$const174.12']
2025-01-05 16:51:25,015 - DEBUG - dispatch pc=178, inst=STORE_FAST(arg=13, lineno=4768)
2025-01-05 16:51:25,017 - DEBUG - stack ['$176call_function.13']
2025-01-05 16:51:25,018 - DEBUG - dispatch pc=180, inst=JUMP_FORWARD(arg=10, lineno=4768)
2025-01-05 16:51:25,019 - DEBUG - stack []
2025-01-05 16:51:25,020 - DEBUG - end state. edges=[Edge(pc=192, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:25,021 - DEBUG - pending: deque([State(pc_initial=182 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
2025-01-05 16:51:25,023 - DEBUG - stack: []
2025-01-05 16:51:25,024 - DEBUG - state.pc_initial: State(pc_initial=182 nstack_initial=0)
2025-01-05 16:51:25,025 - DEBUG - dispatch pc=182, inst=LOAD_GLOBAL(arg=6, lineno=4770)
2025-01-05 16:51:25,027 - DEBUG - stack []
2025-01-05 16:51:25,028 - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=11, lineno=4770)
2025-01-05 16:51:25,029 - DEBUG - stack ['$182load_global.0']
2025-01-05 16:51:25,031 - DEBUG - dispatch pc=186, inst=LOAD_CONST(arg=2, lineno=4770)
2025-01-05 16:51:25,032 - DEBUG - stack ['$182load_global.0', '$nitems_r184.1']
2025-01-05 16:51:25,033 - DEBUG - dispatch pc=188, inst=CALL_FUNCTION(arg=2, lineno=4770)
2025-01-05 16:51:25,035 - DEBUG - stack ['$182load_global.0', '$nitems_r184.1', '$const186.2']
2025-01-05 16:51:25,036 - DEBUG - dispatch pc=190, inst=STORE_FAST(arg=13, lineno=4770)
2025-01-05 16:51:25,038 - DEBUG - stack ['$188call_function.3']
2025-01-05 16:51:25,039 - DEBUG - end state. edges=[Edge(pc=192, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:25,041 - DEBUG - pending: deque([State(pc_initial=192 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
2025-01-05 16:51:25,042 - DEBUG - stack: []
2025-01-05 16:51:25,043 - DEBUG - state.pc_initial: State(pc_initial=192 nstack_initial=0)
2025-01-05 16:51:25,045 - DEBUG - dispatch pc=192, inst=LOAD_GLOBAL(arg=8, lineno=4771)
2025-01-05 16:51:25,047 - DEBUG - stack []
2025-01-05 16:51:25,048 - DEBUG - dispatch pc=194, inst=LOAD_METHOD(arg=9, lineno=4771)
2025-01-05 16:51:25,050 - DEBUG - stack ['$192load_global.0']
2025-01-05 16:51:25,051 - DEBUG - dispatch pc=196, inst=LOAD_FAST(arg=13, lineno=4771)
2025-01-05 16:51:25,052 - DEBUG - stack ['$194load_method.1']
2025-01-05 16:51:25,053 - DEBUG - dispatch pc=198, inst=LOAD_DEREF(arg=3, lineno=4771)
2025-01-05 16:51:25,055 - DEBUG - stack ['$194load_method.1', '$nitems196.2']
2025-01-05 16:51:25,056 - DEBUG - dispatch pc=200, inst=CALL_METHOD(arg=2, lineno=4771)
2025-01-05 16:51:25,057 - DEBUG - stack ['$194load_method.1', '$nitems196.2', '$198load_deref.3']
2025-01-05 16:51:25,059 - DEBUG - dispatch pc=202, inst=STORE_FAST(arg=14, lineno=4771)
2025-01-05 16:51:25,060 - DEBUG - stack ['$200call_method.4']
2025-01-05 16:51:25,061 - DEBUG - dispatch pc=204, inst=LOAD_FAST(arg=8, lineno=4772)
2025-01-05 16:51:25,063 - DEBUG - stack []
2025-01-05 16:51:25,064 - DEBUG - dispatch pc=206, inst=STORE_FAST(arg=15, lineno=4772)
2025-01-05 16:51:25,066 - DEBUG - stack ['$_start204.5']
2025-01-05 16:51:25,067 - DEBUG - dispatch pc=208, inst=LOAD_GLOBAL(arg=10, lineno=4773)
2025-01-05 16:51:25,068 - DEBUG - stack []
2025-01-05 16:51:25,069 - DEBUG - dispatch pc=210, inst=LOAD_FAST(arg=13, lineno=4773)
2025-01-05 16:51:25,070 - DEBUG - stack ['$208load_global.6']
2025-01-05 16:51:25,071 - DEBUG - dispatch pc=212, inst=CALL_FUNCTION(arg=1, lineno=4773)
2025-01-05 16:51:25,073 - DEBUG - stack ['$208load_global.6', '$nitems210.7']
2025-01-05 16:51:25,074 - DEBUG - dispatch pc=214, inst=GET_ITER(arg=None, lineno=4773)
2025-01-05 16:51:25,075 - DEBUG - stack ['$212call_function.8']
2025-01-05 16:51:25,076 - DEBUG - end state. edges=[Edge(pc=216, stack=('$214get_iter.9',), blockstack=(), npush=0)]
2025-01-05 16:51:25,078 - DEBUG - pending: deque([State(pc_initial=192 nstack_initial=0), State(pc_initial=216 nstack_initial=1)])
2025-01-05 16:51:25,079 - DEBUG - pending: deque([State(pc_initial=216 nstack_initial=1)])
2025-01-05 16:51:25,081 - DEBUG - stack: ['$phi216.0']
2025-01-05 16:51:25,082 - DEBUG - state.pc_initial: State(pc_initial=216 nstack_initial=1)
2025-01-05 16:51:25,084 - DEBUG - dispatch pc=216, inst=FOR_ITER(arg=20, lineno=4773)
2025-01-05 16:51:25,085 - DEBUG - stack ['$phi216.0']
2025-01-05 16:51:25,087 - DEBUG - end state. edges=[Edge(pc=238, stack=(), blockstack=(), npush=0), Edge(pc=218, stack=('$phi216.0', '$216for_iter.2'), blockstack=(), npush=0)]
2025-01-05 16:51:25,088 - DEBUG - pending: deque([State(pc_initial=238 nstack_initial=0), State(pc_initial=218 nstack_initial=2)])
2025-01-05 16:51:25,090 - DEBUG - stack: []
2025-01-05 16:51:25,091 - DEBUG - state.pc_initial: State(pc_initial=238 nstack_initial=0)
2025-01-05 16:51:25,092 - DEBUG - dispatch pc=238, inst=LOAD_FAST(arg=14, lineno=4775)
2025-01-05 16:51:25,094 - DEBUG - stack []
2025-01-05 16:51:25,095 - DEBUG - dispatch pc=240, inst=RETURN_VALUE(arg=None, lineno=4775)
2025-01-05 16:51:25,097 - DEBUG - stack ['$arr238.0']
2025-01-05 16:51:25,098 - DEBUG - end state. edges=[]
2025-01-05 16:51:25,099 - DEBUG - pending: deque([State(pc_initial=218 nstack_initial=2)])
2025-01-05 16:51:25,100 - DEBUG - stack: ['$phi218.0', '$phi218.1']
2025-01-05 16:51:25,101 - DEBUG - state.pc_initial: State(pc_initial=218 nstack_initial=2)
2025-01-05 16:51:25,102 - DEBUG - dispatch pc=218, inst=STORE_FAST(arg=16, lineno=4773)
2025-01-05 16:51:25,104 - DEBUG - stack ['$phi218.0', '$phi218.1']
2025-01-05 16:51:25,105 - DEBUG - dispatch pc=220, inst=LOAD_FAST(arg=15, lineno=4774)
2025-01-05 16:51:25,106 - DEBUG - stack ['$phi218.0']
2025-01-05 16:51:25,107 - DEBUG - dispatch pc=222, inst=LOAD_FAST(arg=16, lineno=4774)
2025-01-05 16:51:25,109 - DEBUG - stack ['$phi218.0', '$val220.2']
2025-01-05 16:51:25,110 - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=7, lineno=4774)
2025-01-05 16:51:25,111 - DEBUG - stack ['$phi218.0', '$val220.2', '$i222.3']
2025-01-05 16:51:25,112 - DEBUG - dispatch pc=226, inst=BINARY_MULTIPLY(arg=None, lineno=4774)
2025-01-05 16:51:25,114 - DEBUG - stack ['$phi218.0', '$val220.2', '$i222.3', '$_step224.4']
2025-01-05 16:51:25,116 - DEBUG - dispatch pc=228, inst=BINARY_ADD(arg=None, lineno=4774)
2025-01-05 16:51:25,118 - DEBUG - stack ['$phi218.0', '$val220.2', '$226binary_multiply.5']
2025-01-05 16:51:25,120 - DEBUG - dispatch pc=230, inst=LOAD_FAST(arg=14, lineno=4774)
2025-01-05 16:51:25,121 - DEBUG - stack ['$phi218.0', '$228binary_add.6']
2025-01-05 16:51:25,122 - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=16, lineno=4774)
2025-01-05 16:51:25,123 - DEBUG - stack ['$phi218.0', '$228binary_add.6', '$arr230.7']
2025-01-05 16:51:25,125 - DEBUG - dispatch pc=234, inst=STORE_SUBSCR(arg=None, lineno=4774)
2025-01-05 16:51:25,127 - DEBUG - stack ['$phi218.0', '$228binary_add.6', '$arr230.7', '$i232.8']
2025-01-05 16:51:25,128 - DEBUG - dispatch pc=236, inst=JUMP_ABSOLUTE(arg=216, lineno=4774)
2025-01-05 16:51:25,130 - DEBUG - stack ['$phi218.0']
2025-01-05 16:51:25,131 - DEBUG - end state. edges=[Edge(pc=216, stack=('$phi218.0',), blockstack=(), npush=0)]
2025-01-05 16:51:25,132 - DEBUG - pending: deque([State(pc_initial=216 nstack_initial=1)])
2025-01-05 16:51:25,134 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:51:25,136 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): {'$phi32.0'},
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=1): {'$phi48.0'},
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=1): {'$phi64.0'},
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=112 nstack_initial=0): set(),
             State(pc_initial=148 nstack_initial=0): set(),
             State(pc_initial=182 nstack_initial=0): set(),
             State(pc_initial=192 nstack_initial=0): set(),
             State(pc_initial=216 nstack_initial=1): {'$phi216.0'},
             State(pc_initial=218 nstack_initial=2): {'$phi218.1'},
             State(pc_initial=238 nstack_initial=0): set()})
2025-01-05 16:51:25,150 - DEBUG - defmap: {'$phi16.0': State(pc_initial=14 nstack_initial=0),
 '$phi216.0': State(pc_initial=192 nstack_initial=0),
 '$phi218.1': State(pc_initial=216 nstack_initial=1),
 '$phi32.0': State(pc_initial=26 nstack_initial=0),
 '$phi48.0': State(pc_initial=46 nstack_initial=0),
 '$phi64.0': State(pc_initial=62 nstack_initial=0)}
2025-01-05 16:51:25,154 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi216.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0)),
                           ('$phi218.0',
                            State(pc_initial=218 nstack_initial=2))},
             '$phi218.0': {('$phi216.0',
                            State(pc_initial=216 nstack_initial=1))},
             '$phi218.1': {('$216for_iter.2',
                            State(pc_initial=216 nstack_initial=1))},
             '$phi32.0': {('$26load_deref.0',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
             '$phi48.0': {('$42load_deref.0',
                           State(pc_initial=42 nstack_initial=0)),
                          ('$step46.0', State(pc_initial=46 nstack_initial=0))},
             '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
                          ('$lit_step58.0',
                           State(pc_initial=58 nstack_initial=0))}})
2025-01-05 16:51:25,168 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi216.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=1))},
             '$phi218.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi218.1': {('$216for_iter.2',
                            State(pc_initial=216 nstack_initial=1))},
             '$phi32.0': {('$26load_deref.0',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
             '$phi48.0': {('$42load_deref.0',
                           State(pc_initial=42 nstack_initial=0)),
                          ('$step46.0', State(pc_initial=46 nstack_initial=0))},
             '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
                          ('$lit_step58.0',
                           State(pc_initial=58 nstack_initial=0))}})
2025-01-05 16:51:25,183 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi216.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi218.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi218.1': {('$216for_iter.2',
                            State(pc_initial=216 nstack_initial=1))},
             '$phi32.0': {('$26load_deref.0',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
             '$phi48.0': {('$42load_deref.0',
                           State(pc_initial=42 nstack_initial=0)),
                          ('$step46.0', State(pc_initial=46 nstack_initial=0))},
             '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
                          ('$lit_step58.0',
                           State(pc_initial=58 nstack_initial=0))}})
2025-01-05 16:51:25,196 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi216.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi218.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi218.1': {('$216for_iter.2',
                            State(pc_initial=216 nstack_initial=1))},
             '$phi32.0': {('$26load_deref.0',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
             '$phi48.0': {('$42load_deref.0',
                           State(pc_initial=42 nstack_initial=0)),
                          ('$step46.0', State(pc_initial=46 nstack_initial=0))},
             '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
                          ('$lit_step58.0',
                           State(pc_initial=58 nstack_initial=0))}})
2025-01-05 16:51:25,210 - DEBUG - keep phismap: {'$phi16.0': {('$10load_deref.0', State(pc_initial=10 nstack_initial=0)),
              ('$start14.0', State(pc_initial=14 nstack_initial=0))},
 '$phi216.0': {('$214get_iter.9', State(pc_initial=192 nstack_initial=0))},
 '$phi218.1': {('$216for_iter.2', State(pc_initial=216 nstack_initial=1))},
 '$phi32.0': {('$26load_deref.0', State(pc_initial=26 nstack_initial=0)),
              ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
 '$phi48.0': {('$42load_deref.0', State(pc_initial=42 nstack_initial=0)),
              ('$step46.0', State(pc_initial=46 nstack_initial=0))},
 '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
              ('$lit_step58.0', State(pc_initial=58 nstack_initial=0))}}
2025-01-05 16:51:25,218 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi16.0': '$10load_deref.0'},
             State(pc_initial=14 nstack_initial=0): {'$phi16.0': '$start14.0'},
             State(pc_initial=26 nstack_initial=0): {'$phi32.0': '$26load_deref.0'},
             State(pc_initial=30 nstack_initial=0): {'$phi32.0': '$stop30.0'},
             State(pc_initial=42 nstack_initial=0): {'$phi48.0': '$42load_deref.0'},
             State(pc_initial=46 nstack_initial=0): {'$phi48.0': '$step46.0'},
             State(pc_initial=58 nstack_initial=0): {'$phi64.0': '$lit_step58.0'},
             State(pc_initial=62 nstack_initial=0): {'$phi64.0': '$const62.0'},
             State(pc_initial=192 nstack_initial=0): {'$phi216.0': '$214get_iter.9'},
             State(pc_initial=216 nstack_initial=1): {'$phi218.1': '$216for_iter.2'}})
2025-01-05 16:51:25,228 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:51:25,229 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$2load_deref.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
2025-01-05 16:51:25,233 - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_deref.0'}), (12, {})), outgoing_phis={'$phi16.0': '$10load_deref.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$10load_deref.0',)})
2025-01-05 16:51:25,237 - DEBUG - block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$start14.0'}),), outgoing_phis={'$phi16.0': '$start14.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$start14.0',)})
2025-01-05 16:51:25,240 - DEBUG - block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'value': '$phi16.0'}), (18, {'res': '$18load_deref.1'}), (20, {'res': '$const20.2'}), (22, {'lhs': '$18load_deref.1', 'rhs': '$const20.2', 'res': '$22compare_op.3'}), (24, {'pred': '$22compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 30: ()})
2025-01-05 16:51:25,244 - DEBUG - block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$26load_deref.0'}), (28, {})), outgoing_phis={'$phi32.0': '$26load_deref.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$26load_deref.0',)})
2025-01-05 16:51:25,248 - DEBUG - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$stop30.0'}),), outgoing_phis={'$phi32.0': '$stop30.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$stop30.0',)})
2025-01-05 16:51:25,251 - DEBUG - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((32, {'value': '$phi32.0'}), (34, {'res': '$34load_deref.1'}), (36, {'res': '$const36.2'}), (38, {'lhs': '$34load_deref.1', 'rhs': '$const36.2', 'res': '$38compare_op.3'}), (40, {'pred': '$38compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 46: ()})
2025-01-05 16:51:25,255 - DEBUG - block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$42load_deref.0'}), (44, {})), outgoing_phis={'$phi48.0': '$42load_deref.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ('$42load_deref.0',)})
2025-01-05 16:51:25,258 - DEBUG - block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=((46, {'res': '$step46.0'}),), outgoing_phis={'$phi48.0': '$step46.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ('$step46.0',)})
2025-01-05 16:51:25,262 - DEBUG - block_infos State(pc_initial=48 nstack_initial=1):
AdaptBlockInfo(insts=((48, {'value': '$phi48.0'}), (50, {'res': '$lit_step50.1'}), (52, {'res': '$const52.2'}), (54, {'lhs': '$lit_step50.1', 'rhs': '$const52.2', 'res': '$54compare_op.3'}), (56, {'pred': '$54compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 62: ()})
2025-01-05 16:51:25,266 - DEBUG - block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$lit_step58.0'}), (60, {})), outgoing_phis={'$phi64.0': '$lit_step58.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$lit_step58.0',)})
2025-01-05 16:51:25,270 - DEBUG - block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$const62.0'}),), outgoing_phis={'$phi64.0': '$const62.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$const62.0',)})
2025-01-05 16:51:25,273 - DEBUG - block_infos State(pc_initial=64 nstack_initial=1):
AdaptBlockInfo(insts=((64, {'value': '$phi64.0'}), (66, {'res': '$lit_stop66.1'}), (68, {'res': '$const68.2'}), (70, {'lhs': '$lit_stop66.1', 'rhs': '$const68.2', 'res': '$70compare_op.3'}), (72, {'pred': '$70compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 86: ()})
2025-01-05 16:51:25,278 - DEBUG - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'res': '$lit_start76.1'}), (80, {'value': '$const74.0'}), (82, {'value': '$lit_start76.1'}), (84, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: ()})
2025-01-05 16:51:25,282 - DEBUG - block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$lit_start86.0'}), (88, {'res': '$lit_stop88.1'}), (92, {'value': '$lit_start86.0'}), (94, {'value': '$lit_stop88.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: ()})
2025-01-05 16:51:25,286 - DEBUG - block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$_step96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$_step96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 112: ()})
2025-01-05 16:51:25,289 - DEBUG - block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$104load_global.0'}), (106, {'res': '$const106.1'}), (108, {'func': '$104load_global.0', 'args': ['$const106.1'], 'res': '$108call_function.2'}), (110, {'exc': '$108call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:25,293 - DEBUG - block_infos State(pc_initial=112 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$_stop112.0'}), (114, {'res': '$_start114.1'}), (116, {'lhs': '$_stop112.0', 'rhs': '$_start114.1', 'res': '$116binary_subtract.2'}), (118, {'res': '$_step118.3'}), (120, {'lhs': '$116binary_subtract.2', 'rhs': '$_step118.3', 'res': '$120binary_true_divide.4'}), (122, {'value': '$120binary_true_divide.4'}), (124, {'res': '$124load_global.5'}), (126, {'res': '$126load_global.6'}), (128, {'item': '$126load_global.6', 'res': '$128load_method.7'}), (130, {'res': '$nitems_c130.8'}), (132, {'item': '$nitems_c130.8', 'res': '$132load_attr.9'}), (134, {'func': '$128load_method.7', 'args': ['$132load_attr.9'], 'res': '$134call_method.10'}), (136, {'func': '$124load_global.5', 'args': ['$134call_method.10'], 'res': '$136call_function.11'}), (138, {'value': '$136call_function.11'}), (140, {'res': '$140load_deref.12'}), (142, {'res': '$const142.13'}), (144, {'lhs': '$140load_deref.12', 'rhs': '$const142.13', 'res': '$144compare_op.14'}), (146, {'pred': '$144compare_op.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={148: (), 182: ()})
2025-01-05 16:51:25,303 - DEBUG - block_infos State(pc_initial=148 nstack_initial=0):
AdaptBlockInfo(insts=((148, {'res': '$148load_global.0'}), (150, {'res': '$150load_global.1'}), (152, {'item': '$150load_global.1', 'res': '$152load_method.2'}), (154, {'res': '$nitems_c154.3'}), (156, {'item': '$nitems_c154.3', 'res': '$156load_attr.4'}), (158, {'func': '$152load_method.2', 'args': ['$156load_attr.4'], 'res': '$158call_method.5'}), (160, {'func': '$148load_global.0', 'args': ['$158call_method.5'], 'res': '$160call_function.6'}), (162, {'value': '$160call_function.6'}), (164, {'res': '$164load_global.7'}), (166, {'res': '$166load_global.8'}), (168, {'res': '$nitems_i168.9'}), (170, {'res': '$nitems_r170.10'}), (172, {'func': '$166load_global.8', 'args': ['$nitems_i168.9', '$nitems_r170.10'], 'res': '$172call_function.11'}), (174, {'res': '$const174.12'}), (176, {'func': '$164load_global.7', 'args': ['$172call_function.11', '$const174.12'], 'res': '$176call_function.13'}), (178, {'value': '$176call_function.13'}), (180, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={192: ()})
2025-01-05 16:51:25,312 - DEBUG - block_infos State(pc_initial=182 nstack_initial=0):
AdaptBlockInfo(insts=((182, {'res': '$182load_global.0'}), (184, {'res': '$nitems_r184.1'}), (186, {'res': '$const186.2'}), (188, {'func': '$182load_global.0', 'args': ['$nitems_r184.1', '$const186.2'], 'res': '$188call_function.3'}), (190, {'value': '$188call_function.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={192: ()})
2025-01-05 16:51:25,316 - DEBUG - block_infos State(pc_initial=192 nstack_initial=0):
AdaptBlockInfo(insts=((192, {'res': '$192load_global.0'}), (194, {'item': '$192load_global.0', 'res': '$194load_method.1'}), (196, {'res': '$nitems196.2'}), (198, {'res': '$198load_deref.3'}), (200, {'func': '$194load_method.1', 'args': ['$nitems196.2', '$198load_deref.3'], 'res': '$200call_method.4'}), (202, {'value': '$200call_method.4'}), (204, {'res': '$_start204.5'}), (206, {'value': '$_start204.5'}), (208, {'res': '$208load_global.6'}), (210, {'res': '$nitems210.7'}), (212, {'func': '$208load_global.6', 'args': ['$nitems210.7'], 'res': '$212call_function.8'}), (214, {'value': '$212call_function.8', 'res': '$214get_iter.9'})), outgoing_phis={'$phi216.0': '$214get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={216: ('$214get_iter.9',)})
2025-01-05 16:51:25,323 - DEBUG - block_infos State(pc_initial=216 nstack_initial=1):
AdaptBlockInfo(insts=((216, {'iterator': '$phi216.0', 'pair': '$216for_iter.1', 'indval': '$216for_iter.2', 'pred': '$216for_iter.3'}),), outgoing_phis={'$phi218.1': '$216for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={238: (), 218: ('$phi216.0', '$216for_iter.2')})
2025-01-05 16:51:25,328 - DEBUG - block_infos State(pc_initial=218 nstack_initial=2):
AdaptBlockInfo(insts=((218, {'value': '$phi218.1'}), (220, {'res': '$val220.2'}), (222, {'res': '$i222.3'}), (224, {'res': '$_step224.4'}), (226, {'lhs': '$i222.3', 'rhs': '$_step224.4', 'res': '$226binary_multiply.5'}), (228, {'lhs': '$val220.2', 'rhs': '$226binary_multiply.5', 'res': '$228binary_add.6'}), (230, {'res': '$arr230.7'}), (232, {'res': '$i232.8'}), (234, {'target': '$arr230.7', 'index': '$i232.8', 'value': '$228binary_add.6'}), (236, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={216: ('$phi218.0',)})
2025-01-05 16:51:25,333 - DEBUG - block_infos State(pc_initial=238 nstack_initial=0):
AdaptBlockInfo(insts=((238, {'res': '$arr238.0'}), (240, {'retval': '$arr238.0', 'castval': '$240return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:25,342 - DEBUG - label 0:
    start = arg(0, name=start)               ['start']
    stop = arg(1, name=stop)                 ['stop']
    step = arg(2, name=step)                 ['step']
    dtype = arg(3, name=dtype)               ['dtype']
    $2load_deref.0 = freevar(start_value: None) ['$2load_deref.0']
    $const4.1 = const(NoneType, None)        ['$const4.1']
    $6compare_op.2 = $2load_deref.0 is not $const4.1 ['$2load_deref.0', '$6compare_op.2', '$const4.1']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4749),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $10load_deref.0 = freevar(start_value: None) ['$10load_deref.0']
    $phi16.0 = $10load_deref.0               ['$10load_deref.0', '$phi16.0']
    jump 16                                  []
label 14:
    $phi16.0 = start                         ['$phi16.0', 'start']
    jump 16                                  []
label 16:
    lit_start = $phi16.0                     ['$phi16.0', 'lit_start']
    $18load_deref.1 = freevar(stop_value: None) ['$18load_deref.1']
    $const20.2 = const(NoneType, None)       ['$const20.2']
    $22compare_op.3 = $18load_deref.1 is not $const20.2 ['$18load_deref.1', '$22compare_op.3', '$const20.2']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4750),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.3', '$24pred', 'bool24']
    branch $24pred, 26, 30                   ['$24pred']
label 26:
    $26load_deref.0 = freevar(stop_value: None) ['$26load_deref.0']
    $phi32.0 = $26load_deref.0               ['$26load_deref.0', '$phi32.0']
    jump 32                                  []
label 30:
    $phi32.0 = stop                          ['$phi32.0', 'stop']
    jump 32                                  []
label 32:
    lit_stop = $phi32.0                      ['$phi32.0', 'lit_stop']
    $34load_deref.1 = freevar(step_value: None) ['$34load_deref.1']
    $const36.2 = const(NoneType, None)       ['$const36.2']
    $38compare_op.3 = $34load_deref.1 is not $const36.2 ['$34load_deref.1', '$38compare_op.3', '$const36.2']
    bool40 = global(bool: <class 'bool'>)    ['bool40']
    $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4751),), kws=(), vararg=None, varkwarg=None, target=None) ['$38compare_op.3', '$40pred', 'bool40']
    branch $40pred, 42, 46                   ['$40pred']
label 42:
    $42load_deref.0 = freevar(step_value: None) ['$42load_deref.0']
    $phi48.0 = $42load_deref.0               ['$42load_deref.0', '$phi48.0']
    jump 48                                  []
label 46:
    $phi48.0 = step                          ['$phi48.0', 'step']
    jump 48                                  []
label 48:
    lit_step = $phi48.0                      ['$phi48.0', 'lit_step']
    $const52.2 = const(NoneType, None)       ['$const52.2']
    $54compare_op.3 = lit_step is not $const52.2 ['$54compare_op.3', '$const52.2', 'lit_step']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4753),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.3', '$56pred', 'bool56']
    branch $56pred, 58, 62                   ['$56pred']
label 58:
    $phi64.0 = lit_step                      ['$phi64.0', 'lit_step']
    jump 64                                  []
label 62:
    $const62.0 = const(int, 1)               ['$const62.0']
    $phi64.0 = $const62.0                    ['$const62.0', '$phi64.0']
    jump 64                                  []
label 64:
    _step = $phi64.0                         ['$phi64.0', '_step']
    $const68.2 = const(NoneType, None)       ['$const68.2']
    $70compare_op.3 = lit_stop is $const68.2 ['$70compare_op.3', '$const68.2', 'lit_stop']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4754),), kws=(), vararg=None, varkwarg=None, target=None) ['$70compare_op.3', '$72pred', 'bool72']
    branch $72pred, 74, 86                   ['$72pred']
label 74:
    _start = const(int, 0)                   ['_start']
    _stop = lit_start                        ['_stop', 'lit_start']
    jump 96                                  []
label 86:
    _start = lit_start                       ['_start', 'lit_start']
    _stop = lit_stop                         ['_stop', 'lit_stop']
    jump 96                                  []
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = _step == $const98.1   ['$100compare_op.2', '$const98.1', '_step']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4759),), kws=(), vararg=None, varkwarg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 112                ['$102pred']
label 104:
    $104load_global.0 = global(ValueError: <class 'ValueError'>) ['$104load_global.0']
    $const106.1 = const(str, Maximum allowed size exceeded) ['$const106.1']
    $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4760)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_global.0', '$108call_function.2', '$const106.1']
    raise $108call_function.2                ['$108call_function.2']
label 112:
    $116binary_subtract.2 = _stop - _start   ['$116binary_subtract.2', '_start', '_stop']
    nitems_c = $116binary_subtract.2 / _step ['$116binary_subtract.2', '_step', 'nitems_c']
    $124load_global.5 = global(int: <class 'int'>) ['$124load_global.5']
    $126load_global.6 = global(math: <module 'math' (built-in)>) ['$126load_global.6']
    $128load_method.7 = getattr(value=$126load_global.6, attr=ceil) ['$126load_global.6', '$128load_method.7']
    $132load_attr.9 = getattr(value=nitems_c, attr=real) ['$132load_attr.9', 'nitems_c']
    $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None) ['$128load_method.7', '$132load_attr.9', '$134call_method.10']
    nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None) ['$124load_global.5', '$134call_method.10', 'nitems_r']
    $140load_deref.12 = freevar(use_complex: False) ['$140load_deref.12']
    $const142.13 = const(bool, True)         ['$const142.13']
    $144compare_op.14 = $140load_deref.12 is $const142.13 ['$140load_deref.12', '$144compare_op.14', '$const142.13']
    bool146 = global(bool: <class 'bool'>)   ['bool146']
    $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4766),), kws=(), vararg=None, varkwarg=None, target=None) ['$144compare_op.14', '$146pred', 'bool146']
    branch $146pred, 148, 182                ['$146pred']
label 148:
    $148load_global.0 = global(int: <class 'int'>) ['$148load_global.0']
    $150load_global.1 = global(math: <module 'math' (built-in)>) ['$150load_global.1']
    $152load_method.2 = getattr(value=$150load_global.1, attr=ceil) ['$150load_global.1', '$152load_method.2']
    $156load_attr.4 = getattr(value=nitems_c, attr=imag) ['$156load_attr.4', 'nitems_c']
    $158call_method.5 = call $152load_method.2($156load_attr.4, func=$152load_method.2, args=[Var($156load_attr.4, arrayobj.py:4767)], kws=(), vararg=None, varkwarg=None, target=None) ['$152load_method.2', '$156load_attr.4', '$158call_method.5']
    nitems_i = call $148load_global.0($158call_method.5, func=$148load_global.0, args=[Var($158call_method.5, arrayobj.py:4767)], kws=(), vararg=None, varkwarg=None, target=None) ['$148load_global.0', '$158call_method.5', 'nitems_i']
    $164load_global.7 = global(max: <built-in function max>) ['$164load_global.7']
    $166load_global.8 = global(min: <built-in function min>) ['$166load_global.8']
    $172call_function.11 = call $166load_global.8(nitems_i, nitems_r, func=$166load_global.8, args=[Var(nitems_i, arrayobj.py:4767), Var(nitems_r, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None) ['$166load_global.8', '$172call_function.11', 'nitems_i', 'nitems_r']
    $const174.12 = const(int, 0)             ['$const174.12']
    nitems = call $164load_global.7($172call_function.11, $const174.12, func=$164load_global.7, args=[Var($172call_function.11, arrayobj.py:4768), Var($const174.12, arrayobj.py:4768)], kws=(), vararg=None, varkwarg=None, target=None) ['$164load_global.7', '$172call_function.11', '$const174.12', 'nitems']
    jump 192                                 []
label 182:
    $182load_global.0 = global(max: <built-in function max>) ['$182load_global.0']
    $const186.2 = const(int, 0)              ['$const186.2']
    nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4763), Var($const186.2, arrayobj.py:4770)], kws=(), vararg=None, varkwarg=None, target=None) ['$182load_global.0', '$const186.2', 'nitems', 'nitems_r']
    jump 192                                 []
label 192:
    $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$192load_global.0']
    $194load_method.1 = getattr(value=$192load_global.0, attr=empty) ['$192load_global.0', '$194load_method.1']
    $198load_deref.3 = freevar(true_dtype: float64) ['$198load_deref.3']
    arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4768), Var($198load_deref.3, arrayobj.py:4771)], kws=(), vararg=None, varkwarg=None, target=None) ['$194load_method.1', '$198load_deref.3', 'arr', 'nitems']
    val = _start                             ['_start', 'val']
    $208load_global.6 = global(range: <class 'range'>) ['$208load_global.6']
    $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4768)], kws=(), vararg=None, varkwarg=None, target=None) ['$208load_global.6', '$212call_function.8', 'nitems']
    $214get_iter.9 = getiter(value=$212call_function.8) ['$212call_function.8', '$214get_iter.9']
    $phi216.0 = $214get_iter.9               ['$214get_iter.9', '$phi216.0']
    jump 216                                 []
label 216:
    $216for_iter.1 = iternext(value=$phi216.0) ['$216for_iter.1', '$phi216.0']
    $216for_iter.2 = pair_first(value=$216for_iter.1) ['$216for_iter.1', '$216for_iter.2']
    $216for_iter.3 = pair_second(value=$216for_iter.1) ['$216for_iter.1', '$216for_iter.3']
    $phi218.1 = $216for_iter.2               ['$216for_iter.2', '$phi218.1']
    branch $216for_iter.3, 218, 238          ['$216for_iter.3']
label 218:
    i = $phi218.1                            ['$phi218.1', 'i']
    $226binary_multiply.5 = i * _step        ['$226binary_multiply.5', '_step', 'i']
    $228binary_add.6 = val + $226binary_multiply.5 ['$226binary_multiply.5', '$228binary_add.6', 'val']
    arr[i] = $228binary_add.6                ['$228binary_add.6', 'arr', 'i']
    jump 216                                 []
label 238:
    $240return_value.1 = cast(value=arr)     ['$240return_value.1', 'arr']
    return $240return_value.1                ['$240return_value.1']

2025-01-05 16:51:25,593 - DEBUG - ==== SSA block analysis pass on 0
2025-01-05 16:51:25,594 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,596 - DEBUG - on stmt: start = arg(0, name=start)
2025-01-05 16:51:25,597 - DEBUG - on stmt: stop = arg(1, name=stop)
2025-01-05 16:51:25,598 - DEBUG - on stmt: step = arg(2, name=step)
2025-01-05 16:51:25,599 - DEBUG - on stmt: dtype = arg(3, name=dtype)
2025-01-05 16:51:25,600 - DEBUG - on stmt: $2load_deref.0 = freevar(start_value: None)
2025-01-05 16:51:25,602 - DEBUG - on stmt: $const4.1 = const(NoneType, None)
2025-01-05 16:51:25,603 - DEBUG - on stmt: $6compare_op.2 = const(int, 0)
2025-01-05 16:51:25,604 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:25,604 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4749),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,606 - DEBUG - on stmt: jump 14
2025-01-05 16:51:25,607 - DEBUG - ==== SSA block analysis pass on 14
2025-01-05 16:51:25,609 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,610 - DEBUG - on stmt: $phi16.0 = start
2025-01-05 16:51:25,611 - DEBUG - on stmt: jump 16
2025-01-05 16:51:25,612 - DEBUG - ==== SSA block analysis pass on 16
2025-01-05 16:51:25,613 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,615 - DEBUG - on stmt: lit_start = $phi16.0
2025-01-05 16:51:25,616 - DEBUG - on stmt: $18load_deref.1 = freevar(stop_value: None)
2025-01-05 16:51:25,617 - DEBUG - on stmt: $const20.2 = const(NoneType, None)
2025-01-05 16:51:25,618 - DEBUG - on stmt: $22compare_op.3 = const(int, 0)
2025-01-05 16:51:25,619 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:25,620 - DEBUG - on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4750),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,623 - DEBUG - on stmt: jump 30
2025-01-05 16:51:25,624 - DEBUG - ==== SSA block analysis pass on 30
2025-01-05 16:51:25,625 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,626 - DEBUG - on stmt: $phi32.0 = stop
2025-01-05 16:51:25,627 - DEBUG - on stmt: jump 32
2025-01-05 16:51:25,628 - DEBUG - ==== SSA block analysis pass on 32
2025-01-05 16:51:25,629 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,631 - DEBUG - on stmt: lit_stop = $phi32.0
2025-01-05 16:51:25,632 - DEBUG - on stmt: $34load_deref.1 = freevar(step_value: None)
2025-01-05 16:51:25,633 - DEBUG - on stmt: $const36.2 = const(NoneType, None)
2025-01-05 16:51:25,634 - DEBUG - on stmt: $38compare_op.3 = const(int, 0)
2025-01-05 16:51:25,635 - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-01-05 16:51:25,637 - DEBUG - on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4751),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,639 - DEBUG - on stmt: jump 46
2025-01-05 16:51:25,640 - DEBUG - ==== SSA block analysis pass on 46
2025-01-05 16:51:25,641 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,643 - DEBUG - on stmt: $phi48.0 = step
2025-01-05 16:51:25,644 - DEBUG - on stmt: jump 48
2025-01-05 16:51:25,645 - DEBUG - ==== SSA block analysis pass on 48
2025-01-05 16:51:25,646 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,649 - DEBUG - on stmt: lit_step = $phi48.0
2025-01-05 16:51:25,651 - DEBUG - on stmt: $const52.2 = const(NoneType, None)
2025-01-05 16:51:25,652 - DEBUG - on stmt: $54compare_op.3 = lit_step is not $const52.2
2025-01-05 16:51:25,654 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:25,656 - DEBUG - on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4753),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,658 - DEBUG - on stmt: branch $56pred, 58, 62
2025-01-05 16:51:25,659 - DEBUG - ==== SSA block analysis pass on 58
2025-01-05 16:51:25,661 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,662 - DEBUG - on stmt: $phi64.0 = lit_step
2025-01-05 16:51:25,663 - DEBUG - on stmt: jump 64
2025-01-05 16:51:25,664 - DEBUG - ==== SSA block analysis pass on 62
2025-01-05 16:51:25,665 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,667 - DEBUG - on stmt: $const62.0 = const(int, 1)
2025-01-05 16:51:25,668 - DEBUG - on stmt: $phi64.0 = $const62.0
2025-01-05 16:51:25,669 - DEBUG - on stmt: jump 64
2025-01-05 16:51:25,670 - DEBUG - ==== SSA block analysis pass on 64
2025-01-05 16:51:25,671 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,672 - DEBUG - on stmt: _step = $phi64.0
2025-01-05 16:51:25,673 - DEBUG - on stmt: $const68.2 = const(NoneType, None)
2025-01-05 16:51:25,674 - DEBUG - on stmt: $70compare_op.3 = lit_stop is $const68.2
2025-01-05 16:51:25,675 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:25,677 - DEBUG - on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4754),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,679 - DEBUG - on stmt: branch $72pred, 74, 86
2025-01-05 16:51:25,680 - DEBUG - ==== SSA block analysis pass on 74
2025-01-05 16:51:25,682 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,683 - DEBUG - on stmt: _start = const(int, 0)
2025-01-05 16:51:25,684 - DEBUG - on stmt: _stop = lit_start
2025-01-05 16:51:25,685 - DEBUG - on stmt: jump 96
2025-01-05 16:51:25,686 - DEBUG - ==== SSA block analysis pass on 86
2025-01-05 16:51:25,687 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,688 - DEBUG - on stmt: _start = lit_start
2025-01-05 16:51:25,689 - DEBUG - on stmt: _stop = lit_stop
2025-01-05 16:51:25,690 - DEBUG - on stmt: jump 96
2025-01-05 16:51:25,691 - DEBUG - ==== SSA block analysis pass on 96
2025-01-05 16:51:25,692 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,693 - DEBUG - on stmt: $const98.1 = const(int, 0)
2025-01-05 16:51:25,694 - DEBUG - on stmt: $100compare_op.2 = _step == $const98.1
2025-01-05 16:51:25,696 - DEBUG - on stmt: bool102 = global(bool: <class 'bool'>)
2025-01-05 16:51:25,698 - DEBUG - on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4759),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,700 - DEBUG - on stmt: branch $102pred, 104, 112
2025-01-05 16:51:25,701 - DEBUG - ==== SSA block analysis pass on 104
2025-01-05 16:51:25,702 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,703 - DEBUG - on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-05 16:51:25,705 - DEBUG - on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
2025-01-05 16:51:25,707 - DEBUG - on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4760)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,709 - DEBUG - on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2025-01-05 16:51:25,710 - DEBUG - ==== SSA block analysis pass on 112
2025-01-05 16:51:25,711 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,713 - DEBUG - on stmt: $116binary_subtract.2 = _stop - _start
2025-01-05 16:51:25,715 - DEBUG - on stmt: nitems_c = $116binary_subtract.2 / _step
2025-01-05 16:51:25,717 - DEBUG - on stmt: $124load_global.5 = global(int: <class 'int'>)
2025-01-05 16:51:25,718 - DEBUG - on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:25,720 - DEBUG - on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
2025-01-05 16:51:25,721 - DEBUG - on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
2025-01-05 16:51:25,723 - DEBUG - on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,726 - DEBUG - on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,728 - DEBUG - on stmt: $140load_deref.12 = freevar(use_complex: False)
2025-01-05 16:51:25,729 - DEBUG - on stmt: $const142.13 = const(bool, True)
2025-01-05 16:51:25,731 - DEBUG - on stmt: $144compare_op.14 = const(int, 0)
2025-01-05 16:51:25,732 - DEBUG - on stmt: bool146 = global(bool: <class 'bool'>)
2025-01-05 16:51:25,734 - DEBUG - on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4766),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,736 - DEBUG - on stmt: jump 182
2025-01-05 16:51:25,737 - DEBUG - ==== SSA block analysis pass on 182
2025-01-05 16:51:25,738 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,740 - DEBUG - on stmt: $182load_global.0 = global(max: <built-in function max>)
2025-01-05 16:51:25,741 - DEBUG - on stmt: $const186.2 = const(int, 0)
2025-01-05 16:51:25,742 - DEBUG - on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4763), Var($const186.2, arrayobj.py:4770)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,745 - DEBUG - on stmt: jump 192
2025-01-05 16:51:25,747 - DEBUG - ==== SSA block analysis pass on 192
2025-01-05 16:51:25,748 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,749 - DEBUG - on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:25,751 - DEBUG - on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
2025-01-05 16:51:25,753 - DEBUG - on stmt: $198load_deref.3 = freevar(true_dtype: float64)
2025-01-05 16:51:25,755 - DEBUG - on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4768), Var($198load_deref.3, arrayobj.py:4771)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,757 - DEBUG - on stmt: val = _start
2025-01-05 16:51:25,758 - DEBUG - on stmt: $208load_global.6 = global(range: <class 'range'>)
2025-01-05 16:51:25,760 - DEBUG - on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4768)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,762 - DEBUG - on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
2025-01-05 16:51:25,764 - DEBUG - on stmt: $phi216.0 = $214get_iter.9
2025-01-05 16:51:25,765 - DEBUG - on stmt: jump 216
2025-01-05 16:51:25,766 - DEBUG - ==== SSA block analysis pass on 216
2025-01-05 16:51:25,767 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,769 - DEBUG - on stmt: $216for_iter.1 = iternext(value=$phi216.0)
2025-01-05 16:51:25,770 - DEBUG - on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
2025-01-05 16:51:25,772 - DEBUG - on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
2025-01-05 16:51:25,773 - DEBUG - on stmt: $phi218.1 = $216for_iter.2
2025-01-05 16:51:25,774 - DEBUG - on stmt: branch $216for_iter.3, 218, 238
2025-01-05 16:51:25,775 - DEBUG - ==== SSA block analysis pass on 218
2025-01-05 16:51:25,776 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,778 - DEBUG - on stmt: i = $phi218.1
2025-01-05 16:51:25,779 - DEBUG - on stmt: $226binary_multiply.5 = i * _step
2025-01-05 16:51:25,780 - DEBUG - on stmt: $228binary_add.6 = val + $226binary_multiply.5
2025-01-05 16:51:25,781 - DEBUG - on stmt: arr[i] = $228binary_add.6
2025-01-05 16:51:25,783 - DEBUG - on stmt: jump 216
2025-01-05 16:51:25,783 - DEBUG - ==== SSA block analysis pass on 238
2025-01-05 16:51:25,784 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000146FA8E0>
2025-01-05 16:51:25,786 - DEBUG - on stmt: $240return_value.1 = cast(value=arr)
2025-01-05 16:51:25,787 - DEBUG - on stmt: return $240return_value.1
2025-01-05 16:51:25,790 - DEBUG - defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x0000000014714460>],
             '$102pred': [<numba.core.ir.Assign object at 0x0000000014714700>],
             '$104load_global.0': [<numba.core.ir.Assign object at 0x0000000014714940>],
             '$108call_function.2': [<numba.core.ir.Assign object at 0x0000000014714C70>],
             '$116binary_subtract.2': [<numba.core.ir.Assign object at 0x00000000147161C0>],
             '$124load_global.5': [<numba.core.ir.Assign object at 0x0000000014716700>],
             '$126load_global.6': [<numba.core.ir.Assign object at 0x0000000014716880>],
             '$128load_method.7': [<numba.core.ir.Assign object at 0x0000000014716A00>],
             '$132load_attr.9': [<numba.core.ir.Assign object at 0x0000000014716CA0>],
             '$134call_method.10': [<numba.core.ir.Assign object at 0x0000000014716E50>],
             '$140load_deref.12': [<numba.core.ir.Assign object at 0x0000000014718280>],
             '$144compare_op.14': [<numba.core.ir.Assign object at 0x0000000014718580>],
             '$146pred': [<numba.core.ir.Assign object at 0x0000000014718820>],
             '$182load_global.0': [<numba.core.ir.Assign object at 0x000000001471AE80>],
             '$18load_deref.1': [<numba.core.ir.Assign object at 0x000000001470E400>],
             '$192load_global.0': [<numba.core.ir.Assign object at 0x000000001471C520>],
             '$194load_method.1': [<numba.core.ir.Assign object at 0x000000001471C6A0>],
             '$198load_deref.3': [<numba.core.ir.Assign object at 0x000000001471C940>],
             '$208load_global.6': [<numba.core.ir.Assign object at 0x000000001471CFA0>],
             '$212call_function.8': [<numba.core.ir.Assign object at 0x000000001471E2B0>],
             '$214get_iter.9': [<numba.core.ir.Assign object at 0x000000001471E400>],
             '$216for_iter.1': [<numba.core.ir.Assign object at 0x000000001471E640>],
             '$216for_iter.2': [<numba.core.ir.Assign object at 0x000000001471E760>],
             '$216for_iter.3': [<numba.core.ir.Assign object at 0x000000001471E880>],
             '$226binary_multiply.5': [<numba.core.ir.Assign object at 0x0000000014720040>],
             '$228binary_add.6': [<numba.core.ir.Assign object at 0x00000000147201C0>],
             '$22compare_op.3': [<numba.core.ir.Assign object at 0x000000001470E700>],
             '$240return_value.1': [<numba.core.ir.Assign object at 0x0000000014720700>],
             '$24pred': [<numba.core.ir.Assign object at 0x000000001470E9A0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x000000001470C460>],
             '$34load_deref.1': [<numba.core.ir.Assign object at 0x000000001470F3A0>],
             '$38compare_op.3': [<numba.core.ir.Assign object at 0x000000001470F6A0>],
             '$40pred': [<numba.core.ir.Assign object at 0x000000001470F940>],
             '$54compare_op.3': [<numba.core.ir.Assign object at 0x0000000014710400>],
             '$56pred': [<numba.core.ir.Assign object at 0x00000000147106A0>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x000000001470C760>],
             '$70compare_op.3': [<numba.core.ir.Assign object at 0x00000000147122E0>],
             '$72pred': [<numba.core.ir.Assign object at 0x0000000014712580>],
             '$8pred': [<numba.core.ir.Assign object at 0x000000001470CA00>],
             '$const106.1': [<numba.core.ir.Assign object at 0x0000000014714AC0>],
             '$const142.13': [<numba.core.ir.Assign object at 0x0000000014718400>],
             '$const186.2': [<numba.core.ir.Assign object at 0x000000001471C160>],
             '$const20.2': [<numba.core.ir.Assign object at 0x000000001470E580>],
             '$const36.2': [<numba.core.ir.Assign object at 0x000000001470F520>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000000001470C5E0>],
             '$const52.2': [<numba.core.ir.Assign object at 0x0000000014710280>],
             '$const62.0': [<numba.core.ir.Assign object at 0x0000000014710BE0>],
             '$const68.2': [<numba.core.ir.Assign object at 0x0000000014712160>],
             '$const98.1': [<numba.core.ir.Assign object at 0x00000000147142E0>],
             '$phi16.0': [<numba.core.ir.Assign object at 0x000000001470CB50>],
             '$phi216.0': [<numba.core.ir.Assign object at 0x000000001471CBE0>],
             '$phi218.1': [<numba.core.ir.Assign object at 0x000000001471E550>],
             '$phi32.0': [<numba.core.ir.Assign object at 0x000000001470EFA0>],
             '$phi48.0': [<numba.core.ir.Assign object at 0x000000001470FD60>],
             '$phi64.0': [<numba.core.ir.Assign object at 0x00000000147108B0>,
                          <numba.core.ir.Assign object at 0x0000000014710790>],
             '_start': [<numba.core.ir.Assign object at 0x00000000147127C0>,
                        <numba.core.ir.Assign object at 0x0000000014712EE0>],
             '_step': [<numba.core.ir.Assign object at 0x0000000014710E80>],
             '_stop': [<numba.core.ir.Assign object at 0x0000000014712B20>,
                       <numba.core.ir.Assign object at 0x0000000014712FA0>],
             'arr': [<numba.core.ir.Assign object at 0x000000001471CAF0>],
             'bool102': [<numba.core.ir.Assign object at 0x00000000147145E0>],
             'bool146': [<numba.core.ir.Assign object at 0x0000000014718700>],
             'bool24': [<numba.core.ir.Assign object at 0x000000001470E880>],
             'bool40': [<numba.core.ir.Assign object at 0x000000001470F820>],
             'bool56': [<numba.core.ir.Assign object at 0x0000000014710580>],
             'bool72': [<numba.core.ir.Assign object at 0x0000000014712460>],
             'bool8': [<numba.core.ir.Assign object at 0x000000001470C8E0>],
             'dtype': [<numba.core.ir.Assign object at 0x000000001470C2E0>],
             'i': [<numba.core.ir.Assign object at 0x000000001471EB20>],
             'lit_start': [<numba.core.ir.Assign object at 0x000000001470E280>],
             'lit_step': [<numba.core.ir.Assign object at 0x000000001470FFA0>],
             'lit_stop': [<numba.core.ir.Assign object at 0x000000001470F220>],
             'nitems': [<numba.core.ir.Assign object at 0x000000001471C310>],
             'nitems_c': [<numba.core.ir.Assign object at 0x0000000014716460>],
             'nitems_r': [<numba.core.ir.Assign object at 0x0000000014716FD0>],
             'start': [<numba.core.ir.Assign object at 0x00000000146FA1C0>],
             'step': [<numba.core.ir.Assign object at 0x000000001470C1C0>],
             'stop': [<numba.core.ir.Assign object at 0x000000001470C0A0>],
             'val': [<numba.core.ir.Assign object at 0x000000001471CE20>]})
2025-01-05 16:51:25,858 - DEBUG - SSA violators {'_stop', '$phi64.0', '_start'}
2025-01-05 16:51:25,859 - DEBUG - Fix SSA violator on var _stop
2025-01-05 16:51:25,860 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:25,861 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:25,863 - DEBUG - on stmt: start = arg(0, name=start)
2025-01-05 16:51:25,864 - DEBUG - on stmt: stop = arg(1, name=stop)
2025-01-05 16:51:25,865 - DEBUG - on stmt: step = arg(2, name=step)
2025-01-05 16:51:25,866 - DEBUG - on stmt: dtype = arg(3, name=dtype)
2025-01-05 16:51:25,867 - DEBUG - on stmt: $2load_deref.0 = freevar(start_value: None)
2025-01-05 16:51:25,868 - DEBUG - on stmt: $const4.1 = const(NoneType, None)
2025-01-05 16:51:25,869 - DEBUG - on stmt: $6compare_op.2 = const(int, 0)
2025-01-05 16:51:25,870 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:25,871 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4749),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,873 - DEBUG - on stmt: jump 14
2025-01-05 16:51:25,874 - DEBUG - ==== SSA block rewrite pass on 14
2025-01-05 16:51:25,876 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:25,877 - DEBUG - on stmt: $phi16.0 = start
2025-01-05 16:51:25,878 - DEBUG - on stmt: jump 16
2025-01-05 16:51:25,879 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-05 16:51:25,880 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:25,882 - DEBUG - on stmt: lit_start = $phi16.0
2025-01-05 16:51:25,883 - DEBUG - on stmt: $18load_deref.1 = freevar(stop_value: None)
2025-01-05 16:51:25,885 - DEBUG - on stmt: $const20.2 = const(NoneType, None)
2025-01-05 16:51:25,886 - DEBUG - on stmt: $22compare_op.3 = const(int, 0)
2025-01-05 16:51:25,887 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:25,888 - DEBUG - on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4750),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,891 - DEBUG - on stmt: jump 30
2025-01-05 16:51:25,892 - DEBUG - ==== SSA block rewrite pass on 30
2025-01-05 16:51:25,893 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:25,894 - DEBUG - on stmt: $phi32.0 = stop
2025-01-05 16:51:25,895 - DEBUG - on stmt: jump 32
2025-01-05 16:51:25,896 - DEBUG - ==== SSA block rewrite pass on 32
2025-01-05 16:51:25,897 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:25,899 - DEBUG - on stmt: lit_stop = $phi32.0
2025-01-05 16:51:25,900 - DEBUG - on stmt: $34load_deref.1 = freevar(step_value: None)
2025-01-05 16:51:25,901 - DEBUG - on stmt: $const36.2 = const(NoneType, None)
2025-01-05 16:51:25,902 - DEBUG - on stmt: $38compare_op.3 = const(int, 0)
2025-01-05 16:51:25,903 - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-01-05 16:51:25,904 - DEBUG - on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4751),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,907 - DEBUG - on stmt: jump 46
2025-01-05 16:51:25,908 - DEBUG - ==== SSA block rewrite pass on 46
2025-01-05 16:51:25,909 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:25,910 - DEBUG - on stmt: $phi48.0 = step
2025-01-05 16:51:25,911 - DEBUG - on stmt: jump 48
2025-01-05 16:51:25,912 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:25,913 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:25,914 - DEBUG - on stmt: lit_step = $phi48.0
2025-01-05 16:51:25,916 - DEBUG - on stmt: $const52.2 = const(NoneType, None)
2025-01-05 16:51:25,916 - DEBUG - on stmt: $54compare_op.3 = lit_step is not $const52.2
2025-01-05 16:51:25,918 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:25,919 - DEBUG - on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4753),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,921 - DEBUG - on stmt: branch $56pred, 58, 62
2025-01-05 16:51:25,923 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-05 16:51:25,924 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:25,925 - DEBUG - on stmt: $phi64.0 = lit_step
2025-01-05 16:51:25,927 - DEBUG - on stmt: jump 64
2025-01-05 16:51:25,928 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-05 16:51:25,928 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:25,930 - DEBUG - on stmt: $const62.0 = const(int, 1)
2025-01-05 16:51:25,931 - DEBUG - on stmt: $phi64.0 = $const62.0
2025-01-05 16:51:25,932 - DEBUG - on stmt: jump 64
2025-01-05 16:51:25,933 - DEBUG - ==== SSA block rewrite pass on 64
2025-01-05 16:51:25,934 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:25,936 - DEBUG - on stmt: _step = $phi64.0
2025-01-05 16:51:25,937 - DEBUG - on stmt: $const68.2 = const(NoneType, None)
2025-01-05 16:51:25,938 - DEBUG - on stmt: $70compare_op.3 = lit_stop is $const68.2
2025-01-05 16:51:25,939 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:25,941 - DEBUG - on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4754),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,943 - DEBUG - on stmt: branch $72pred, 74, 86
2025-01-05 16:51:25,944 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-05 16:51:25,945 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:25,947 - DEBUG - on stmt: _start = const(int, 0)
2025-01-05 16:51:25,948 - DEBUG - on stmt: _stop = lit_start
2025-01-05 16:51:25,949 - DEBUG - first assign: _stop
2025-01-05 16:51:25,950 - DEBUG - replaced with: _stop = lit_start
2025-01-05 16:51:25,951 - DEBUG - on stmt: jump 96
2025-01-05 16:51:25,952 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-05 16:51:25,953 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:25,954 - DEBUG - on stmt: _start = lit_start
2025-01-05 16:51:25,956 - DEBUG - on stmt: _stop = lit_stop
2025-01-05 16:51:25,957 - DEBUG - replaced with: _stop.1 = lit_stop
2025-01-05 16:51:25,958 - DEBUG - on stmt: jump 96
2025-01-05 16:51:25,958 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:25,959 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:25,961 - DEBUG - on stmt: $const98.1 = const(int, 0)
2025-01-05 16:51:25,962 - DEBUG - on stmt: $100compare_op.2 = _step == $const98.1
2025-01-05 16:51:25,963 - DEBUG - on stmt: bool102 = global(bool: <class 'bool'>)
2025-01-05 16:51:25,965 - DEBUG - on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4759),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,967 - DEBUG - on stmt: branch $102pred, 104, 112
2025-01-05 16:51:25,968 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-05 16:51:25,969 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:25,970 - DEBUG - on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-05 16:51:25,972 - DEBUG - on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
2025-01-05 16:51:25,973 - DEBUG - on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4760)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,975 - DEBUG - on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2025-01-05 16:51:25,977 - DEBUG - ==== SSA block rewrite pass on 112
2025-01-05 16:51:25,978 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:25,980 - DEBUG - on stmt: $116binary_subtract.2 = _stop - _start
2025-01-05 16:51:25,982 - DEBUG - on stmt: nitems_c = $116binary_subtract.2 / _step
2025-01-05 16:51:25,983 - DEBUG - on stmt: $124load_global.5 = global(int: <class 'int'>)
2025-01-05 16:51:25,985 - DEBUG - on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:25,986 - DEBUG - on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
2025-01-05 16:51:25,988 - DEBUG - on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
2025-01-05 16:51:25,989 - DEBUG - on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,991 - DEBUG - on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:25,994 - DEBUG - on stmt: $140load_deref.12 = freevar(use_complex: False)
2025-01-05 16:51:25,995 - DEBUG - on stmt: $const142.13 = const(bool, True)
2025-01-05 16:51:25,996 - DEBUG - on stmt: $144compare_op.14 = const(int, 0)
2025-01-05 16:51:25,997 - DEBUG - on stmt: bool146 = global(bool: <class 'bool'>)
2025-01-05 16:51:25,999 - DEBUG - on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4766),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,001 - DEBUG - on stmt: jump 182
2025-01-05 16:51:26,002 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-05 16:51:26,003 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:26,004 - DEBUG - on stmt: $182load_global.0 = global(max: <built-in function max>)
2025-01-05 16:51:26,006 - DEBUG - on stmt: $const186.2 = const(int, 0)
2025-01-05 16:51:26,007 - DEBUG - on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4763), Var($const186.2, arrayobj.py:4770)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,009 - DEBUG - on stmt: jump 192
2025-01-05 16:51:26,010 - DEBUG - ==== SSA block rewrite pass on 192
2025-01-05 16:51:26,012 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:26,013 - DEBUG - on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:26,015 - DEBUG - on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
2025-01-05 16:51:26,017 - DEBUG - on stmt: $198load_deref.3 = freevar(true_dtype: float64)
2025-01-05 16:51:26,018 - DEBUG - on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4768), Var($198load_deref.3, arrayobj.py:4771)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,021 - DEBUG - on stmt: val = _start
2025-01-05 16:51:26,022 - DEBUG - on stmt: $208load_global.6 = global(range: <class 'range'>)
2025-01-05 16:51:26,024 - DEBUG - on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4768)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,026 - DEBUG - on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
2025-01-05 16:51:26,028 - DEBUG - on stmt: $phi216.0 = $214get_iter.9
2025-01-05 16:51:26,029 - DEBUG - on stmt: jump 216
2025-01-05 16:51:26,031 - DEBUG - ==== SSA block rewrite pass on 216
2025-01-05 16:51:26,032 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:26,033 - DEBUG - on stmt: $216for_iter.1 = iternext(value=$phi216.0)
2025-01-05 16:51:26,035 - DEBUG - on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
2025-01-05 16:51:26,036 - DEBUG - on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
2025-01-05 16:51:26,038 - DEBUG - on stmt: $phi218.1 = $216for_iter.2
2025-01-05 16:51:26,039 - DEBUG - on stmt: branch $216for_iter.3, 218, 238
2025-01-05 16:51:26,040 - DEBUG - ==== SSA block rewrite pass on 218
2025-01-05 16:51:26,041 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:26,042 - DEBUG - on stmt: i = $phi218.1
2025-01-05 16:51:26,043 - DEBUG - on stmt: $226binary_multiply.5 = i * _step
2025-01-05 16:51:26,044 - DEBUG - on stmt: $228binary_add.6 = val + $226binary_multiply.5
2025-01-05 16:51:26,045 - DEBUG - on stmt: arr[i] = $228binary_add.6
2025-01-05 16:51:26,047 - DEBUG - on stmt: jump 216
2025-01-05 16:51:26,048 - DEBUG - ==== SSA block rewrite pass on 238
2025-01-05 16:51:26,049 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146EFD60>
2025-01-05 16:51:26,050 - DEBUG - on stmt: $240return_value.1 = cast(value=arr)
2025-01-05 16:51:26,051 - DEBUG - on stmt: return $240return_value.1
2025-01-05 16:51:26,052 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {74: [<numba.core.ir.Assign object at 0x00000000147209D0>],
             86: [<numba.core.ir.Assign object at 0x00000000146FAC10>]})
2025-01-05 16:51:26,055 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:26,056 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,057 - DEBUG - on stmt: start = arg(0, name=start)
2025-01-05 16:51:26,058 - DEBUG - on stmt: stop = arg(1, name=stop)
2025-01-05 16:51:26,059 - DEBUG - on stmt: step = arg(2, name=step)
2025-01-05 16:51:26,060 - DEBUG - on stmt: dtype = arg(3, name=dtype)
2025-01-05 16:51:26,061 - DEBUG - on stmt: $2load_deref.0 = freevar(start_value: None)
2025-01-05 16:51:26,063 - DEBUG - on stmt: $const4.1 = const(NoneType, None)
2025-01-05 16:51:26,064 - DEBUG - on stmt: $6compare_op.2 = const(int, 0)
2025-01-05 16:51:26,065 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,066 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4749),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,068 - DEBUG - on stmt: jump 14
2025-01-05 16:51:26,069 - DEBUG - ==== SSA block rewrite pass on 14
2025-01-05 16:51:26,070 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,071 - DEBUG - on stmt: $phi16.0 = start
2025-01-05 16:51:26,073 - DEBUG - on stmt: jump 16
2025-01-05 16:51:26,074 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-05 16:51:26,075 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,076 - DEBUG - on stmt: lit_start = $phi16.0
2025-01-05 16:51:26,077 - DEBUG - on stmt: $18load_deref.1 = freevar(stop_value: None)
2025-01-05 16:51:26,078 - DEBUG - on stmt: $const20.2 = const(NoneType, None)
2025-01-05 16:51:26,079 - DEBUG - on stmt: $22compare_op.3 = const(int, 0)
2025-01-05 16:51:26,081 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,082 - DEBUG - on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4750),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,084 - DEBUG - on stmt: jump 30
2025-01-05 16:51:26,086 - DEBUG - ==== SSA block rewrite pass on 30
2025-01-05 16:51:26,086 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,088 - DEBUG - on stmt: $phi32.0 = stop
2025-01-05 16:51:26,089 - DEBUG - on stmt: jump 32
2025-01-05 16:51:26,090 - DEBUG - ==== SSA block rewrite pass on 32
2025-01-05 16:51:26,091 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,092 - DEBUG - on stmt: lit_stop = $phi32.0
2025-01-05 16:51:26,093 - DEBUG - on stmt: $34load_deref.1 = freevar(step_value: None)
2025-01-05 16:51:26,094 - DEBUG - on stmt: $const36.2 = const(NoneType, None)
2025-01-05 16:51:26,095 - DEBUG - on stmt: $38compare_op.3 = const(int, 0)
2025-01-05 16:51:26,096 - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,098 - DEBUG - on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4751),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,100 - DEBUG - on stmt: jump 46
2025-01-05 16:51:26,101 - DEBUG - ==== SSA block rewrite pass on 46
2025-01-05 16:51:26,102 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,104 - DEBUG - on stmt: $phi48.0 = step
2025-01-05 16:51:26,105 - DEBUG - on stmt: jump 48
2025-01-05 16:51:26,106 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:26,107 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,108 - DEBUG - on stmt: lit_step = $phi48.0
2025-01-05 16:51:26,110 - DEBUG - on stmt: $const52.2 = const(NoneType, None)
2025-01-05 16:51:26,110 - DEBUG - on stmt: $54compare_op.3 = lit_step is not $const52.2
2025-01-05 16:51:26,112 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,114 - DEBUG - on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4753),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,116 - DEBUG - on stmt: branch $56pred, 58, 62
2025-01-05 16:51:26,117 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-05 16:51:26,118 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,119 - DEBUG - on stmt: $phi64.0 = lit_step
2025-01-05 16:51:26,120 - DEBUG - on stmt: jump 64
2025-01-05 16:51:26,121 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-05 16:51:26,122 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,123 - DEBUG - on stmt: $const62.0 = const(int, 1)
2025-01-05 16:51:26,124 - DEBUG - on stmt: $phi64.0 = $const62.0
2025-01-05 16:51:26,125 - DEBUG - on stmt: jump 64
2025-01-05 16:51:26,126 - DEBUG - ==== SSA block rewrite pass on 64
2025-01-05 16:51:26,127 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,128 - DEBUG - on stmt: _step = $phi64.0
2025-01-05 16:51:26,130 - DEBUG - on stmt: $const68.2 = const(NoneType, None)
2025-01-05 16:51:26,131 - DEBUG - on stmt: $70compare_op.3 = lit_stop is $const68.2
2025-01-05 16:51:26,132 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,134 - DEBUG - on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4754),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,136 - DEBUG - on stmt: branch $72pred, 74, 86
2025-01-05 16:51:26,137 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-05 16:51:26,138 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,139 - DEBUG - on stmt: _start = const(int, 0)
2025-01-05 16:51:26,140 - DEBUG - on stmt: _stop = lit_start
2025-01-05 16:51:26,141 - DEBUG - on stmt: jump 96
2025-01-05 16:51:26,142 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-05 16:51:26,143 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,144 - DEBUG - on stmt: _start = lit_start
2025-01-05 16:51:26,146 - DEBUG - on stmt: _stop.1 = lit_stop
2025-01-05 16:51:26,147 - DEBUG - on stmt: jump 96
2025-01-05 16:51:26,148 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:26,148 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,150 - DEBUG - on stmt: $const98.1 = const(int, 0)
2025-01-05 16:51:26,151 - DEBUG - on stmt: $100compare_op.2 = _step == $const98.1
2025-01-05 16:51:26,152 - DEBUG - on stmt: bool102 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,154 - DEBUG - on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4759),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,156 - DEBUG - on stmt: branch $102pred, 104, 112
2025-01-05 16:51:26,157 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-05 16:51:26,158 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,159 - DEBUG - on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-05 16:51:26,161 - DEBUG - on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
2025-01-05 16:51:26,162 - DEBUG - on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4760)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,165 - DEBUG - on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2025-01-05 16:51:26,167 - DEBUG - ==== SSA block rewrite pass on 112
2025-01-05 16:51:26,168 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,169 - DEBUG - on stmt: $116binary_subtract.2 = _stop - _start
2025-01-05 16:51:26,170 - DEBUG - find_def var='_stop' stmt=$116binary_subtract.2 = _stop - _start
2025-01-05 16:51:26,172 - DEBUG - find_def_from_top label 112
2025-01-05 16:51:26,173 - DEBUG - idom 96 from label 112
2025-01-05 16:51:26,174 - DEBUG - find_def_from_bottom label 96
2025-01-05 16:51:26,175 - DEBUG - find_def_from_top label 96
2025-01-05 16:51:26,176 - DEBUG - insert phi node _stop.2 = phi(incoming_values=[], incoming_blocks=[]) at 96
2025-01-05 16:51:26,177 - DEBUG - find_def_from_bottom label 74
2025-01-05 16:51:26,178 - DEBUG - incoming_def _stop = lit_start
2025-01-05 16:51:26,180 - DEBUG - find_def_from_bottom label 86
2025-01-05 16:51:26,181 - DEBUG - incoming_def _stop.1 = lit_stop
2025-01-05 16:51:26,182 - DEBUG - replaced with: $116binary_subtract.2 = _stop.2 - _start
2025-01-05 16:51:26,183 - DEBUG - on stmt: nitems_c = $116binary_subtract.2 / _step
2025-01-05 16:51:26,185 - DEBUG - on stmt: $124load_global.5 = global(int: <class 'int'>)
2025-01-05 16:51:26,187 - DEBUG - on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:26,189 - DEBUG - on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
2025-01-05 16:51:26,190 - DEBUG - on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
2025-01-05 16:51:26,192 - DEBUG - on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,194 - DEBUG - on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,196 - DEBUG - on stmt: $140load_deref.12 = freevar(use_complex: False)
2025-01-05 16:51:26,198 - DEBUG - on stmt: $const142.13 = const(bool, True)
2025-01-05 16:51:26,199 - DEBUG - on stmt: $144compare_op.14 = const(int, 0)
2025-01-05 16:51:26,200 - DEBUG - on stmt: bool146 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,201 - DEBUG - on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4766),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,203 - DEBUG - on stmt: jump 182
2025-01-05 16:51:26,205 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-05 16:51:26,206 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,207 - DEBUG - on stmt: $182load_global.0 = global(max: <built-in function max>)
2025-01-05 16:51:26,209 - DEBUG - on stmt: $const186.2 = const(int, 0)
2025-01-05 16:51:26,210 - DEBUG - on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4763), Var($const186.2, arrayobj.py:4770)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,212 - DEBUG - on stmt: jump 192
2025-01-05 16:51:26,214 - DEBUG - ==== SSA block rewrite pass on 192
2025-01-05 16:51:26,215 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,216 - DEBUG - on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:26,218 - DEBUG - on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
2025-01-05 16:51:26,220 - DEBUG - on stmt: $198load_deref.3 = freevar(true_dtype: float64)
2025-01-05 16:51:26,221 - DEBUG - on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4768), Var($198load_deref.3, arrayobj.py:4771)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,224 - DEBUG - on stmt: val = _start
2025-01-05 16:51:26,225 - DEBUG - on stmt: $208load_global.6 = global(range: <class 'range'>)
2025-01-05 16:51:26,227 - DEBUG - on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4768)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,229 - DEBUG - on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
2025-01-05 16:51:26,231 - DEBUG - on stmt: $phi216.0 = $214get_iter.9
2025-01-05 16:51:26,232 - DEBUG - on stmt: jump 216
2025-01-05 16:51:26,233 - DEBUG - ==== SSA block rewrite pass on 216
2025-01-05 16:51:26,234 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,235 - DEBUG - on stmt: $216for_iter.1 = iternext(value=$phi216.0)
2025-01-05 16:51:26,237 - DEBUG - on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
2025-01-05 16:51:26,238 - DEBUG - on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
2025-01-05 16:51:26,240 - DEBUG - on stmt: $phi218.1 = $216for_iter.2
2025-01-05 16:51:26,241 - DEBUG - on stmt: branch $216for_iter.3, 218, 238
2025-01-05 16:51:26,242 - DEBUG - ==== SSA block rewrite pass on 218
2025-01-05 16:51:26,243 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,244 - DEBUG - on stmt: i = $phi218.1
2025-01-05 16:51:26,245 - DEBUG - on stmt: $226binary_multiply.5 = i * _step
2025-01-05 16:51:26,246 - DEBUG - on stmt: $228binary_add.6 = val + $226binary_multiply.5
2025-01-05 16:51:26,248 - DEBUG - on stmt: arr[i] = $228binary_add.6
2025-01-05 16:51:26,249 - DEBUG - on stmt: jump 216
2025-01-05 16:51:26,250 - DEBUG - ==== SSA block rewrite pass on 238
2025-01-05 16:51:26,251 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,252 - DEBUG - on stmt: $240return_value.1 = cast(value=arr)
2025-01-05 16:51:26,253 - DEBUG - on stmt: return $240return_value.1
2025-01-05 16:51:26,254 - DEBUG - Fix SSA violator on var $phi64.0
2025-01-05 16:51:26,256 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:26,257 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,258 - DEBUG - on stmt: start = arg(0, name=start)
2025-01-05 16:51:26,259 - DEBUG - on stmt: stop = arg(1, name=stop)
2025-01-05 16:51:26,260 - DEBUG - on stmt: step = arg(2, name=step)
2025-01-05 16:51:26,261 - DEBUG - on stmt: dtype = arg(3, name=dtype)
2025-01-05 16:51:26,262 - DEBUG - on stmt: $2load_deref.0 = freevar(start_value: None)
2025-01-05 16:51:26,264 - DEBUG - on stmt: $const4.1 = const(NoneType, None)
2025-01-05 16:51:26,265 - DEBUG - on stmt: $6compare_op.2 = const(int, 0)
2025-01-05 16:51:26,265 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,266 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4749),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,268 - DEBUG - on stmt: jump 14
2025-01-05 16:51:26,270 - DEBUG - ==== SSA block rewrite pass on 14
2025-01-05 16:51:26,270 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,272 - DEBUG - on stmt: $phi16.0 = start
2025-01-05 16:51:26,273 - DEBUG - on stmt: jump 16
2025-01-05 16:51:26,274 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-05 16:51:26,275 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,276 - DEBUG - on stmt: lit_start = $phi16.0
2025-01-05 16:51:26,277 - DEBUG - on stmt: $18load_deref.1 = freevar(stop_value: None)
2025-01-05 16:51:26,279 - DEBUG - on stmt: $const20.2 = const(NoneType, None)
2025-01-05 16:51:26,280 - DEBUG - on stmt: $22compare_op.3 = const(int, 0)
2025-01-05 16:51:26,281 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,282 - DEBUG - on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4750),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,284 - DEBUG - on stmt: jump 30
2025-01-05 16:51:26,285 - DEBUG - ==== SSA block rewrite pass on 30
2025-01-05 16:51:26,286 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,288 - DEBUG - on stmt: $phi32.0 = stop
2025-01-05 16:51:26,289 - DEBUG - on stmt: jump 32
2025-01-05 16:51:26,289 - DEBUG - ==== SSA block rewrite pass on 32
2025-01-05 16:51:26,290 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,292 - DEBUG - on stmt: lit_stop = $phi32.0
2025-01-05 16:51:26,293 - DEBUG - on stmt: $34load_deref.1 = freevar(step_value: None)
2025-01-05 16:51:26,294 - DEBUG - on stmt: $const36.2 = const(NoneType, None)
2025-01-05 16:51:26,295 - DEBUG - on stmt: $38compare_op.3 = const(int, 0)
2025-01-05 16:51:26,296 - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,298 - DEBUG - on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4751),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,300 - DEBUG - on stmt: jump 46
2025-01-05 16:51:26,301 - DEBUG - ==== SSA block rewrite pass on 46
2025-01-05 16:51:26,302 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,303 - DEBUG - on stmt: $phi48.0 = step
2025-01-05 16:51:26,304 - DEBUG - on stmt: jump 48
2025-01-05 16:51:26,305 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:26,306 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,308 - DEBUG - on stmt: lit_step = $phi48.0
2025-01-05 16:51:26,309 - DEBUG - on stmt: $const52.2 = const(NoneType, None)
2025-01-05 16:51:26,309 - DEBUG - on stmt: $54compare_op.3 = lit_step is not $const52.2
2025-01-05 16:51:26,311 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,312 - DEBUG - on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4753),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,315 - DEBUG - on stmt: branch $56pred, 58, 62
2025-01-05 16:51:26,316 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-05 16:51:26,317 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,318 - DEBUG - on stmt: $phi64.0 = lit_step
2025-01-05 16:51:26,319 - DEBUG - first assign: $phi64.0
2025-01-05 16:51:26,320 - DEBUG - replaced with: $phi64.0 = lit_step
2025-01-05 16:51:26,321 - DEBUG - on stmt: jump 64
2025-01-05 16:51:26,322 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-05 16:51:26,323 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,324 - DEBUG - on stmt: $const62.0 = const(int, 1)
2025-01-05 16:51:26,325 - DEBUG - on stmt: $phi64.0 = $const62.0
2025-01-05 16:51:26,326 - DEBUG - replaced with: $phi64.0.1 = $const62.0
2025-01-05 16:51:26,327 - DEBUG - on stmt: jump 64
2025-01-05 16:51:26,328 - DEBUG - ==== SSA block rewrite pass on 64
2025-01-05 16:51:26,329 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,331 - DEBUG - on stmt: _step = $phi64.0
2025-01-05 16:51:26,333 - DEBUG - on stmt: $const68.2 = const(NoneType, None)
2025-01-05 16:51:26,334 - DEBUG - on stmt: $70compare_op.3 = lit_stop is $const68.2
2025-01-05 16:51:26,335 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,337 - DEBUG - on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4754),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,339 - DEBUG - on stmt: branch $72pred, 74, 86
2025-01-05 16:51:26,341 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-05 16:51:26,341 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,343 - DEBUG - on stmt: _start = const(int, 0)
2025-01-05 16:51:26,344 - DEBUG - on stmt: _stop = lit_start
2025-01-05 16:51:26,345 - DEBUG - on stmt: jump 96
2025-01-05 16:51:26,346 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-05 16:51:26,347 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,348 - DEBUG - on stmt: _start = lit_start
2025-01-05 16:51:26,349 - DEBUG - on stmt: _stop.1 = lit_stop
2025-01-05 16:51:26,350 - DEBUG - on stmt: jump 96
2025-01-05 16:51:26,351 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:26,352 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,353 - DEBUG - on stmt: _stop.2 = phi(incoming_values=[Var(_stop, arrayobj.py:4755), Var(_stop.1, arrayobj.py:4757)], incoming_blocks=[74, 86])
2025-01-05 16:51:26,356 - DEBUG - on stmt: $const98.1 = const(int, 0)
2025-01-05 16:51:26,357 - DEBUG - on stmt: $100compare_op.2 = _step == $const98.1
2025-01-05 16:51:26,358 - DEBUG - on stmt: bool102 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,360 - DEBUG - on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4759),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,362 - DEBUG - on stmt: branch $102pred, 104, 112
2025-01-05 16:51:26,363 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-05 16:51:26,364 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,366 - DEBUG - on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-05 16:51:26,367 - DEBUG - on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
2025-01-05 16:51:26,369 - DEBUG - on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4760)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,371 - DEBUG - on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2025-01-05 16:51:26,373 - DEBUG - ==== SSA block rewrite pass on 112
2025-01-05 16:51:26,374 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,375 - DEBUG - on stmt: $116binary_subtract.2 = _stop.2 - _start
2025-01-05 16:51:26,377 - DEBUG - on stmt: nitems_c = $116binary_subtract.2 / _step
2025-01-05 16:51:26,378 - DEBUG - on stmt: $124load_global.5 = global(int: <class 'int'>)
2025-01-05 16:51:26,380 - DEBUG - on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:26,382 - DEBUG - on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
2025-01-05 16:51:26,383 - DEBUG - on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
2025-01-05 16:51:26,385 - DEBUG - on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,387 - DEBUG - on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,389 - DEBUG - on stmt: $140load_deref.12 = freevar(use_complex: False)
2025-01-05 16:51:26,391 - DEBUG - on stmt: $const142.13 = const(bool, True)
2025-01-05 16:51:26,392 - DEBUG - on stmt: $144compare_op.14 = const(int, 0)
2025-01-05 16:51:26,393 - DEBUG - on stmt: bool146 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,394 - DEBUG - on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4766),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,397 - DEBUG - on stmt: jump 182
2025-01-05 16:51:26,398 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-05 16:51:26,399 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,400 - DEBUG - on stmt: $182load_global.0 = global(max: <built-in function max>)
2025-01-05 16:51:26,402 - DEBUG - on stmt: $const186.2 = const(int, 0)
2025-01-05 16:51:26,403 - DEBUG - on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4763), Var($const186.2, arrayobj.py:4770)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,405 - DEBUG - on stmt: jump 192
2025-01-05 16:51:26,407 - DEBUG - ==== SSA block rewrite pass on 192
2025-01-05 16:51:26,408 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,409 - DEBUG - on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:26,412 - DEBUG - on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
2025-01-05 16:51:26,414 - DEBUG - on stmt: $198load_deref.3 = freevar(true_dtype: float64)
2025-01-05 16:51:26,415 - DEBUG - on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4768), Var($198load_deref.3, arrayobj.py:4771)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,418 - DEBUG - on stmt: val = _start
2025-01-05 16:51:26,419 - DEBUG - on stmt: $208load_global.6 = global(range: <class 'range'>)
2025-01-05 16:51:26,421 - DEBUG - on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4768)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,423 - DEBUG - on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
2025-01-05 16:51:26,424 - DEBUG - on stmt: $phi216.0 = $214get_iter.9
2025-01-05 16:51:26,426 - DEBUG - on stmt: jump 216
2025-01-05 16:51:26,427 - DEBUG - ==== SSA block rewrite pass on 216
2025-01-05 16:51:26,428 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,430 - DEBUG - on stmt: $216for_iter.1 = iternext(value=$phi216.0)
2025-01-05 16:51:26,432 - DEBUG - on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
2025-01-05 16:51:26,433 - DEBUG - on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
2025-01-05 16:51:26,435 - DEBUG - on stmt: $phi218.1 = $216for_iter.2
2025-01-05 16:51:26,436 - DEBUG - on stmt: branch $216for_iter.3, 218, 238
2025-01-05 16:51:26,437 - DEBUG - ==== SSA block rewrite pass on 218
2025-01-05 16:51:26,438 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,439 - DEBUG - on stmt: i = $phi218.1
2025-01-05 16:51:26,440 - DEBUG - on stmt: $226binary_multiply.5 = i * _step
2025-01-05 16:51:26,441 - DEBUG - on stmt: $228binary_add.6 = val + $226binary_multiply.5
2025-01-05 16:51:26,442 - DEBUG - on stmt: arr[i] = $228binary_add.6
2025-01-05 16:51:26,443 - DEBUG - on stmt: jump 216
2025-01-05 16:51:26,444 - DEBUG - ==== SSA block rewrite pass on 238
2025-01-05 16:51:26,445 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014720B50>
2025-01-05 16:51:26,447 - DEBUG - on stmt: $240return_value.1 = cast(value=arr)
2025-01-05 16:51:26,448 - DEBUG - on stmt: return $240return_value.1
2025-01-05 16:51:26,449 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {58: [<numba.core.ir.Assign object at 0x000000001470C6D0>],
             62: [<numba.core.ir.Assign object at 0x00000000146EFDC0>]})
2025-01-05 16:51:26,452 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:26,453 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,454 - DEBUG - on stmt: start = arg(0, name=start)
2025-01-05 16:51:26,455 - DEBUG - on stmt: stop = arg(1, name=stop)
2025-01-05 16:51:26,456 - DEBUG - on stmt: step = arg(2, name=step)
2025-01-05 16:51:26,457 - DEBUG - on stmt: dtype = arg(3, name=dtype)
2025-01-05 16:51:26,458 - DEBUG - on stmt: $2load_deref.0 = freevar(start_value: None)
2025-01-05 16:51:26,459 - DEBUG - on stmt: $const4.1 = const(NoneType, None)
2025-01-05 16:51:26,461 - DEBUG - on stmt: $6compare_op.2 = const(int, 0)
2025-01-05 16:51:26,462 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,462 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4749),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,465 - DEBUG - on stmt: jump 14
2025-01-05 16:51:26,466 - DEBUG - ==== SSA block rewrite pass on 14
2025-01-05 16:51:26,467 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,468 - DEBUG - on stmt: $phi16.0 = start
2025-01-05 16:51:26,469 - DEBUG - on stmt: jump 16
2025-01-05 16:51:26,470 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-05 16:51:26,471 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,472 - DEBUG - on stmt: lit_start = $phi16.0
2025-01-05 16:51:26,473 - DEBUG - on stmt: $18load_deref.1 = freevar(stop_value: None)
2025-01-05 16:51:26,475 - DEBUG - on stmt: $const20.2 = const(NoneType, None)
2025-01-05 16:51:26,476 - DEBUG - on stmt: $22compare_op.3 = const(int, 0)
2025-01-05 16:51:26,477 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,478 - DEBUG - on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4750),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,480 - DEBUG - on stmt: jump 30
2025-01-05 16:51:26,482 - DEBUG - ==== SSA block rewrite pass on 30
2025-01-05 16:51:26,483 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,485 - DEBUG - on stmt: $phi32.0 = stop
2025-01-05 16:51:26,486 - DEBUG - on stmt: jump 32
2025-01-05 16:51:26,487 - DEBUG - ==== SSA block rewrite pass on 32
2025-01-05 16:51:26,488 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,490 - DEBUG - on stmt: lit_stop = $phi32.0
2025-01-05 16:51:26,491 - DEBUG - on stmt: $34load_deref.1 = freevar(step_value: None)
2025-01-05 16:51:26,492 - DEBUG - on stmt: $const36.2 = const(NoneType, None)
2025-01-05 16:51:26,493 - DEBUG - on stmt: $38compare_op.3 = const(int, 0)
2025-01-05 16:51:26,494 - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,495 - DEBUG - on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4751),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,498 - DEBUG - on stmt: jump 46
2025-01-05 16:51:26,499 - DEBUG - ==== SSA block rewrite pass on 46
2025-01-05 16:51:26,500 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,502 - DEBUG - on stmt: $phi48.0 = step
2025-01-05 16:51:26,503 - DEBUG - on stmt: jump 48
2025-01-05 16:51:26,504 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:26,505 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,506 - DEBUG - on stmt: lit_step = $phi48.0
2025-01-05 16:51:26,507 - DEBUG - on stmt: $const52.2 = const(NoneType, None)
2025-01-05 16:51:26,508 - DEBUG - on stmt: $54compare_op.3 = lit_step is not $const52.2
2025-01-05 16:51:26,509 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,511 - DEBUG - on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4753),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,513 - DEBUG - on stmt: branch $56pred, 58, 62
2025-01-05 16:51:26,514 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-05 16:51:26,515 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,516 - DEBUG - on stmt: $phi64.0 = lit_step
2025-01-05 16:51:26,518 - DEBUG - on stmt: jump 64
2025-01-05 16:51:26,518 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-05 16:51:26,519 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,521 - DEBUG - on stmt: $const62.0 = const(int, 1)
2025-01-05 16:51:26,522 - DEBUG - on stmt: $phi64.0.1 = $const62.0
2025-01-05 16:51:26,523 - DEBUG - on stmt: jump 64
2025-01-05 16:51:26,525 - DEBUG - ==== SSA block rewrite pass on 64
2025-01-05 16:51:26,526 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,528 - DEBUG - on stmt: _step = $phi64.0
2025-01-05 16:51:26,529 - DEBUG - find_def var='$phi64.0' stmt=_step = $phi64.0
2025-01-05 16:51:26,529 - DEBUG - find_def_from_top label 64
2025-01-05 16:51:26,531 - DEBUG - insert phi node $phi64.0.2 = phi(incoming_values=[], incoming_blocks=[]) at 64
2025-01-05 16:51:26,532 - DEBUG - find_def_from_bottom label 58
2025-01-05 16:51:26,533 - DEBUG - incoming_def $phi64.0 = lit_step
2025-01-05 16:51:26,534 - DEBUG - find_def_from_bottom label 62
2025-01-05 16:51:26,535 - DEBUG - incoming_def $phi64.0.1 = $const62.0
2025-01-05 16:51:26,536 - DEBUG - replaced with: _step = $phi64.0.2
2025-01-05 16:51:26,537 - DEBUG - on stmt: $const68.2 = const(NoneType, None)
2025-01-05 16:51:26,538 - DEBUG - on stmt: $70compare_op.3 = lit_stop is $const68.2
2025-01-05 16:51:26,539 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,540 - DEBUG - on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4754),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,543 - DEBUG - on stmt: branch $72pred, 74, 86
2025-01-05 16:51:26,544 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-05 16:51:26,545 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,546 - DEBUG - on stmt: _start = const(int, 0)
2025-01-05 16:51:26,548 - DEBUG - on stmt: _stop = lit_start
2025-01-05 16:51:26,549 - DEBUG - on stmt: jump 96
2025-01-05 16:51:26,549 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-05 16:51:26,550 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,552 - DEBUG - on stmt: _start = lit_start
2025-01-05 16:51:26,553 - DEBUG - on stmt: _stop.1 = lit_stop
2025-01-05 16:51:26,554 - DEBUG - on stmt: jump 96
2025-01-05 16:51:26,555 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:26,555 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,557 - DEBUG - on stmt: _stop.2 = phi(incoming_values=[Var(_stop, arrayobj.py:4755), Var(_stop.1, arrayobj.py:4757)], incoming_blocks=[74, 86])
2025-01-05 16:51:26,559 - DEBUG - on stmt: $const98.1 = const(int, 0)
2025-01-05 16:51:26,560 - DEBUG - on stmt: $100compare_op.2 = _step == $const98.1
2025-01-05 16:51:26,562 - DEBUG - on stmt: bool102 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,564 - DEBUG - on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4759),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,566 - DEBUG - on stmt: branch $102pred, 104, 112
2025-01-05 16:51:26,567 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-05 16:51:26,568 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,569 - DEBUG - on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-05 16:51:26,571 - DEBUG - on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
2025-01-05 16:51:26,573 - DEBUG - on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4760)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,575 - DEBUG - on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2025-01-05 16:51:26,576 - DEBUG - ==== SSA block rewrite pass on 112
2025-01-05 16:51:26,577 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,579 - DEBUG - on stmt: $116binary_subtract.2 = _stop.2 - _start
2025-01-05 16:51:26,581 - DEBUG - on stmt: nitems_c = $116binary_subtract.2 / _step
2025-01-05 16:51:26,582 - DEBUG - on stmt: $124load_global.5 = global(int: <class 'int'>)
2025-01-05 16:51:26,584 - DEBUG - on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:26,585 - DEBUG - on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
2025-01-05 16:51:26,587 - DEBUG - on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
2025-01-05 16:51:26,589 - DEBUG - on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,591 - DEBUG - on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,593 - DEBUG - on stmt: $140load_deref.12 = freevar(use_complex: False)
2025-01-05 16:51:26,595 - DEBUG - on stmt: $const142.13 = const(bool, True)
2025-01-05 16:51:26,596 - DEBUG - on stmt: $144compare_op.14 = const(int, 0)
2025-01-05 16:51:26,597 - DEBUG - on stmt: bool146 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,599 - DEBUG - on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4766),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,601 - DEBUG - on stmt: jump 182
2025-01-05 16:51:26,602 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-05 16:51:26,603 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,604 - DEBUG - on stmt: $182load_global.0 = global(max: <built-in function max>)
2025-01-05 16:51:26,606 - DEBUG - on stmt: $const186.2 = const(int, 0)
2025-01-05 16:51:26,607 - DEBUG - on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4763), Var($const186.2, arrayobj.py:4770)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,610 - DEBUG - on stmt: jump 192
2025-01-05 16:51:26,611 - DEBUG - ==== SSA block rewrite pass on 192
2025-01-05 16:51:26,612 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,613 - DEBUG - on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:26,615 - DEBUG - on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
2025-01-05 16:51:26,617 - DEBUG - on stmt: $198load_deref.3 = freevar(true_dtype: float64)
2025-01-05 16:51:26,619 - DEBUG - on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4768), Var($198load_deref.3, arrayobj.py:4771)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,621 - DEBUG - on stmt: val = _start
2025-01-05 16:51:26,622 - DEBUG - on stmt: $208load_global.6 = global(range: <class 'range'>)
2025-01-05 16:51:26,624 - DEBUG - on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4768)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,626 - DEBUG - on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
2025-01-05 16:51:26,628 - DEBUG - on stmt: $phi216.0 = $214get_iter.9
2025-01-05 16:51:26,629 - DEBUG - on stmt: jump 216
2025-01-05 16:51:26,630 - DEBUG - ==== SSA block rewrite pass on 216
2025-01-05 16:51:26,631 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,632 - DEBUG - on stmt: $216for_iter.1 = iternext(value=$phi216.0)
2025-01-05 16:51:26,634 - DEBUG - on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
2025-01-05 16:51:26,636 - DEBUG - on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
2025-01-05 16:51:26,638 - DEBUG - on stmt: $phi218.1 = $216for_iter.2
2025-01-05 16:51:26,639 - DEBUG - on stmt: branch $216for_iter.3, 218, 238
2025-01-05 16:51:26,640 - DEBUG - ==== SSA block rewrite pass on 218
2025-01-05 16:51:26,641 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,642 - DEBUG - on stmt: i = $phi218.1
2025-01-05 16:51:26,643 - DEBUG - on stmt: $226binary_multiply.5 = i * _step
2025-01-05 16:51:26,644 - DEBUG - on stmt: $228binary_add.6 = val + $226binary_multiply.5
2025-01-05 16:51:26,646 - DEBUG - on stmt: arr[i] = $228binary_add.6
2025-01-05 16:51:26,647 - DEBUG - on stmt: jump 216
2025-01-05 16:51:26,648 - DEBUG - ==== SSA block rewrite pass on 238
2025-01-05 16:51:26,649 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EFD60>
2025-01-05 16:51:26,650 - DEBUG - on stmt: $240return_value.1 = cast(value=arr)
2025-01-05 16:51:26,652 - DEBUG - on stmt: return $240return_value.1
2025-01-05 16:51:26,652 - DEBUG - Fix SSA violator on var _start
2025-01-05 16:51:26,653 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:26,654 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,656 - DEBUG - on stmt: start = arg(0, name=start)
2025-01-05 16:51:26,657 - DEBUG - on stmt: stop = arg(1, name=stop)
2025-01-05 16:51:26,658 - DEBUG - on stmt: step = arg(2, name=step)
2025-01-05 16:51:26,659 - DEBUG - on stmt: dtype = arg(3, name=dtype)
2025-01-05 16:51:26,660 - DEBUG - on stmt: $2load_deref.0 = freevar(start_value: None)
2025-01-05 16:51:26,661 - DEBUG - on stmt: $const4.1 = const(NoneType, None)
2025-01-05 16:51:26,662 - DEBUG - on stmt: $6compare_op.2 = const(int, 0)
2025-01-05 16:51:26,663 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,664 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4749),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,666 - DEBUG - on stmt: jump 14
2025-01-05 16:51:26,667 - DEBUG - ==== SSA block rewrite pass on 14
2025-01-05 16:51:26,668 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,669 - DEBUG - on stmt: $phi16.0 = start
2025-01-05 16:51:26,670 - DEBUG - on stmt: jump 16
2025-01-05 16:51:26,671 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-05 16:51:26,672 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,673 - DEBUG - on stmt: lit_start = $phi16.0
2025-01-05 16:51:26,675 - DEBUG - on stmt: $18load_deref.1 = freevar(stop_value: None)
2025-01-05 16:51:26,676 - DEBUG - on stmt: $const20.2 = const(NoneType, None)
2025-01-05 16:51:26,677 - DEBUG - on stmt: $22compare_op.3 = const(int, 0)
2025-01-05 16:51:26,678 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,679 - DEBUG - on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4750),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,682 - DEBUG - on stmt: jump 30
2025-01-05 16:51:26,683 - DEBUG - ==== SSA block rewrite pass on 30
2025-01-05 16:51:26,684 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,685 - DEBUG - on stmt: $phi32.0 = stop
2025-01-05 16:51:26,687 - DEBUG - on stmt: jump 32
2025-01-05 16:51:26,687 - DEBUG - ==== SSA block rewrite pass on 32
2025-01-05 16:51:26,688 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,690 - DEBUG - on stmt: lit_stop = $phi32.0
2025-01-05 16:51:26,691 - DEBUG - on stmt: $34load_deref.1 = freevar(step_value: None)
2025-01-05 16:51:26,692 - DEBUG - on stmt: $const36.2 = const(NoneType, None)
2025-01-05 16:51:26,693 - DEBUG - on stmt: $38compare_op.3 = const(int, 0)
2025-01-05 16:51:26,694 - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,695 - DEBUG - on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4751),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,698 - DEBUG - on stmt: jump 46
2025-01-05 16:51:26,699 - DEBUG - ==== SSA block rewrite pass on 46
2025-01-05 16:51:26,700 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,701 - DEBUG - on stmt: $phi48.0 = step
2025-01-05 16:51:26,702 - DEBUG - on stmt: jump 48
2025-01-05 16:51:26,703 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:26,704 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,705 - DEBUG - on stmt: lit_step = $phi48.0
2025-01-05 16:51:26,706 - DEBUG - on stmt: $const52.2 = const(NoneType, None)
2025-01-05 16:51:26,707 - DEBUG - on stmt: $54compare_op.3 = lit_step is not $const52.2
2025-01-05 16:51:26,709 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,710 - DEBUG - on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4753),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,713 - DEBUG - on stmt: branch $56pred, 58, 62
2025-01-05 16:51:26,715 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-05 16:51:26,715 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,717 - DEBUG - on stmt: $phi64.0 = lit_step
2025-01-05 16:51:26,718 - DEBUG - on stmt: jump 64
2025-01-05 16:51:26,719 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-05 16:51:26,720 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,722 - DEBUG - on stmt: $const62.0 = const(int, 1)
2025-01-05 16:51:26,723 - DEBUG - on stmt: $phi64.0.1 = $const62.0
2025-01-05 16:51:26,724 - DEBUG - on stmt: jump 64
2025-01-05 16:51:26,725 - DEBUG - ==== SSA block rewrite pass on 64
2025-01-05 16:51:26,726 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,727 - DEBUG - on stmt: $phi64.0.2 = phi(incoming_values=[Var($phi64.0, arrayobj.py:4753), Var($phi64.0.1, arrayobj.py:4753)], incoming_blocks=[58, 62])
2025-01-05 16:51:26,729 - DEBUG - on stmt: _step = $phi64.0.2
2025-01-05 16:51:26,731 - DEBUG - on stmt: $const68.2 = const(NoneType, None)
2025-01-05 16:51:26,732 - DEBUG - on stmt: $70compare_op.3 = lit_stop is $const68.2
2025-01-05 16:51:26,733 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,734 - DEBUG - on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4754),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,737 - DEBUG - on stmt: branch $72pred, 74, 86
2025-01-05 16:51:26,738 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-05 16:51:26,739 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,740 - DEBUG - on stmt: _start = const(int, 0)
2025-01-05 16:51:26,741 - DEBUG - first assign: _start
2025-01-05 16:51:26,742 - DEBUG - replaced with: _start = const(int, 0)
2025-01-05 16:51:26,743 - DEBUG - on stmt: _stop = lit_start
2025-01-05 16:51:26,744 - DEBUG - on stmt: jump 96
2025-01-05 16:51:26,745 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-05 16:51:26,746 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,747 - DEBUG - on stmt: _start = lit_start
2025-01-05 16:51:26,749 - DEBUG - replaced with: _start.1 = lit_start
2025-01-05 16:51:26,749 - DEBUG - on stmt: _stop.1 = lit_stop
2025-01-05 16:51:26,750 - DEBUG - on stmt: jump 96
2025-01-05 16:51:26,751 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:26,752 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,754 - DEBUG - on stmt: _stop.2 = phi(incoming_values=[Var(_stop, arrayobj.py:4755), Var(_stop.1, arrayobj.py:4757)], incoming_blocks=[74, 86])
2025-01-05 16:51:26,756 - DEBUG - on stmt: $const98.1 = const(int, 0)
2025-01-05 16:51:26,757 - DEBUG - on stmt: $100compare_op.2 = _step == $const98.1
2025-01-05 16:51:26,758 - DEBUG - on stmt: bool102 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,760 - DEBUG - on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4759),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,762 - DEBUG - on stmt: branch $102pred, 104, 112
2025-01-05 16:51:26,763 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-05 16:51:26,764 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,766 - DEBUG - on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-05 16:51:26,767 - DEBUG - on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
2025-01-05 16:51:26,769 - DEBUG - on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4760)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,771 - DEBUG - on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2025-01-05 16:51:26,773 - DEBUG - ==== SSA block rewrite pass on 112
2025-01-05 16:51:26,774 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,775 - DEBUG - on stmt: $116binary_subtract.2 = _stop.2 - _start
2025-01-05 16:51:26,777 - DEBUG - on stmt: nitems_c = $116binary_subtract.2 / _step
2025-01-05 16:51:26,778 - DEBUG - on stmt: $124load_global.5 = global(int: <class 'int'>)
2025-01-05 16:51:26,780 - DEBUG - on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:26,781 - DEBUG - on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
2025-01-05 16:51:26,783 - DEBUG - on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
2025-01-05 16:51:26,785 - DEBUG - on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,787 - DEBUG - on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,790 - DEBUG - on stmt: $140load_deref.12 = freevar(use_complex: False)
2025-01-05 16:51:26,791 - DEBUG - on stmt: $const142.13 = const(bool, True)
2025-01-05 16:51:26,793 - DEBUG - on stmt: $144compare_op.14 = const(int, 0)
2025-01-05 16:51:26,794 - DEBUG - on stmt: bool146 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,795 - DEBUG - on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4766),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,797 - DEBUG - on stmt: jump 182
2025-01-05 16:51:26,798 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-05 16:51:26,799 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,801 - DEBUG - on stmt: $182load_global.0 = global(max: <built-in function max>)
2025-01-05 16:51:26,802 - DEBUG - on stmt: $const186.2 = const(int, 0)
2025-01-05 16:51:26,803 - DEBUG - on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4763), Var($const186.2, arrayobj.py:4770)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,806 - DEBUG - on stmt: jump 192
2025-01-05 16:51:26,807 - DEBUG - ==== SSA block rewrite pass on 192
2025-01-05 16:51:26,808 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,809 - DEBUG - on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:26,811 - DEBUG - on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
2025-01-05 16:51:26,813 - DEBUG - on stmt: $198load_deref.3 = freevar(true_dtype: float64)
2025-01-05 16:51:26,815 - DEBUG - on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4768), Var($198load_deref.3, arrayobj.py:4771)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,818 - DEBUG - on stmt: val = _start
2025-01-05 16:51:26,819 - DEBUG - on stmt: $208load_global.6 = global(range: <class 'range'>)
2025-01-05 16:51:26,820 - DEBUG - on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4768)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,822 - DEBUG - on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
2025-01-05 16:51:26,824 - DEBUG - on stmt: $phi216.0 = $214get_iter.9
2025-01-05 16:51:26,825 - DEBUG - on stmt: jump 216
2025-01-05 16:51:26,826 - DEBUG - ==== SSA block rewrite pass on 216
2025-01-05 16:51:26,827 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,828 - DEBUG - on stmt: $216for_iter.1 = iternext(value=$phi216.0)
2025-01-05 16:51:26,830 - DEBUG - on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
2025-01-05 16:51:26,832 - DEBUG - on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
2025-01-05 16:51:26,833 - DEBUG - on stmt: $phi218.1 = $216for_iter.2
2025-01-05 16:51:26,834 - DEBUG - on stmt: branch $216for_iter.3, 218, 238
2025-01-05 16:51:26,835 - DEBUG - ==== SSA block rewrite pass on 218
2025-01-05 16:51:26,836 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,838 - DEBUG - on stmt: i = $phi218.1
2025-01-05 16:51:26,839 - DEBUG - on stmt: $226binary_multiply.5 = i * _step
2025-01-05 16:51:26,840 - DEBUG - on stmt: $228binary_add.6 = val + $226binary_multiply.5
2025-01-05 16:51:26,841 - DEBUG - on stmt: arr[i] = $228binary_add.6
2025-01-05 16:51:26,842 - DEBUG - on stmt: jump 216
2025-01-05 16:51:26,843 - DEBUG - ==== SSA block rewrite pass on 238
2025-01-05 16:51:26,844 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FA550>
2025-01-05 16:51:26,845 - DEBUG - on stmt: $240return_value.1 = cast(value=arr)
2025-01-05 16:51:26,846 - DEBUG - on stmt: return $240return_value.1
2025-01-05 16:51:26,848 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {74: [<numba.core.ir.Assign object at 0x0000000014720A90>],
             86: [<numba.core.ir.Assign object at 0x0000000014720910>]})
2025-01-05 16:51:26,850 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:26,851 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:26,853 - DEBUG - on stmt: start = arg(0, name=start)
2025-01-05 16:51:26,854 - DEBUG - on stmt: stop = arg(1, name=stop)
2025-01-05 16:51:26,855 - DEBUG - on stmt: step = arg(2, name=step)
2025-01-05 16:51:26,856 - DEBUG - on stmt: dtype = arg(3, name=dtype)
2025-01-05 16:51:26,857 - DEBUG - on stmt: $2load_deref.0 = freevar(start_value: None)
2025-01-05 16:51:26,858 - DEBUG - on stmt: $const4.1 = const(NoneType, None)
2025-01-05 16:51:26,859 - DEBUG - on stmt: $6compare_op.2 = const(int, 0)
2025-01-05 16:51:26,860 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,861 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4749),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,863 - DEBUG - on stmt: jump 14
2025-01-05 16:51:26,865 - DEBUG - ==== SSA block rewrite pass on 14
2025-01-05 16:51:26,866 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:26,867 - DEBUG - on stmt: $phi16.0 = start
2025-01-05 16:51:26,868 - DEBUG - on stmt: jump 16
2025-01-05 16:51:26,869 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-05 16:51:26,870 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:26,872 - DEBUG - on stmt: lit_start = $phi16.0
2025-01-05 16:51:26,873 - DEBUG - on stmt: $18load_deref.1 = freevar(stop_value: None)
2025-01-05 16:51:26,874 - DEBUG - on stmt: $const20.2 = const(NoneType, None)
2025-01-05 16:51:26,875 - DEBUG - on stmt: $22compare_op.3 = const(int, 0)
2025-01-05 16:51:26,876 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,878 - DEBUG - on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4750),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,880 - DEBUG - on stmt: jump 30
2025-01-05 16:51:26,882 - DEBUG - ==== SSA block rewrite pass on 30
2025-01-05 16:51:26,882 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:26,884 - DEBUG - on stmt: $phi32.0 = stop
2025-01-05 16:51:26,885 - DEBUG - on stmt: jump 32
2025-01-05 16:51:26,886 - DEBUG - ==== SSA block rewrite pass on 32
2025-01-05 16:51:26,887 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:26,888 - DEBUG - on stmt: lit_stop = $phi32.0
2025-01-05 16:51:26,889 - DEBUG - on stmt: $34load_deref.1 = freevar(step_value: None)
2025-01-05 16:51:26,890 - DEBUG - on stmt: $const36.2 = const(NoneType, None)
2025-01-05 16:51:26,892 - DEBUG - on stmt: $38compare_op.3 = const(int, 0)
2025-01-05 16:51:26,893 - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,894 - DEBUG - on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4751),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,896 - DEBUG - on stmt: jump 46
2025-01-05 16:51:26,898 - DEBUG - ==== SSA block rewrite pass on 46
2025-01-05 16:51:26,898 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:26,900 - DEBUG - on stmt: $phi48.0 = step
2025-01-05 16:51:26,901 - DEBUG - on stmt: jump 48
2025-01-05 16:51:26,902 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:26,903 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:26,905 - DEBUG - on stmt: lit_step = $phi48.0
2025-01-05 16:51:26,906 - DEBUG - on stmt: $const52.2 = const(NoneType, None)
2025-01-05 16:51:26,906 - DEBUG - on stmt: $54compare_op.3 = lit_step is not $const52.2
2025-01-05 16:51:26,908 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,909 - DEBUG - on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4753),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,911 - DEBUG - on stmt: branch $56pred, 58, 62
2025-01-05 16:51:26,912 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-05 16:51:26,914 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:26,915 - DEBUG - on stmt: $phi64.0 = lit_step
2025-01-05 16:51:26,916 - DEBUG - on stmt: jump 64
2025-01-05 16:51:26,917 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-05 16:51:26,918 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:26,919 - DEBUG - on stmt: $const62.0 = const(int, 1)
2025-01-05 16:51:26,920 - DEBUG - on stmt: $phi64.0.1 = $const62.0
2025-01-05 16:51:26,921 - DEBUG - on stmt: jump 64
2025-01-05 16:51:26,922 - DEBUG - ==== SSA block rewrite pass on 64
2025-01-05 16:51:26,923 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:26,925 - DEBUG - on stmt: $phi64.0.2 = phi(incoming_values=[Var($phi64.0, arrayobj.py:4753), Var($phi64.0.1, arrayobj.py:4753)], incoming_blocks=[58, 62])
2025-01-05 16:51:26,927 - DEBUG - on stmt: _step = $phi64.0.2
2025-01-05 16:51:26,929 - DEBUG - on stmt: $const68.2 = const(NoneType, None)
2025-01-05 16:51:26,930 - DEBUG - on stmt: $70compare_op.3 = lit_stop is $const68.2
2025-01-05 16:51:26,932 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,933 - DEBUG - on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4754),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,936 - DEBUG - on stmt: branch $72pred, 74, 86
2025-01-05 16:51:26,937 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-05 16:51:26,938 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:26,940 - DEBUG - on stmt: _start = const(int, 0)
2025-01-05 16:51:26,941 - DEBUG - on stmt: _stop = lit_start
2025-01-05 16:51:26,942 - DEBUG - on stmt: jump 96
2025-01-05 16:51:26,943 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-05 16:51:26,944 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:26,945 - DEBUG - on stmt: _start.1 = lit_start
2025-01-05 16:51:26,947 - DEBUG - on stmt: _stop.1 = lit_stop
2025-01-05 16:51:26,948 - DEBUG - on stmt: jump 96
2025-01-05 16:51:26,949 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:26,950 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:26,951 - DEBUG - on stmt: _stop.2 = phi(incoming_values=[Var(_stop, arrayobj.py:4755), Var(_stop.1, arrayobj.py:4757)], incoming_blocks=[74, 86])
2025-01-05 16:51:26,953 - DEBUG - on stmt: $const98.1 = const(int, 0)
2025-01-05 16:51:26,954 - DEBUG - on stmt: $100compare_op.2 = _step == $const98.1
2025-01-05 16:51:26,956 - DEBUG - on stmt: bool102 = global(bool: <class 'bool'>)
2025-01-05 16:51:26,957 - DEBUG - on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4759),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,959 - DEBUG - on stmt: branch $102pred, 104, 112
2025-01-05 16:51:26,960 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-05 16:51:26,961 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:26,963 - DEBUG - on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-05 16:51:26,964 - DEBUG - on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
2025-01-05 16:51:26,966 - DEBUG - on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4760)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,969 - DEBUG - on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2025-01-05 16:51:26,970 - DEBUG - ==== SSA block rewrite pass on 112
2025-01-05 16:51:26,971 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:26,973 - DEBUG - on stmt: $116binary_subtract.2 = _stop.2 - _start
2025-01-05 16:51:26,974 - DEBUG - find_def var='_start' stmt=$116binary_subtract.2 = _stop.2 - _start
2025-01-05 16:51:26,976 - DEBUG - find_def_from_top label 112
2025-01-05 16:51:26,977 - DEBUG - idom 96 from label 112
2025-01-05 16:51:26,978 - DEBUG - find_def_from_bottom label 96
2025-01-05 16:51:26,978 - DEBUG - find_def_from_top label 96
2025-01-05 16:51:26,979 - DEBUG - insert phi node _start.2 = phi(incoming_values=[], incoming_blocks=[]) at 96
2025-01-05 16:51:26,981 - DEBUG - find_def_from_bottom label 74
2025-01-05 16:51:26,982 - DEBUG - incoming_def _start = const(int, 0)
2025-01-05 16:51:26,983 - DEBUG - find_def_from_bottom label 86
2025-01-05 16:51:26,984 - DEBUG - incoming_def _start.1 = lit_start
2025-01-05 16:51:26,985 - DEBUG - replaced with: $116binary_subtract.2 = _stop.2 - _start.2
2025-01-05 16:51:26,987 - DEBUG - on stmt: nitems_c = $116binary_subtract.2 / _step
2025-01-05 16:51:26,988 - DEBUG - on stmt: $124load_global.5 = global(int: <class 'int'>)
2025-01-05 16:51:26,990 - DEBUG - on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:26,991 - DEBUG - on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
2025-01-05 16:51:26,993 - DEBUG - on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
2025-01-05 16:51:26,994 - DEBUG - on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,997 - DEBUG - on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:26,999 - DEBUG - on stmt: $140load_deref.12 = freevar(use_complex: False)
2025-01-05 16:51:27,001 - DEBUG - on stmt: $const142.13 = const(bool, True)
2025-01-05 16:51:27,002 - DEBUG - on stmt: $144compare_op.14 = const(int, 0)
2025-01-05 16:51:27,003 - DEBUG - on stmt: bool146 = global(bool: <class 'bool'>)
2025-01-05 16:51:27,004 - DEBUG - on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4766),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:27,006 - DEBUG - on stmt: jump 182
2025-01-05 16:51:27,007 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-05 16:51:27,008 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:27,010 - DEBUG - on stmt: $182load_global.0 = global(max: <built-in function max>)
2025-01-05 16:51:27,011 - DEBUG - on stmt: $const186.2 = const(int, 0)
2025-01-05 16:51:27,012 - DEBUG - on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4763), Var($const186.2, arrayobj.py:4770)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:27,016 - DEBUG - on stmt: jump 192
2025-01-05 16:51:27,017 - DEBUG - ==== SSA block rewrite pass on 192
2025-01-05 16:51:27,018 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:27,019 - DEBUG - on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:27,022 - DEBUG - on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
2025-01-05 16:51:27,023 - DEBUG - on stmt: $198load_deref.3 = freevar(true_dtype: float64)
2025-01-05 16:51:27,025 - DEBUG - on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4768), Var($198load_deref.3, arrayobj.py:4771)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:27,028 - DEBUG - on stmt: val = _start
2025-01-05 16:51:27,029 - DEBUG - find_def var='_start' stmt=val = _start
2025-01-05 16:51:27,031 - DEBUG - find_def_from_top label 192
2025-01-05 16:51:27,032 - DEBUG - idom 182 from label 192
2025-01-05 16:51:27,033 - DEBUG - find_def_from_bottom label 182
2025-01-05 16:51:27,034 - DEBUG - find_def_from_top label 182
2025-01-05 16:51:27,034 - DEBUG - idom 112 from label 182
2025-01-05 16:51:27,035 - DEBUG - find_def_from_bottom label 112
2025-01-05 16:51:27,036 - DEBUG - find_def_from_top label 112
2025-01-05 16:51:27,037 - DEBUG - idom 96 from label 112
2025-01-05 16:51:27,038 - DEBUG - find_def_from_bottom label 96
2025-01-05 16:51:27,039 - DEBUG - replaced with: val = _start.2
2025-01-05 16:51:27,040 - DEBUG - on stmt: $208load_global.6 = global(range: <class 'range'>)
2025-01-05 16:51:27,041 - DEBUG - on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4768)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:27,043 - DEBUG - on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
2025-01-05 16:51:27,045 - DEBUG - on stmt: $phi216.0 = $214get_iter.9
2025-01-05 16:51:27,046 - DEBUG - on stmt: jump 216
2025-01-05 16:51:27,047 - DEBUG - ==== SSA block rewrite pass on 216
2025-01-05 16:51:27,048 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:27,050 - DEBUG - on stmt: $216for_iter.1 = iternext(value=$phi216.0)
2025-01-05 16:51:27,051 - DEBUG - on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
2025-01-05 16:51:27,053 - DEBUG - on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
2025-01-05 16:51:27,054 - DEBUG - on stmt: $phi218.1 = $216for_iter.2
2025-01-05 16:51:27,056 - DEBUG - on stmt: branch $216for_iter.3, 218, 238
2025-01-05 16:51:27,057 - DEBUG - ==== SSA block rewrite pass on 218
2025-01-05 16:51:27,058 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:27,059 - DEBUG - on stmt: i = $phi218.1
2025-01-05 16:51:27,060 - DEBUG - on stmt: $226binary_multiply.5 = i * _step
2025-01-05 16:51:27,061 - DEBUG - on stmt: $228binary_add.6 = val + $226binary_multiply.5
2025-01-05 16:51:27,062 - DEBUG - on stmt: arr[i] = $228binary_add.6
2025-01-05 16:51:27,064 - DEBUG - on stmt: jump 216
2025-01-05 16:51:27,065 - DEBUG - ==== SSA block rewrite pass on 238
2025-01-05 16:51:27,065 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014720B50>
2025-01-05 16:51:27,067 - DEBUG - on stmt: $240return_value.1 = cast(value=arr)
2025-01-05 16:51:27,068 - DEBUG - on stmt: return $240return_value.1
2025-01-05 16:51:27,141 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=4369)
           2	LOAD_GLOBAL(arg=0, lineno=4370)
           4	LOAD_FAST(arg=0, lineno=4370)
           6	LOAD_FAST(arg=1, lineno=4370)
           8	LOAD_DEREF(arg=0, lineno=4370)
          10	CALL_FUNCTION(arg=3, lineno=4370)
          12	RETURN_VALUE(arg=None, lineno=4370)
2025-01-05 16:51:27,146 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:51:27,148 - DEBUG - stack: []
2025-01-05 16:51:27,149 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:51:27,151 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=4369)
2025-01-05 16:51:27,152 - DEBUG - stack []
2025-01-05 16:51:27,153 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4370)
2025-01-05 16:51:27,155 - DEBUG - stack []
2025-01-05 16:51:27,156 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4370)
2025-01-05 16:51:27,157 - DEBUG - stack ['$2load_global.0']
2025-01-05 16:51:27,159 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4370)
2025-01-05 16:51:27,160 - DEBUG - stack ['$2load_global.0', '$shape4.1']
2025-01-05 16:51:27,161 - DEBUG - dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4370)
2025-01-05 16:51:27,162 - DEBUG - stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2025-01-05 16:51:27,164 - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4370)
2025-01-05 16:51:27,166 - DEBUG - stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2025-01-05 16:51:27,168 - DEBUG - dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4370)
2025-01-05 16:51:27,170 - DEBUG - stack ['$10call_function.4']
2025-01-05 16:51:27,171 - DEBUG - end state. edges=[]
2025-01-05 16:51:27,172 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:51:27,174 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-05 16:51:27,175 - DEBUG - defmap: {}
2025-01-05 16:51:27,177 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:27,178 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:27,180 - DEBUG - keep phismap: {}
2025-01-05 16:51:27,181 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-05 16:51:27,182 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:51:27,183 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:27,189 - DEBUG - label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(float64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4369), Var(dtype, arrayobj.py:4369), Var($8load_deref.3, arrayobj.py:4370)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2025-01-05 16:51:27,205 - DEBUG - ==== SSA block analysis pass on 0
2025-01-05 16:51:27,205 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000000001829DAC0>
2025-01-05 16:51:27,207 - DEBUG - on stmt: shape = arg(0, name=shape)
2025-01-05 16:51:27,208 - DEBUG - on stmt: dtype = arg(1, name=dtype)
2025-01-05 16:51:27,209 - DEBUG - on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2025-01-05 16:51:27,210 - DEBUG - on stmt: $8load_deref.3 = freevar(retty: array(float64, 1d, C))
2025-01-05 16:51:27,212 - DEBUG - on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4369), Var(dtype, arrayobj.py:4369), Var($8load_deref.3, arrayobj.py:4370)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:27,215 - DEBUG - on stmt: $12return_value.5 = cast(value=$10call_function.4)
2025-01-05 16:51:27,217 - DEBUG - on stmt: return $12return_value.5
2025-01-05 16:51:27,218 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x00000000182D7A60>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x00000000182D74C0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x00000000182D77C0>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0x00000000182D7B80>],
             'dtype': [<numba.core.ir.Assign object at 0x00000000182D7400>],
             'shape': [<numba.core.ir.Assign object at 0x00000000182BFFA0>]})
2025-01-05 16:51:27,224 - DEBUG - SSA violators set()
2025-01-05 16:51:27,292 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=4245)
           2	LOAD_FAST(arg=0, lineno=4248)
           4	LOAD_METHOD(arg=0, lineno=4248)
           6	LOAD_FAST(arg=1, lineno=4248)
           8	LOAD_FAST(arg=2, lineno=4248)
          10	CALL_METHOD(arg=2, lineno=4248)
          12	RETURN_VALUE(arg=None, lineno=4248)
2025-01-05 16:51:27,298 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:51:27,299 - DEBUG - stack: []
2025-01-05 16:51:27,300 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:51:27,302 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=4245)
2025-01-05 16:51:27,303 - DEBUG - stack []
2025-01-05 16:51:27,304 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4248)
2025-01-05 16:51:27,306 - DEBUG - stack []
2025-01-05 16:51:27,307 - DEBUG - dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=4248)
2025-01-05 16:51:27,309 - DEBUG - stack ['$arrtype2.0']
2025-01-05 16:51:27,310 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4248)
2025-01-05 16:51:27,311 - DEBUG - stack ['$4load_method.1']
2025-01-05 16:51:27,312 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=4248)
2025-01-05 16:51:27,314 - DEBUG - stack ['$4load_method.1', '$size6.2']
2025-01-05 16:51:27,315 - DEBUG - dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=4248)
2025-01-05 16:51:27,316 - DEBUG - stack ['$4load_method.1', '$size6.2', '$align8.3']
2025-01-05 16:51:27,318 - DEBUG - dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4248)
2025-01-05 16:51:27,320 - DEBUG - stack ['$10call_method.4']
2025-01-05 16:51:27,322 - DEBUG - end state. edges=[]
2025-01-05 16:51:27,323 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:51:27,325 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-05 16:51:27,327 - DEBUG - defmap: {}
2025-01-05 16:51:27,328 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:27,330 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:27,332 - DEBUG - keep phismap: {}
2025-01-05 16:51:27,333 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-05 16:51:27,334 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:51:27,335 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:27,340 - DEBUG - label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:4245), Var(align, arrayobj.py:4245)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2025-01-05 16:51:27,361 - DEBUG - ==== SSA block analysis pass on 0
2025-01-05 16:51:27,361 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000147E3610>
2025-01-05 16:51:27,363 - DEBUG - on stmt: arrtype = arg(0, name=arrtype)
2025-01-05 16:51:27,365 - DEBUG - on stmt: size = arg(1, name=size)
2025-01-05 16:51:27,365 - DEBUG - on stmt: align = arg(2, name=align)
2025-01-05 16:51:27,367 - DEBUG - on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
2025-01-05 16:51:27,368 - DEBUG - on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:4245), Var(align, arrayobj.py:4245)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:27,370 - DEBUG - on stmt: $12return_value.5 = cast(value=$10call_method.4)
2025-01-05 16:51:27,372 - DEBUG - on stmt: return $12return_value.5
2025-01-05 16:51:27,373 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x00000000147EACD0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x00000000147EAE20>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x00000000147EA8E0>],
             'align': [<numba.core.ir.Assign object at 0x00000000147EA640>],
             'arrtype': [<numba.core.ir.Assign object at 0x00000000147EA400>],
             'size': [<numba.core.ir.Assign object at 0x00000000147EA520>]})
2025-01-05 16:51:27,378 - DEBUG - SSA violators set()
2025-01-05 16:51:27,385 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=4240)
           2	LOAD_GLOBAL(arg=0, lineno=4241)
           4	LOAD_FAST(arg=1, lineno=4241)
           6	LOAD_FAST(arg=2, lineno=4241)
           8	CALL_FUNCTION(arg=2, lineno=4241)
          10	RETURN_VALUE(arg=None, lineno=4241)
2025-01-05 16:51:27,389 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:51:27,391 - DEBUG - stack: []
2025-01-05 16:51:27,392 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:51:27,393 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=4240)
2025-01-05 16:51:27,395 - DEBUG - stack []
2025-01-05 16:51:27,397 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4241)
2025-01-05 16:51:27,398 - DEBUG - stack []
2025-01-05 16:51:27,399 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=4241)
2025-01-05 16:51:27,401 - DEBUG - stack ['$2load_global.0']
2025-01-05 16:51:27,402 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=4241)
2025-01-05 16:51:27,403 - DEBUG - stack ['$2load_global.0', '$allocsize4.1']
2025-01-05 16:51:27,404 - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=4241)
2025-01-05 16:51:27,406 - DEBUG - stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
2025-01-05 16:51:27,407 - DEBUG - dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=4241)
2025-01-05 16:51:27,409 - DEBUG - stack ['$8call_function.3']
2025-01-05 16:51:27,410 - DEBUG - end state. edges=[]
2025-01-05 16:51:27,411 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:51:27,412 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-05 16:51:27,414 - DEBUG - defmap: {}
2025-01-05 16:51:27,415 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:27,416 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:27,417 - DEBUG - keep phismap: {}
2025-01-05 16:51:27,419 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-05 16:51:27,420 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:51:27,421 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:27,426 - DEBUG - label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:4240), Var(align, arrayobj.py:4240)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2025-01-05 16:51:27,441 - DEBUG - ==== SSA block analysis pass on 0
2025-01-05 16:51:27,442 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000147EE2B0>
2025-01-05 16:51:27,444 - DEBUG - on stmt: cls = arg(0, name=cls)
2025-01-05 16:51:27,445 - DEBUG - on stmt: allocsize = arg(1, name=allocsize)
2025-01-05 16:51:27,446 - DEBUG - on stmt: align = arg(2, name=align)
2025-01-05 16:51:27,447 - DEBUG - on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
2025-01-05 16:51:27,448 - DEBUG - on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:4240), Var(align, arrayobj.py:4240)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:27,451 - DEBUG - on stmt: $10return_value.4 = cast(value=$8call_function.3)
2025-01-05 16:51:27,452 - DEBUG - on stmt: return $10return_value.4
2025-01-05 16:51:27,454 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x00000000147FAD60>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x00000000147FA820>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x00000000147FAC10>],
             'align': [<numba.core.ir.Assign object at 0x00000000147FA6A0>],
             'allocsize': [<numba.core.ir.Assign object at 0x00000000147FA580>],
             'cls': [<numba.core.ir.Assign object at 0x00000000147EE1C0>]})
2025-01-05 16:51:27,460 - DEBUG - SSA violators set()
2025-01-05 16:51:27,870 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_CONST(arg=1, lineno=1)
           6	LOAD_FAST(arg=0, lineno=1)
           8	LOAD_CONST(arg=2, lineno=1)
          10	BINARY_MULTIPLY(arg=None, lineno=1)
          12	LOAD_FAST(arg=1, lineno=1)
          14	BINARY_TRUE_DIVIDE(arg=None, lineno=1)
          16	LOAD_CONST(arg=3, lineno=1)
          18	BINARY_POWER(arg=None, lineno=1)
          20	BINARY_MULTIPLY(arg=None, lineno=1)
          22	CALL_FUNCTION(arg=1, lineno=1)
          24	RETURN_VALUE(arg=None, lineno=1)
2025-01-05 16:51:27,876 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:51:27,878 - DEBUG - stack: []
2025-01-05 16:51:27,879 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:51:27,881 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2025-01-05 16:51:27,882 - DEBUG - stack []
2025-01-05 16:51:27,883 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
2025-01-05 16:51:27,885 - DEBUG - stack []
2025-01-05 16:51:27,886 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
2025-01-05 16:51:27,887 - DEBUG - stack ['$2load_global.0']
2025-01-05 16:51:27,888 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=1)
2025-01-05 16:51:27,890 - DEBUG - stack ['$2load_global.0', '$const4.1']
2025-01-05 16:51:27,891 - DEBUG - dispatch pc=8, inst=LOAD_CONST(arg=2, lineno=1)
2025-01-05 16:51:27,892 - DEBUG - stack ['$2load_global.0', '$const4.1', '$_50call_method_14_16.2']
2025-01-05 16:51:27,893 - DEBUG - dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=1)
2025-01-05 16:51:27,895 - DEBUG - stack ['$2load_global.0', '$const4.1', '$_50call_method_14_16.2', '$const8.3']
2025-01-05 16:51:27,896 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=1)
2025-01-05 16:51:27,898 - DEBUG - stack ['$2load_global.0', '$const4.1', '$10binary_multiply.4']
2025-01-05 16:51:27,899 - DEBUG - dispatch pc=14, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1)
2025-01-05 16:51:27,901 - DEBUG - stack ['$2load_global.0', '$const4.1', '$10binary_multiply.4', '$_60binary_subscr_19_112.5']
2025-01-05 16:51:27,903 - DEBUG - dispatch pc=16, inst=LOAD_CONST(arg=3, lineno=1)
2025-01-05 16:51:27,904 - DEBUG - stack ['$2load_global.0', '$const4.1', '$14binary_true_divide.6']
2025-01-05 16:51:27,905 - DEBUG - dispatch pc=18, inst=BINARY_POWER(arg=None, lineno=1)
2025-01-05 16:51:27,907 - DEBUG - stack ['$2load_global.0', '$const4.1', '$14binary_true_divide.6', '$const16.7']
2025-01-05 16:51:27,908 - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=1)
2025-01-05 16:51:27,910 - DEBUG - stack ['$2load_global.0', '$const4.1', '$18binary_power.8']
2025-01-05 16:51:27,911 - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=1)
2025-01-05 16:51:27,913 - DEBUG - stack ['$2load_global.0', '$20binary_multiply.9']
2025-01-05 16:51:27,915 - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=1)
2025-01-05 16:51:27,916 - DEBUG - stack ['$22call_function.10']
2025-01-05 16:51:27,917 - DEBUG - end state. edges=[]
2025-01-05 16:51:27,918 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:51:27,919 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-05 16:51:27,921 - DEBUG - defmap: {}
2025-01-05 16:51:27,922 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:27,923 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:27,925 - DEBUG - keep phismap: {}
2025-01-05 16:51:27,926 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-05 16:51:27,928 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:51:27,929 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$_50call_method_14_16.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$_50call_method_14_16.2', 'rhs': '$const8.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$_60binary_subscr_19_112.5'}), (14, {'lhs': '$10binary_multiply.4', 'rhs': '$_60binary_subscr_19_112.5', 'res': '$14binary_true_divide.6'}), (16, {'res': '$const16.7'}), (18, {'lhs': '$14binary_true_divide.6', 'rhs': '$const16.7', 'res': '$18binary_power.8'}), (20, {'lhs': '$const4.1', 'rhs': '$18binary_power.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$2load_global.0', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'retval': '$22call_function.10', 'castval': '$24return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:27,938 - DEBUG - label 0:
    _50call_method_14_1 = arg(0, name=_50call_method_14_1) ['_50call_method_14_1']
    _60binary_subscr_19_1 = arg(1, name=_60binary_subscr_19_1) ['_60binary_subscr_19_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x28ab34: <ufunc 'exp'>) ['$2load_global.0']
    $const4.1 = const(float, -0.5)           ['$const4.1']
    $const8.3 = const(float, 32.0)           ['$const8.3']
    $10binary_multiply.4 = _50call_method_14_1 * $const8.3 ['$10binary_multiply.4', '$const8.3', '_50call_method_14_1']
    $14binary_true_divide.6 = $10binary_multiply.4 / _60binary_subscr_19_1 ['$10binary_multiply.4', '$14binary_true_divide.6', '_60binary_subscr_19_1']
    $const16.7 = const(int, 2)               ['$const16.7']
    $18binary_power.8 = $14binary_true_divide.6 ** $const16.7 ['$14binary_true_divide.6', '$18binary_power.8', '$const16.7']
    $20binary_multiply.9 = $const4.1 * $18binary_power.8 ['$18binary_power.8', '$20binary_multiply.9', '$const4.1']
    $22call_function.10 = call $2load_global.0($20binary_multiply.9, func=$2load_global.0, args=[Var($20binary_multiply.9, beat.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$20binary_multiply.9', '$22call_function.10', '$2load_global.0']
    $24return_value.11 = cast(value=$22call_function.10) ['$22call_function.10', '$24return_value.11']
    return $24return_value.11                ['$24return_value.11']

2025-01-05 16:51:27,957 - DEBUG - ==== SSA block analysis pass on 0
2025-01-05 16:51:27,958 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014932C40>
2025-01-05 16:51:27,959 - DEBUG - on stmt: _50call_method_14_1 = arg(0, name=_50call_method_14_1)
2025-01-05 16:51:27,961 - DEBUG - on stmt: _60binary_subscr_19_1 = arg(1, name=_60binary_subscr_19_1)
2025-01-05 16:51:27,962 - DEBUG - on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x28ab34: <ufunc 'exp'>)
2025-01-05 16:51:27,964 - DEBUG - on stmt: $const4.1 = const(float, -0.5)
2025-01-05 16:51:27,965 - DEBUG - on stmt: $const8.3 = const(float, 32.0)
2025-01-05 16:51:27,967 - DEBUG - on stmt: $10binary_multiply.4 = _50call_method_14_1 * $const8.3
2025-01-05 16:51:27,968 - DEBUG - on stmt: $14binary_true_divide.6 = $10binary_multiply.4 / _60binary_subscr_19_1
2025-01-05 16:51:27,970 - DEBUG - on stmt: $const16.7 = const(int, 2)
2025-01-05 16:51:27,971 - DEBUG - on stmt: $18binary_power.8 = $14binary_true_divide.6 ** $const16.7
2025-01-05 16:51:27,972 - DEBUG - on stmt: $20binary_multiply.9 = $const4.1 * $18binary_power.8
2025-01-05 16:51:27,974 - DEBUG - on stmt: $22call_function.10 = call $2load_global.0($20binary_multiply.9, func=$2load_global.0, args=[Var($20binary_multiply.9, beat.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:27,976 - DEBUG - on stmt: $24return_value.11 = cast(value=$22call_function.10)
2025-01-05 16:51:27,977 - DEBUG - on stmt: return $24return_value.11
2025-01-05 16:51:27,979 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x000000001493A7C0>],
             '$14binary_true_divide.6': [<numba.core.ir.Assign object at 0x000000001493AA60>],
             '$18binary_power.8': [<numba.core.ir.Assign object at 0x000000001493AD60>],
             '$20binary_multiply.9': [<numba.core.ir.Assign object at 0x000000001493AEE0>],
             '$22call_function.10': [<numba.core.ir.Assign object at 0x000000001493E0D0>],
             '$24return_value.11': [<numba.core.ir.Assign object at 0x000000001493E220>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x000000001493A4C0>],
             '$const16.7': [<numba.core.ir.Assign object at 0x000000001493ABE0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x000000001493A340>],
             '$const8.3': [<numba.core.ir.Assign object at 0x000000001493A130>],
             '_50call_method_14_1': [<numba.core.ir.Assign object at 0x0000000014932FA0>],
             '_60binary_subscr_19_1': [<numba.core.ir.Assign object at 0x000000001493A640>]})
2025-01-05 16:51:27,991 - DEBUG - SSA violators set()
2025-01-05 16:51:28,021 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=214)
           2	LOAD_DEREF(arg=1, lineno=216)
           4	LOAD_CONST(arg=1, lineno=216)
           6	CALL_FUNCTION(arg=1, lineno=216)
           8	STORE_FAST(arg=2, lineno=216)
          10	LOAD_DEREF(arg=1, lineno=217)
          12	LOAD_FAST(arg=0, lineno=217)
          14	CALL_FUNCTION(arg=1, lineno=217)
          16	STORE_FAST(arg=0, lineno=217)
          18	LOAD_FAST(arg=1, lineno=218)
          20	LOAD_CONST(arg=2, lineno=218)
          22	COMPARE_OP(arg=0, lineno=218)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=218)
          26	LOAD_CONST(arg=3, lineno=219)
          28	STORE_FAST(arg=3, lineno=219)
          30	LOAD_FAST(arg=1, lineno=220)
          32	UNARY_NEGATIVE(arg=None, lineno=220)
          34	STORE_FAST(arg=4, lineno=220)
          36	LOAD_FAST(arg=4, lineno=221)
          38	LOAD_CONST(arg=2, lineno=221)
          40	COMPARE_OP(arg=0, lineno=221)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=221)
          44	LOAD_GLOBAL(arg=0, lineno=222)
          46	RAISE_VARARGS(arg=1, lineno=222)
>         48	LOAD_DEREF(arg=0, lineno=223)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=223)
          52	LOAD_FAST(arg=0, lineno=224)
          54	LOAD_CONST(arg=2, lineno=224)
          56	COMPARE_OP(arg=2, lineno=224)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=224)
          60	LOAD_DEREF(arg=2, lineno=225)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=225)
          64	LOAD_DEREF(arg=2, lineno=226)
          66	RETURN_VALUE(arg=None, lineno=226)
>         68	LOAD_GLOBAL(arg=1, lineno=228)
          70	LOAD_CONST(arg=4, lineno=228)
          72	CALL_FUNCTION(arg=1, lineno=228)
          74	RAISE_VARARGS(arg=1, lineno=228)
>         76	LOAD_FAST(arg=0, lineno=229)
          78	LOAD_CONST(arg=1, lineno=229)
          80	COMPARE_OP(arg=3, lineno=229)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=229)
          84	LOAD_FAST(arg=0, lineno=229)
          86	LOAD_CONST(arg=5, lineno=229)
          88	COMPARE_OP(arg=3, lineno=229)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=229)
          92	LOAD_CONST(arg=2, lineno=230)
          94	RETURN_VALUE(arg=None, lineno=230)
          96	JUMP_FORWARD(arg=8, lineno=230)
>         98	LOAD_CONST(arg=6, lineno=232)
         100	STORE_FAST(arg=3, lineno=232)
         102	LOAD_FAST(arg=1, lineno=233)
         104	STORE_FAST(arg=4, lineno=233)
>        106	LOAD_FAST(arg=4, lineno=234)
         108	LOAD_CONST(arg=7, lineno=234)
         110	COMPARE_OP(arg=4, lineno=234)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=234)
         114	LOAD_GLOBAL(arg=2, lineno=236)
         116	LOAD_METHOD(arg=3, lineno=236)
         118	LOAD_FAST(arg=0, lineno=236)
         120	LOAD_GLOBAL(arg=4, lineno=236)
         122	LOAD_FAST(arg=1, lineno=236)
         124	CALL_FUNCTION(arg=1, lineno=236)
         126	CALL_METHOD(arg=2, lineno=236)
         128	RETURN_VALUE(arg=None, lineno=236)
>        130	LOAD_FAST(arg=4, lineno=237)
         132	LOAD_CONST(arg=2, lineno=237)
         134	COMPARE_OP(arg=3, lineno=237)
         136	POP_JUMP_IF_FALSE(arg=172, lineno=237)
         138	LOAD_FAST(arg=4, lineno=238)
         140	LOAD_CONST(arg=1, lineno=238)
         142	BINARY_AND(arg=None, lineno=238)
         144	POP_JUMP_IF_FALSE(arg=154, lineno=238)
         146	LOAD_FAST(arg=2, lineno=239)
         148	LOAD_FAST(arg=0, lineno=239)
         150	INPLACE_MULTIPLY(arg=None, lineno=239)
         152	STORE_FAST(arg=2, lineno=239)
>        154	LOAD_FAST(arg=4, lineno=240)
         156	LOAD_CONST(arg=1, lineno=240)
         158	INPLACE_RSHIFT(arg=None, lineno=240)
         160	STORE_FAST(arg=4, lineno=240)
         162	LOAD_FAST(arg=0, lineno=241)
         164	LOAD_FAST(arg=0, lineno=241)
         166	INPLACE_MULTIPLY(arg=None, lineno=241)
         168	STORE_FAST(arg=0, lineno=241)
         170	JUMP_ABSOLUTE(arg=130, lineno=241)
>        172	LOAD_FAST(arg=3, lineno=243)
         174	POP_JUMP_IF_FALSE(arg=184, lineno=243)
         176	LOAD_CONST(arg=8, lineno=243)
         178	LOAD_FAST(arg=2, lineno=243)
         180	BINARY_TRUE_DIVIDE(arg=None, lineno=243)
         182	RETURN_VALUE(arg=None, lineno=243)
>        184	LOAD_FAST(arg=2, lineno=243)
         186	RETURN_VALUE(arg=None, lineno=243)
2025-01-05 16:51:28,059 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:51:28,060 - DEBUG - stack: []
2025-01-05 16:51:28,061 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:51:28,063 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=214)
2025-01-05 16:51:28,065 - DEBUG - stack []
2025-01-05 16:51:28,066 - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=216)
2025-01-05 16:51:28,067 - DEBUG - stack []
2025-01-05 16:51:28,068 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=216)
2025-01-05 16:51:28,070 - DEBUG - stack ['$2load_deref.0']
2025-01-05 16:51:28,071 - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=216)
2025-01-05 16:51:28,072 - DEBUG - stack ['$2load_deref.0', '$const4.1']
2025-01-05 16:51:28,074 - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=2, lineno=216)
2025-01-05 16:51:28,075 - DEBUG - stack ['$6call_function.2']
2025-01-05 16:51:28,076 - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=217)
2025-01-05 16:51:28,077 - DEBUG - stack []
2025-01-05 16:51:28,078 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=217)
2025-01-05 16:51:28,081 - DEBUG - stack ['$10load_deref.3']
2025-01-05 16:51:28,082 - DEBUG - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=217)
2025-01-05 16:51:28,084 - DEBUG - stack ['$10load_deref.3', '$a12.4']
2025-01-05 16:51:28,085 - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=0, lineno=217)
2025-01-05 16:51:28,086 - DEBUG - stack ['$14call_function.5']
2025-01-05 16:51:28,087 - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=218)
2025-01-05 16:51:28,088 - DEBUG - stack []
2025-01-05 16:51:28,090 - DEBUG - dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=218)
2025-01-05 16:51:28,091 - DEBUG - stack ['$b18.6']
2025-01-05 16:51:28,092 - DEBUG - dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=218)
2025-01-05 16:51:28,093 - DEBUG - stack ['$b18.6', '$const20.7']
2025-01-05 16:51:28,095 - DEBUG - dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=218)
2025-01-05 16:51:28,096 - DEBUG - stack ['$22compare_op.8']
2025-01-05 16:51:28,097 - DEBUG - end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:28,099 - DEBUG - pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
2025-01-05 16:51:28,100 - DEBUG - stack: []
2025-01-05 16:51:28,101 - DEBUG - state.pc_initial: State(pc_initial=26 nstack_initial=0)
2025-01-05 16:51:28,103 - DEBUG - dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=219)
2025-01-05 16:51:28,104 - DEBUG - stack []
2025-01-05 16:51:28,106 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=3, lineno=219)
2025-01-05 16:51:28,107 - DEBUG - stack ['$const26.0']
2025-01-05 16:51:28,108 - DEBUG - dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=220)
2025-01-05 16:51:28,110 - DEBUG - stack []
2025-01-05 16:51:28,111 - DEBUG - dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=220)
2025-01-05 16:51:28,112 - DEBUG - stack ['$b30.1']
2025-01-05 16:51:28,113 - DEBUG - dispatch pc=34, inst=STORE_FAST(arg=4, lineno=220)
2025-01-05 16:51:28,115 - DEBUG - stack ['$32unary_negative.2']
2025-01-05 16:51:28,116 - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=221)
2025-01-05 16:51:28,118 - DEBUG - stack []
2025-01-05 16:51:28,119 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=221)
2025-01-05 16:51:28,120 - DEBUG - stack ['$exp36.3']
2025-01-05 16:51:28,121 - DEBUG - dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=221)
2025-01-05 16:51:28,123 - DEBUG - stack ['$exp36.3', '$const38.4']
2025-01-05 16:51:28,124 - DEBUG - dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=221)
2025-01-05 16:51:28,125 - DEBUG - stack ['$40compare_op.5']
2025-01-05 16:51:28,126 - DEBUG - end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:28,128 - DEBUG - pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
2025-01-05 16:51:28,130 - DEBUG - stack: []
2025-01-05 16:51:28,131 - DEBUG - state.pc_initial: State(pc_initial=98 nstack_initial=0)
2025-01-05 16:51:28,133 - DEBUG - dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=232)
2025-01-05 16:51:28,134 - DEBUG - stack []
2025-01-05 16:51:28,135 - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=3, lineno=232)
2025-01-05 16:51:28,137 - DEBUG - stack ['$const98.0']
2025-01-05 16:51:28,138 - DEBUG - dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=233)
2025-01-05 16:51:28,139 - DEBUG - stack []
2025-01-05 16:51:28,141 - DEBUG - dispatch pc=104, inst=STORE_FAST(arg=4, lineno=233)
2025-01-05 16:51:28,142 - DEBUG - stack ['$b102.1']
2025-01-05 16:51:28,143 - DEBUG - end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:28,145 - DEBUG - pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2025-01-05 16:51:28,147 - DEBUG - stack: []
2025-01-05 16:51:28,148 - DEBUG - state.pc_initial: State(pc_initial=44 nstack_initial=0)
2025-01-05 16:51:28,149 - DEBUG - dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=222)
2025-01-05 16:51:28,151 - DEBUG - stack []
2025-01-05 16:51:28,152 - DEBUG - dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=222)
2025-01-05 16:51:28,153 - DEBUG - stack ['$44load_global.0']
2025-01-05 16:51:28,155 - DEBUG - end state. edges=[]
2025-01-05 16:51:28,156 - DEBUG - pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2025-01-05 16:51:28,158 - DEBUG - stack: []
2025-01-05 16:51:28,159 - DEBUG - state.pc_initial: State(pc_initial=48 nstack_initial=0)
2025-01-05 16:51:28,160 - DEBUG - dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=223)
2025-01-05 16:51:28,162 - DEBUG - stack []
2025-01-05 16:51:28,164 - DEBUG - dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=223)
2025-01-05 16:51:28,165 - DEBUG - stack ['$48load_deref.0']
2025-01-05 16:51:28,166 - DEBUG - end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:28,168 - DEBUG - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2025-01-05 16:51:28,170 - DEBUG - stack: []
2025-01-05 16:51:28,171 - DEBUG - state.pc_initial: State(pc_initial=106 nstack_initial=0)
2025-01-05 16:51:28,172 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=234)
2025-01-05 16:51:28,174 - DEBUG - stack []
2025-01-05 16:51:28,175 - DEBUG - dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=234)
2025-01-05 16:51:28,176 - DEBUG - stack ['$exp106.0']
2025-01-05 16:51:28,177 - DEBUG - dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=234)
2025-01-05 16:51:28,179 - DEBUG - stack ['$exp106.0', '$const108.1']
2025-01-05 16:51:28,180 - DEBUG - dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=234)
2025-01-05 16:51:28,182 - DEBUG - stack ['$110compare_op.2']
2025-01-05 16:51:28,183 - DEBUG - end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:28,184 - DEBUG - pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2025-01-05 16:51:28,186 - DEBUG - stack: []
2025-01-05 16:51:28,187 - DEBUG - state.pc_initial: State(pc_initial=52 nstack_initial=0)
2025-01-05 16:51:28,189 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=224)
2025-01-05 16:51:28,190 - DEBUG - stack []
2025-01-05 16:51:28,191 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=224)
2025-01-05 16:51:28,193 - DEBUG - stack ['$a52.0']
2025-01-05 16:51:28,194 - DEBUG - dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=224)
2025-01-05 16:51:28,195 - DEBUG - stack ['$a52.0', '$const54.1']
2025-01-05 16:51:28,197 - DEBUG - dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=224)
2025-01-05 16:51:28,198 - DEBUG - stack ['$56compare_op.2']
2025-01-05 16:51:28,199 - DEBUG - end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:28,200 - DEBUG - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2025-01-05 16:51:28,203 - DEBUG - pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2025-01-05 16:51:28,206 - DEBUG - stack: []
2025-01-05 16:51:28,207 - DEBUG - state.pc_initial: State(pc_initial=114 nstack_initial=0)
2025-01-05 16:51:28,208 - DEBUG - dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=236)
2025-01-05 16:51:28,210 - DEBUG - stack []
2025-01-05 16:51:28,211 - DEBUG - dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=236)
2025-01-05 16:51:28,212 - DEBUG - stack ['$114load_global.0']
2025-01-05 16:51:28,213 - DEBUG - dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=236)
2025-01-05 16:51:28,215 - DEBUG - stack ['$116load_method.1']
2025-01-05 16:51:28,216 - DEBUG - dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=236)
2025-01-05 16:51:28,217 - DEBUG - stack ['$116load_method.1', '$a118.2']
2025-01-05 16:51:28,218 - DEBUG - dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=236)
2025-01-05 16:51:28,219 - DEBUG - stack ['$116load_method.1', '$a118.2', '$120load_global.3']
2025-01-05 16:51:28,221 - DEBUG - dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=236)
2025-01-05 16:51:28,223 - DEBUG - stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
2025-01-05 16:51:28,224 - DEBUG - dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=236)
2025-01-05 16:51:28,226 - DEBUG - stack ['$116load_method.1', '$a118.2', '$124call_function.5']
2025-01-05 16:51:28,228 - DEBUG - dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=236)
2025-01-05 16:51:28,229 - DEBUG - stack ['$126call_method.6']
2025-01-05 16:51:28,230 - DEBUG - end state. edges=[]
2025-01-05 16:51:28,232 - DEBUG - pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2025-01-05 16:51:28,234 - DEBUG - stack: []
2025-01-05 16:51:28,235 - DEBUG - state.pc_initial: State(pc_initial=130 nstack_initial=0)
2025-01-05 16:51:28,236 - DEBUG - dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=237)
2025-01-05 16:51:28,238 - DEBUG - stack []
2025-01-05 16:51:28,239 - DEBUG - dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=237)
2025-01-05 16:51:28,240 - DEBUG - stack ['$exp130.0']
2025-01-05 16:51:28,241 - DEBUG - dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=237)
2025-01-05 16:51:28,243 - DEBUG - stack ['$exp130.0', '$const132.1']
2025-01-05 16:51:28,244 - DEBUG - dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=237)
2025-01-05 16:51:28,245 - DEBUG - stack ['$134compare_op.2']
2025-01-05 16:51:28,246 - DEBUG - end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:28,248 - DEBUG - pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
2025-01-05 16:51:28,250 - DEBUG - stack: []
2025-01-05 16:51:28,251 - DEBUG - state.pc_initial: State(pc_initial=60 nstack_initial=0)
2025-01-05 16:51:28,253 - DEBUG - dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=225)
2025-01-05 16:51:28,254 - DEBUG - stack []
2025-01-05 16:51:28,255 - DEBUG - dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=225)
2025-01-05 16:51:28,257 - DEBUG - stack ['$60load_deref.0']
2025-01-05 16:51:28,258 - DEBUG - end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:28,260 - DEBUG - pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
2025-01-05 16:51:28,262 - DEBUG - stack: []
2025-01-05 16:51:28,264 - DEBUG - state.pc_initial: State(pc_initial=76 nstack_initial=0)
2025-01-05 16:51:28,265 - DEBUG - dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=229)
2025-01-05 16:51:28,267 - DEBUG - stack []
2025-01-05 16:51:28,268 - DEBUG - dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=229)
2025-01-05 16:51:28,269 - DEBUG - stack ['$a76.0']
2025-01-05 16:51:28,270 - DEBUG - dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=229)
2025-01-05 16:51:28,272 - DEBUG - stack ['$a76.0', '$const78.1']
2025-01-05 16:51:28,273 - DEBUG - dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=229)
2025-01-05 16:51:28,274 - DEBUG - stack ['$80compare_op.2']
2025-01-05 16:51:28,275 - DEBUG - end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:28,277 - DEBUG - pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2025-01-05 16:51:28,279 - DEBUG - stack: []
2025-01-05 16:51:28,281 - DEBUG - state.pc_initial: State(pc_initial=138 nstack_initial=0)
2025-01-05 16:51:28,282 - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=238)
2025-01-05 16:51:28,284 - DEBUG - stack []
2025-01-05 16:51:28,285 - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=238)
2025-01-05 16:51:28,286 - DEBUG - stack ['$exp138.0']
2025-01-05 16:51:28,287 - DEBUG - dispatch pc=142, inst=BINARY_AND(arg=None, lineno=238)
2025-01-05 16:51:28,289 - DEBUG - stack ['$exp138.0', '$const140.1']
2025-01-05 16:51:28,290 - DEBUG - dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=238)
2025-01-05 16:51:28,291 - DEBUG - stack ['$142binary_and.2']
2025-01-05 16:51:28,292 - DEBUG - end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:28,294 - DEBUG - pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2025-01-05 16:51:28,297 - DEBUG - stack: []
2025-01-05 16:51:28,298 - DEBUG - state.pc_initial: State(pc_initial=172 nstack_initial=0)
2025-01-05 16:51:28,300 - DEBUG - dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=243)
2025-01-05 16:51:28,302 - DEBUG - stack []
2025-01-05 16:51:28,303 - DEBUG - dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=243)
2025-01-05 16:51:28,304 - DEBUG - stack ['$invert172.0']
2025-01-05 16:51:28,305 - DEBUG - end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:28,307 - DEBUG - pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
2025-01-05 16:51:28,311 - DEBUG - stack: []
2025-01-05 16:51:28,312 - DEBUG - state.pc_initial: State(pc_initial=64 nstack_initial=0)
2025-01-05 16:51:28,314 - DEBUG - dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=226)
2025-01-05 16:51:28,316 - DEBUG - stack []
2025-01-05 16:51:28,317 - DEBUG - dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=226)
2025-01-05 16:51:28,318 - DEBUG - stack ['$64load_deref.0']
2025-01-05 16:51:28,319 - DEBUG - end state. edges=[]
2025-01-05 16:51:28,320 - DEBUG - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
2025-01-05 16:51:28,323 - DEBUG - stack: []
2025-01-05 16:51:28,325 - DEBUG - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2025-01-05 16:51:28,326 - DEBUG - dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=228)
2025-01-05 16:51:28,328 - DEBUG - stack []
2025-01-05 16:51:28,329 - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=228)
2025-01-05 16:51:28,330 - DEBUG - stack ['$68load_global.0']
2025-01-05 16:51:28,332 - DEBUG - dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=228)
2025-01-05 16:51:28,333 - DEBUG - stack ['$68load_global.0', '$const70.1']
2025-01-05 16:51:28,335 - DEBUG - dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=228)
2025-01-05 16:51:28,336 - DEBUG - stack ['$72call_function.2']
2025-01-05 16:51:28,337 - DEBUG - end state. edges=[]
2025-01-05 16:51:28,338 - DEBUG - pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
2025-01-05 16:51:28,340 - DEBUG - stack: []
2025-01-05 16:51:28,341 - DEBUG - state.pc_initial: State(pc_initial=84 nstack_initial=0)
2025-01-05 16:51:28,343 - DEBUG - dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=229)
2025-01-05 16:51:28,344 - DEBUG - stack []
2025-01-05 16:51:28,346 - DEBUG - dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=229)
2025-01-05 16:51:28,347 - DEBUG - stack ['$a84.0']
2025-01-05 16:51:28,348 - DEBUG - dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=229)
2025-01-05 16:51:28,350 - DEBUG - stack ['$a84.0', '$const86.1']
2025-01-05 16:51:28,351 - DEBUG - dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=229)
2025-01-05 16:51:28,352 - DEBUG - stack ['$88compare_op.2']
2025-01-05 16:51:28,353 - DEBUG - end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:28,355 - DEBUG - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2025-01-05 16:51:28,358 - DEBUG - pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2025-01-05 16:51:28,361 - DEBUG - stack: []
2025-01-05 16:51:28,362 - DEBUG - state.pc_initial: State(pc_initial=146 nstack_initial=0)
2025-01-05 16:51:28,364 - DEBUG - dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=239)
2025-01-05 16:51:28,365 - DEBUG - stack []
2025-01-05 16:51:28,367 - DEBUG - dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=239)
2025-01-05 16:51:28,368 - DEBUG - stack ['$r146.0']
2025-01-05 16:51:28,369 - DEBUG - dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=239)
2025-01-05 16:51:28,370 - DEBUG - stack ['$r146.0', '$a148.1']
2025-01-05 16:51:28,371 - DEBUG - dispatch pc=152, inst=STORE_FAST(arg=2, lineno=239)
2025-01-05 16:51:28,373 - DEBUG - stack ['$150inplace_multiply.2']
2025-01-05 16:51:28,374 - DEBUG - end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:28,375 - DEBUG - pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2025-01-05 16:51:28,378 - DEBUG - stack: []
2025-01-05 16:51:28,379 - DEBUG - state.pc_initial: State(pc_initial=154 nstack_initial=0)
2025-01-05 16:51:28,381 - DEBUG - dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=240)
2025-01-05 16:51:28,382 - DEBUG - stack []
2025-01-05 16:51:28,384 - DEBUG - dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=240)
2025-01-05 16:51:28,385 - DEBUG - stack ['$exp154.0']
2025-01-05 16:51:28,387 - DEBUG - dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=240)
2025-01-05 16:51:28,388 - DEBUG - stack ['$exp154.0', '$const156.1']
2025-01-05 16:51:28,389 - DEBUG - dispatch pc=160, inst=STORE_FAST(arg=4, lineno=240)
2025-01-05 16:51:28,390 - DEBUG - stack ['$158inplace_rshift.2']
2025-01-05 16:51:28,391 - DEBUG - dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=241)
2025-01-05 16:51:28,393 - DEBUG - stack []
2025-01-05 16:51:28,394 - DEBUG - dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=241)
2025-01-05 16:51:28,395 - DEBUG - stack ['$a162.3']
2025-01-05 16:51:28,397 - DEBUG - dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=241)
2025-01-05 16:51:28,398 - DEBUG - stack ['$a162.3', '$a164.4']
2025-01-05 16:51:28,399 - DEBUG - dispatch pc=168, inst=STORE_FAST(arg=0, lineno=241)
2025-01-05 16:51:28,400 - DEBUG - stack ['$166inplace_multiply.5']
2025-01-05 16:51:28,402 - DEBUG - dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=241)
2025-01-05 16:51:28,403 - DEBUG - stack []
2025-01-05 16:51:28,404 - DEBUG - end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:28,406 - DEBUG - pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2025-01-05 16:51:28,408 - DEBUG - stack: []
2025-01-05 16:51:28,409 - DEBUG - state.pc_initial: State(pc_initial=176 nstack_initial=0)
2025-01-05 16:51:28,411 - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=243)
2025-01-05 16:51:28,413 - DEBUG - stack []
2025-01-05 16:51:28,414 - DEBUG - dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=243)
2025-01-05 16:51:28,415 - DEBUG - stack ['$const176.0']
2025-01-05 16:51:28,416 - DEBUG - dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=243)
2025-01-05 16:51:28,418 - DEBUG - stack ['$const176.0', '$r178.1']
2025-01-05 16:51:28,419 - DEBUG - dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=243)
2025-01-05 16:51:28,420 - DEBUG - stack ['$180binary_true_divide.2']
2025-01-05 16:51:28,421 - DEBUG - end state. edges=[]
2025-01-05 16:51:28,422 - DEBUG - pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2025-01-05 16:51:28,425 - DEBUG - stack: []
2025-01-05 16:51:28,426 - DEBUG - state.pc_initial: State(pc_initial=184 nstack_initial=0)
2025-01-05 16:51:28,427 - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=243)
2025-01-05 16:51:28,429 - DEBUG - stack []
2025-01-05 16:51:28,430 - DEBUG - dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=243)
2025-01-05 16:51:28,432 - DEBUG - stack ['$r184.0']
2025-01-05 16:51:28,433 - DEBUG - end state. edges=[]
2025-01-05 16:51:28,434 - DEBUG - pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2025-01-05 16:51:28,436 - DEBUG - stack: []
2025-01-05 16:51:28,437 - DEBUG - state.pc_initial: State(pc_initial=92 nstack_initial=0)
2025-01-05 16:51:28,438 - DEBUG - dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=230)
2025-01-05 16:51:28,440 - DEBUG - stack []
2025-01-05 16:51:28,441 - DEBUG - dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=230)
2025-01-05 16:51:28,442 - DEBUG - stack ['$const92.0']
2025-01-05 16:51:28,443 - DEBUG - end state. edges=[]
2025-01-05 16:51:28,444 - DEBUG - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2025-01-05 16:51:28,446 - DEBUG - pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2025-01-05 16:51:28,448 - DEBUG - pending: deque([State(pc_initial=130 nstack_initial=0)])
2025-01-05 16:51:28,450 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:51:28,451 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=172 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set()})
2025-01-05 16:51:28,466 - DEBUG - defmap: {}
2025-01-05 16:51:28,467 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:28,468 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:28,469 - DEBUG - keep phismap: {}
2025-01-05 16:51:28,471 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-05 16:51:28,472 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:51:28,473 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
2025-01-05 16:51:28,479 - DEBUG - block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
2025-01-05 16:51:28,484 - DEBUG - block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:28,488 - DEBUG - block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
2025-01-05 16:51:28,491 - DEBUG - block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
2025-01-05 16:51:28,495 - DEBUG - block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
2025-01-05 16:51:28,499 - DEBUG - block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:28,502 - DEBUG - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:28,506 - DEBUG - block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
2025-01-05 16:51:28,509 - DEBUG - block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
2025-01-05 16:51:28,513 - DEBUG - block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:28,516 - DEBUG - block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
2025-01-05 16:51:28,520 - DEBUG - block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
2025-01-05 16:51:28,524 - DEBUG - block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:28,529 - DEBUG - block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
2025-01-05 16:51:28,534 - DEBUG - block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
2025-01-05 16:51:28,538 - DEBUG - block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
2025-01-05 16:51:28,541 - DEBUG - block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
2025-01-05 16:51:28,548 - DEBUG - block_infos State(pc_initial=172 nstack_initial=0):
AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
2025-01-05 16:51:28,550 - DEBUG - block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:28,555 - DEBUG - block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:28,562 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float64)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float64)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 106                  ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 106                  ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 106                  ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' (built-in)>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 172                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    jump 130                                 []
label 172:
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None) ['$174pred', 'bool174', 'invert']
    branch $174pred, 176, 184                ['$174pred']
label 176:
    $const176.0 = const(float, 1.0)          ['$const176.0']
    $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
    $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
    return $182return_value.3                ['$182return_value.3']
label 184:
    $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
    return $186return_value.1                ['$186return_value.1']

2025-01-05 16:51:28,731 - DEBUG - ==== SSA block analysis pass on 0
2025-01-05 16:51:28,732 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000000001496AD00>
2025-01-05 16:51:28,734 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-05 16:51:28,735 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-05 16:51:28,736 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float64)
2025-01-05 16:51:28,737 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-05 16:51:28,738 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,740 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float64)
2025-01-05 16:51:28,742 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,744 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-05 16:51:28,746 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-05 16:51:28,747 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:28,748 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,750 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-05 16:51:28,752 - DEBUG - ==== SSA block analysis pass on 26
2025-01-05 16:51:28,752 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000000001496AD00>
2025-01-05 16:51:28,754 - DEBUG - on stmt: invert = const(bool, True)
2025-01-05 16:51:28,755 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-05 16:51:28,756 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-05 16:51:28,757 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-05 16:51:28,758 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-05 16:51:28,760 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,762 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-05 16:51:28,763 - DEBUG - ==== SSA block analysis pass on 44
2025-01-05 16:51:28,765 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000000001496AD00>
2025-01-05 16:51:28,766 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-05 16:51:28,768 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-05 16:51:28,770 - DEBUG - ==== SSA block analysis pass on 48
2025-01-05 16:51:28,771 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000000001496AD00>
2025-01-05 16:51:28,772 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-05 16:51:28,774 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-05 16:51:28,776 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,778 - DEBUG - on stmt: jump 106
2025-01-05 16:51:28,779 - DEBUG - ==== SSA block analysis pass on 98
2025-01-05 16:51:28,780 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000000001496AD00>
2025-01-05 16:51:28,781 - DEBUG - on stmt: invert = const(bool, False)
2025-01-05 16:51:28,782 - DEBUG - on stmt: exp = b
2025-01-05 16:51:28,783 - DEBUG - on stmt: jump 106
2025-01-05 16:51:28,784 - DEBUG - ==== SSA block analysis pass on 106
2025-01-05 16:51:28,785 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000000001496AD00>
2025-01-05 16:51:28,786 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-05 16:51:28,788 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-05 16:51:28,789 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-05 16:51:28,790 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,792 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-05 16:51:28,793 - DEBUG - ==== SSA block analysis pass on 114
2025-01-05 16:51:28,794 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000000001496AD00>
2025-01-05 16:51:28,796 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:28,797 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-05 16:51:28,799 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-05 16:51:28,801 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,803 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,806 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-05 16:51:28,808 - DEBUG - on stmt: return $128return_value.7
2025-01-05 16:51:28,809 - DEBUG - ==== SSA block analysis pass on 130
2025-01-05 16:51:28,810 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000000001496AD00>
2025-01-05 16:51:28,811 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-05 16:51:28,812 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-05 16:51:28,813 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-05 16:51:28,815 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,817 - DEBUG - on stmt: branch $136pred, 138, 172
2025-01-05 16:51:28,818 - DEBUG - ==== SSA block analysis pass on 138
2025-01-05 16:51:28,819 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000000001496AD00>
2025-01-05 16:51:28,821 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-05 16:51:28,822 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-05 16:51:28,823 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-05 16:51:28,824 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,826 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-05 16:51:28,828 - DEBUG - ==== SSA block analysis pass on 146
2025-01-05 16:51:28,829 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000000001496AD00>
2025-01-05 16:51:28,830 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:28,833 - DEBUG - on stmt: r = $150inplace_multiply.2
2025-01-05 16:51:28,834 - DEBUG - on stmt: jump 154
2025-01-05 16:51:28,835 - DEBUG - ==== SSA block analysis pass on 154
2025-01-05 16:51:28,836 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000000001496AD00>
2025-01-05 16:51:28,837 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-05 16:51:28,838 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:28,840 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-05 16:51:28,842 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:28,844 - DEBUG - on stmt: a.1 = $166inplace_multiply.5
2025-01-05 16:51:28,845 - DEBUG - on stmt: jump 130
2025-01-05 16:51:28,846 - DEBUG - ==== SSA block analysis pass on 172
2025-01-05 16:51:28,847 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000000001496AD00>
2025-01-05 16:51:28,849 - DEBUG - on stmt: bool174 = global(bool: <class 'bool'>)
2025-01-05 16:51:28,851 - DEBUG - on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,853 - DEBUG - on stmt: branch $174pred, 176, 184
2025-01-05 16:51:28,854 - DEBUG - ==== SSA block analysis pass on 176
2025-01-05 16:51:28,855 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000000001496AD00>
2025-01-05 16:51:28,856 - DEBUG - on stmt: $const176.0 = const(float, 1.0)
2025-01-05 16:51:28,857 - DEBUG - on stmt: $180binary_true_divide.2 = $const176.0 / r
2025-01-05 16:51:28,859 - DEBUG - on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2025-01-05 16:51:28,860 - DEBUG - on stmt: return $182return_value.3
2025-01-05 16:51:28,861 - DEBUG - ==== SSA block analysis pass on 184
2025-01-05 16:51:28,862 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000000001496AD00>
2025-01-05 16:51:28,864 - DEBUG - on stmt: $186return_value.1 = cast(value=r)
2025-01-05 16:51:28,865 - DEBUG - on stmt: return $186return_value.1
2025-01-05 16:51:28,867 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [<numba.core.ir.Assign object at 0x0000000014957550>],
             '$110compare_op.2': [<numba.core.ir.Assign object at 0x00000000149617F0>],
             '$112pred': [<numba.core.ir.Assign object at 0x0000000014961A90>],
             '$114load_global.0': [<numba.core.ir.Assign object at 0x0000000014961CD0>],
             '$116load_method.1': [<numba.core.ir.Assign object at 0x0000000014961E50>],
             '$120load_global.3': [<numba.core.ir.Assign object at 0x0000000014963130>],
             '$124call_function.5': [<numba.core.ir.Assign object at 0x0000000014963400>],
             '$126call_method.6': [<numba.core.ir.Assign object at 0x0000000014963580>],
             '$128return_value.7': [<numba.core.ir.Assign object at 0x00000000149636D0>],
             '$134compare_op.2': [<numba.core.ir.Assign object at 0x0000000014963B50>],
             '$136pred': [<numba.core.ir.Assign object at 0x0000000014963DF0>],
             '$142binary_and.2': [<numba.core.ir.Assign object at 0x0000000014965310>],
             '$144pred': [<numba.core.ir.Assign object at 0x00000000149655B0>],
             '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x0000000014965A30>],
             '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x0000000014965F70>],
             '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x0000000014968430>],
             '$174pred': [<numba.core.ir.Assign object at 0x0000000014968910>],
             '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x0000000014968DF0>],
             '$182return_value.3': [<numba.core.ir.Assign object at 0x0000000014968F70>],
             '$186return_value.1': [<numba.core.ir.Assign object at 0x000000001496A310>],
             '$22compare_op.8': [<numba.core.ir.Assign object at 0x0000000014957D30>],
             '$24pred': [<numba.core.ir.Assign object at 0x0000000014957FD0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x00000000149463A0>],
             '$40compare_op.5': [<numba.core.ir.Assign object at 0x0000000014958A30>],
             '$42pred': [<numba.core.ir.Assign object at 0x0000000014958CD0>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x0000000014958DF0>],
             '$48load_deref.0': [<numba.core.ir.Assign object at 0x000000001495A130>],
             '$50pred': [<numba.core.ir.Assign object at 0x000000001495A3D0>],
             '$const108.1': [<numba.core.ir.Assign object at 0x0000000014961670>],
             '$const132.1': [<numba.core.ir.Assign object at 0x00000000149639D0>],
             '$const140.1': [<numba.core.ir.Assign object at 0x0000000014965190>],
             '$const156.1': [<numba.core.ir.Assign object at 0x0000000014965DF0>],
             '$const176.0': [<numba.core.ir.Assign object at 0x0000000014968B50>],
             '$const20.7': [<numba.core.ir.Assign object at 0x0000000014957BB0>],
             '$const38.4': [<numba.core.ir.Assign object at 0x00000000149588B0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000000014957130>],
             'a': [<numba.core.ir.Assign object at 0x00000000149465B0>],
             'a.1': [<numba.core.ir.Assign object at 0x0000000014957820>,
                     <numba.core.ir.Assign object at 0x00000000149684F0>],
             'b': [<numba.core.ir.Assign object at 0x00000000149465E0>],
             'bool112': [<numba.core.ir.Assign object at 0x0000000014961970>],
             'bool136': [<numba.core.ir.Assign object at 0x0000000014963CD0>],
             'bool144': [<numba.core.ir.Assign object at 0x0000000014965490>],
             'bool174': [<numba.core.ir.Assign object at 0x00000000149687F0>],
             'bool24': [<numba.core.ir.Assign object at 0x0000000014957EB0>],
             'bool42': [<numba.core.ir.Assign object at 0x0000000014958BB0>],
             'bool50': [<numba.core.ir.Assign object at 0x000000001495A2B0>],
             'exp': [<numba.core.ir.Assign object at 0x00000000149584F0>,
                     <numba.core.ir.Assign object at 0x00000000149613D0>,
                     <numba.core.ir.Assign object at 0x0000000014968070>],
             'invert': [<numba.core.ir.Assign object at 0x0000000014958130>,
                        <numba.core.ir.Assign object at 0x0000000014961130>],
             'r': [<numba.core.ir.Assign object at 0x00000000149572E0>,
                   <numba.core.ir.Assign object at 0x0000000014965AF0>]})
2025-01-05 16:51:28,911 - DEBUG - SSA violators {'r', 'a.1', 'invert', 'exp'}
2025-01-05 16:51:28,912 - DEBUG - Fix SSA violator on var r
2025-01-05 16:51:28,914 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:28,915 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149435E0>
2025-01-05 16:51:28,917 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-05 16:51:28,917 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-05 16:51:28,919 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float64)
2025-01-05 16:51:28,920 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-05 16:51:28,921 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,923 - DEBUG - first assign: r
2025-01-05 16:51:28,925 - DEBUG - replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,927 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float64)
2025-01-05 16:51:28,929 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,932 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-05 16:51:28,933 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-05 16:51:28,934 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:28,936 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,938 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-05 16:51:28,939 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-05 16:51:28,940 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149435E0>
2025-01-05 16:51:28,941 - DEBUG - on stmt: invert = const(bool, True)
2025-01-05 16:51:28,942 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-05 16:51:28,944 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-05 16:51:28,945 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-05 16:51:28,946 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-05 16:51:28,947 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,950 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-05 16:51:28,951 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-05 16:51:28,952 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149435E0>
2025-01-05 16:51:28,953 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-05 16:51:28,955 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-05 16:51:28,956 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:28,957 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149435E0>
2025-01-05 16:51:28,959 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-05 16:51:28,960 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-05 16:51:28,962 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,964 - DEBUG - on stmt: jump 106
2025-01-05 16:51:28,965 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-05 16:51:28,966 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149435E0>
2025-01-05 16:51:28,967 - DEBUG - on stmt: invert = const(bool, False)
2025-01-05 16:51:28,969 - DEBUG - on stmt: exp = b
2025-01-05 16:51:28,970 - DEBUG - on stmt: jump 106
2025-01-05 16:51:28,970 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-05 16:51:28,971 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149435E0>
2025-01-05 16:51:28,973 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-05 16:51:28,974 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-05 16:51:28,975 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-05 16:51:28,976 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,978 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-05 16:51:28,979 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-05 16:51:28,980 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149435E0>
2025-01-05 16:51:28,982 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:28,984 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-05 16:51:28,985 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-05 16:51:28,987 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,989 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:28,992 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-05 16:51:28,994 - DEBUG - on stmt: return $128return_value.7
2025-01-05 16:51:28,995 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-05 16:51:28,996 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149435E0>
2025-01-05 16:51:28,998 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-05 16:51:28,999 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-05 16:51:29,000 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,002 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,004 - DEBUG - on stmt: branch $136pred, 138, 172
2025-01-05 16:51:29,005 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-05 16:51:29,006 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149435E0>
2025-01-05 16:51:29,007 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-05 16:51:29,008 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-05 16:51:29,009 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,011 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,013 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-05 16:51:29,014 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-05 16:51:29,015 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149435E0>
2025-01-05 16:51:29,016 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,019 - DEBUG - on stmt: r = $150inplace_multiply.2
2025-01-05 16:51:29,020 - DEBUG - replaced with: r.1 = $150inplace_multiply.2
2025-01-05 16:51:29,021 - DEBUG - on stmt: jump 154
2025-01-05 16:51:29,022 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:29,023 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149435E0>
2025-01-05 16:51:29,024 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-05 16:51:29,025 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,027 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-05 16:51:29,028 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,030 - DEBUG - on stmt: a.1 = $166inplace_multiply.5
2025-01-05 16:51:29,031 - DEBUG - on stmt: jump 130
2025-01-05 16:51:29,032 - DEBUG - ==== SSA block rewrite pass on 172
2025-01-05 16:51:29,033 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149435E0>
2025-01-05 16:51:29,034 - DEBUG - on stmt: bool174 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,036 - DEBUG - on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,038 - DEBUG - on stmt: branch $174pred, 176, 184
2025-01-05 16:51:29,039 - DEBUG - ==== SSA block rewrite pass on 176
2025-01-05 16:51:29,040 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149435E0>
2025-01-05 16:51:29,041 - DEBUG - on stmt: $const176.0 = const(float, 1.0)
2025-01-05 16:51:29,042 - DEBUG - on stmt: $180binary_true_divide.2 = $const176.0 / r
2025-01-05 16:51:29,044 - DEBUG - on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2025-01-05 16:51:29,045 - DEBUG - on stmt: return $182return_value.3
2025-01-05 16:51:29,047 - DEBUG - ==== SSA block rewrite pass on 184
2025-01-05 16:51:29,048 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149435E0>
2025-01-05 16:51:29,049 - DEBUG - on stmt: $186return_value.1 = cast(value=r)
2025-01-05 16:51:29,050 - DEBUG - on stmt: return $186return_value.1
2025-01-05 16:51:29,052 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000000149436D0>],
             146: [<numba.core.ir.Assign object at 0x000000001496AEE0>]})
2025-01-05 16:51:29,054 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:29,055 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,057 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-05 16:51:29,058 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-05 16:51:29,059 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float64)
2025-01-05 16:51:29,060 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-05 16:51:29,061 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,063 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float64)
2025-01-05 16:51:29,065 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,067 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-05 16:51:29,069 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-05 16:51:29,070 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,071 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,073 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-05 16:51:29,075 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-05 16:51:29,076 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,077 - DEBUG - on stmt: invert = const(bool, True)
2025-01-05 16:51:29,078 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-05 16:51:29,079 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-05 16:51:29,081 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-05 16:51:29,082 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,083 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,085 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-05 16:51:29,086 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-05 16:51:29,087 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,089 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-05 16:51:29,090 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-05 16:51:29,092 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:29,093 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,094 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-05 16:51:29,096 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,098 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,100 - DEBUG - on stmt: jump 106
2025-01-05 16:51:29,101 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-05 16:51:29,102 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,103 - DEBUG - on stmt: invert = const(bool, False)
2025-01-05 16:51:29,104 - DEBUG - on stmt: exp = b
2025-01-05 16:51:29,105 - DEBUG - on stmt: jump 106
2025-01-05 16:51:29,106 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-05 16:51:29,107 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,109 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-05 16:51:29,110 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-05 16:51:29,111 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,112 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,114 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-05 16:51:29,115 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-05 16:51:29,116 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,118 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:29,119 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-05 16:51:29,121 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-05 16:51:29,122 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,125 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,127 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-05 16:51:29,129 - DEBUG - on stmt: return $128return_value.7
2025-01-05 16:51:29,130 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-05 16:51:29,131 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,133 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-05 16:51:29,134 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-05 16:51:29,135 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,137 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,139 - DEBUG - on stmt: branch $136pred, 138, 172
2025-01-05 16:51:29,140 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-05 16:51:29,141 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,142 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-05 16:51:29,144 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-05 16:51:29,145 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,146 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,149 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-05 16:51:29,150 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-05 16:51:29,151 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,153 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,155 - DEBUG - find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,157 - DEBUG - find_def_from_top label 146
2025-01-05 16:51:29,158 - DEBUG - idom 138 from label 146
2025-01-05 16:51:29,159 - DEBUG - find_def_from_bottom label 138
2025-01-05 16:51:29,160 - DEBUG - find_def_from_top label 138
2025-01-05 16:51:29,161 - DEBUG - idom 130 from label 138
2025-01-05 16:51:29,162 - DEBUG - find_def_from_bottom label 130
2025-01-05 16:51:29,163 - DEBUG - find_def_from_top label 130
2025-01-05 16:51:29,164 - DEBUG - insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
2025-01-05 16:51:29,165 - DEBUG - find_def_from_bottom label 106
2025-01-05 16:51:29,166 - DEBUG - find_def_from_top label 106
2025-01-05 16:51:29,167 - DEBUG - idom 0 from label 106
2025-01-05 16:51:29,168 - DEBUG - find_def_from_bottom label 0
2025-01-05 16:51:29,169 - DEBUG - incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,171 - DEBUG - find_def_from_bottom label 154
2025-01-05 16:51:29,172 - DEBUG - find_def_from_top label 154
2025-01-05 16:51:29,173 - DEBUG - insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
2025-01-05 16:51:29,175 - DEBUG - find_def_from_bottom label 138
2025-01-05 16:51:29,176 - DEBUG - find_def_from_top label 138
2025-01-05 16:51:29,177 - DEBUG - idom 130 from label 138
2025-01-05 16:51:29,178 - DEBUG - find_def_from_bottom label 130
2025-01-05 16:51:29,179 - DEBUG - incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:216)], incoming_blocks=[106])
2025-01-05 16:51:29,180 - DEBUG - find_def_from_bottom label 146
2025-01-05 16:51:29,181 - DEBUG - incoming_def r.1 = $150inplace_multiply.2
2025-01-05 16:51:29,182 - DEBUG - incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-05 16:51:29,184 - DEBUG - replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,186 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-05 16:51:29,187 - DEBUG - on stmt: jump 154
2025-01-05 16:51:29,188 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:29,189 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,190 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-05 16:51:29,191 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,193 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-05 16:51:29,194 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,197 - DEBUG - on stmt: a.1 = $166inplace_multiply.5
2025-01-05 16:51:29,198 - DEBUG - on stmt: jump 130
2025-01-05 16:51:29,199 - DEBUG - ==== SSA block rewrite pass on 172
2025-01-05 16:51:29,200 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,201 - DEBUG - on stmt: bool174 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,203 - DEBUG - on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,205 - DEBUG - on stmt: branch $174pred, 176, 184
2025-01-05 16:51:29,206 - DEBUG - ==== SSA block rewrite pass on 176
2025-01-05 16:51:29,207 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,208 - DEBUG - on stmt: $const176.0 = const(float, 1.0)
2025-01-05 16:51:29,209 - DEBUG - on stmt: $180binary_true_divide.2 = $const176.0 / r
2025-01-05 16:51:29,211 - DEBUG - find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
2025-01-05 16:51:29,212 - DEBUG - find_def_from_top label 176
2025-01-05 16:51:29,214 - DEBUG - idom 172 from label 176
2025-01-05 16:51:29,215 - DEBUG - find_def_from_bottom label 172
2025-01-05 16:51:29,215 - DEBUG - find_def_from_top label 172
2025-01-05 16:51:29,216 - DEBUG - idom 130 from label 172
2025-01-05 16:51:29,217 - DEBUG - find_def_from_bottom label 130
2025-01-05 16:51:29,218 - DEBUG - replaced with: $180binary_true_divide.2 = $const176.0 / r.2
2025-01-05 16:51:29,220 - DEBUG - on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2025-01-05 16:51:29,222 - DEBUG - on stmt: return $182return_value.3
2025-01-05 16:51:29,223 - DEBUG - ==== SSA block rewrite pass on 184
2025-01-05 16:51:29,224 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,225 - DEBUG - on stmt: $186return_value.1 = cast(value=r)
2025-01-05 16:51:29,226 - DEBUG - find_def var='r' stmt=$186return_value.1 = cast(value=r)
2025-01-05 16:51:29,227 - DEBUG - find_def_from_top label 184
2025-01-05 16:51:29,229 - DEBUG - idom 172 from label 184
2025-01-05 16:51:29,230 - DEBUG - find_def_from_bottom label 172
2025-01-05 16:51:29,231 - DEBUG - find_def_from_top label 172
2025-01-05 16:51:29,232 - DEBUG - idom 130 from label 172
2025-01-05 16:51:29,233 - DEBUG - find_def_from_bottom label 130
2025-01-05 16:51:29,234 - DEBUG - replaced with: $186return_value.1 = cast(value=r.2)
2025-01-05 16:51:29,235 - DEBUG - on stmt: return $186return_value.1
2025-01-05 16:51:29,236 - DEBUG - Fix SSA violator on var a.1
2025-01-05 16:51:29,237 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:29,238 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014943640>
2025-01-05 16:51:29,239 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-05 16:51:29,240 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-05 16:51:29,241 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float64)
2025-01-05 16:51:29,243 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-05 16:51:29,244 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,246 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float64)
2025-01-05 16:51:29,248 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,250 - DEBUG - first assign: a.1
2025-01-05 16:51:29,251 - DEBUG - replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,253 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-05 16:51:29,254 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-05 16:51:29,255 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,256 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,259 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-05 16:51:29,260 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-05 16:51:29,261 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014943640>
2025-01-05 16:51:29,262 - DEBUG - on stmt: invert = const(bool, True)
2025-01-05 16:51:29,263 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-05 16:51:29,265 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-05 16:51:29,266 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-05 16:51:29,267 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,268 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,270 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-05 16:51:29,271 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-05 16:51:29,272 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014943640>
2025-01-05 16:51:29,274 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-05 16:51:29,275 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-05 16:51:29,277 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:29,278 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014943640>
2025-01-05 16:51:29,279 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-05 16:51:29,281 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,282 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,285 - DEBUG - on stmt: jump 106
2025-01-05 16:51:29,286 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-05 16:51:29,287 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014943640>
2025-01-05 16:51:29,288 - DEBUG - on stmt: invert = const(bool, False)
2025-01-05 16:51:29,290 - DEBUG - on stmt: exp = b
2025-01-05 16:51:29,290 - DEBUG - on stmt: jump 106
2025-01-05 16:51:29,291 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-05 16:51:29,292 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014943640>
2025-01-05 16:51:29,294 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-05 16:51:29,295 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-05 16:51:29,297 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,299 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,301 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-05 16:51:29,302 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-05 16:51:29,303 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014943640>
2025-01-05 16:51:29,305 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:29,306 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-05 16:51:29,308 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-05 16:51:29,309 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,311 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,315 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-05 16:51:29,317 - DEBUG - on stmt: return $128return_value.7
2025-01-05 16:51:29,318 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-05 16:51:29,319 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014943640>
2025-01-05 16:51:29,320 - DEBUG - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
2025-01-05 16:51:29,322 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-05 16:51:29,323 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-05 16:51:29,324 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,325 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,328 - DEBUG - on stmt: branch $136pred, 138, 172
2025-01-05 16:51:29,329 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-05 16:51:29,330 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014943640>
2025-01-05 16:51:29,332 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-05 16:51:29,333 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-05 16:51:29,334 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,336 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,338 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-05 16:51:29,339 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-05 16:51:29,340 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014943640>
2025-01-05 16:51:29,341 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,343 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-05 16:51:29,344 - DEBUG - on stmt: jump 154
2025-01-05 16:51:29,345 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:29,346 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014943640>
2025-01-05 16:51:29,347 - DEBUG - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-05 16:51:29,349 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-05 16:51:29,350 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,352 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-05 16:51:29,353 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,355 - DEBUG - on stmt: a.1 = $166inplace_multiply.5
2025-01-05 16:51:29,357 - DEBUG - replaced with: a.1.1 = $166inplace_multiply.5
2025-01-05 16:51:29,358 - DEBUG - on stmt: jump 130
2025-01-05 16:51:29,358 - DEBUG - ==== SSA block rewrite pass on 172
2025-01-05 16:51:29,359 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014943640>
2025-01-05 16:51:29,361 - DEBUG - on stmt: bool174 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,362 - DEBUG - on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,365 - DEBUG - on stmt: branch $174pred, 176, 184
2025-01-05 16:51:29,366 - DEBUG - ==== SSA block rewrite pass on 176
2025-01-05 16:51:29,367 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014943640>
2025-01-05 16:51:29,368 - DEBUG - on stmt: $const176.0 = const(float, 1.0)
2025-01-05 16:51:29,369 - DEBUG - on stmt: $180binary_true_divide.2 = $const176.0 / r.2
2025-01-05 16:51:29,371 - DEBUG - on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2025-01-05 16:51:29,373 - DEBUG - on stmt: return $182return_value.3
2025-01-05 16:51:29,374 - DEBUG - ==== SSA block rewrite pass on 184
2025-01-05 16:51:29,375 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014943640>
2025-01-05 16:51:29,376 - DEBUG - on stmt: $186return_value.1 = cast(value=r.2)
2025-01-05 16:51:29,377 - DEBUG - on stmt: return $186return_value.1
2025-01-05 16:51:29,379 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000000014943430>],
             154: [<numba.core.ir.Assign object at 0x000000001496A580>]})
2025-01-05 16:51:29,381 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:29,382 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001496AFD0>
2025-01-05 16:51:29,384 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-05 16:51:29,385 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-05 16:51:29,386 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float64)
2025-01-05 16:51:29,387 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-05 16:51:29,389 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,391 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float64)
2025-01-05 16:51:29,392 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,394 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-05 16:51:29,395 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-05 16:51:29,397 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,398 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,400 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-05 16:51:29,401 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-05 16:51:29,402 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001496AFD0>
2025-01-05 16:51:29,404 - DEBUG - on stmt: invert = const(bool, True)
2025-01-05 16:51:29,405 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-05 16:51:29,407 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-05 16:51:29,408 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-05 16:51:29,409 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,410 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,412 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-05 16:51:29,413 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-05 16:51:29,414 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001496AFD0>
2025-01-05 16:51:29,416 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-05 16:51:29,417 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-05 16:51:29,419 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:29,420 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001496AFD0>
2025-01-05 16:51:29,421 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-05 16:51:29,423 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,424 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,427 - DEBUG - on stmt: jump 106
2025-01-05 16:51:29,428 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-05 16:51:29,429 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001496AFD0>
2025-01-05 16:51:29,431 - DEBUG - on stmt: invert = const(bool, False)
2025-01-05 16:51:29,432 - DEBUG - on stmt: exp = b
2025-01-05 16:51:29,433 - DEBUG - on stmt: jump 106
2025-01-05 16:51:29,433 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-05 16:51:29,434 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001496AFD0>
2025-01-05 16:51:29,436 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-05 16:51:29,437 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-05 16:51:29,438 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,439 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,441 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-05 16:51:29,442 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-05 16:51:29,443 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001496AFD0>
2025-01-05 16:51:29,444 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:29,446 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-05 16:51:29,449 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-05 16:51:29,451 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,453 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,456 - DEBUG - find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,459 - DEBUG - find_def_from_top label 114
2025-01-05 16:51:29,460 - DEBUG - idom 106 from label 114
2025-01-05 16:51:29,461 - DEBUG - find_def_from_bottom label 106
2025-01-05 16:51:29,462 - DEBUG - find_def_from_top label 106
2025-01-05 16:51:29,463 - DEBUG - idom 0 from label 106
2025-01-05 16:51:29,464 - DEBUG - find_def_from_bottom label 0
2025-01-05 16:51:29,465 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-05 16:51:29,466 - DEBUG - on stmt: return $128return_value.7
2025-01-05 16:51:29,467 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-05 16:51:29,468 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001496AFD0>
2025-01-05 16:51:29,469 - DEBUG - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
2025-01-05 16:51:29,471 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-05 16:51:29,472 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-05 16:51:29,473 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,475 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,477 - DEBUG - on stmt: branch $136pred, 138, 172
2025-01-05 16:51:29,478 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-05 16:51:29,479 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001496AFD0>
2025-01-05 16:51:29,481 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-05 16:51:29,482 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-05 16:51:29,483 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,484 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,487 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-05 16:51:29,488 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-05 16:51:29,488 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001496AFD0>
2025-01-05 16:51:29,490 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,492 - DEBUG - find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,494 - DEBUG - find_def_from_top label 146
2025-01-05 16:51:29,495 - DEBUG - idom 138 from label 146
2025-01-05 16:51:29,496 - DEBUG - find_def_from_bottom label 138
2025-01-05 16:51:29,497 - DEBUG - find_def_from_top label 138
2025-01-05 16:51:29,498 - DEBUG - idom 130 from label 138
2025-01-05 16:51:29,499 - DEBUG - find_def_from_bottom label 130
2025-01-05 16:51:29,500 - DEBUG - find_def_from_top label 130
2025-01-05 16:51:29,501 - DEBUG - insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
2025-01-05 16:51:29,502 - DEBUG - find_def_from_bottom label 106
2025-01-05 16:51:29,504 - DEBUG - find_def_from_top label 106
2025-01-05 16:51:29,504 - DEBUG - idom 0 from label 106
2025-01-05 16:51:29,505 - DEBUG - find_def_from_bottom label 0
2025-01-05 16:51:29,506 - DEBUG - incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,508 - DEBUG - find_def_from_bottom label 154
2025-01-05 16:51:29,509 - DEBUG - incoming_def a.1.1 = $166inplace_multiply.5
2025-01-05 16:51:29,510 - DEBUG - replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,512 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-05 16:51:29,514 - DEBUG - on stmt: jump 154
2025-01-05 16:51:29,515 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:29,516 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001496AFD0>
2025-01-05 16:51:29,517 - DEBUG - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-05 16:51:29,519 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-05 16:51:29,520 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,522 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-05 16:51:29,523 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,526 - DEBUG - find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,528 - DEBUG - find_def_from_top label 154
2025-01-05 16:51:29,529 - DEBUG - idom 138 from label 154
2025-01-05 16:51:29,530 - DEBUG - find_def_from_bottom label 138
2025-01-05 16:51:29,531 - DEBUG - find_def_from_top label 138
2025-01-05 16:51:29,532 - DEBUG - idom 130 from label 138
2025-01-05 16:51:29,533 - DEBUG - find_def_from_bottom label 130
2025-01-05 16:51:29,534 - DEBUG - replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,536 - DEBUG - on stmt: a.1.1 = $166inplace_multiply.5
2025-01-05 16:51:29,537 - DEBUG - on stmt: jump 130
2025-01-05 16:51:29,538 - DEBUG - ==== SSA block rewrite pass on 172
2025-01-05 16:51:29,539 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001496AFD0>
2025-01-05 16:51:29,540 - DEBUG - on stmt: bool174 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,542 - DEBUG - on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,544 - DEBUG - on stmt: branch $174pred, 176, 184
2025-01-05 16:51:29,545 - DEBUG - ==== SSA block rewrite pass on 176
2025-01-05 16:51:29,546 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001496AFD0>
2025-01-05 16:51:29,548 - DEBUG - on stmt: $const176.0 = const(float, 1.0)
2025-01-05 16:51:29,549 - DEBUG - on stmt: $180binary_true_divide.2 = $const176.0 / r.2
2025-01-05 16:51:29,550 - DEBUG - on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2025-01-05 16:51:29,552 - DEBUG - on stmt: return $182return_value.3
2025-01-05 16:51:29,553 - DEBUG - ==== SSA block rewrite pass on 184
2025-01-05 16:51:29,554 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001496AFD0>
2025-01-05 16:51:29,555 - DEBUG - on stmt: $186return_value.1 = cast(value=r.2)
2025-01-05 16:51:29,556 - DEBUG - on stmt: return $186return_value.1
2025-01-05 16:51:29,557 - DEBUG - Fix SSA violator on var invert
2025-01-05 16:51:29,558 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:29,559 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014946F40>
2025-01-05 16:51:29,560 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-05 16:51:29,562 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-05 16:51:29,562 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float64)
2025-01-05 16:51:29,564 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-05 16:51:29,565 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,567 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float64)
2025-01-05 16:51:29,569 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,571 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-05 16:51:29,572 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-05 16:51:29,573 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,575 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,577 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-05 16:51:29,578 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-05 16:51:29,579 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014946F40>
2025-01-05 16:51:29,580 - DEBUG - on stmt: invert = const(bool, True)
2025-01-05 16:51:29,581 - DEBUG - first assign: invert
2025-01-05 16:51:29,582 - DEBUG - replaced with: invert = const(bool, True)
2025-01-05 16:51:29,583 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-05 16:51:29,585 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-05 16:51:29,586 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-05 16:51:29,587 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,588 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,590 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-05 16:51:29,591 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-05 16:51:29,592 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014946F40>
2025-01-05 16:51:29,593 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-05 16:51:29,595 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-05 16:51:29,597 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:29,598 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014946F40>
2025-01-05 16:51:29,599 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-05 16:51:29,601 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,603 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,605 - DEBUG - on stmt: jump 106
2025-01-05 16:51:29,606 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-05 16:51:29,607 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014946F40>
2025-01-05 16:51:29,609 - DEBUG - on stmt: invert = const(bool, False)
2025-01-05 16:51:29,610 - DEBUG - replaced with: invert.1 = const(bool, False)
2025-01-05 16:51:29,611 - DEBUG - on stmt: exp = b
2025-01-05 16:51:29,612 - DEBUG - on stmt: jump 106
2025-01-05 16:51:29,613 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-05 16:51:29,614 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014946F40>
2025-01-05 16:51:29,615 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-05 16:51:29,616 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-05 16:51:29,617 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,619 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,621 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-05 16:51:29,622 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-05 16:51:29,623 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014946F40>
2025-01-05 16:51:29,624 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:29,625 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-05 16:51:29,627 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-05 16:51:29,629 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,631 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,634 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-05 16:51:29,636 - DEBUG - on stmt: return $128return_value.7
2025-01-05 16:51:29,637 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-05 16:51:29,638 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014946F40>
2025-01-05 16:51:29,639 - DEBUG - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
2025-01-05 16:51:29,641 - DEBUG - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
2025-01-05 16:51:29,642 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-05 16:51:29,643 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-05 16:51:29,644 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,646 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,648 - DEBUG - on stmt: branch $136pred, 138, 172
2025-01-05 16:51:29,650 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-05 16:51:29,651 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014946F40>
2025-01-05 16:51:29,652 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-05 16:51:29,653 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-05 16:51:29,654 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,655 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,658 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-05 16:51:29,659 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-05 16:51:29,660 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014946F40>
2025-01-05 16:51:29,661 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,663 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-05 16:51:29,665 - DEBUG - on stmt: jump 154
2025-01-05 16:51:29,665 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:29,666 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014946F40>
2025-01-05 16:51:29,668 - DEBUG - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-05 16:51:29,669 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-05 16:51:29,670 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,672 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-05 16:51:29,674 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,676 - DEBUG - on stmt: a.1.1 = $166inplace_multiply.5
2025-01-05 16:51:29,677 - DEBUG - on stmt: jump 130
2025-01-05 16:51:29,678 - DEBUG - ==== SSA block rewrite pass on 172
2025-01-05 16:51:29,679 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014946F40>
2025-01-05 16:51:29,681 - DEBUG - on stmt: bool174 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,683 - DEBUG - on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,685 - DEBUG - on stmt: branch $174pred, 176, 184
2025-01-05 16:51:29,686 - DEBUG - ==== SSA block rewrite pass on 176
2025-01-05 16:51:29,687 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014946F40>
2025-01-05 16:51:29,688 - DEBUG - on stmt: $const176.0 = const(float, 1.0)
2025-01-05 16:51:29,690 - DEBUG - on stmt: $180binary_true_divide.2 = $const176.0 / r.2
2025-01-05 16:51:29,691 - DEBUG - on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2025-01-05 16:51:29,692 - DEBUG - on stmt: return $182return_value.3
2025-01-05 16:51:29,694 - DEBUG - ==== SSA block rewrite pass on 184
2025-01-05 16:51:29,695 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014946F40>
2025-01-05 16:51:29,696 - DEBUG - on stmt: $186return_value.1 = cast(value=r.2)
2025-01-05 16:51:29,697 - DEBUG - on stmt: return $186return_value.1
2025-01-05 16:51:29,699 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x00000000149468E0>],
             98: [<numba.core.ir.Assign object at 0x00000000149432B0>]})
2025-01-05 16:51:29,701 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:29,702 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,704 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-05 16:51:29,705 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-05 16:51:29,706 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float64)
2025-01-05 16:51:29,707 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-05 16:51:29,708 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,710 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float64)
2025-01-05 16:51:29,712 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,714 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-05 16:51:29,715 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-05 16:51:29,716 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,718 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,720 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-05 16:51:29,721 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-05 16:51:29,722 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,723 - DEBUG - on stmt: invert = const(bool, True)
2025-01-05 16:51:29,724 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-05 16:51:29,725 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-05 16:51:29,727 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-05 16:51:29,727 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,729 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,731 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-05 16:51:29,733 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-05 16:51:29,734 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,735 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-05 16:51:29,737 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-05 16:51:29,738 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:29,739 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,741 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-05 16:51:29,742 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,744 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,746 - DEBUG - on stmt: jump 106
2025-01-05 16:51:29,747 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-05 16:51:29,748 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,749 - DEBUG - on stmt: invert.1 = const(bool, False)
2025-01-05 16:51:29,751 - DEBUG - on stmt: exp = b
2025-01-05 16:51:29,752 - DEBUG - on stmt: jump 106
2025-01-05 16:51:29,753 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-05 16:51:29,754 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,756 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-05 16:51:29,757 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-05 16:51:29,758 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,760 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,762 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-05 16:51:29,763 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-05 16:51:29,764 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,765 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:29,767 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-05 16:51:29,769 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-05 16:51:29,770 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,772 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,775 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-05 16:51:29,776 - DEBUG - on stmt: return $128return_value.7
2025-01-05 16:51:29,778 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-05 16:51:29,779 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,780 - DEBUG - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
2025-01-05 16:51:29,782 - DEBUG - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
2025-01-05 16:51:29,784 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-05 16:51:29,785 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-05 16:51:29,786 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,788 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,790 - DEBUG - on stmt: branch $136pred, 138, 172
2025-01-05 16:51:29,791 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-05 16:51:29,792 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,793 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-05 16:51:29,794 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-05 16:51:29,795 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,797 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,799 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-05 16:51:29,800 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-05 16:51:29,801 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,802 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,805 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-05 16:51:29,806 - DEBUG - on stmt: jump 154
2025-01-05 16:51:29,807 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:29,808 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,809 - DEBUG - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-05 16:51:29,810 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-05 16:51:29,812 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,814 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-05 16:51:29,815 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,817 - DEBUG - on stmt: a.1.1 = $166inplace_multiply.5
2025-01-05 16:51:29,818 - DEBUG - on stmt: jump 130
2025-01-05 16:51:29,819 - DEBUG - ==== SSA block rewrite pass on 172
2025-01-05 16:51:29,820 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,821 - DEBUG - on stmt: bool174 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,823 - DEBUG - on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,825 - DEBUG - find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,828 - DEBUG - find_def_from_top label 172
2025-01-05 16:51:29,829 - DEBUG - idom 130 from label 172
2025-01-05 16:51:29,830 - DEBUG - find_def_from_bottom label 130
2025-01-05 16:51:29,831 - DEBUG - find_def_from_top label 130
2025-01-05 16:51:29,832 - DEBUG - idom 106 from label 130
2025-01-05 16:51:29,833 - DEBUG - find_def_from_bottom label 106
2025-01-05 16:51:29,834 - DEBUG - find_def_from_top label 106
2025-01-05 16:51:29,835 - DEBUG - insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
2025-01-05 16:51:29,836 - DEBUG - find_def_from_bottom label 48
2025-01-05 16:51:29,837 - DEBUG - find_def_from_top label 48
2025-01-05 16:51:29,838 - DEBUG - idom 26 from label 48
2025-01-05 16:51:29,839 - DEBUG - find_def_from_bottom label 26
2025-01-05 16:51:29,840 - DEBUG - incoming_def invert = const(bool, True)
2025-01-05 16:51:29,841 - DEBUG - find_def_from_bottom label 98
2025-01-05 16:51:29,842 - DEBUG - incoming_def invert.1 = const(bool, False)
2025-01-05 16:51:29,843 - DEBUG - replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,845 - DEBUG - on stmt: branch $174pred, 176, 184
2025-01-05 16:51:29,846 - DEBUG - ==== SSA block rewrite pass on 176
2025-01-05 16:51:29,847 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,849 - DEBUG - on stmt: $const176.0 = const(float, 1.0)
2025-01-05 16:51:29,850 - DEBUG - on stmt: $180binary_true_divide.2 = $const176.0 / r.2
2025-01-05 16:51:29,851 - DEBUG - on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2025-01-05 16:51:29,853 - DEBUG - on stmt: return $182return_value.3
2025-01-05 16:51:29,854 - DEBUG - ==== SSA block rewrite pass on 184
2025-01-05 16:51:29,855 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:29,856 - DEBUG - on stmt: $186return_value.1 = cast(value=r.2)
2025-01-05 16:51:29,857 - DEBUG - on stmt: return $186return_value.1
2025-01-05 16:51:29,858 - DEBUG - Fix SSA violator on var exp
2025-01-05 16:51:29,859 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:29,860 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001496AC40>
2025-01-05 16:51:29,862 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-05 16:51:29,863 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-05 16:51:29,864 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float64)
2025-01-05 16:51:29,865 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-05 16:51:29,866 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,868 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float64)
2025-01-05 16:51:29,870 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,872 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-05 16:51:29,873 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-05 16:51:29,874 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,875 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,877 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-05 16:51:29,878 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-05 16:51:29,879 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001496AC40>
2025-01-05 16:51:29,881 - DEBUG - on stmt: invert = const(bool, True)
2025-01-05 16:51:29,882 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-05 16:51:29,883 - DEBUG - first assign: exp
2025-01-05 16:51:29,885 - DEBUG - replaced with: exp = unary(fn=<built-in function neg>, value=b)
2025-01-05 16:51:29,886 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-05 16:51:29,887 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-05 16:51:29,888 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,890 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,892 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-05 16:51:29,893 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-05 16:51:29,894 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001496AC40>
2025-01-05 16:51:29,895 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-05 16:51:29,897 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-05 16:51:29,898 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:29,899 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001496AC40>
2025-01-05 16:51:29,901 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-05 16:51:29,902 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,904 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,907 - DEBUG - on stmt: jump 106
2025-01-05 16:51:29,908 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-05 16:51:29,909 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001496AC40>
2025-01-05 16:51:29,910 - DEBUG - on stmt: invert.1 = const(bool, False)
2025-01-05 16:51:29,911 - DEBUG - on stmt: exp = b
2025-01-05 16:51:29,912 - DEBUG - replaced with: exp.1 = b
2025-01-05 16:51:29,913 - DEBUG - on stmt: jump 106
2025-01-05 16:51:29,914 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-05 16:51:29,915 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001496AC40>
2025-01-05 16:51:29,917 - DEBUG - on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[48, 98])
2025-01-05 16:51:29,919 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-05 16:51:29,920 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-05 16:51:29,921 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,922 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,925 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-05 16:51:29,926 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-05 16:51:29,927 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001496AC40>
2025-01-05 16:51:29,928 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:29,930 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-05 16:51:29,932 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-05 16:51:29,933 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,935 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,938 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-05 16:51:29,940 - DEBUG - on stmt: return $128return_value.7
2025-01-05 16:51:29,941 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-05 16:51:29,942 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001496AC40>
2025-01-05 16:51:29,943 - DEBUG - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
2025-01-05 16:51:29,945 - DEBUG - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
2025-01-05 16:51:29,947 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-05 16:51:29,948 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-05 16:51:29,949 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,951 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,954 - DEBUG - on stmt: branch $136pred, 138, 172
2025-01-05 16:51:29,955 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-05 16:51:29,956 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001496AC40>
2025-01-05 16:51:29,957 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-05 16:51:29,958 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-05 16:51:29,959 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,961 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,963 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-05 16:51:29,964 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-05 16:51:29,965 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001496AC40>
2025-01-05 16:51:29,966 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,968 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-05 16:51:29,970 - DEBUG - on stmt: jump 154
2025-01-05 16:51:29,971 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:29,971 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001496AC40>
2025-01-05 16:51:29,973 - DEBUG - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-05 16:51:29,974 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-05 16:51:29,975 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,978 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-05 16:51:29,979 - DEBUG - replaced with: exp.2 = $158inplace_rshift.2
2025-01-05 16:51:29,980 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:29,983 - DEBUG - on stmt: a.1.1 = $166inplace_multiply.5
2025-01-05 16:51:29,984 - DEBUG - on stmt: jump 130
2025-01-05 16:51:29,985 - DEBUG - ==== SSA block rewrite pass on 172
2025-01-05 16:51:29,986 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001496AC40>
2025-01-05 16:51:29,988 - DEBUG - on stmt: bool174 = global(bool: <class 'bool'>)
2025-01-05 16:51:29,989 - DEBUG - on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:29,992 - DEBUG - on stmt: branch $174pred, 176, 184
2025-01-05 16:51:29,993 - DEBUG - ==== SSA block rewrite pass on 176
2025-01-05 16:51:29,994 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001496AC40>
2025-01-05 16:51:29,995 - DEBUG - on stmt: $const176.0 = const(float, 1.0)
2025-01-05 16:51:29,996 - DEBUG - on stmt: $180binary_true_divide.2 = $const176.0 / r.2
2025-01-05 16:51:29,998 - DEBUG - on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2025-01-05 16:51:29,999 - DEBUG - on stmt: return $182return_value.3
2025-01-05 16:51:30,000 - DEBUG - ==== SSA block rewrite pass on 184
2025-01-05 16:51:30,001 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000000001496AC40>
2025-01-05 16:51:30,003 - DEBUG - on stmt: $186return_value.1 = cast(value=r.2)
2025-01-05 16:51:30,004 - DEBUG - on stmt: return $186return_value.1
2025-01-05 16:51:30,005 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x000000001496AE50>],
             98: [<numba.core.ir.Assign object at 0x0000000014946C10>],
             154: [<numba.core.ir.Assign object at 0x000000001498B790>]})
2025-01-05 16:51:30,009 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:30,010 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:30,011 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-05 16:51:30,012 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-05 16:51:30,014 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float64)
2025-01-05 16:51:30,015 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-05 16:51:30,016 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,019 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float64)
2025-01-05 16:51:30,020 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,022 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-05 16:51:30,023 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-05 16:51:30,024 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,026 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,028 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-05 16:51:30,029 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-05 16:51:30,030 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:30,032 - DEBUG - on stmt: invert = const(bool, True)
2025-01-05 16:51:30,033 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-05 16:51:30,034 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-05 16:51:30,035 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-05 16:51:30,036 - DEBUG - find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
2025-01-05 16:51:30,037 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,039 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,041 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-05 16:51:30,042 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-05 16:51:30,043 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:30,044 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-05 16:51:30,046 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-05 16:51:30,048 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:30,049 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:30,050 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-05 16:51:30,052 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,053 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,056 - DEBUG - on stmt: jump 106
2025-01-05 16:51:30,057 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-05 16:51:30,058 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:30,059 - DEBUG - on stmt: invert.1 = const(bool, False)
2025-01-05 16:51:30,060 - DEBUG - on stmt: exp.1 = b
2025-01-05 16:51:30,061 - DEBUG - on stmt: jump 106
2025-01-05 16:51:30,062 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-05 16:51:30,063 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:30,065 - DEBUG - on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[48, 98])
2025-01-05 16:51:30,067 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-05 16:51:30,068 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-05 16:51:30,069 - DEBUG - find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
2025-01-05 16:51:30,070 - DEBUG - find_def_from_top label 106
2025-01-05 16:51:30,072 - DEBUG - insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
2025-01-05 16:51:30,073 - DEBUG - find_def_from_bottom label 48
2025-01-05 16:51:30,074 - DEBUG - find_def_from_top label 48
2025-01-05 16:51:30,075 - DEBUG - idom 26 from label 48
2025-01-05 16:51:30,076 - DEBUG - find_def_from_bottom label 26
2025-01-05 16:51:30,077 - DEBUG - incoming_def exp = unary(fn=<built-in function neg>, value=b)
2025-01-05 16:51:30,078 - DEBUG - find_def_from_bottom label 98
2025-01-05 16:51:30,079 - DEBUG - incoming_def exp.1 = b
2025-01-05 16:51:30,080 - DEBUG - replaced with: $110compare_op.2 = exp.3 > $const108.1
2025-01-05 16:51:30,082 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,083 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,085 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-05 16:51:30,087 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-05 16:51:30,088 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:30,089 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:30,090 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-05 16:51:30,092 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-05 16:51:30,094 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,096 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,099 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-05 16:51:30,100 - DEBUG - on stmt: return $128return_value.7
2025-01-05 16:51:30,102 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-05 16:51:30,103 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:30,104 - DEBUG - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
2025-01-05 16:51:30,106 - DEBUG - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
2025-01-05 16:51:30,107 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-05 16:51:30,108 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-05 16:51:30,110 - DEBUG - find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
2025-01-05 16:51:30,111 - DEBUG - find_def_from_top label 130
2025-01-05 16:51:30,112 - DEBUG - insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
2025-01-05 16:51:30,114 - DEBUG - find_def_from_bottom label 106
2025-01-05 16:51:30,115 - DEBUG - incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[48, 98])
2025-01-05 16:51:30,116 - DEBUG - find_def_from_bottom label 154
2025-01-05 16:51:30,118 - DEBUG - incoming_def exp.2 = $158inplace_rshift.2
2025-01-05 16:51:30,119 - DEBUG - replaced with: $134compare_op.2 = exp.4 != $const132.1
2025-01-05 16:51:30,120 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,122 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,124 - DEBUG - on stmt: branch $136pred, 138, 172
2025-01-05 16:51:30,125 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-05 16:51:30,126 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:30,127 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-05 16:51:30,128 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-05 16:51:30,129 - DEBUG - find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
2025-01-05 16:51:30,131 - DEBUG - find_def_from_top label 138
2025-01-05 16:51:30,132 - DEBUG - idom 130 from label 138
2025-01-05 16:51:30,133 - DEBUG - find_def_from_bottom label 130
2025-01-05 16:51:30,134 - DEBUG - replaced with: $142binary_and.2 = exp.4 & $const140.1
2025-01-05 16:51:30,136 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,138 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,140 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-05 16:51:30,141 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-05 16:51:30,142 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:30,143 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:30,145 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-05 16:51:30,147 - DEBUG - on stmt: jump 154
2025-01-05 16:51:30,148 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:30,149 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:30,150 - DEBUG - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-05 16:51:30,152 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-05 16:51:30,153 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:30,155 - DEBUG - find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:30,157 - DEBUG - find_def_from_top label 154
2025-01-05 16:51:30,158 - DEBUG - idom 138 from label 154
2025-01-05 16:51:30,159 - DEBUG - find_def_from_bottom label 138
2025-01-05 16:51:30,160 - DEBUG - find_def_from_top label 138
2025-01-05 16:51:30,160 - DEBUG - idom 130 from label 138
2025-01-05 16:51:30,161 - DEBUG - find_def_from_bottom label 130
2025-01-05 16:51:30,162 - DEBUG - replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:30,165 - DEBUG - on stmt: exp.2 = $158inplace_rshift.2
2025-01-05 16:51:30,166 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:30,168 - DEBUG - on stmt: a.1.1 = $166inplace_multiply.5
2025-01-05 16:51:30,169 - DEBUG - on stmt: jump 130
2025-01-05 16:51:30,170 - DEBUG - ==== SSA block rewrite pass on 172
2025-01-05 16:51:30,171 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:30,172 - DEBUG - on stmt: bool174 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,174 - DEBUG - on stmt: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,176 - DEBUG - on stmt: branch $174pred, 176, 184
2025-01-05 16:51:30,177 - DEBUG - ==== SSA block rewrite pass on 176
2025-01-05 16:51:30,178 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:30,180 - DEBUG - on stmt: $const176.0 = const(float, 1.0)
2025-01-05 16:51:30,181 - DEBUG - on stmt: $180binary_true_divide.2 = $const176.0 / r.2
2025-01-05 16:51:30,182 - DEBUG - on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
2025-01-05 16:51:30,184 - DEBUG - on stmt: return $182return_value.3
2025-01-05 16:51:30,185 - DEBUG - ==== SSA block rewrite pass on 184
2025-01-05 16:51:30,186 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149435E0>
2025-01-05 16:51:30,187 - DEBUG - on stmt: $186return_value.1 = cast(value=r.2)
2025-01-05 16:51:30,188 - DEBUG - on stmt: return $186return_value.1
2025-01-05 16:51:30,336 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=189)
           2	LOAD_FAST(arg=0, lineno=204)
           4	LOAD_FAST(arg=2, lineno=204)
           6	COMPARE_OP(arg=4, lineno=204)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=204)
          10	LOAD_CONST(arg=1, lineno=207)
          12	RETURN_VALUE(arg=None, lineno=207)
>         14	LOAD_CONST(arg=1, lineno=209)
          16	STORE_FAST(arg=4, lineno=209)
          18	LOAD_FAST(arg=2, lineno=210)
          20	LOAD_FAST(arg=0, lineno=210)
          22	BINARY_SUBTRACT(arg=None, lineno=210)
          24	STORE_FAST(arg=5, lineno=210)
>         26	LOAD_FAST(arg=4, lineno=211)
          28	LOAD_FAST(arg=0, lineno=211)
          30	COMPARE_OP(arg=0, lineno=211)
          32	POP_JUMP_IF_FALSE(arg=120, lineno=211)
          34	LOAD_FAST(arg=1, lineno=212)
          36	LOAD_FAST(arg=4, lineno=212)
          38	BINARY_SUBSCR(arg=None, lineno=212)
          40	STORE_FAST(arg=6, lineno=212)
          42	LOAD_FAST(arg=3, lineno=213)
          44	LOAD_FAST(arg=5, lineno=213)
          46	BINARY_SUBSCR(arg=None, lineno=213)
          48	STORE_FAST(arg=7, lineno=213)
          50	LOAD_FAST(arg=7, lineno=216)
          52	LOAD_CONST(arg=2, lineno=216)
          54	COMPARE_OP(arg=3, lineno=216)
          56	POP_JUMP_IF_FALSE(arg=86, lineno=216)
          58	LOAD_FAST(arg=6, lineno=220)
          60	LOAD_FAST(arg=7, lineno=220)
          62	COMPARE_OP(arg=3, lineno=220)
          64	POP_JUMP_IF_FALSE(arg=102, lineno=220)
          66	LOAD_FAST(arg=6, lineno=220)
          68	LOAD_CONST(arg=2, lineno=220)
          70	COMPARE_OP(arg=3, lineno=220)
          72	POP_JUMP_IF_FALSE(arg=102, lineno=220)
          74	LOAD_FAST(arg=5, lineno=221)
          76	LOAD_CONST(arg=2, lineno=221)
          78	BINARY_ADD(arg=None, lineno=221)
          80	UNARY_NEGATIVE(arg=None, lineno=221)
          82	RETURN_VALUE(arg=None, lineno=221)
          84	JUMP_FORWARD(arg=16, lineno=221)
>         86	LOAD_FAST(arg=6, lineno=222)
          88	LOAD_CONST(arg=2, lineno=222)
          90	COMPARE_OP(arg=3, lineno=222)
          92	POP_JUMP_IF_FALSE(arg=102, lineno=222)
          94	LOAD_FAST(arg=6, lineno=224)
          96	LOAD_FAST(arg=3, lineno=224)
          98	LOAD_FAST(arg=5, lineno=224)
         100	STORE_SUBSCR(arg=None, lineno=224)
>        102	LOAD_FAST(arg=4, lineno=225)
         104	LOAD_CONST(arg=2, lineno=225)
         106	INPLACE_ADD(arg=None, lineno=225)
         108	STORE_FAST(arg=4, lineno=225)
         110	LOAD_FAST(arg=5, lineno=226)
         112	LOAD_CONST(arg=2, lineno=226)
         114	INPLACE_ADD(arg=None, lineno=226)
         116	STORE_FAST(arg=5, lineno=226)
         118	JUMP_ABSOLUTE(arg=26, lineno=226)
>        120	LOAD_FAST(arg=5, lineno=227)
         122	RETURN_VALUE(arg=None, lineno=227)
2025-01-05 16:51:30,369 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:51:30,371 - DEBUG - stack: []
2025-01-05 16:51:30,372 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:51:30,374 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=189)
2025-01-05 16:51:30,375 - DEBUG - stack []
2025-01-05 16:51:30,376 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=204)
2025-01-05 16:51:30,377 - DEBUG - stack []
2025-01-05 16:51:30,378 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=204)
2025-01-05 16:51:30,379 - DEBUG - stack ['$src_ndim2.0']
2025-01-05 16:51:30,381 - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=204)
2025-01-05 16:51:30,382 - DEBUG - stack ['$src_ndim2.0', '$dest_ndim4.1']
2025-01-05 16:51:30,383 - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=204)
2025-01-05 16:51:30,385 - DEBUG - stack ['$6compare_op.2']
2025-01-05 16:51:30,386 - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:30,387 - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
2025-01-05 16:51:30,389 - DEBUG - stack: []
2025-01-05 16:51:30,390 - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
2025-01-05 16:51:30,392 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=207)
2025-01-05 16:51:30,393 - DEBUG - stack []
2025-01-05 16:51:30,394 - DEBUG - dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=207)
2025-01-05 16:51:30,396 - DEBUG - stack ['$const10.0']
2025-01-05 16:51:30,397 - DEBUG - end state. edges=[]
2025-01-05 16:51:30,398 - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=0)])
2025-01-05 16:51:30,400 - DEBUG - stack: []
2025-01-05 16:51:30,401 - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=0)
2025-01-05 16:51:30,402 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=209)
2025-01-05 16:51:30,404 - DEBUG - stack []
2025-01-05 16:51:30,405 - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=209)
2025-01-05 16:51:30,406 - DEBUG - stack ['$const14.0']
2025-01-05 16:51:30,407 - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=210)
2025-01-05 16:51:30,409 - DEBUG - stack []
2025-01-05 16:51:30,410 - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=210)
2025-01-05 16:51:30,411 - DEBUG - stack ['$dest_ndim18.1']
2025-01-05 16:51:30,412 - DEBUG - dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=210)
2025-01-05 16:51:30,414 - DEBUG - stack ['$dest_ndim18.1', '$src_ndim20.2']
2025-01-05 16:51:30,415 - DEBUG - dispatch pc=24, inst=STORE_FAST(arg=5, lineno=210)
2025-01-05 16:51:30,416 - DEBUG - stack ['$22binary_subtract.3']
2025-01-05 16:51:30,417 - DEBUG - end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:30,419 - DEBUG - pending: deque([State(pc_initial=26 nstack_initial=0)])
2025-01-05 16:51:30,421 - DEBUG - stack: []
2025-01-05 16:51:30,422 - DEBUG - state.pc_initial: State(pc_initial=26 nstack_initial=0)
2025-01-05 16:51:30,423 - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=211)
2025-01-05 16:51:30,425 - DEBUG - stack []
2025-01-05 16:51:30,426 - DEBUG - dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=211)
2025-01-05 16:51:30,427 - DEBUG - stack ['$src_index26.0']
2025-01-05 16:51:30,428 - DEBUG - dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=211)
2025-01-05 16:51:30,430 - DEBUG - stack ['$src_index26.0', '$src_ndim28.1']
2025-01-05 16:51:30,431 - DEBUG - dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=120, lineno=211)
2025-01-05 16:51:30,432 - DEBUG - stack ['$30compare_op.2']
2025-01-05 16:51:30,433 - DEBUG - end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=120, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:30,435 - DEBUG - pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2025-01-05 16:51:30,437 - DEBUG - stack: []
2025-01-05 16:51:30,438 - DEBUG - state.pc_initial: State(pc_initial=34 nstack_initial=0)
2025-01-05 16:51:30,440 - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=212)
2025-01-05 16:51:30,441 - DEBUG - stack []
2025-01-05 16:51:30,443 - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=212)
2025-01-05 16:51:30,444 - DEBUG - stack ['$src_shape34.0']
2025-01-05 16:51:30,445 - DEBUG - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=212)
2025-01-05 16:51:30,447 - DEBUG - stack ['$src_shape34.0', '$src_index36.1']
2025-01-05 16:51:30,448 - DEBUG - dispatch pc=40, inst=STORE_FAST(arg=6, lineno=212)
2025-01-05 16:51:30,450 - DEBUG - stack ['$38binary_subscr.2']
2025-01-05 16:51:30,451 - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=213)
2025-01-05 16:51:30,452 - DEBUG - stack []
2025-01-05 16:51:30,453 - DEBUG - dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=213)
2025-01-05 16:51:30,454 - DEBUG - stack ['$dest_shape42.3']
2025-01-05 16:51:30,456 - DEBUG - dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=213)
2025-01-05 16:51:30,457 - DEBUG - stack ['$dest_shape42.3', '$dest_index44.4']
2025-01-05 16:51:30,458 - DEBUG - dispatch pc=48, inst=STORE_FAST(arg=7, lineno=213)
2025-01-05 16:51:30,459 - DEBUG - stack ['$46binary_subscr.5']
2025-01-05 16:51:30,460 - DEBUG - dispatch pc=50, inst=LOAD_FAST(arg=7, lineno=216)
2025-01-05 16:51:30,462 - DEBUG - stack []
2025-01-05 16:51:30,463 - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=216)
2025-01-05 16:51:30,464 - DEBUG - stack ['$dest_dim_size50.6']
2025-01-05 16:51:30,465 - DEBUG - dispatch pc=54, inst=COMPARE_OP(arg=3, lineno=216)
2025-01-05 16:51:30,467 - DEBUG - stack ['$dest_dim_size50.6', '$const52.7']
2025-01-05 16:51:30,468 - DEBUG - dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=86, lineno=216)
2025-01-05 16:51:30,469 - DEBUG - stack ['$54compare_op.8']
2025-01-05 16:51:30,470 - DEBUG - end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:30,472 - DEBUG - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
2025-01-05 16:51:30,474 - DEBUG - stack: []
2025-01-05 16:51:30,475 - DEBUG - state.pc_initial: State(pc_initial=120 nstack_initial=0)
2025-01-05 16:51:30,476 - DEBUG - dispatch pc=120, inst=LOAD_FAST(arg=5, lineno=227)
2025-01-05 16:51:30,478 - DEBUG - stack []
2025-01-05 16:51:30,479 - DEBUG - dispatch pc=122, inst=RETURN_VALUE(arg=None, lineno=227)
2025-01-05 16:51:30,481 - DEBUG - stack ['$dest_index120.0']
2025-01-05 16:51:30,482 - DEBUG - end state. edges=[]
2025-01-05 16:51:30,483 - DEBUG - pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
2025-01-05 16:51:30,484 - DEBUG - stack: []
2025-01-05 16:51:30,485 - DEBUG - state.pc_initial: State(pc_initial=58 nstack_initial=0)
2025-01-05 16:51:30,486 - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=6, lineno=220)
2025-01-05 16:51:30,488 - DEBUG - stack []
2025-01-05 16:51:30,489 - DEBUG - dispatch pc=60, inst=LOAD_FAST(arg=7, lineno=220)
2025-01-05 16:51:30,490 - DEBUG - stack ['$src_dim_size58.0']
2025-01-05 16:51:30,491 - DEBUG - dispatch pc=62, inst=COMPARE_OP(arg=3, lineno=220)
2025-01-05 16:51:30,493 - DEBUG - stack ['$src_dim_size58.0', '$dest_dim_size60.1']
2025-01-05 16:51:30,494 - DEBUG - dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=102, lineno=220)
2025-01-05 16:51:30,497 - DEBUG - stack ['$62compare_op.2']
2025-01-05 16:51:30,498 - DEBUG - end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:30,499 - DEBUG - pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-05 16:51:30,501 - DEBUG - stack: []
2025-01-05 16:51:30,502 - DEBUG - state.pc_initial: State(pc_initial=86 nstack_initial=0)
2025-01-05 16:51:30,504 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=6, lineno=222)
2025-01-05 16:51:30,505 - DEBUG - stack []
2025-01-05 16:51:30,506 - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=2, lineno=222)
2025-01-05 16:51:30,508 - DEBUG - stack ['$src_dim_size86.0']
2025-01-05 16:51:30,509 - DEBUG - dispatch pc=90, inst=COMPARE_OP(arg=3, lineno=222)
2025-01-05 16:51:30,510 - DEBUG - stack ['$src_dim_size86.0', '$const88.1']
2025-01-05 16:51:30,512 - DEBUG - dispatch pc=92, inst=POP_JUMP_IF_FALSE(arg=102, lineno=222)
2025-01-05 16:51:30,514 - DEBUG - stack ['$90compare_op.2']
2025-01-05 16:51:30,515 - DEBUG - end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:30,516 - DEBUG - pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-05 16:51:30,518 - DEBUG - stack: []
2025-01-05 16:51:30,520 - DEBUG - state.pc_initial: State(pc_initial=66 nstack_initial=0)
2025-01-05 16:51:30,521 - DEBUG - dispatch pc=66, inst=LOAD_FAST(arg=6, lineno=220)
2025-01-05 16:51:30,523 - DEBUG - stack []
2025-01-05 16:51:30,525 - DEBUG - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=220)
2025-01-05 16:51:30,526 - DEBUG - stack ['$src_dim_size66.0']
2025-01-05 16:51:30,528 - DEBUG - dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=220)
2025-01-05 16:51:30,529 - DEBUG - stack ['$src_dim_size66.0', '$const68.1']
2025-01-05 16:51:30,530 - DEBUG - dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=102, lineno=220)
2025-01-05 16:51:30,532 - DEBUG - stack ['$70compare_op.2']
2025-01-05 16:51:30,533 - DEBUG - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:30,535 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-05 16:51:30,537 - DEBUG - stack: []
2025-01-05 16:51:30,538 - DEBUG - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2025-01-05 16:51:30,540 - DEBUG - dispatch pc=102, inst=LOAD_FAST(arg=4, lineno=225)
2025-01-05 16:51:30,541 - DEBUG - stack []
2025-01-05 16:51:30,542 - DEBUG - dispatch pc=104, inst=LOAD_CONST(arg=2, lineno=225)
2025-01-05 16:51:30,544 - DEBUG - stack ['$src_index102.0']
2025-01-05 16:51:30,545 - DEBUG - dispatch pc=106, inst=INPLACE_ADD(arg=None, lineno=225)
2025-01-05 16:51:30,546 - DEBUG - stack ['$src_index102.0', '$const104.1']
2025-01-05 16:51:30,548 - DEBUG - dispatch pc=108, inst=STORE_FAST(arg=4, lineno=225)
2025-01-05 16:51:30,549 - DEBUG - stack ['$106inplace_add.2']
2025-01-05 16:51:30,550 - DEBUG - dispatch pc=110, inst=LOAD_FAST(arg=5, lineno=226)
2025-01-05 16:51:30,551 - DEBUG - stack []
2025-01-05 16:51:30,552 - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=2, lineno=226)
2025-01-05 16:51:30,554 - DEBUG - stack ['$dest_index110.3']
2025-01-05 16:51:30,555 - DEBUG - dispatch pc=114, inst=INPLACE_ADD(arg=None, lineno=226)
2025-01-05 16:51:30,556 - DEBUG - stack ['$dest_index110.3', '$const112.4']
2025-01-05 16:51:30,557 - DEBUG - dispatch pc=116, inst=STORE_FAST(arg=5, lineno=226)
2025-01-05 16:51:30,559 - DEBUG - stack ['$114inplace_add.5']
2025-01-05 16:51:30,560 - DEBUG - dispatch pc=118, inst=JUMP_ABSOLUTE(arg=26, lineno=226)
2025-01-05 16:51:30,561 - DEBUG - stack []
2025-01-05 16:51:30,562 - DEBUG - end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:30,564 - DEBUG - pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
2025-01-05 16:51:30,566 - DEBUG - stack: []
2025-01-05 16:51:30,568 - DEBUG - state.pc_initial: State(pc_initial=94 nstack_initial=0)
2025-01-05 16:51:30,569 - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=6, lineno=224)
2025-01-05 16:51:30,571 - DEBUG - stack []
2025-01-05 16:51:30,572 - DEBUG - dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=224)
2025-01-05 16:51:30,573 - DEBUG - stack ['$src_dim_size94.0']
2025-01-05 16:51:30,574 - DEBUG - dispatch pc=98, inst=LOAD_FAST(arg=5, lineno=224)
2025-01-05 16:51:30,576 - DEBUG - stack ['$src_dim_size94.0', '$dest_shape96.1']
2025-01-05 16:51:30,577 - DEBUG - dispatch pc=100, inst=STORE_SUBSCR(arg=None, lineno=224)
2025-01-05 16:51:30,579 - DEBUG - stack ['$src_dim_size94.0', '$dest_shape96.1', '$dest_index98.2']
2025-01-05 16:51:30,581 - DEBUG - end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:30,582 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-05 16:51:30,585 - DEBUG - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-05 16:51:30,587 - DEBUG - stack: []
2025-01-05 16:51:30,588 - DEBUG - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2025-01-05 16:51:30,590 - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=5, lineno=221)
2025-01-05 16:51:30,592 - DEBUG - stack []
2025-01-05 16:51:30,593 - DEBUG - dispatch pc=76, inst=LOAD_CONST(arg=2, lineno=221)
2025-01-05 16:51:30,595 - DEBUG - stack ['$dest_index74.0']
2025-01-05 16:51:30,596 - DEBUG - dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=221)
2025-01-05 16:51:30,597 - DEBUG - stack ['$dest_index74.0', '$const76.1']
2025-01-05 16:51:30,598 - DEBUG - dispatch pc=80, inst=UNARY_NEGATIVE(arg=None, lineno=221)
2025-01-05 16:51:30,600 - DEBUG - stack ['$78binary_add.2']
2025-01-05 16:51:30,601 - DEBUG - dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=221)
2025-01-05 16:51:30,602 - DEBUG - stack ['$80unary_negative.3']
2025-01-05 16:51:30,603 - DEBUG - end state. edges=[]
2025-01-05 16:51:30,604 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-05 16:51:30,606 - DEBUG - pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-05 16:51:30,608 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=0)])
2025-01-05 16:51:30,610 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:51:30,611 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set()})
2025-01-05 16:51:30,619 - DEBUG - defmap: {}
2025-01-05 16:51:30,620 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:30,621 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:30,623 - DEBUG - keep phismap: {}
2025-01-05 16:51:30,624 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-05 16:51:30,625 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:51:30,626 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
2025-01-05 16:51:30,630 - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:30,633 - DEBUG - block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
2025-01-05 16:51:30,638 - DEBUG - block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$src_index26.0'}), (28, {'res': '$src_ndim28.1'}), (30, {'lhs': '$src_index26.0', 'rhs': '$src_ndim28.1', 'res': '$30compare_op.2'}), (32, {'pred': '$30compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 120: ()})
2025-01-05 16:51:30,641 - DEBUG - block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$src_shape34.0'}), (36, {'res': '$src_index36.1'}), (38, {'index': '$src_index36.1', 'target': '$src_shape34.0', 'res': '$38binary_subscr.2'}), (40, {'value': '$38binary_subscr.2'}), (42, {'res': '$dest_shape42.3'}), (44, {'res': '$dest_index44.4'}), (46, {'index': '$dest_index44.4', 'target': '$dest_shape42.3', 'res': '$46binary_subscr.5'}), (48, {'value': '$46binary_subscr.5'}), (50, {'res': '$dest_dim_size50.6'}), (52, {'res': '$const52.7'}), (54, {'lhs': '$dest_dim_size50.6', 'rhs': '$const52.7', 'res': '$54compare_op.8'}), (56, {'pred': '$54compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 86: ()})
2025-01-05 16:51:30,648 - DEBUG - block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$src_dim_size58.0'}), (60, {'res': '$dest_dim_size60.1'}), (62, {'lhs': '$src_dim_size58.0', 'rhs': '$dest_dim_size60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 102: ()})
2025-01-05 16:51:30,652 - DEBUG - block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$src_dim_size66.0'}), (68, {'res': '$const68.1'}), (70, {'lhs': '$src_dim_size66.0', 'rhs': '$const68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 102: ()})
2025-01-05 16:51:30,656 - DEBUG - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$dest_index74.0'}), (76, {'res': '$const76.1'}), (78, {'lhs': '$dest_index74.0', 'rhs': '$const76.1', 'res': '$78binary_add.2'}), (80, {'value': '$78binary_add.2', 'res': '$80unary_negative.3'}), (82, {'retval': '$80unary_negative.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:30,660 - DEBUG - block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$src_dim_size86.0'}), (88, {'res': '$const88.1'}), (90, {'lhs': '$src_dim_size86.0', 'rhs': '$const88.1', 'res': '$90compare_op.2'}), (92, {'pred': '$90compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: (), 102: ()})
2025-01-05 16:51:30,665 - DEBUG - block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$src_dim_size94.0'}), (96, {'res': '$dest_shape96.1'}), (98, {'res': '$dest_index98.2'}), (100, {'target': '$dest_shape96.1', 'index': '$dest_index98.2', 'value': '$src_dim_size94.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ()})
2025-01-05 16:51:30,669 - DEBUG - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$src_index102.0'}), (104, {'res': '$const104.1'}), (106, {'lhs': '$src_index102.0', 'rhs': '$const104.1', 'res': '$106inplace_add.2'}), (108, {'value': '$106inplace_add.2'}), (110, {'res': '$dest_index110.3'}), (112, {'res': '$const112.4'}), (114, {'lhs': '$dest_index110.3', 'rhs': '$const112.4', 'res': '$114inplace_add.5'}), (116, {'value': '$114inplace_add.5'}), (118, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
2025-01-05 16:51:30,675 - DEBUG - block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$dest_index120.0'}), (122, {'retval': '$dest_index120.0', 'castval': '$122return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:30,681 - DEBUG - label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:204),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    $30compare_op.2 = src_index < src_ndim   ['$30compare_op.2', 'src_index', 'src_ndim']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:211),), kws=(), vararg=None, varkwarg=None, target=None) ['$30compare_op.2', '$32pred', 'bool32']
    branch $32pred, 34, 120                  ['$32pred']
label 34:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const52.7 = const(int, 1)               ['$const52.7']
    $54compare_op.8 = dest_dim_size != $const52.7 ['$54compare_op.8', '$const52.7', 'dest_dim_size']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:216),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.8', '$56pred', 'bool56']
    branch $56pred, 58, 86                   ['$56pred']
label 58:
    $62compare_op.2 = src_dim_size != dest_dim_size ['$62compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 102                  ['$64pred']
label 66:
    $const68.1 = const(int, 1)               ['$const68.1']
    $70compare_op.2 = src_dim_size != $const68.1 ['$70compare_op.2', '$const68.1', 'src_dim_size']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 102                  ['$72pred']
label 74:
    $const76.1 = const(int, 1)               ['$const76.1']
    $78binary_add.2 = dest_index + $const76.1 ['$78binary_add.2', '$const76.1', 'dest_index']
    $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2) ['$78binary_add.2', '$80unary_negative.3']
    $82return_value.4 = cast(value=$80unary_negative.3) ['$80unary_negative.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']
label 86:
    $const88.1 = const(int, 1)               ['$const88.1']
    $90compare_op.2 = src_dim_size != $const88.1 ['$90compare_op.2', '$const88.1', 'src_dim_size']
    bool92 = global(bool: <class 'bool'>)    ['bool92']
    $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:222),), kws=(), vararg=None, varkwarg=None, target=None) ['$90compare_op.2', '$92pred', 'bool92']
    branch $92pred, 94, 102                  ['$92pred']
label 94:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 102                                 []
label 102:
    $const104.1 = const(int, 1)              ['$const104.1']
    $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined) ['$106inplace_add.2', '$const104.1', 'src_index']
    src_index = $106inplace_add.2            ['$106inplace_add.2', 'src_index']
    $const112.4 = const(int, 1)              ['$const112.4']
    $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined) ['$114inplace_add.5', '$const112.4', 'dest_index']
    dest_index = $114inplace_add.5           ['$114inplace_add.5', 'dest_index']
    jump 26                                  []
label 120:
    $122return_value.1 = cast(value=dest_index) ['$122return_value.1', 'dest_index']
    return $122return_value.1                ['$122return_value.1']

2025-01-05 16:51:30,749 - DEBUG - ==== SSA block analysis pass on 0
2025-01-05 16:51:30,750 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000149B5A90>
2025-01-05 16:51:30,752 - DEBUG - on stmt: src_ndim = arg(0, name=src_ndim)
2025-01-05 16:51:30,753 - DEBUG - on stmt: src_shape = arg(1, name=src_shape)
2025-01-05 16:51:30,754 - DEBUG - on stmt: dest_ndim = arg(2, name=dest_ndim)
2025-01-05 16:51:30,755 - DEBUG - on stmt: dest_shape = arg(3, name=dest_shape)
2025-01-05 16:51:30,755 - DEBUG - on stmt: $6compare_op.2 = src_ndim > dest_ndim
2025-01-05 16:51:30,757 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,758 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:204),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,760 - DEBUG - on stmt: branch $8pred, 10, 14
2025-01-05 16:51:30,762 - DEBUG - ==== SSA block analysis pass on 10
2025-01-05 16:51:30,762 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000149B5A90>
2025-01-05 16:51:30,764 - DEBUG - on stmt: $const10.0 = const(int, 0)
2025-01-05 16:51:30,765 - DEBUG - on stmt: $12return_value.1 = cast(value=$const10.0)
2025-01-05 16:51:30,767 - DEBUG - on stmt: return $12return_value.1
2025-01-05 16:51:30,768 - DEBUG - ==== SSA block analysis pass on 14
2025-01-05 16:51:30,768 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000149B5A90>
2025-01-05 16:51:30,770 - DEBUG - on stmt: src_index = const(int, 0)
2025-01-05 16:51:30,771 - DEBUG - on stmt: dest_index = dest_ndim - src_ndim
2025-01-05 16:51:30,772 - DEBUG - on stmt: jump 26
2025-01-05 16:51:30,773 - DEBUG - ==== SSA block analysis pass on 26
2025-01-05 16:51:30,774 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000149B5A90>
2025-01-05 16:51:30,775 - DEBUG - on stmt: $30compare_op.2 = src_index < src_ndim
2025-01-05 16:51:30,777 - DEBUG - on stmt: bool32 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,778 - DEBUG - on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,780 - DEBUG - on stmt: branch $32pred, 34, 120
2025-01-05 16:51:30,782 - DEBUG - ==== SSA block analysis pass on 34
2025-01-05 16:51:30,783 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000149B5A90>
2025-01-05 16:51:30,785 - DEBUG - on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2025-01-05 16:51:30,786 - DEBUG - on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
2025-01-05 16:51:30,788 - DEBUG - on stmt: $const52.7 = const(int, 1)
2025-01-05 16:51:30,789 - DEBUG - on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2025-01-05 16:51:30,790 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,791 - DEBUG - on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:216),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,794 - DEBUG - on stmt: branch $56pred, 58, 86
2025-01-05 16:51:30,795 - DEBUG - ==== SSA block analysis pass on 58
2025-01-05 16:51:30,796 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000149B5A90>
2025-01-05 16:51:30,798 - DEBUG - on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2025-01-05 16:51:30,799 - DEBUG - on stmt: bool64 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,801 - DEBUG - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,803 - DEBUG - on stmt: branch $64pred, 66, 102
2025-01-05 16:51:30,804 - DEBUG - ==== SSA block analysis pass on 66
2025-01-05 16:51:30,805 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000149B5A90>
2025-01-05 16:51:30,806 - DEBUG - on stmt: $const68.1 = const(int, 1)
2025-01-05 16:51:30,807 - DEBUG - on stmt: $70compare_op.2 = src_dim_size != $const68.1
2025-01-05 16:51:30,809 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,810 - DEBUG - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,813 - DEBUG - on stmt: branch $72pred, 74, 102
2025-01-05 16:51:30,814 - DEBUG - ==== SSA block analysis pass on 74
2025-01-05 16:51:30,815 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000149B5A90>
2025-01-05 16:51:30,817 - DEBUG - on stmt: $const76.1 = const(int, 1)
2025-01-05 16:51:30,818 - DEBUG - on stmt: $78binary_add.2 = dest_index + $const76.1
2025-01-05 16:51:30,820 - DEBUG - on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2025-01-05 16:51:30,821 - DEBUG - on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2025-01-05 16:51:30,823 - DEBUG - on stmt: return $82return_value.4
2025-01-05 16:51:30,824 - DEBUG - ==== SSA block analysis pass on 86
2025-01-05 16:51:30,825 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000149B5A90>
2025-01-05 16:51:30,827 - DEBUG - on stmt: $const88.1 = const(int, 1)
2025-01-05 16:51:30,828 - DEBUG - on stmt: $90compare_op.2 = src_dim_size != $const88.1
2025-01-05 16:51:30,830 - DEBUG - on stmt: bool92 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,831 - DEBUG - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,833 - DEBUG - on stmt: branch $92pred, 94, 102
2025-01-05 16:51:30,834 - DEBUG - ==== SSA block analysis pass on 94
2025-01-05 16:51:30,835 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000149B5A90>
2025-01-05 16:51:30,837 - DEBUG - on stmt: dest_shape[dest_index] = src_dim_size
2025-01-05 16:51:30,838 - DEBUG - on stmt: jump 102
2025-01-05 16:51:30,839 - DEBUG - ==== SSA block analysis pass on 102
2025-01-05 16:51:30,840 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000149B5A90>
2025-01-05 16:51:30,841 - DEBUG - on stmt: $const104.1 = const(int, 1)
2025-01-05 16:51:30,842 - DEBUG - on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:30,845 - DEBUG - on stmt: src_index = $106inplace_add.2
2025-01-05 16:51:30,846 - DEBUG - on stmt: $const112.4 = const(int, 1)
2025-01-05 16:51:30,847 - DEBUG - on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:30,849 - DEBUG - on stmt: dest_index = $114inplace_add.5
2025-01-05 16:51:30,850 - DEBUG - on stmt: jump 26
2025-01-05 16:51:30,851 - DEBUG - ==== SSA block analysis pass on 120
2025-01-05 16:51:30,852 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000149B5A90>
2025-01-05 16:51:30,853 - DEBUG - on stmt: $122return_value.1 = cast(value=dest_index)
2025-01-05 16:51:30,855 - DEBUG - on stmt: return $122return_value.1
2025-01-05 16:51:30,857 - DEBUG - defs defaultdict(<class 'list'>,
            {'$106inplace_add.2': [<numba.core.ir.Assign object at 0x00000000149DCE50>],
             '$114inplace_add.5': [<numba.core.ir.Assign object at 0x00000000149DE370>],
             '$122return_value.1': [<numba.core.ir.Assign object at 0x00000000149DE790>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x00000000149B4550>],
             '$30compare_op.2': [<numba.core.ir.Assign object at 0x00000000149D65B0>],
             '$32pred': [<numba.core.ir.Assign object at 0x00000000149D6850>],
             '$54compare_op.8': [<numba.core.ir.Assign object at 0x00000000149D86D0>],
             '$56pred': [<numba.core.ir.Assign object at 0x00000000149D8970>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0x00000000149D8BB0>],
             '$64pred': [<numba.core.ir.Assign object at 0x00000000149D8E50>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x00000000149C6CD0>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0x00000000149DA310>],
             '$72pred': [<numba.core.ir.Assign object at 0x00000000149DA5B0>],
             '$78binary_add.2': [<numba.core.ir.Assign object at 0x00000000149DAA90>],
             '$80unary_negative.3': [<numba.core.ir.Assign object at 0x00000000149DAC10>],
             '$82return_value.4': [<numba.core.ir.Assign object at 0x00000000149DAD90>],
             '$8pred': [<numba.core.ir.Assign object at 0x00000000149ACA30>],
             '$90compare_op.2': [<numba.core.ir.Assign object at 0x00000000149DC2B0>],
             '$92pred': [<numba.core.ir.Assign object at 0x00000000149DC550>],
             '$const10.0': [<numba.core.ir.Assign object at 0x0000000014946520>],
             '$const104.1': [<numba.core.ir.Assign object at 0x00000000149DCCD0>],
             '$const112.4': [<numba.core.ir.Assign object at 0x00000000149DE1F0>],
             '$const52.7': [<numba.core.ir.Assign object at 0x00000000149D8550>],
             '$const68.1': [<numba.core.ir.Assign object at 0x00000000149DA190>],
             '$const76.1': [<numba.core.ir.Assign object at 0x00000000149DA910>],
             '$const88.1': [<numba.core.ir.Assign object at 0x00000000149DC130>],
             'bool32': [<numba.core.ir.Assign object at 0x00000000149D6730>],
             'bool56': [<numba.core.ir.Assign object at 0x00000000149D8850>],
             'bool64': [<numba.core.ir.Assign object at 0x00000000149D8D30>],
             'bool72': [<numba.core.ir.Assign object at 0x00000000149DA490>],
             'bool8': [<numba.core.ir.Assign object at 0x00000000149A2B50>],
             'bool92': [<numba.core.ir.Assign object at 0x00000000149DC430>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x00000000149D8190>],
             'dest_index': [<numba.core.ir.Assign object at 0x00000000149D6130>,
                            <numba.core.ir.Assign object at 0x00000000149DE430>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x0000000014943D90>],
             'dest_shape': [<numba.core.ir.Assign object at 0x0000000014943A00>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x00000000149D6C70>],
             'src_index': [<numba.core.ir.Assign object at 0x000000001493E8E0>,
                           <numba.core.ir.Assign object at 0x00000000149DCF10>],
             'src_ndim': [<numba.core.ir.Assign object at 0x0000000014943970>],
             'src_shape': [<numba.core.ir.Assign object at 0x0000000014943CA0>]})
2025-01-05 16:51:30,897 - DEBUG - SSA violators {'dest_index', 'src_index'}
2025-01-05 16:51:30,898 - DEBUG - Fix SSA violator on var dest_index
2025-01-05 16:51:30,899 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:30,900 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149B5190>
2025-01-05 16:51:30,901 - DEBUG - on stmt: src_ndim = arg(0, name=src_ndim)
2025-01-05 16:51:30,903 - DEBUG - on stmt: src_shape = arg(1, name=src_shape)
2025-01-05 16:51:30,903 - DEBUG - on stmt: dest_ndim = arg(2, name=dest_ndim)
2025-01-05 16:51:30,904 - DEBUG - on stmt: dest_shape = arg(3, name=dest_shape)
2025-01-05 16:51:30,905 - DEBUG - on stmt: $6compare_op.2 = src_ndim > dest_ndim
2025-01-05 16:51:30,907 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,908 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:204),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,910 - DEBUG - on stmt: branch $8pred, 10, 14
2025-01-05 16:51:30,911 - DEBUG - ==== SSA block rewrite pass on 10
2025-01-05 16:51:30,912 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149B5190>
2025-01-05 16:51:30,914 - DEBUG - on stmt: $const10.0 = const(int, 0)
2025-01-05 16:51:30,915 - DEBUG - on stmt: $12return_value.1 = cast(value=$const10.0)
2025-01-05 16:51:30,916 - DEBUG - on stmt: return $12return_value.1
2025-01-05 16:51:30,917 - DEBUG - ==== SSA block rewrite pass on 14
2025-01-05 16:51:30,918 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149B5190>
2025-01-05 16:51:30,920 - DEBUG - on stmt: src_index = const(int, 0)
2025-01-05 16:51:30,921 - DEBUG - on stmt: dest_index = dest_ndim - src_ndim
2025-01-05 16:51:30,922 - DEBUG - first assign: dest_index
2025-01-05 16:51:30,923 - DEBUG - replaced with: dest_index = dest_ndim - src_ndim
2025-01-05 16:51:30,924 - DEBUG - on stmt: jump 26
2025-01-05 16:51:30,925 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-05 16:51:30,926 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149B5190>
2025-01-05 16:51:30,928 - DEBUG - on stmt: $30compare_op.2 = src_index < src_ndim
2025-01-05 16:51:30,930 - DEBUG - on stmt: bool32 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,932 - DEBUG - on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,934 - DEBUG - on stmt: branch $32pred, 34, 120
2025-01-05 16:51:30,935 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-05 16:51:30,936 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149B5190>
2025-01-05 16:51:30,937 - DEBUG - on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2025-01-05 16:51:30,939 - DEBUG - on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
2025-01-05 16:51:30,940 - DEBUG - on stmt: $const52.7 = const(int, 1)
2025-01-05 16:51:30,941 - DEBUG - on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2025-01-05 16:51:30,942 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,944 - DEBUG - on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:216),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,946 - DEBUG - on stmt: branch $56pred, 58, 86
2025-01-05 16:51:30,948 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-05 16:51:30,949 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149B5190>
2025-01-05 16:51:30,950 - DEBUG - on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2025-01-05 16:51:30,952 - DEBUG - on stmt: bool64 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,953 - DEBUG - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,955 - DEBUG - on stmt: branch $64pred, 66, 102
2025-01-05 16:51:30,957 - DEBUG - ==== SSA block rewrite pass on 66
2025-01-05 16:51:30,958 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149B5190>
2025-01-05 16:51:30,959 - DEBUG - on stmt: $const68.1 = const(int, 1)
2025-01-05 16:51:30,960 - DEBUG - on stmt: $70compare_op.2 = src_dim_size != $const68.1
2025-01-05 16:51:30,961 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,963 - DEBUG - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,966 - DEBUG - on stmt: branch $72pred, 74, 102
2025-01-05 16:51:30,967 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-05 16:51:30,968 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149B5190>
2025-01-05 16:51:30,969 - DEBUG - on stmt: $const76.1 = const(int, 1)
2025-01-05 16:51:30,971 - DEBUG - on stmt: $78binary_add.2 = dest_index + $const76.1
2025-01-05 16:51:30,973 - DEBUG - on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2025-01-05 16:51:30,974 - DEBUG - on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2025-01-05 16:51:30,976 - DEBUG - on stmt: return $82return_value.4
2025-01-05 16:51:30,977 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-05 16:51:30,978 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149B5190>
2025-01-05 16:51:30,980 - DEBUG - on stmt: $const88.1 = const(int, 1)
2025-01-05 16:51:30,981 - DEBUG - on stmt: $90compare_op.2 = src_dim_size != $const88.1
2025-01-05 16:51:30,982 - DEBUG - on stmt: bool92 = global(bool: <class 'bool'>)
2025-01-05 16:51:30,984 - DEBUG - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:30,986 - DEBUG - on stmt: branch $92pred, 94, 102
2025-01-05 16:51:30,987 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:30,988 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149B5190>
2025-01-05 16:51:30,989 - DEBUG - on stmt: dest_shape[dest_index] = src_dim_size
2025-01-05 16:51:30,991 - DEBUG - on stmt: jump 102
2025-01-05 16:51:30,992 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-05 16:51:30,993 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149B5190>
2025-01-05 16:51:30,994 - DEBUG - on stmt: $const104.1 = const(int, 1)
2025-01-05 16:51:30,995 - DEBUG - on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:30,998 - DEBUG - on stmt: src_index = $106inplace_add.2
2025-01-05 16:51:30,999 - DEBUG - on stmt: $const112.4 = const(int, 1)
2025-01-05 16:51:31,000 - DEBUG - on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:31,002 - DEBUG - on stmt: dest_index = $114inplace_add.5
2025-01-05 16:51:31,003 - DEBUG - replaced with: dest_index.1 = $114inplace_add.5
2025-01-05 16:51:31,004 - DEBUG - on stmt: jump 26
2025-01-05 16:51:31,005 - DEBUG - ==== SSA block rewrite pass on 120
2025-01-05 16:51:31,006 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149B5190>
2025-01-05 16:51:31,008 - DEBUG - on stmt: $122return_value.1 = cast(value=dest_index)
2025-01-05 16:51:31,009 - DEBUG - on stmt: return $122return_value.1
2025-01-05 16:51:31,010 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x0000000014946E80>],
             102: [<numba.core.ir.Assign object at 0x00000000149DED60>]})
2025-01-05 16:51:31,013 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:31,015 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,016 - DEBUG - on stmt: src_ndim = arg(0, name=src_ndim)
2025-01-05 16:51:31,017 - DEBUG - on stmt: src_shape = arg(1, name=src_shape)
2025-01-05 16:51:31,018 - DEBUG - on stmt: dest_ndim = arg(2, name=dest_ndim)
2025-01-05 16:51:31,019 - DEBUG - on stmt: dest_shape = arg(3, name=dest_shape)
2025-01-05 16:51:31,020 - DEBUG - on stmt: $6compare_op.2 = src_ndim > dest_ndim
2025-01-05 16:51:31,021 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:31,022 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:204),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,024 - DEBUG - on stmt: branch $8pred, 10, 14
2025-01-05 16:51:31,025 - DEBUG - ==== SSA block rewrite pass on 10
2025-01-05 16:51:31,026 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,028 - DEBUG - on stmt: $const10.0 = const(int, 0)
2025-01-05 16:51:31,029 - DEBUG - on stmt: $12return_value.1 = cast(value=$const10.0)
2025-01-05 16:51:31,030 - DEBUG - on stmt: return $12return_value.1
2025-01-05 16:51:31,032 - DEBUG - ==== SSA block rewrite pass on 14
2025-01-05 16:51:31,033 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,034 - DEBUG - on stmt: src_index = const(int, 0)
2025-01-05 16:51:31,035 - DEBUG - on stmt: dest_index = dest_ndim - src_ndim
2025-01-05 16:51:31,036 - DEBUG - on stmt: jump 26
2025-01-05 16:51:31,037 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-05 16:51:31,038 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,039 - DEBUG - on stmt: $30compare_op.2 = src_index < src_ndim
2025-01-05 16:51:31,041 - DEBUG - on stmt: bool32 = global(bool: <class 'bool'>)
2025-01-05 16:51:31,042 - DEBUG - on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,045 - DEBUG - on stmt: branch $32pred, 34, 120
2025-01-05 16:51:31,046 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-05 16:51:31,047 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,049 - DEBUG - on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2025-01-05 16:51:31,050 - DEBUG - on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
2025-01-05 16:51:31,052 - DEBUG - find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
2025-01-05 16:51:31,053 - DEBUG - find_def_from_top label 34
2025-01-05 16:51:31,055 - DEBUG - idom 26 from label 34
2025-01-05 16:51:31,055 - DEBUG - find_def_from_bottom label 26
2025-01-05 16:51:31,056 - DEBUG - find_def_from_top label 26
2025-01-05 16:51:31,057 - DEBUG - insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
2025-01-05 16:51:31,059 - DEBUG - find_def_from_bottom label 102
2025-01-05 16:51:31,060 - DEBUG - incoming_def dest_index.1 = $114inplace_add.5
2025-01-05 16:51:31,061 - DEBUG - find_def_from_bottom label 14
2025-01-05 16:51:31,062 - DEBUG - incoming_def dest_index = dest_ndim - src_ndim
2025-01-05 16:51:31,063 - DEBUG - replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
2025-01-05 16:51:31,065 - DEBUG - on stmt: $const52.7 = const(int, 1)
2025-01-05 16:51:31,066 - DEBUG - on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2025-01-05 16:51:31,067 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:31,069 - DEBUG - on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:216),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,071 - DEBUG - on stmt: branch $56pred, 58, 86
2025-01-05 16:51:31,072 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-05 16:51:31,073 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,074 - DEBUG - on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2025-01-05 16:51:31,076 - DEBUG - on stmt: bool64 = global(bool: <class 'bool'>)
2025-01-05 16:51:31,077 - DEBUG - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,080 - DEBUG - on stmt: branch $64pred, 66, 102
2025-01-05 16:51:31,081 - DEBUG - ==== SSA block rewrite pass on 66
2025-01-05 16:51:31,082 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,083 - DEBUG - on stmt: $const68.1 = const(int, 1)
2025-01-05 16:51:31,084 - DEBUG - on stmt: $70compare_op.2 = src_dim_size != $const68.1
2025-01-05 16:51:31,086 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:31,087 - DEBUG - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,089 - DEBUG - on stmt: branch $72pred, 74, 102
2025-01-05 16:51:31,091 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-05 16:51:31,091 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,093 - DEBUG - on stmt: $const76.1 = const(int, 1)
2025-01-05 16:51:31,094 - DEBUG - on stmt: $78binary_add.2 = dest_index + $const76.1
2025-01-05 16:51:31,095 - DEBUG - find_def var='dest_index' stmt=$78binary_add.2 = dest_index + $const76.1
2025-01-05 16:51:31,097 - DEBUG - find_def_from_top label 74
2025-01-05 16:51:31,098 - DEBUG - idom 66 from label 74
2025-01-05 16:51:31,099 - DEBUG - find_def_from_bottom label 66
2025-01-05 16:51:31,100 - DEBUG - find_def_from_top label 66
2025-01-05 16:51:31,101 - DEBUG - idom 58 from label 66
2025-01-05 16:51:31,102 - DEBUG - find_def_from_bottom label 58
2025-01-05 16:51:31,103 - DEBUG - find_def_from_top label 58
2025-01-05 16:51:31,104 - DEBUG - idom 34 from label 58
2025-01-05 16:51:31,105 - DEBUG - find_def_from_bottom label 34
2025-01-05 16:51:31,106 - DEBUG - find_def_from_top label 34
2025-01-05 16:51:31,107 - DEBUG - idom 26 from label 34
2025-01-05 16:51:31,108 - DEBUG - find_def_from_bottom label 26
2025-01-05 16:51:31,109 - DEBUG - replaced with: $78binary_add.2 = dest_index.2 + $const76.1
2025-01-05 16:51:31,110 - DEBUG - on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2025-01-05 16:51:31,112 - DEBUG - on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2025-01-05 16:51:31,113 - DEBUG - on stmt: return $82return_value.4
2025-01-05 16:51:31,114 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-05 16:51:31,115 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,117 - DEBUG - on stmt: $const88.1 = const(int, 1)
2025-01-05 16:51:31,118 - DEBUG - on stmt: $90compare_op.2 = src_dim_size != $const88.1
2025-01-05 16:51:31,120 - DEBUG - on stmt: bool92 = global(bool: <class 'bool'>)
2025-01-05 16:51:31,122 - DEBUG - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,124 - DEBUG - on stmt: branch $92pred, 94, 102
2025-01-05 16:51:31,125 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:31,126 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,128 - DEBUG - on stmt: dest_shape[dest_index] = src_dim_size
2025-01-05 16:51:31,130 - DEBUG - find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
2025-01-05 16:51:31,131 - DEBUG - find_def_from_top label 94
2025-01-05 16:51:31,132 - DEBUG - idom 86 from label 94
2025-01-05 16:51:31,133 - DEBUG - find_def_from_bottom label 86
2025-01-05 16:51:31,134 - DEBUG - find_def_from_top label 86
2025-01-05 16:51:31,135 - DEBUG - idom 34 from label 86
2025-01-05 16:51:31,136 - DEBUG - find_def_from_bottom label 34
2025-01-05 16:51:31,137 - DEBUG - find_def_from_top label 34
2025-01-05 16:51:31,138 - DEBUG - idom 26 from label 34
2025-01-05 16:51:31,139 - DEBUG - find_def_from_bottom label 26
2025-01-05 16:51:31,140 - DEBUG - replaced with: dest_shape[dest_index.2] = src_dim_size
2025-01-05 16:51:31,141 - DEBUG - on stmt: jump 102
2025-01-05 16:51:31,142 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-05 16:51:31,143 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,144 - DEBUG - on stmt: $const104.1 = const(int, 1)
2025-01-05 16:51:31,145 - DEBUG - on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:31,148 - DEBUG - on stmt: src_index = $106inplace_add.2
2025-01-05 16:51:31,149 - DEBUG - on stmt: $const112.4 = const(int, 1)
2025-01-05 16:51:31,150 - DEBUG - on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:31,152 - DEBUG - find_def var='dest_index' stmt=$114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:31,155 - DEBUG - find_def_from_top label 102
2025-01-05 16:51:31,156 - DEBUG - idom 34 from label 102
2025-01-05 16:51:31,157 - DEBUG - find_def_from_bottom label 34
2025-01-05 16:51:31,158 - DEBUG - find_def_from_top label 34
2025-01-05 16:51:31,159 - DEBUG - idom 26 from label 34
2025-01-05 16:51:31,160 - DEBUG - find_def_from_bottom label 26
2025-01-05 16:51:31,161 - DEBUG - replaced with: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:31,162 - DEBUG - on stmt: dest_index.1 = $114inplace_add.5
2025-01-05 16:51:31,164 - DEBUG - on stmt: jump 26
2025-01-05 16:51:31,165 - DEBUG - ==== SSA block rewrite pass on 120
2025-01-05 16:51:31,166 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,167 - DEBUG - on stmt: $122return_value.1 = cast(value=dest_index)
2025-01-05 16:51:31,169 - DEBUG - find_def var='dest_index' stmt=$122return_value.1 = cast(value=dest_index)
2025-01-05 16:51:31,170 - DEBUG - find_def_from_top label 120
2025-01-05 16:51:31,171 - DEBUG - idom 26 from label 120
2025-01-05 16:51:31,172 - DEBUG - find_def_from_bottom label 26
2025-01-05 16:51:31,173 - DEBUG - replaced with: $122return_value.1 = cast(value=dest_index.2)
2025-01-05 16:51:31,174 - DEBUG - on stmt: return $122return_value.1
2025-01-05 16:51:31,176 - DEBUG - Fix SSA violator on var src_index
2025-01-05 16:51:31,176 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:31,177 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149DEAC0>
2025-01-05 16:51:31,179 - DEBUG - on stmt: src_ndim = arg(0, name=src_ndim)
2025-01-05 16:51:31,180 - DEBUG - on stmt: src_shape = arg(1, name=src_shape)
2025-01-05 16:51:31,181 - DEBUG - on stmt: dest_ndim = arg(2, name=dest_ndim)
2025-01-05 16:51:31,182 - DEBUG - on stmt: dest_shape = arg(3, name=dest_shape)
2025-01-05 16:51:31,183 - DEBUG - on stmt: $6compare_op.2 = src_ndim > dest_ndim
2025-01-05 16:51:31,184 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:31,185 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:204),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,187 - DEBUG - on stmt: branch $8pred, 10, 14
2025-01-05 16:51:31,188 - DEBUG - ==== SSA block rewrite pass on 10
2025-01-05 16:51:31,189 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149DEAC0>
2025-01-05 16:51:31,191 - DEBUG - on stmt: $const10.0 = const(int, 0)
2025-01-05 16:51:31,192 - DEBUG - on stmt: $12return_value.1 = cast(value=$const10.0)
2025-01-05 16:51:31,193 - DEBUG - on stmt: return $12return_value.1
2025-01-05 16:51:31,194 - DEBUG - ==== SSA block rewrite pass on 14
2025-01-05 16:51:31,195 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149DEAC0>
2025-01-05 16:51:31,197 - DEBUG - on stmt: src_index = const(int, 0)
2025-01-05 16:51:31,198 - DEBUG - first assign: src_index
2025-01-05 16:51:31,199 - DEBUG - replaced with: src_index = const(int, 0)
2025-01-05 16:51:31,200 - DEBUG - on stmt: dest_index = dest_ndim - src_ndim
2025-01-05 16:51:31,201 - DEBUG - on stmt: jump 26
2025-01-05 16:51:31,202 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-05 16:51:31,203 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149DEAC0>
2025-01-05 16:51:31,205 - DEBUG - on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:226), Var(dest_index, npyimpl.py:210)], incoming_blocks=[102, 14])
2025-01-05 16:51:31,207 - DEBUG - on stmt: $30compare_op.2 = src_index < src_ndim
2025-01-05 16:51:31,208 - DEBUG - on stmt: bool32 = global(bool: <class 'bool'>)
2025-01-05 16:51:31,210 - DEBUG - on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,212 - DEBUG - on stmt: branch $32pred, 34, 120
2025-01-05 16:51:31,214 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-05 16:51:31,215 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149DEAC0>
2025-01-05 16:51:31,216 - DEBUG - on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2025-01-05 16:51:31,217 - DEBUG - on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
2025-01-05 16:51:31,219 - DEBUG - on stmt: $const52.7 = const(int, 1)
2025-01-05 16:51:31,220 - DEBUG - on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2025-01-05 16:51:31,221 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:31,223 - DEBUG - on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:216),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,225 - DEBUG - on stmt: branch $56pred, 58, 86
2025-01-05 16:51:31,226 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-05 16:51:31,227 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149DEAC0>
2025-01-05 16:51:31,228 - DEBUG - on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2025-01-05 16:51:31,230 - DEBUG - on stmt: bool64 = global(bool: <class 'bool'>)
2025-01-05 16:51:31,232 - DEBUG - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,234 - DEBUG - on stmt: branch $64pred, 66, 102
2025-01-05 16:51:31,235 - DEBUG - ==== SSA block rewrite pass on 66
2025-01-05 16:51:31,236 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149DEAC0>
2025-01-05 16:51:31,237 - DEBUG - on stmt: $const68.1 = const(int, 1)
2025-01-05 16:51:31,238 - DEBUG - on stmt: $70compare_op.2 = src_dim_size != $const68.1
2025-01-05 16:51:31,240 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:31,241 - DEBUG - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,244 - DEBUG - on stmt: branch $72pred, 74, 102
2025-01-05 16:51:31,245 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-05 16:51:31,246 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149DEAC0>
2025-01-05 16:51:31,247 - DEBUG - on stmt: $const76.1 = const(int, 1)
2025-01-05 16:51:31,248 - DEBUG - on stmt: $78binary_add.2 = dest_index.2 + $const76.1
2025-01-05 16:51:31,250 - DEBUG - on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2025-01-05 16:51:31,251 - DEBUG - on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2025-01-05 16:51:31,253 - DEBUG - on stmt: return $82return_value.4
2025-01-05 16:51:31,254 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-05 16:51:31,255 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149DEAC0>
2025-01-05 16:51:31,256 - DEBUG - on stmt: $const88.1 = const(int, 1)
2025-01-05 16:51:31,257 - DEBUG - on stmt: $90compare_op.2 = src_dim_size != $const88.1
2025-01-05 16:51:31,259 - DEBUG - on stmt: bool92 = global(bool: <class 'bool'>)
2025-01-05 16:51:31,260 - DEBUG - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,262 - DEBUG - on stmt: branch $92pred, 94, 102
2025-01-05 16:51:31,264 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:31,265 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149DEAC0>
2025-01-05 16:51:31,266 - DEBUG - on stmt: dest_shape[dest_index.2] = src_dim_size
2025-01-05 16:51:31,268 - DEBUG - on stmt: jump 102
2025-01-05 16:51:31,269 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-05 16:51:31,270 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149DEAC0>
2025-01-05 16:51:31,272 - DEBUG - on stmt: $const104.1 = const(int, 1)
2025-01-05 16:51:31,273 - DEBUG - on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:31,275 - DEBUG - on stmt: src_index = $106inplace_add.2
2025-01-05 16:51:31,276 - DEBUG - replaced with: src_index.1 = $106inplace_add.2
2025-01-05 16:51:31,278 - DEBUG - on stmt: $const112.4 = const(int, 1)
2025-01-05 16:51:31,279 - DEBUG - on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:31,281 - DEBUG - on stmt: dest_index.1 = $114inplace_add.5
2025-01-05 16:51:31,282 - DEBUG - on stmt: jump 26
2025-01-05 16:51:31,283 - DEBUG - ==== SSA block rewrite pass on 120
2025-01-05 16:51:31,284 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000149DEAC0>
2025-01-05 16:51:31,286 - DEBUG - on stmt: $122return_value.1 = cast(value=dest_index.2)
2025-01-05 16:51:31,287 - DEBUG - on stmt: return $122return_value.1
2025-01-05 16:51:31,289 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x00000000149B1310>],
             102: [<numba.core.ir.Assign object at 0x00000000149E8820>]})
2025-01-05 16:51:31,291 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:31,292 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,294 - DEBUG - on stmt: src_ndim = arg(0, name=src_ndim)
2025-01-05 16:51:31,295 - DEBUG - on stmt: src_shape = arg(1, name=src_shape)
2025-01-05 16:51:31,296 - DEBUG - on stmt: dest_ndim = arg(2, name=dest_ndim)
2025-01-05 16:51:31,297 - DEBUG - on stmt: dest_shape = arg(3, name=dest_shape)
2025-01-05 16:51:31,298 - DEBUG - on stmt: $6compare_op.2 = src_ndim > dest_ndim
2025-01-05 16:51:31,299 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:31,300 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:204),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,302 - DEBUG - on stmt: branch $8pred, 10, 14
2025-01-05 16:51:31,303 - DEBUG - ==== SSA block rewrite pass on 10
2025-01-05 16:51:31,304 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,306 - DEBUG - on stmt: $const10.0 = const(int, 0)
2025-01-05 16:51:31,307 - DEBUG - on stmt: $12return_value.1 = cast(value=$const10.0)
2025-01-05 16:51:31,308 - DEBUG - on stmt: return $12return_value.1
2025-01-05 16:51:31,309 - DEBUG - ==== SSA block rewrite pass on 14
2025-01-05 16:51:31,310 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,311 - DEBUG - on stmt: src_index = const(int, 0)
2025-01-05 16:51:31,312 - DEBUG - on stmt: dest_index = dest_ndim - src_ndim
2025-01-05 16:51:31,314 - DEBUG - on stmt: jump 26
2025-01-05 16:51:31,315 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-05 16:51:31,316 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,317 - DEBUG - on stmt: dest_index.2 = phi(incoming_values=[Var(dest_index.1, npyimpl.py:226), Var(dest_index, npyimpl.py:210)], incoming_blocks=[102, 14])
2025-01-05 16:51:31,319 - DEBUG - on stmt: $30compare_op.2 = src_index < src_ndim
2025-01-05 16:51:31,321 - DEBUG - find_def var='src_index' stmt=$30compare_op.2 = src_index < src_ndim
2025-01-05 16:51:31,322 - DEBUG - find_def_from_top label 26
2025-01-05 16:51:31,323 - DEBUG - insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
2025-01-05 16:51:31,325 - DEBUG - find_def_from_bottom label 102
2025-01-05 16:51:31,326 - DEBUG - incoming_def src_index.1 = $106inplace_add.2
2025-01-05 16:51:31,327 - DEBUG - find_def_from_bottom label 14
2025-01-05 16:51:31,328 - DEBUG - incoming_def src_index = const(int, 0)
2025-01-05 16:51:31,329 - DEBUG - replaced with: $30compare_op.2 = src_index.2 < src_ndim
2025-01-05 16:51:31,330 - DEBUG - on stmt: bool32 = global(bool: <class 'bool'>)
2025-01-05 16:51:31,332 - DEBUG - on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,334 - DEBUG - on stmt: branch $32pred, 34, 120
2025-01-05 16:51:31,335 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-05 16:51:31,336 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,338 - DEBUG - on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2025-01-05 16:51:31,339 - DEBUG - find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
2025-01-05 16:51:31,341 - DEBUG - find_def_from_top label 34
2025-01-05 16:51:31,342 - DEBUG - idom 26 from label 34
2025-01-05 16:51:31,343 - DEBUG - find_def_from_bottom label 26
2025-01-05 16:51:31,344 - DEBUG - replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
2025-01-05 16:51:31,345 - DEBUG - on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
2025-01-05 16:51:31,348 - DEBUG - on stmt: $const52.7 = const(int, 1)
2025-01-05 16:51:31,349 - DEBUG - on stmt: $54compare_op.8 = dest_dim_size != $const52.7
2025-01-05 16:51:31,351 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:31,352 - DEBUG - on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:216),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,354 - DEBUG - on stmt: branch $56pred, 58, 86
2025-01-05 16:51:31,355 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-05 16:51:31,356 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,358 - DEBUG - on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
2025-01-05 16:51:31,359 - DEBUG - on stmt: bool64 = global(bool: <class 'bool'>)
2025-01-05 16:51:31,361 - DEBUG - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,363 - DEBUG - on stmt: branch $64pred, 66, 102
2025-01-05 16:51:31,364 - DEBUG - ==== SSA block rewrite pass on 66
2025-01-05 16:51:31,365 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,367 - DEBUG - on stmt: $const68.1 = const(int, 1)
2025-01-05 16:51:31,368 - DEBUG - on stmt: $70compare_op.2 = src_dim_size != $const68.1
2025-01-05 16:51:31,369 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:31,370 - DEBUG - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,373 - DEBUG - on stmt: branch $72pred, 74, 102
2025-01-05 16:51:31,374 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-05 16:51:31,375 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,376 - DEBUG - on stmt: $const76.1 = const(int, 1)
2025-01-05 16:51:31,377 - DEBUG - on stmt: $78binary_add.2 = dest_index.2 + $const76.1
2025-01-05 16:51:31,379 - DEBUG - on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
2025-01-05 16:51:31,381 - DEBUG - on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
2025-01-05 16:51:31,382 - DEBUG - on stmt: return $82return_value.4
2025-01-05 16:51:31,383 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-05 16:51:31,384 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,385 - DEBUG - on stmt: $const88.1 = const(int, 1)
2025-01-05 16:51:31,387 - DEBUG - on stmt: $90compare_op.2 = src_dim_size != $const88.1
2025-01-05 16:51:31,388 - DEBUG - on stmt: bool92 = global(bool: <class 'bool'>)
2025-01-05 16:51:31,389 - DEBUG - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,392 - DEBUG - on stmt: branch $92pred, 94, 102
2025-01-05 16:51:31,393 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:31,394 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,395 - DEBUG - on stmt: dest_shape[dest_index.2] = src_dim_size
2025-01-05 16:51:31,397 - DEBUG - on stmt: jump 102
2025-01-05 16:51:31,398 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-05 16:51:31,399 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,400 - DEBUG - on stmt: $const104.1 = const(int, 1)
2025-01-05 16:51:31,401 - DEBUG - on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:31,403 - DEBUG - find_def var='src_index' stmt=$106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:31,406 - DEBUG - find_def_from_top label 102
2025-01-05 16:51:31,407 - DEBUG - idom 34 from label 102
2025-01-05 16:51:31,408 - DEBUG - find_def_from_bottom label 34
2025-01-05 16:51:31,409 - DEBUG - find_def_from_top label 34
2025-01-05 16:51:31,410 - DEBUG - idom 26 from label 34
2025-01-05 16:51:31,411 - DEBUG - find_def_from_bottom label 26
2025-01-05 16:51:31,412 - DEBUG - replaced with: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:31,414 - DEBUG - on stmt: src_index.1 = $106inplace_add.2
2025-01-05 16:51:31,415 - DEBUG - on stmt: $const112.4 = const(int, 1)
2025-01-05 16:51:31,416 - DEBUG - on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:31,418 - DEBUG - on stmt: dest_index.1 = $114inplace_add.5
2025-01-05 16:51:31,419 - DEBUG - on stmt: jump 26
2025-01-05 16:51:31,420 - DEBUG - ==== SSA block rewrite pass on 120
2025-01-05 16:51:31,421 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000149B5190>
2025-01-05 16:51:31,422 - DEBUG - on stmt: $122return_value.1 = cast(value=dest_index.2)
2025-01-05 16:51:31,424 - DEBUG - on stmt: return $122return_value.1
2025-01-05 16:51:31,646 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_CONST(arg=1, lineno=1)
           6	LOAD_FAST(arg=0, lineno=1)
           8	LOAD_CONST(arg=2, lineno=1)
          10	BINARY_MULTIPLY(arg=None, lineno=1)
          12	LOAD_FAST(arg=1, lineno=1)
          14	BINARY_TRUE_DIVIDE(arg=None, lineno=1)
          16	LOAD_CONST(arg=3, lineno=1)
          18	BINARY_POWER(arg=None, lineno=1)
          20	BINARY_MULTIPLY(arg=None, lineno=1)
          22	CALL_FUNCTION(arg=1, lineno=1)
          24	RETURN_VALUE(arg=None, lineno=1)
2025-01-05 16:51:31,653 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:51:31,654 - DEBUG - stack: []
2025-01-05 16:51:31,655 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:51:31,657 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2025-01-05 16:51:31,659 - DEBUG - stack []
2025-01-05 16:51:31,660 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
2025-01-05 16:51:31,662 - DEBUG - stack []
2025-01-05 16:51:31,664 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
2025-01-05 16:51:31,665 - DEBUG - stack ['$2load_global.0']
2025-01-05 16:51:31,666 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=1)
2025-01-05 16:51:31,668 - DEBUG - stack ['$2load_global.0', '$const4.1']
2025-01-05 16:51:31,669 - DEBUG - dispatch pc=8, inst=LOAD_CONST(arg=2, lineno=1)
2025-01-05 16:51:31,670 - DEBUG - stack ['$2load_global.0', '$const4.1', '$_264call_method_16_16.2']
2025-01-05 16:51:31,672 - DEBUG - dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=1)
2025-01-05 16:51:31,673 - DEBUG - stack ['$2load_global.0', '$const4.1', '$_264call_method_16_16.2', '$const8.3']
2025-01-05 16:51:31,674 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=1)
2025-01-05 16:51:31,676 - DEBUG - stack ['$2load_global.0', '$const4.1', '$10binary_multiply.4']
2025-01-05 16:51:31,677 - DEBUG - dispatch pc=14, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1)
2025-01-05 16:51:31,678 - DEBUG - stack ['$2load_global.0', '$const4.1', '$10binary_multiply.4', '$_274binary_subscr_21_112.5']
2025-01-05 16:51:31,680 - DEBUG - dispatch pc=16, inst=LOAD_CONST(arg=3, lineno=1)
2025-01-05 16:51:31,682 - DEBUG - stack ['$2load_global.0', '$const4.1', '$14binary_true_divide.6']
2025-01-05 16:51:31,683 - DEBUG - dispatch pc=18, inst=BINARY_POWER(arg=None, lineno=1)
2025-01-05 16:51:31,685 - DEBUG - stack ['$2load_global.0', '$const4.1', '$14binary_true_divide.6', '$const16.7']
2025-01-05 16:51:31,686 - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=1)
2025-01-05 16:51:31,687 - DEBUG - stack ['$2load_global.0', '$const4.1', '$18binary_power.8']
2025-01-05 16:51:31,689 - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=1)
2025-01-05 16:51:31,691 - DEBUG - stack ['$2load_global.0', '$20binary_multiply.9']
2025-01-05 16:51:31,692 - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=1)
2025-01-05 16:51:31,694 - DEBUG - stack ['$22call_function.10']
2025-01-05 16:51:31,695 - DEBUG - end state. edges=[]
2025-01-05 16:51:31,696 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:51:31,698 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-05 16:51:31,699 - DEBUG - defmap: {}
2025-01-05 16:51:31,700 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:31,701 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:31,703 - DEBUG - keep phismap: {}
2025-01-05 16:51:31,704 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-05 16:51:31,705 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:51:31,706 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$_264call_method_16_16.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$_264call_method_16_16.2', 'rhs': '$const8.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$_274binary_subscr_21_112.5'}), (14, {'lhs': '$10binary_multiply.4', 'rhs': '$_274binary_subscr_21_112.5', 'res': '$14binary_true_divide.6'}), (16, {'res': '$const16.7'}), (18, {'lhs': '$14binary_true_divide.6', 'rhs': '$const16.7', 'res': '$18binary_power.8'}), (20, {'lhs': '$const4.1', 'rhs': '$18binary_power.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$2load_global.0', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'retval': '$22call_function.10', 'castval': '$24return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:31,714 - DEBUG - label 0:
    _264call_method_16_1 = arg(0, name=_264call_method_16_1) ['_264call_method_16_1']
    _274binary_subscr_21_1 = arg(1, name=_274binary_subscr_21_1) ['_274binary_subscr_21_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x28ab34: <ufunc 'exp'>) ['$2load_global.0']
    $const4.1 = const(float, -0.5)           ['$const4.1']
    $const8.3 = const(float, 32.0)           ['$const8.3']
    $10binary_multiply.4 = _264call_method_16_1 * $const8.3 ['$10binary_multiply.4', '$const8.3', '_264call_method_16_1']
    $14binary_true_divide.6 = $10binary_multiply.4 / _274binary_subscr_21_1 ['$10binary_multiply.4', '$14binary_true_divide.6', '_274binary_subscr_21_1']
    $const16.7 = const(int, 2)               ['$const16.7']
    $18binary_power.8 = $14binary_true_divide.6 ** $const16.7 ['$14binary_true_divide.6', '$18binary_power.8', '$const16.7']
    $20binary_multiply.9 = $const4.1 * $18binary_power.8 ['$18binary_power.8', '$20binary_multiply.9', '$const4.1']
    $22call_function.10 = call $2load_global.0($20binary_multiply.9, func=$2load_global.0, args=[Var($20binary_multiply.9, beat.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$20binary_multiply.9', '$22call_function.10', '$2load_global.0']
    $24return_value.11 = cast(value=$22call_function.10) ['$22call_function.10', '$24return_value.11']
    return $24return_value.11                ['$24return_value.11']

2025-01-05 16:51:31,735 - DEBUG - ==== SSA block analysis pass on 0
2025-01-05 16:51:31,736 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014A88820>
2025-01-05 16:51:31,737 - DEBUG - on stmt: _264call_method_16_1 = arg(0, name=_264call_method_16_1)
2025-01-05 16:51:31,739 - DEBUG - on stmt: _274binary_subscr_21_1 = arg(1, name=_274binary_subscr_21_1)
2025-01-05 16:51:31,740 - DEBUG - on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x28ab34: <ufunc 'exp'>)
2025-01-05 16:51:31,741 - DEBUG - on stmt: $const4.1 = const(float, -0.5)
2025-01-05 16:51:31,742 - DEBUG - on stmt: $const8.3 = const(float, 32.0)
2025-01-05 16:51:31,743 - DEBUG - on stmt: $10binary_multiply.4 = _264call_method_16_1 * $const8.3
2025-01-05 16:51:31,745 - DEBUG - on stmt: $14binary_true_divide.6 = $10binary_multiply.4 / _274binary_subscr_21_1
2025-01-05 16:51:31,747 - DEBUG - on stmt: $const16.7 = const(int, 2)
2025-01-05 16:51:31,748 - DEBUG - on stmt: $18binary_power.8 = $14binary_true_divide.6 ** $const16.7
2025-01-05 16:51:31,750 - DEBUG - on stmt: $20binary_multiply.9 = $const4.1 * $18binary_power.8
2025-01-05 16:51:31,751 - DEBUG - on stmt: $22call_function.10 = call $2load_global.0($20binary_multiply.9, func=$2load_global.0, args=[Var($20binary_multiply.9, beat.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:31,753 - DEBUG - on stmt: $24return_value.11 = cast(value=$22call_function.10)
2025-01-05 16:51:31,754 - DEBUG - on stmt: return $24return_value.11
2025-01-05 16:51:31,756 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x0000000014A8E2B0>],
             '$14binary_true_divide.6': [<numba.core.ir.Assign object at 0x0000000014A8E550>],
             '$18binary_power.8': [<numba.core.ir.Assign object at 0x0000000014A8E850>],
             '$20binary_multiply.9': [<numba.core.ir.Assign object at 0x0000000014A8E9D0>],
             '$22call_function.10': [<numba.core.ir.Assign object at 0x0000000014A8EB80>],
             '$24return_value.11': [<numba.core.ir.Assign object at 0x0000000014A88B50>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000000014A88CD0>],
             '$const16.7': [<numba.core.ir.Assign object at 0x0000000014A8E6D0>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000000014A88E50>],
             '$const8.3': [<numba.core.ir.Assign object at 0x0000000014A8E130>],
             '_264call_method_16_1': [<numba.core.ir.Assign object at 0x0000000014A881F0>],
             '_274binary_subscr_21_1': [<numba.core.ir.Assign object at 0x0000000014A884C0>]})
2025-01-05 16:51:31,771 - DEBUG - SSA violators set()
2025-01-05 16:51:32,118 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=511)
           2	LOAD_GLOBAL(arg=0, lineno=523)
           4	LOAD_FAST(arg=0, lineno=523)
           6	CALL_FUNCTION(arg=1, lineno=523)
           8	STORE_FAST(arg=3, lineno=523)
          10	LOAD_GLOBAL(arg=0, lineno=525)
          12	LOAD_FAST(arg=1, lineno=525)
          14	CALL_FUNCTION(arg=1, lineno=525)
          16	LOAD_CONST(arg=1, lineno=525)
          18	COMPARE_OP(arg=2, lineno=525)
          20	POP_JUMP_IF_FALSE(arg=202, lineno=525)
          22	LOAD_GLOBAL(arg=1, lineno=529)
          24	LOAD_METHOD(arg=2, lineno=529)
          26	LOAD_CONST(arg=2, lineno=529)
          28	LOAD_GLOBAL(arg=1, lineno=529)
          30	LOAD_METHOD(arg=3, lineno=529)
          32	LOAD_FAST(arg=1, lineno=529)
          34	LOAD_CONST(arg=3, lineno=529)
          36	BINARY_SUBSCR(arg=None, lineno=529)
          38	UNARY_NEGATIVE(arg=None, lineno=529)
          40	LOAD_FAST(arg=1, lineno=529)
          42	LOAD_CONST(arg=3, lineno=529)
          44	BINARY_SUBSCR(arg=None, lineno=529)
          46	LOAD_CONST(arg=1, lineno=529)
          48	BINARY_ADD(arg=None, lineno=529)
          50	CALL_METHOD(arg=2, lineno=529)
          52	LOAD_CONST(arg=4, lineno=529)
          54	BINARY_MULTIPLY(arg=None, lineno=529)
          56	LOAD_FAST(arg=1, lineno=529)
          58	LOAD_CONST(arg=3, lineno=529)
          60	BINARY_SUBSCR(arg=None, lineno=529)
          62	BINARY_TRUE_DIVIDE(arg=None, lineno=529)
          64	LOAD_CONST(arg=5, lineno=529)
          66	BINARY_POWER(arg=None, lineno=529)
          68	BINARY_MULTIPLY(arg=None, lineno=529)
          70	CALL_METHOD(arg=1, lineno=529)
          72	STORE_FAST(arg=4, lineno=529)
          74	LOAD_GLOBAL(arg=0, lineno=530)
          76	LOAD_FAST(arg=4, lineno=530)
          78	CALL_FUNCTION(arg=1, lineno=530)
          80	STORE_FAST(arg=5, lineno=530)
          82	LOAD_GLOBAL(arg=4, lineno=532)
          84	LOAD_GLOBAL(arg=0, lineno=532)
          86	LOAD_FAST(arg=0, lineno=532)
          88	CALL_FUNCTION(arg=1, lineno=532)
          90	CALL_FUNCTION(arg=1, lineno=532)
          92	GET_ITER(arg=None, lineno=532)
>         94	FOR_ITER(arg=104, lineno=532)
          96	STORE_FAST(arg=6, lineno=532)
          98	LOAD_CONST(arg=6, lineno=533)
         100	LOAD_FAST(arg=2, lineno=533)
         102	LOAD_FAST(arg=6, lineno=533)
         104	STORE_SUBSCR(arg=None, lineno=533)
         106	LOAD_GLOBAL(arg=4, lineno=536)
         108	LOAD_GLOBAL(arg=5, lineno=536)
         110	LOAD_CONST(arg=3, lineno=536)
         112	LOAD_FAST(arg=6, lineno=536)
         114	LOAD_FAST(arg=5, lineno=536)
         116	LOAD_CONST(arg=5, lineno=536)
         118	BINARY_FLOOR_DIVIDE(arg=None, lineno=536)
         120	BINARY_ADD(arg=None, lineno=536)
         122	LOAD_FAST(arg=3, lineno=536)
         124	BINARY_SUBTRACT(arg=None, lineno=536)
         126	LOAD_CONST(arg=1, lineno=536)
         128	BINARY_ADD(arg=None, lineno=536)
         130	CALL_FUNCTION(arg=2, lineno=536)
         132	LOAD_GLOBAL(arg=6, lineno=536)
         134	LOAD_FAST(arg=6, lineno=536)
         136	LOAD_FAST(arg=5, lineno=536)
         138	LOAD_CONST(arg=5, lineno=536)
         140	BINARY_FLOOR_DIVIDE(arg=None, lineno=536)
         142	BINARY_ADD(arg=None, lineno=536)
         144	LOAD_FAST(arg=5, lineno=536)
         146	CALL_FUNCTION(arg=2, lineno=536)
         148	CALL_FUNCTION(arg=2, lineno=536)
         150	GET_ITER(arg=None, lineno=536)
>        152	FOR_ITER(arg=44, lineno=536)
         154	STORE_FAST(arg=7, lineno=536)
         156	LOAD_FAST(arg=2, lineno=537)
         158	LOAD_FAST(arg=6, lineno=537)
         160	DUP_TOP_TWO(arg=None, lineno=537)
         162	BINARY_SUBSCR(arg=None, lineno=537)
         164	LOAD_FAST(arg=4, lineno=537)
         166	LOAD_FAST(arg=7, lineno=537)
         168	BINARY_SUBSCR(arg=None, lineno=537)
         170	LOAD_FAST(arg=0, lineno=537)
         172	LOAD_FAST(arg=6, lineno=537)
         174	LOAD_FAST(arg=5, lineno=537)
         176	LOAD_CONST(arg=5, lineno=537)
         178	BINARY_FLOOR_DIVIDE(arg=None, lineno=537)
         180	BINARY_ADD(arg=None, lineno=537)
         182	LOAD_FAST(arg=7, lineno=537)
         184	BINARY_SUBTRACT(arg=None, lineno=537)
         186	BINARY_SUBSCR(arg=None, lineno=537)
         188	BINARY_MULTIPLY(arg=None, lineno=537)
         190	INPLACE_ADD(arg=None, lineno=537)
         192	ROT_THREE(arg=None, lineno=537)
         194	STORE_SUBSCR(arg=None, lineno=537)
         196	JUMP_ABSOLUTE(arg=152, lineno=537)
>        198	JUMP_ABSOLUTE(arg=94, lineno=537)
>        200	JUMP_FORWARD(arg=210, lineno=537)
>        202	LOAD_GLOBAL(arg=0, lineno=539)
         204	LOAD_FAST(arg=1, lineno=539)
         206	CALL_FUNCTION(arg=1, lineno=539)
         208	LOAD_GLOBAL(arg=0, lineno=539)
         210	LOAD_FAST(arg=0, lineno=539)
         212	CALL_FUNCTION(arg=1, lineno=539)
         214	COMPARE_OP(arg=2, lineno=539)
         216	NOP(arg=1, lineno=539)
         218	POP_JUMP_IF_FALSE(arg=412, lineno=539)
         220	LOAD_GLOBAL(arg=4, lineno=542)
         222	LOAD_GLOBAL(arg=0, lineno=542)
         224	LOAD_FAST(arg=0, lineno=542)
         226	CALL_FUNCTION(arg=1, lineno=542)
         228	CALL_FUNCTION(arg=1, lineno=542)
         230	GET_ITER(arg=None, lineno=542)
>        232	FOR_ITER(arg=178, lineno=542)
         234	STORE_FAST(arg=6, lineno=542)
         236	LOAD_GLOBAL(arg=1, lineno=543)
         238	LOAD_METHOD(arg=2, lineno=543)
         240	LOAD_CONST(arg=2, lineno=543)
         242	LOAD_GLOBAL(arg=1, lineno=543)
         244	LOAD_METHOD(arg=3, lineno=543)
         246	LOAD_FAST(arg=1, lineno=543)
         248	LOAD_FAST(arg=6, lineno=543)
         250	BINARY_SUBSCR(arg=None, lineno=543)
         252	UNARY_NEGATIVE(arg=None, lineno=543)
         254	LOAD_FAST(arg=1, lineno=543)
         256	LOAD_FAST(arg=6, lineno=543)
         258	BINARY_SUBSCR(arg=None, lineno=543)
         260	LOAD_CONST(arg=1, lineno=543)
         262	BINARY_ADD(arg=None, lineno=543)
         264	CALL_METHOD(arg=2, lineno=543)
         266	LOAD_CONST(arg=4, lineno=543)
         268	BINARY_MULTIPLY(arg=None, lineno=543)
         270	LOAD_FAST(arg=1, lineno=543)
         272	LOAD_FAST(arg=6, lineno=543)
         274	BINARY_SUBSCR(arg=None, lineno=543)
         276	BINARY_TRUE_DIVIDE(arg=None, lineno=543)
         278	LOAD_CONST(arg=5, lineno=543)
         280	BINARY_POWER(arg=None, lineno=543)
         282	BINARY_MULTIPLY(arg=None, lineno=543)
         284	CALL_METHOD(arg=1, lineno=543)
         286	STORE_FAST(arg=4, lineno=543)
         288	LOAD_CONST(arg=5, lineno=544)
         290	LOAD_GLOBAL(arg=7, lineno=544)
         292	LOAD_FAST(arg=1, lineno=544)
         294	LOAD_FAST(arg=6, lineno=544)
         296	BINARY_SUBSCR(arg=None, lineno=544)
         298	CALL_FUNCTION(arg=1, lineno=544)
         300	BINARY_MULTIPLY(arg=None, lineno=544)
         302	LOAD_CONST(arg=1, lineno=544)
         304	BINARY_ADD(arg=None, lineno=544)
         306	STORE_FAST(arg=5, lineno=544)
         308	LOAD_CONST(arg=6, lineno=546)
         310	LOAD_FAST(arg=2, lineno=546)
         312	LOAD_FAST(arg=6, lineno=546)
         314	STORE_SUBSCR(arg=None, lineno=546)
         316	LOAD_GLOBAL(arg=4, lineno=547)
         318	LOAD_GLOBAL(arg=5, lineno=547)
         320	LOAD_CONST(arg=3, lineno=547)
         322	LOAD_FAST(arg=6, lineno=547)
         324	LOAD_FAST(arg=5, lineno=547)
         326	LOAD_CONST(arg=5, lineno=547)
         328	BINARY_FLOOR_DIVIDE(arg=None, lineno=547)
         330	BINARY_ADD(arg=None, lineno=547)
         332	LOAD_FAST(arg=3, lineno=547)
         334	BINARY_SUBTRACT(arg=None, lineno=547)
         336	LOAD_CONST(arg=1, lineno=547)
         338	BINARY_ADD(arg=None, lineno=547)
         340	CALL_FUNCTION(arg=2, lineno=547)
         342	LOAD_GLOBAL(arg=6, lineno=547)
         344	LOAD_FAST(arg=6, lineno=547)
         346	LOAD_FAST(arg=5, lineno=547)
         348	LOAD_CONST(arg=5, lineno=547)
         350	BINARY_FLOOR_DIVIDE(arg=None, lineno=547)
         352	BINARY_ADD(arg=None, lineno=547)
         354	LOAD_FAST(arg=5, lineno=547)
         356	CALL_FUNCTION(arg=2, lineno=547)
         358	CALL_FUNCTION(arg=2, lineno=547)
         360	GET_ITER(arg=None, lineno=547)
>        362	FOR_ITER(arg=46, lineno=547)
         364	STORE_FAST(arg=7, lineno=547)
         366	LOAD_FAST(arg=2, lineno=548)
         368	LOAD_FAST(arg=6, lineno=548)
         370	DUP_TOP_TWO(arg=None, lineno=548)
         372	BINARY_SUBSCR(arg=None, lineno=548)
         374	LOAD_FAST(arg=4, lineno=548)
         376	LOAD_FAST(arg=7, lineno=548)
         378	BINARY_SUBSCR(arg=None, lineno=548)
         380	LOAD_FAST(arg=0, lineno=548)
         382	LOAD_FAST(arg=6, lineno=548)
         384	LOAD_FAST(arg=5, lineno=548)
         386	LOAD_CONST(arg=5, lineno=548)
         388	BINARY_FLOOR_DIVIDE(arg=None, lineno=548)
         390	BINARY_ADD(arg=None, lineno=548)
         392	LOAD_FAST(arg=7, lineno=548)
         394	BINARY_SUBTRACT(arg=None, lineno=548)
         396	BINARY_SUBSCR(arg=None, lineno=548)
         398	BINARY_MULTIPLY(arg=None, lineno=548)
         400	INPLACE_ADD(arg=None, lineno=548)
         402	ROT_THREE(arg=None, lineno=548)
         404	STORE_SUBSCR(arg=None, lineno=548)
         406	NOP(arg=1, lineno=548)
         408	JUMP_ABSOLUTE(arg=362, lineno=548)
>        410	JUMP_ABSOLUTE(arg=232, lineno=548)
>        412	LOAD_CONST(arg=0, lineno=548)
         414	RETURN_VALUE(arg=None, lineno=548)
2025-01-05 16:51:32,192 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:51:32,193 - DEBUG - stack: []
2025-01-05 16:51:32,194 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:51:32,197 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=511)
2025-01-05 16:51:32,198 - DEBUG - stack []
2025-01-05 16:51:32,199 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=523)
2025-01-05 16:51:32,200 - DEBUG - stack []
2025-01-05 16:51:32,201 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=523)
2025-01-05 16:51:32,203 - DEBUG - stack ['$2load_global.0']
2025-01-05 16:51:32,204 - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=523)
2025-01-05 16:51:32,205 - DEBUG - stack ['$2load_global.0', '$onset_envelope4.1']
2025-01-05 16:51:32,206 - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=523)
2025-01-05 16:51:32,208 - DEBUG - stack ['$6call_function.2']
2025-01-05 16:51:32,209 - DEBUG - dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=525)
2025-01-05 16:51:32,210 - DEBUG - stack []
2025-01-05 16:51:32,211 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=525)
2025-01-05 16:51:32,213 - DEBUG - stack ['$10load_global.3']
2025-01-05 16:51:32,214 - DEBUG - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=525)
2025-01-05 16:51:32,216 - DEBUG - stack ['$10load_global.3', '$frames_per_beat12.4']
2025-01-05 16:51:32,217 - DEBUG - dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=525)
2025-01-05 16:51:32,219 - DEBUG - stack ['$14call_function.5']
2025-01-05 16:51:32,220 - DEBUG - dispatch pc=18, inst=COMPARE_OP(arg=2, lineno=525)
2025-01-05 16:51:32,221 - DEBUG - stack ['$14call_function.5', '$const16.6']
2025-01-05 16:51:32,222 - DEBUG - dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=202, lineno=525)
2025-01-05 16:51:32,223 - DEBUG - stack ['$18compare_op.7']
2025-01-05 16:51:32,224 - DEBUG - end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=202, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:32,226 - DEBUG - pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=202 nstack_initial=0)])
2025-01-05 16:51:32,227 - DEBUG - stack: []
2025-01-05 16:51:32,228 - DEBUG - state.pc_initial: State(pc_initial=22 nstack_initial=0)
2025-01-05 16:51:32,230 - DEBUG - dispatch pc=22, inst=LOAD_GLOBAL(arg=1, lineno=529)
2025-01-05 16:51:32,232 - DEBUG - stack []
2025-01-05 16:51:32,233 - DEBUG - dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=529)
2025-01-05 16:51:32,234 - DEBUG - stack ['$22load_global.0']
2025-01-05 16:51:32,236 - DEBUG - dispatch pc=26, inst=LOAD_CONST(arg=2, lineno=529)
2025-01-05 16:51:32,237 - DEBUG - stack ['$24load_method.1']
2025-01-05 16:51:32,238 - DEBUG - dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=529)
2025-01-05 16:51:32,239 - DEBUG - stack ['$24load_method.1', '$const26.2']
2025-01-05 16:51:32,240 - DEBUG - dispatch pc=30, inst=LOAD_METHOD(arg=3, lineno=529)
2025-01-05 16:51:32,242 - DEBUG - stack ['$24load_method.1', '$const26.2', '$28load_global.3']
2025-01-05 16:51:32,244 - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=529)
2025-01-05 16:51:32,245 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4']
2025-01-05 16:51:32,247 - DEBUG - dispatch pc=34, inst=LOAD_CONST(arg=3, lineno=529)
2025-01-05 16:51:32,248 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4', '$frames_per_beat32.5']
2025-01-05 16:51:32,250 - DEBUG - dispatch pc=36, inst=BINARY_SUBSCR(arg=None, lineno=529)
2025-01-05 16:51:32,251 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4', '$frames_per_beat32.5', '$const34.6']
2025-01-05 16:51:32,253 - DEBUG - dispatch pc=38, inst=UNARY_NEGATIVE(arg=None, lineno=529)
2025-01-05 16:51:32,255 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4', '$36binary_subscr.7']
2025-01-05 16:51:32,256 - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=529)
2025-01-05 16:51:32,258 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4', '$38unary_negative.8']
2025-01-05 16:51:32,260 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=3, lineno=529)
2025-01-05 16:51:32,262 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4', '$38unary_negative.8', '$frames_per_beat40.9']
2025-01-05 16:51:32,265 - DEBUG - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=529)
2025-01-05 16:51:32,266 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4', '$38unary_negative.8', '$frames_per_beat40.9', '$const42.10']
2025-01-05 16:51:32,268 - DEBUG - dispatch pc=46, inst=LOAD_CONST(arg=1, lineno=529)
2025-01-05 16:51:32,269 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4', '$38unary_negative.8', '$44binary_subscr.11']
2025-01-05 16:51:32,271 - DEBUG - dispatch pc=48, inst=BINARY_ADD(arg=None, lineno=529)
2025-01-05 16:51:32,272 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4', '$38unary_negative.8', '$44binary_subscr.11', '$const46.12']
2025-01-05 16:51:32,274 - DEBUG - dispatch pc=50, inst=CALL_METHOD(arg=2, lineno=529)
2025-01-05 16:51:32,275 - DEBUG - stack ['$24load_method.1', '$const26.2', '$30load_method.4', '$38unary_negative.8', '$48binary_add.13']
2025-01-05 16:51:32,277 - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=4, lineno=529)
2025-01-05 16:51:32,279 - DEBUG - stack ['$24load_method.1', '$const26.2', '$50call_method.14']
2025-01-05 16:51:32,280 - DEBUG - dispatch pc=54, inst=BINARY_MULTIPLY(arg=None, lineno=529)
2025-01-05 16:51:32,282 - DEBUG - stack ['$24load_method.1', '$const26.2', '$50call_method.14', '$const52.15']
2025-01-05 16:51:32,284 - DEBUG - dispatch pc=56, inst=LOAD_FAST(arg=1, lineno=529)
2025-01-05 16:51:32,285 - DEBUG - stack ['$24load_method.1', '$const26.2', '$54binary_multiply.16']
2025-01-05 16:51:32,287 - DEBUG - dispatch pc=58, inst=LOAD_CONST(arg=3, lineno=529)
2025-01-05 16:51:32,288 - DEBUG - stack ['$24load_method.1', '$const26.2', '$54binary_multiply.16', '$frames_per_beat56.17']
2025-01-05 16:51:32,290 - DEBUG - dispatch pc=60, inst=BINARY_SUBSCR(arg=None, lineno=529)
2025-01-05 16:51:32,292 - DEBUG - stack ['$24load_method.1', '$const26.2', '$54binary_multiply.16', '$frames_per_beat56.17', '$const58.18']
2025-01-05 16:51:32,293 - DEBUG - dispatch pc=62, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=529)
2025-01-05 16:51:32,295 - DEBUG - stack ['$24load_method.1', '$const26.2', '$54binary_multiply.16', '$60binary_subscr.19']
2025-01-05 16:51:32,297 - DEBUG - dispatch pc=64, inst=LOAD_CONST(arg=5, lineno=529)
2025-01-05 16:51:32,298 - DEBUG - stack ['$24load_method.1', '$const26.2', '$62binary_true_divide.20']
2025-01-05 16:51:32,300 - DEBUG - dispatch pc=66, inst=BINARY_POWER(arg=None, lineno=529)
2025-01-05 16:51:32,301 - DEBUG - stack ['$24load_method.1', '$const26.2', '$62binary_true_divide.20', '$const64.21']
2025-01-05 16:51:32,303 - DEBUG - dispatch pc=68, inst=BINARY_MULTIPLY(arg=None, lineno=529)
2025-01-05 16:51:32,304 - DEBUG - stack ['$24load_method.1', '$const26.2', '$66binary_power.22']
2025-01-05 16:51:32,306 - DEBUG - dispatch pc=70, inst=CALL_METHOD(arg=1, lineno=529)
2025-01-05 16:51:32,307 - DEBUG - stack ['$24load_method.1', '$68binary_multiply.23']
2025-01-05 16:51:32,309 - DEBUG - dispatch pc=72, inst=STORE_FAST(arg=4, lineno=529)
2025-01-05 16:51:32,310 - DEBUG - stack ['$70call_method.24']
2025-01-05 16:51:32,312 - DEBUG - dispatch pc=74, inst=LOAD_GLOBAL(arg=0, lineno=530)
2025-01-05 16:51:32,313 - DEBUG - stack []
2025-01-05 16:51:32,314 - DEBUG - dispatch pc=76, inst=LOAD_FAST(arg=4, lineno=530)
2025-01-05 16:51:32,316 - DEBUG - stack ['$74load_global.25']
2025-01-05 16:51:32,317 - DEBUG - dispatch pc=78, inst=CALL_FUNCTION(arg=1, lineno=530)
2025-01-05 16:51:32,318 - DEBUG - stack ['$74load_global.25', '$window76.26']
2025-01-05 16:51:32,319 - DEBUG - dispatch pc=80, inst=STORE_FAST(arg=5, lineno=530)
2025-01-05 16:51:32,320 - DEBUG - stack ['$78call_function.27']
2025-01-05 16:51:32,322 - DEBUG - dispatch pc=82, inst=LOAD_GLOBAL(arg=4, lineno=532)
2025-01-05 16:51:32,323 - DEBUG - stack []
2025-01-05 16:51:32,324 - DEBUG - dispatch pc=84, inst=LOAD_GLOBAL(arg=0, lineno=532)
2025-01-05 16:51:32,326 - DEBUG - stack ['$82load_global.28']
2025-01-05 16:51:32,327 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=0, lineno=532)
2025-01-05 16:51:32,328 - DEBUG - stack ['$82load_global.28', '$84load_global.29']
2025-01-05 16:51:32,330 - DEBUG - dispatch pc=88, inst=CALL_FUNCTION(arg=1, lineno=532)
2025-01-05 16:51:32,331 - DEBUG - stack ['$82load_global.28', '$84load_global.29', '$onset_envelope86.30']
2025-01-05 16:51:32,333 - DEBUG - dispatch pc=90, inst=CALL_FUNCTION(arg=1, lineno=532)
2025-01-05 16:51:32,334 - DEBUG - stack ['$82load_global.28', '$88call_function.31']
2025-01-05 16:51:32,337 - DEBUG - dispatch pc=92, inst=GET_ITER(arg=None, lineno=532)
2025-01-05 16:51:32,338 - DEBUG - stack ['$90call_function.32']
2025-01-05 16:51:32,340 - DEBUG - end state. edges=[Edge(pc=94, stack=('$92get_iter.33',), blockstack=(), npush=0)]
2025-01-05 16:51:32,341 - DEBUG - pending: deque([State(pc_initial=202 nstack_initial=0), State(pc_initial=94 nstack_initial=1)])
2025-01-05 16:51:32,343 - DEBUG - stack: []
2025-01-05 16:51:32,344 - DEBUG - state.pc_initial: State(pc_initial=202 nstack_initial=0)
2025-01-05 16:51:32,345 - DEBUG - dispatch pc=202, inst=LOAD_GLOBAL(arg=0, lineno=539)
2025-01-05 16:51:32,347 - DEBUG - stack []
2025-01-05 16:51:32,348 - DEBUG - dispatch pc=204, inst=LOAD_FAST(arg=1, lineno=539)
2025-01-05 16:51:32,349 - DEBUG - stack ['$202load_global.0']
2025-01-05 16:51:32,351 - DEBUG - dispatch pc=206, inst=CALL_FUNCTION(arg=1, lineno=539)
2025-01-05 16:51:32,352 - DEBUG - stack ['$202load_global.0', '$frames_per_beat204.1']
2025-01-05 16:51:32,354 - DEBUG - dispatch pc=208, inst=LOAD_GLOBAL(arg=0, lineno=539)
2025-01-05 16:51:32,355 - DEBUG - stack ['$206call_function.2']
2025-01-05 16:51:32,356 - DEBUG - dispatch pc=210, inst=LOAD_FAST(arg=0, lineno=539)
2025-01-05 16:51:32,357 - DEBUG - stack ['$206call_function.2', '$208load_global.3']
2025-01-05 16:51:32,359 - DEBUG - dispatch pc=212, inst=CALL_FUNCTION(arg=1, lineno=539)
2025-01-05 16:51:32,361 - DEBUG - stack ['$206call_function.2', '$208load_global.3', '$onset_envelope210.4']
2025-01-05 16:51:32,362 - DEBUG - dispatch pc=214, inst=COMPARE_OP(arg=2, lineno=539)
2025-01-05 16:51:32,364 - DEBUG - stack ['$206call_function.2', '$212call_function.5']
2025-01-05 16:51:32,366 - DEBUG - dispatch pc=216, inst=NOP(arg=1, lineno=539)
2025-01-05 16:51:32,367 - DEBUG - stack ['$214compare_op.6']
2025-01-05 16:51:32,368 - DEBUG - dispatch pc=218, inst=POP_JUMP_IF_FALSE(arg=412, lineno=539)
2025-01-05 16:51:32,369 - DEBUG - stack ['$214compare_op.6']
2025-01-05 16:51:32,370 - DEBUG - end state. edges=[Edge(pc=220, stack=(), blockstack=(), npush=0), Edge(pc=412, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:32,372 - DEBUG - pending: deque([State(pc_initial=94 nstack_initial=1), State(pc_initial=220 nstack_initial=0), State(pc_initial=412 nstack_initial=0)])
2025-01-05 16:51:32,374 - DEBUG - stack: ['$phi94.0']
2025-01-05 16:51:32,375 - DEBUG - state.pc_initial: State(pc_initial=94 nstack_initial=1)
2025-01-05 16:51:32,376 - DEBUG - dispatch pc=94, inst=FOR_ITER(arg=104, lineno=532)
2025-01-05 16:51:32,378 - DEBUG - stack ['$phi94.0']
2025-01-05 16:51:32,379 - DEBUG - end state. edges=[Edge(pc=200, stack=(), blockstack=(), npush=0), Edge(pc=96, stack=('$phi94.0', '$94for_iter.2'), blockstack=(), npush=0)]
2025-01-05 16:51:32,381 - DEBUG - pending: deque([State(pc_initial=220 nstack_initial=0), State(pc_initial=412 nstack_initial=0), State(pc_initial=200 nstack_initial=0), State(pc_initial=96 nstack_initial=2)])
2025-01-05 16:51:32,383 - DEBUG - stack: []
2025-01-05 16:51:32,384 - DEBUG - state.pc_initial: State(pc_initial=220 nstack_initial=0)
2025-01-05 16:51:32,386 - DEBUG - dispatch pc=220, inst=LOAD_GLOBAL(arg=4, lineno=542)
2025-01-05 16:51:32,387 - DEBUG - stack []
2025-01-05 16:51:32,389 - DEBUG - dispatch pc=222, inst=LOAD_GLOBAL(arg=0, lineno=542)
2025-01-05 16:51:32,390 - DEBUG - stack ['$220load_global.0']
2025-01-05 16:51:32,391 - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=0, lineno=542)
2025-01-05 16:51:32,392 - DEBUG - stack ['$220load_global.0', '$222load_global.1']
2025-01-05 16:51:32,394 - DEBUG - dispatch pc=226, inst=CALL_FUNCTION(arg=1, lineno=542)
2025-01-05 16:51:32,395 - DEBUG - stack ['$220load_global.0', '$222load_global.1', '$onset_envelope224.2']
2025-01-05 16:51:32,397 - DEBUG - dispatch pc=228, inst=CALL_FUNCTION(arg=1, lineno=542)
2025-01-05 16:51:32,399 - DEBUG - stack ['$220load_global.0', '$226call_function.3']
2025-01-05 16:51:32,401 - DEBUG - dispatch pc=230, inst=GET_ITER(arg=None, lineno=542)
2025-01-05 16:51:32,402 - DEBUG - stack ['$228call_function.4']
2025-01-05 16:51:32,403 - DEBUG - end state. edges=[Edge(pc=232, stack=('$230get_iter.5',), blockstack=(), npush=0)]
2025-01-05 16:51:32,405 - DEBUG - pending: deque([State(pc_initial=412 nstack_initial=0), State(pc_initial=200 nstack_initial=0), State(pc_initial=96 nstack_initial=2), State(pc_initial=232 nstack_initial=1)])
2025-01-05 16:51:32,407 - DEBUG - stack: []
2025-01-05 16:51:32,408 - DEBUG - state.pc_initial: State(pc_initial=412 nstack_initial=0)
2025-01-05 16:51:32,409 - DEBUG - dispatch pc=412, inst=LOAD_CONST(arg=0, lineno=548)
2025-01-05 16:51:32,411 - DEBUG - stack []
2025-01-05 16:51:32,413 - DEBUG - dispatch pc=414, inst=RETURN_VALUE(arg=None, lineno=548)
2025-01-05 16:51:32,415 - DEBUG - stack ['$const412.0']
2025-01-05 16:51:32,416 - DEBUG - end state. edges=[]
2025-01-05 16:51:32,417 - DEBUG - pending: deque([State(pc_initial=200 nstack_initial=0), State(pc_initial=96 nstack_initial=2), State(pc_initial=232 nstack_initial=1)])
2025-01-05 16:51:32,419 - DEBUG - stack: []
2025-01-05 16:51:32,420 - DEBUG - state.pc_initial: State(pc_initial=200 nstack_initial=0)
2025-01-05 16:51:32,421 - DEBUG - dispatch pc=200, inst=JUMP_FORWARD(arg=210, lineno=537)
2025-01-05 16:51:32,423 - DEBUG - stack []
2025-01-05 16:51:32,424 - DEBUG - end state. edges=[Edge(pc=412, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:32,425 - DEBUG - pending: deque([State(pc_initial=96 nstack_initial=2), State(pc_initial=232 nstack_initial=1), State(pc_initial=412 nstack_initial=0)])
2025-01-05 16:51:32,427 - DEBUG - stack: ['$phi96.0', '$phi96.1']
2025-01-05 16:51:32,428 - DEBUG - state.pc_initial: State(pc_initial=96 nstack_initial=2)
2025-01-05 16:51:32,430 - DEBUG - dispatch pc=96, inst=STORE_FAST(arg=6, lineno=532)
2025-01-05 16:51:32,431 - DEBUG - stack ['$phi96.0', '$phi96.1']
2025-01-05 16:51:32,433 - DEBUG - dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=533)
2025-01-05 16:51:32,434 - DEBUG - stack ['$phi96.0']
2025-01-05 16:51:32,435 - DEBUG - dispatch pc=100, inst=LOAD_FAST(arg=2, lineno=533)
2025-01-05 16:51:32,436 - DEBUG - stack ['$phi96.0', '$const98.2']
2025-01-05 16:51:32,437 - DEBUG - dispatch pc=102, inst=LOAD_FAST(arg=6, lineno=533)
2025-01-05 16:51:32,438 - DEBUG - stack ['$phi96.0', '$const98.2', '$localscore100.3']
2025-01-05 16:51:32,440 - DEBUG - dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=533)
2025-01-05 16:51:32,442 - DEBUG - stack ['$phi96.0', '$const98.2', '$localscore100.3', '$i102.4']
2025-01-05 16:51:32,443 - DEBUG - dispatch pc=106, inst=LOAD_GLOBAL(arg=4, lineno=536)
2025-01-05 16:51:32,445 - DEBUG - stack ['$phi96.0']
2025-01-05 16:51:32,446 - DEBUG - dispatch pc=108, inst=LOAD_GLOBAL(arg=5, lineno=536)
2025-01-05 16:51:32,448 - DEBUG - stack ['$phi96.0', '$106load_global.5']
2025-01-05 16:51:32,449 - DEBUG - dispatch pc=110, inst=LOAD_CONST(arg=3, lineno=536)
2025-01-05 16:51:32,450 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6']
2025-01-05 16:51:32,452 - DEBUG - dispatch pc=112, inst=LOAD_FAST(arg=6, lineno=536)
2025-01-05 16:51:32,453 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7']
2025-01-05 16:51:32,455 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=5, lineno=536)
2025-01-05 16:51:32,456 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7', '$i112.8']
2025-01-05 16:51:32,458 - DEBUG - dispatch pc=116, inst=LOAD_CONST(arg=5, lineno=536)
2025-01-05 16:51:32,460 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7', '$i112.8', '$K114.9']
2025-01-05 16:51:32,461 - DEBUG - dispatch pc=118, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=536)
2025-01-05 16:51:32,463 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7', '$i112.8', '$K114.9', '$const116.10']
2025-01-05 16:51:32,465 - DEBUG - dispatch pc=120, inst=BINARY_ADD(arg=None, lineno=536)
2025-01-05 16:51:32,466 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7', '$i112.8', '$118binary_floor_divide.11']
2025-01-05 16:51:32,468 - DEBUG - dispatch pc=122, inst=LOAD_FAST(arg=3, lineno=536)
2025-01-05 16:51:32,469 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7', '$120binary_add.12']
2025-01-05 16:51:32,471 - DEBUG - dispatch pc=124, inst=BINARY_SUBTRACT(arg=None, lineno=536)
2025-01-05 16:51:32,472 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7', '$120binary_add.12', '$N122.13']
2025-01-05 16:51:32,474 - DEBUG - dispatch pc=126, inst=LOAD_CONST(arg=1, lineno=536)
2025-01-05 16:51:32,475 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7', '$124binary_subtract.14']
2025-01-05 16:51:32,477 - DEBUG - dispatch pc=128, inst=BINARY_ADD(arg=None, lineno=536)
2025-01-05 16:51:32,478 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7', '$124binary_subtract.14', '$const126.15']
2025-01-05 16:51:32,480 - DEBUG - dispatch pc=130, inst=CALL_FUNCTION(arg=2, lineno=536)
2025-01-05 16:51:32,482 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$108load_global.6', '$const110.7', '$128binary_add.16']
2025-01-05 16:51:32,484 - DEBUG - dispatch pc=132, inst=LOAD_GLOBAL(arg=6, lineno=536)
2025-01-05 16:51:32,485 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$130call_function.17']
2025-01-05 16:51:32,487 - DEBUG - dispatch pc=134, inst=LOAD_FAST(arg=6, lineno=536)
2025-01-05 16:51:32,488 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$130call_function.17', '$132load_global.18']
2025-01-05 16:51:32,490 - DEBUG - dispatch pc=136, inst=LOAD_FAST(arg=5, lineno=536)
2025-01-05 16:51:32,492 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$130call_function.17', '$132load_global.18', '$i134.19']
2025-01-05 16:51:32,493 - DEBUG - dispatch pc=138, inst=LOAD_CONST(arg=5, lineno=536)
2025-01-05 16:51:32,495 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$130call_function.17', '$132load_global.18', '$i134.19', '$K136.20']
2025-01-05 16:51:32,497 - DEBUG - dispatch pc=140, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=536)
2025-01-05 16:51:32,500 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$130call_function.17', '$132load_global.18', '$i134.19', '$K136.20', '$const138.21']
2025-01-05 16:51:32,501 - DEBUG - dispatch pc=142, inst=BINARY_ADD(arg=None, lineno=536)
2025-01-05 16:51:32,503 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$130call_function.17', '$132load_global.18', '$i134.19', '$140binary_floor_divide.22']
2025-01-05 16:51:32,505 - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=5, lineno=536)
2025-01-05 16:51:32,507 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$130call_function.17', '$132load_global.18', '$142binary_add.23']
2025-01-05 16:51:32,508 - DEBUG - dispatch pc=146, inst=CALL_FUNCTION(arg=2, lineno=536)
2025-01-05 16:51:32,510 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$130call_function.17', '$132load_global.18', '$142binary_add.23', '$K144.24']
2025-01-05 16:51:32,512 - DEBUG - dispatch pc=148, inst=CALL_FUNCTION(arg=2, lineno=536)
2025-01-05 16:51:32,513 - DEBUG - stack ['$phi96.0', '$106load_global.5', '$130call_function.17', '$146call_function.25']
2025-01-05 16:51:32,515 - DEBUG - dispatch pc=150, inst=GET_ITER(arg=None, lineno=536)
2025-01-05 16:51:32,516 - DEBUG - stack ['$phi96.0', '$148call_function.26']
2025-01-05 16:51:32,518 - DEBUG - end state. edges=[Edge(pc=152, stack=('$phi96.0', '$150get_iter.27'), blockstack=(), npush=0)]
2025-01-05 16:51:32,519 - DEBUG - pending: deque([State(pc_initial=232 nstack_initial=1), State(pc_initial=412 nstack_initial=0), State(pc_initial=152 nstack_initial=2)])
2025-01-05 16:51:32,521 - DEBUG - stack: ['$phi232.0']
2025-01-05 16:51:32,522 - DEBUG - state.pc_initial: State(pc_initial=232 nstack_initial=1)
2025-01-05 16:51:32,524 - DEBUG - dispatch pc=232, inst=FOR_ITER(arg=178, lineno=542)
2025-01-05 16:51:32,526 - DEBUG - stack ['$phi232.0']
2025-01-05 16:51:32,527 - DEBUG - end state. edges=[Edge(pc=412, stack=(), blockstack=(), npush=0), Edge(pc=234, stack=('$phi232.0', '$232for_iter.2'), blockstack=(), npush=0)]
2025-01-05 16:51:32,529 - DEBUG - pending: deque([State(pc_initial=412 nstack_initial=0), State(pc_initial=152 nstack_initial=2), State(pc_initial=412 nstack_initial=0), State(pc_initial=234 nstack_initial=2)])
2025-01-05 16:51:32,532 - DEBUG - pending: deque([State(pc_initial=152 nstack_initial=2), State(pc_initial=412 nstack_initial=0), State(pc_initial=234 nstack_initial=2)])
2025-01-05 16:51:32,534 - DEBUG - stack: ['$phi152.0', '$phi152.1']
2025-01-05 16:51:32,535 - DEBUG - state.pc_initial: State(pc_initial=152 nstack_initial=2)
2025-01-05 16:51:32,537 - DEBUG - dispatch pc=152, inst=FOR_ITER(arg=44, lineno=536)
2025-01-05 16:51:32,538 - DEBUG - stack ['$phi152.0', '$phi152.1']
2025-01-05 16:51:32,539 - DEBUG - end state. edges=[Edge(pc=198, stack=('$phi152.0',), blockstack=(), npush=0), Edge(pc=154, stack=('$phi152.0', '$phi152.1', '$152for_iter.3'), blockstack=(), npush=0)]
2025-01-05 16:51:32,541 - DEBUG - pending: deque([State(pc_initial=412 nstack_initial=0), State(pc_initial=234 nstack_initial=2), State(pc_initial=198 nstack_initial=1), State(pc_initial=154 nstack_initial=3)])
2025-01-05 16:51:32,544 - DEBUG - pending: deque([State(pc_initial=234 nstack_initial=2), State(pc_initial=198 nstack_initial=1), State(pc_initial=154 nstack_initial=3)])
2025-01-05 16:51:32,546 - DEBUG - stack: ['$phi234.0', '$phi234.1']
2025-01-05 16:51:32,548 - DEBUG - state.pc_initial: State(pc_initial=234 nstack_initial=2)
2025-01-05 16:51:32,549 - DEBUG - dispatch pc=234, inst=STORE_FAST(arg=6, lineno=542)
2025-01-05 16:51:32,550 - DEBUG - stack ['$phi234.0', '$phi234.1']
2025-01-05 16:51:32,552 - DEBUG - dispatch pc=236, inst=LOAD_GLOBAL(arg=1, lineno=543)
2025-01-05 16:51:32,553 - DEBUG - stack ['$phi234.0']
2025-01-05 16:51:32,554 - DEBUG - dispatch pc=238, inst=LOAD_METHOD(arg=2, lineno=543)
2025-01-05 16:51:32,555 - DEBUG - stack ['$phi234.0', '$236load_global.2']
2025-01-05 16:51:32,557 - DEBUG - dispatch pc=240, inst=LOAD_CONST(arg=2, lineno=543)
2025-01-05 16:51:32,558 - DEBUG - stack ['$phi234.0', '$238load_method.3']
2025-01-05 16:51:32,559 - DEBUG - dispatch pc=242, inst=LOAD_GLOBAL(arg=1, lineno=543)
2025-01-05 16:51:32,560 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4']
2025-01-05 16:51:32,562 - DEBUG - dispatch pc=244, inst=LOAD_METHOD(arg=3, lineno=543)
2025-01-05 16:51:32,564 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$242load_global.5']
2025-01-05 16:51:32,566 - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=543)
2025-01-05 16:51:32,568 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6']
2025-01-05 16:51:32,569 - DEBUG - dispatch pc=248, inst=LOAD_FAST(arg=6, lineno=543)
2025-01-05 16:51:32,571 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6', '$frames_per_beat246.7']
2025-01-05 16:51:32,572 - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=543)
2025-01-05 16:51:32,574 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6', '$frames_per_beat246.7', '$i248.8']
2025-01-05 16:51:32,575 - DEBUG - dispatch pc=252, inst=UNARY_NEGATIVE(arg=None, lineno=543)
2025-01-05 16:51:32,577 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6', '$250binary_subscr.9']
2025-01-05 16:51:32,579 - DEBUG - dispatch pc=254, inst=LOAD_FAST(arg=1, lineno=543)
2025-01-05 16:51:32,580 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6', '$252unary_negative.10']
2025-01-05 16:51:32,582 - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=6, lineno=543)
2025-01-05 16:51:32,583 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6', '$252unary_negative.10', '$frames_per_beat254.11']
2025-01-05 16:51:32,586 - DEBUG - dispatch pc=258, inst=BINARY_SUBSCR(arg=None, lineno=543)
2025-01-05 16:51:32,587 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6', '$252unary_negative.10', '$frames_per_beat254.11', '$i256.12']
2025-01-05 16:51:32,589 - DEBUG - dispatch pc=260, inst=LOAD_CONST(arg=1, lineno=543)
2025-01-05 16:51:32,591 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6', '$252unary_negative.10', '$258binary_subscr.13']
2025-01-05 16:51:32,593 - DEBUG - dispatch pc=262, inst=BINARY_ADD(arg=None, lineno=543)
2025-01-05 16:51:32,594 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6', '$252unary_negative.10', '$258binary_subscr.13', '$const260.14']
2025-01-05 16:51:32,596 - DEBUG - dispatch pc=264, inst=CALL_METHOD(arg=2, lineno=543)
2025-01-05 16:51:32,598 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$244load_method.6', '$252unary_negative.10', '$262binary_add.15']
2025-01-05 16:51:32,600 - DEBUG - dispatch pc=266, inst=LOAD_CONST(arg=4, lineno=543)
2025-01-05 16:51:32,602 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$264call_method.16']
2025-01-05 16:51:32,604 - DEBUG - dispatch pc=268, inst=BINARY_MULTIPLY(arg=None, lineno=543)
2025-01-05 16:51:32,605 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$264call_method.16', '$const266.17']
2025-01-05 16:51:32,607 - DEBUG - dispatch pc=270, inst=LOAD_FAST(arg=1, lineno=543)
2025-01-05 16:51:32,608 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$268binary_multiply.18']
2025-01-05 16:51:32,610 - DEBUG - dispatch pc=272, inst=LOAD_FAST(arg=6, lineno=543)
2025-01-05 16:51:32,611 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$268binary_multiply.18', '$frames_per_beat270.19']
2025-01-05 16:51:32,613 - DEBUG - dispatch pc=274, inst=BINARY_SUBSCR(arg=None, lineno=543)
2025-01-05 16:51:32,615 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$268binary_multiply.18', '$frames_per_beat270.19', '$i272.20']
2025-01-05 16:51:32,616 - DEBUG - dispatch pc=276, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=543)
2025-01-05 16:51:32,618 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$268binary_multiply.18', '$274binary_subscr.21']
2025-01-05 16:51:32,619 - DEBUG - dispatch pc=278, inst=LOAD_CONST(arg=5, lineno=543)
2025-01-05 16:51:32,621 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$276binary_true_divide.22']
2025-01-05 16:51:32,622 - DEBUG - dispatch pc=280, inst=BINARY_POWER(arg=None, lineno=543)
2025-01-05 16:51:32,624 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$276binary_true_divide.22', '$const278.23']
2025-01-05 16:51:32,626 - DEBUG - dispatch pc=282, inst=BINARY_MULTIPLY(arg=None, lineno=543)
2025-01-05 16:51:32,627 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$const240.4', '$280binary_power.24']
2025-01-05 16:51:32,629 - DEBUG - dispatch pc=284, inst=CALL_METHOD(arg=1, lineno=543)
2025-01-05 16:51:32,631 - DEBUG - stack ['$phi234.0', '$238load_method.3', '$282binary_multiply.25']
2025-01-05 16:51:32,632 - DEBUG - dispatch pc=286, inst=STORE_FAST(arg=4, lineno=543)
2025-01-05 16:51:32,634 - DEBUG - stack ['$phi234.0', '$284call_method.26']
2025-01-05 16:51:32,635 - DEBUG - dispatch pc=288, inst=LOAD_CONST(arg=5, lineno=544)
2025-01-05 16:51:32,636 - DEBUG - stack ['$phi234.0']
2025-01-05 16:51:32,637 - DEBUG - dispatch pc=290, inst=LOAD_GLOBAL(arg=7, lineno=544)
2025-01-05 16:51:32,639 - DEBUG - stack ['$phi234.0', '$const288.27']
2025-01-05 16:51:32,640 - DEBUG - dispatch pc=292, inst=LOAD_FAST(arg=1, lineno=544)
2025-01-05 16:51:32,642 - DEBUG - stack ['$phi234.0', '$const288.27', '$290load_global.28']
2025-01-05 16:51:32,644 - DEBUG - dispatch pc=294, inst=LOAD_FAST(arg=6, lineno=544)
2025-01-05 16:51:32,645 - DEBUG - stack ['$phi234.0', '$const288.27', '$290load_global.28', '$frames_per_beat292.29']
2025-01-05 16:51:32,648 - DEBUG - dispatch pc=296, inst=BINARY_SUBSCR(arg=None, lineno=544)
2025-01-05 16:51:32,650 - DEBUG - stack ['$phi234.0', '$const288.27', '$290load_global.28', '$frames_per_beat292.29', '$i294.30']
2025-01-05 16:51:32,651 - DEBUG - dispatch pc=298, inst=CALL_FUNCTION(arg=1, lineno=544)
2025-01-05 16:51:32,653 - DEBUG - stack ['$phi234.0', '$const288.27', '$290load_global.28', '$296binary_subscr.31']
2025-01-05 16:51:32,654 - DEBUG - dispatch pc=300, inst=BINARY_MULTIPLY(arg=None, lineno=544)
2025-01-05 16:51:32,656 - DEBUG - stack ['$phi234.0', '$const288.27', '$298call_function.32']
2025-01-05 16:51:32,657 - DEBUG - dispatch pc=302, inst=LOAD_CONST(arg=1, lineno=544)
2025-01-05 16:51:32,659 - DEBUG - stack ['$phi234.0', '$300binary_multiply.33']
2025-01-05 16:51:32,660 - DEBUG - dispatch pc=304, inst=BINARY_ADD(arg=None, lineno=544)
2025-01-05 16:51:32,661 - DEBUG - stack ['$phi234.0', '$300binary_multiply.33', '$const302.34']
2025-01-05 16:51:32,663 - DEBUG - dispatch pc=306, inst=STORE_FAST(arg=5, lineno=544)
2025-01-05 16:51:32,665 - DEBUG - stack ['$phi234.0', '$304binary_add.35']
2025-01-05 16:51:32,666 - DEBUG - dispatch pc=308, inst=LOAD_CONST(arg=6, lineno=546)
2025-01-05 16:51:32,667 - DEBUG - stack ['$phi234.0']
2025-01-05 16:51:32,668 - DEBUG - dispatch pc=310, inst=LOAD_FAST(arg=2, lineno=546)
2025-01-05 16:51:32,669 - DEBUG - stack ['$phi234.0', '$const308.36']
2025-01-05 16:51:32,671 - DEBUG - dispatch pc=312, inst=LOAD_FAST(arg=6, lineno=546)
2025-01-05 16:51:32,672 - DEBUG - stack ['$phi234.0', '$const308.36', '$localscore310.37']
2025-01-05 16:51:32,674 - DEBUG - dispatch pc=314, inst=STORE_SUBSCR(arg=None, lineno=546)
2025-01-05 16:51:32,675 - DEBUG - stack ['$phi234.0', '$const308.36', '$localscore310.37', '$i312.38']
2025-01-05 16:51:32,677 - DEBUG - dispatch pc=316, inst=LOAD_GLOBAL(arg=4, lineno=547)
2025-01-05 16:51:32,678 - DEBUG - stack ['$phi234.0']
2025-01-05 16:51:32,680 - DEBUG - dispatch pc=318, inst=LOAD_GLOBAL(arg=5, lineno=547)
2025-01-05 16:51:32,681 - DEBUG - stack ['$phi234.0', '$316load_global.39']
2025-01-05 16:51:32,682 - DEBUG - dispatch pc=320, inst=LOAD_CONST(arg=3, lineno=547)
2025-01-05 16:51:32,683 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40']
2025-01-05 16:51:32,685 - DEBUG - dispatch pc=322, inst=LOAD_FAST(arg=6, lineno=547)
2025-01-05 16:51:32,687 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41']
2025-01-05 16:51:32,688 - DEBUG - dispatch pc=324, inst=LOAD_FAST(arg=5, lineno=547)
2025-01-05 16:51:32,690 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41', '$i322.42']
2025-01-05 16:51:32,691 - DEBUG - dispatch pc=326, inst=LOAD_CONST(arg=5, lineno=547)
2025-01-05 16:51:32,693 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41', '$i322.42', '$K324.43']
2025-01-05 16:51:32,695 - DEBUG - dispatch pc=328, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=547)
2025-01-05 16:51:32,696 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41', '$i322.42', '$K324.43', '$const326.44']
2025-01-05 16:51:32,698 - DEBUG - dispatch pc=330, inst=BINARY_ADD(arg=None, lineno=547)
2025-01-05 16:51:32,700 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41', '$i322.42', '$328binary_floor_divide.45']
2025-01-05 16:51:32,701 - DEBUG - dispatch pc=332, inst=LOAD_FAST(arg=3, lineno=547)
2025-01-05 16:51:32,703 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41', '$330binary_add.46']
2025-01-05 16:51:32,704 - DEBUG - dispatch pc=334, inst=BINARY_SUBTRACT(arg=None, lineno=547)
2025-01-05 16:51:32,706 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41', '$330binary_add.46', '$N332.47']
2025-01-05 16:51:32,707 - DEBUG - dispatch pc=336, inst=LOAD_CONST(arg=1, lineno=547)
2025-01-05 16:51:32,709 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41', '$334binary_subtract.48']
2025-01-05 16:51:32,710 - DEBUG - dispatch pc=338, inst=BINARY_ADD(arg=None, lineno=547)
2025-01-05 16:51:32,712 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41', '$334binary_subtract.48', '$const336.49']
2025-01-05 16:51:32,714 - DEBUG - dispatch pc=340, inst=CALL_FUNCTION(arg=2, lineno=547)
2025-01-05 16:51:32,716 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$318load_global.40', '$const320.41', '$338binary_add.50']
2025-01-05 16:51:32,718 - DEBUG - dispatch pc=342, inst=LOAD_GLOBAL(arg=6, lineno=547)
2025-01-05 16:51:32,719 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$340call_function.51']
2025-01-05 16:51:32,721 - DEBUG - dispatch pc=344, inst=LOAD_FAST(arg=6, lineno=547)
2025-01-05 16:51:32,722 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$340call_function.51', '$342load_global.52']
2025-01-05 16:51:32,724 - DEBUG - dispatch pc=346, inst=LOAD_FAST(arg=5, lineno=547)
2025-01-05 16:51:32,726 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$340call_function.51', '$342load_global.52', '$i344.53']
2025-01-05 16:51:32,727 - DEBUG - dispatch pc=348, inst=LOAD_CONST(arg=5, lineno=547)
2025-01-05 16:51:32,729 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$340call_function.51', '$342load_global.52', '$i344.53', '$K346.54']
2025-01-05 16:51:32,731 - DEBUG - dispatch pc=350, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=547)
2025-01-05 16:51:32,732 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$340call_function.51', '$342load_global.52', '$i344.53', '$K346.54', '$const348.55']
2025-01-05 16:51:32,734 - DEBUG - dispatch pc=352, inst=BINARY_ADD(arg=None, lineno=547)
2025-01-05 16:51:32,736 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$340call_function.51', '$342load_global.52', '$i344.53', '$350binary_floor_divide.56']
2025-01-05 16:51:32,738 - DEBUG - dispatch pc=354, inst=LOAD_FAST(arg=5, lineno=547)
2025-01-05 16:51:32,740 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$340call_function.51', '$342load_global.52', '$352binary_add.57']
2025-01-05 16:51:32,742 - DEBUG - dispatch pc=356, inst=CALL_FUNCTION(arg=2, lineno=547)
2025-01-05 16:51:32,743 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$340call_function.51', '$342load_global.52', '$352binary_add.57', '$K354.58']
2025-01-05 16:51:32,745 - DEBUG - dispatch pc=358, inst=CALL_FUNCTION(arg=2, lineno=547)
2025-01-05 16:51:32,746 - DEBUG - stack ['$phi234.0', '$316load_global.39', '$340call_function.51', '$356call_function.59']
2025-01-05 16:51:32,748 - DEBUG - dispatch pc=360, inst=GET_ITER(arg=None, lineno=547)
2025-01-05 16:51:32,750 - DEBUG - stack ['$phi234.0', '$358call_function.60']
2025-01-05 16:51:32,751 - DEBUG - end state. edges=[Edge(pc=362, stack=('$phi234.0', '$360get_iter.61'), blockstack=(), npush=0)]
2025-01-05 16:51:32,752 - DEBUG - pending: deque([State(pc_initial=198 nstack_initial=1), State(pc_initial=154 nstack_initial=3), State(pc_initial=362 nstack_initial=2)])
2025-01-05 16:51:32,754 - DEBUG - stack: ['$phi198.0']
2025-01-05 16:51:32,755 - DEBUG - state.pc_initial: State(pc_initial=198 nstack_initial=1)
2025-01-05 16:51:32,757 - DEBUG - dispatch pc=198, inst=JUMP_ABSOLUTE(arg=94, lineno=537)
2025-01-05 16:51:32,758 - DEBUG - stack ['$phi198.0']
2025-01-05 16:51:32,759 - DEBUG - end state. edges=[Edge(pc=94, stack=('$phi198.0',), blockstack=(), npush=0)]
2025-01-05 16:51:32,761 - DEBUG - pending: deque([State(pc_initial=154 nstack_initial=3), State(pc_initial=362 nstack_initial=2), State(pc_initial=94 nstack_initial=1)])
2025-01-05 16:51:32,763 - DEBUG - stack: ['$phi154.0', '$phi154.1', '$phi154.2']
2025-01-05 16:51:32,765 - DEBUG - state.pc_initial: State(pc_initial=154 nstack_initial=3)
2025-01-05 16:51:32,766 - DEBUG - dispatch pc=154, inst=STORE_FAST(arg=7, lineno=536)
2025-01-05 16:51:32,768 - DEBUG - stack ['$phi154.0', '$phi154.1', '$phi154.2']
2025-01-05 16:51:32,769 - DEBUG - dispatch pc=156, inst=LOAD_FAST(arg=2, lineno=537)
2025-01-05 16:51:32,770 - DEBUG - stack ['$phi154.0', '$phi154.1']
2025-01-05 16:51:32,771 - DEBUG - dispatch pc=158, inst=LOAD_FAST(arg=6, lineno=537)
2025-01-05 16:51:32,773 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3']
2025-01-05 16:51:32,775 - DEBUG - dispatch pc=160, inst=DUP_TOP_TWO(arg=None, lineno=537)
2025-01-05 16:51:32,776 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4']
2025-01-05 16:51:32,778 - DEBUG - dispatch pc=162, inst=BINARY_SUBSCR(arg=None, lineno=537)
2025-01-05 16:51:32,780 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$160dup_top_two.5', '$160dup_top_two.6']
2025-01-05 16:51:32,781 - DEBUG - dispatch pc=164, inst=LOAD_FAST(arg=4, lineno=537)
2025-01-05 16:51:32,783 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7']
2025-01-05 16:51:32,784 - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=7, lineno=537)
2025-01-05 16:51:32,786 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$window164.8']
2025-01-05 16:51:32,787 - DEBUG - dispatch pc=168, inst=BINARY_SUBSCR(arg=None, lineno=537)
2025-01-05 16:51:32,789 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$window164.8', '$k166.9']
2025-01-05 16:51:32,790 - DEBUG - dispatch pc=170, inst=LOAD_FAST(arg=0, lineno=537)
2025-01-05 16:51:32,793 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10']
2025-01-05 16:51:32,795 - DEBUG - dispatch pc=172, inst=LOAD_FAST(arg=6, lineno=537)
2025-01-05 16:51:32,797 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10', '$onset_envelope170.11']
2025-01-05 16:51:32,799 - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=5, lineno=537)
2025-01-05 16:51:32,801 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10', '$onset_envelope170.11', '$i172.12']
2025-01-05 16:51:32,803 - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=5, lineno=537)
2025-01-05 16:51:32,805 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10', '$onset_envelope170.11', '$i172.12', '$K174.13']
2025-01-05 16:51:32,807 - DEBUG - dispatch pc=178, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=537)
2025-01-05 16:51:32,808 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10', '$onset_envelope170.11', '$i172.12', '$K174.13', '$const176.14']
2025-01-05 16:51:32,810 - DEBUG - dispatch pc=180, inst=BINARY_ADD(arg=None, lineno=537)
2025-01-05 16:51:32,812 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10', '$onset_envelope170.11', '$i172.12', '$178binary_floor_divide.15']
2025-01-05 16:51:32,815 - DEBUG - dispatch pc=182, inst=LOAD_FAST(arg=7, lineno=537)
2025-01-05 16:51:32,817 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10', '$onset_envelope170.11', '$180binary_add.16']
2025-01-05 16:51:32,819 - DEBUG - dispatch pc=184, inst=BINARY_SUBTRACT(arg=None, lineno=537)
2025-01-05 16:51:32,820 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10', '$onset_envelope170.11', '$180binary_add.16', '$k182.17']
2025-01-05 16:51:32,823 - DEBUG - dispatch pc=186, inst=BINARY_SUBSCR(arg=None, lineno=537)
2025-01-05 16:51:32,824 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10', '$onset_envelope170.11', '$184binary_subtract.18']
2025-01-05 16:51:32,826 - DEBUG - dispatch pc=188, inst=BINARY_MULTIPLY(arg=None, lineno=537)
2025-01-05 16:51:32,828 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$168binary_subscr.10', '$186binary_subscr.19']
2025-01-05 16:51:32,830 - DEBUG - dispatch pc=190, inst=INPLACE_ADD(arg=None, lineno=537)
2025-01-05 16:51:32,832 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$162binary_subscr.7', '$188binary_multiply.20']
2025-01-05 16:51:32,834 - DEBUG - dispatch pc=192, inst=ROT_THREE(arg=None, lineno=537)
2025-01-05 16:51:32,835 - DEBUG - stack ['$phi154.0', '$phi154.1', '$localscore156.3', '$i158.4', '$190inplace_add.21']
2025-01-05 16:51:32,837 - DEBUG - dispatch pc=194, inst=STORE_SUBSCR(arg=None, lineno=537)
2025-01-05 16:51:32,838 - DEBUG - stack ['$phi154.0', '$phi154.1', '$190inplace_add.21', '$localscore156.3', '$i158.4']
2025-01-05 16:51:32,840 - DEBUG - dispatch pc=196, inst=JUMP_ABSOLUTE(arg=152, lineno=537)
2025-01-05 16:51:32,841 - DEBUG - stack ['$phi154.0', '$phi154.1']
2025-01-05 16:51:32,842 - DEBUG - end state. edges=[Edge(pc=152, stack=('$phi154.0', '$phi154.1'), blockstack=(), npush=0)]
2025-01-05 16:51:32,844 - DEBUG - pending: deque([State(pc_initial=362 nstack_initial=2), State(pc_initial=94 nstack_initial=1), State(pc_initial=152 nstack_initial=2)])
2025-01-05 16:51:32,846 - DEBUG - stack: ['$phi362.0', '$phi362.1']
2025-01-05 16:51:32,847 - DEBUG - state.pc_initial: State(pc_initial=362 nstack_initial=2)
2025-01-05 16:51:32,849 - DEBUG - dispatch pc=362, inst=FOR_ITER(arg=46, lineno=547)
2025-01-05 16:51:32,850 - DEBUG - stack ['$phi362.0', '$phi362.1']
2025-01-05 16:51:32,851 - DEBUG - end state. edges=[Edge(pc=410, stack=('$phi362.0',), blockstack=(), npush=0), Edge(pc=364, stack=('$phi362.0', '$phi362.1', '$362for_iter.3'), blockstack=(), npush=0)]
2025-01-05 16:51:32,854 - DEBUG - pending: deque([State(pc_initial=94 nstack_initial=1), State(pc_initial=152 nstack_initial=2), State(pc_initial=410 nstack_initial=1), State(pc_initial=364 nstack_initial=3)])
2025-01-05 16:51:32,856 - DEBUG - pending: deque([State(pc_initial=152 nstack_initial=2), State(pc_initial=410 nstack_initial=1), State(pc_initial=364 nstack_initial=3)])
2025-01-05 16:51:32,858 - DEBUG - pending: deque([State(pc_initial=410 nstack_initial=1), State(pc_initial=364 nstack_initial=3)])
2025-01-05 16:51:32,859 - DEBUG - stack: ['$phi410.0']
2025-01-05 16:51:32,860 - DEBUG - state.pc_initial: State(pc_initial=410 nstack_initial=1)
2025-01-05 16:51:32,862 - DEBUG - dispatch pc=410, inst=JUMP_ABSOLUTE(arg=232, lineno=548)
2025-01-05 16:51:32,864 - DEBUG - stack ['$phi410.0']
2025-01-05 16:51:32,865 - DEBUG - end state. edges=[Edge(pc=232, stack=('$phi410.0',), blockstack=(), npush=0)]
2025-01-05 16:51:32,866 - DEBUG - pending: deque([State(pc_initial=364 nstack_initial=3), State(pc_initial=232 nstack_initial=1)])
2025-01-05 16:51:32,869 - DEBUG - stack: ['$phi364.0', '$phi364.1', '$phi364.2']
2025-01-05 16:51:32,870 - DEBUG - state.pc_initial: State(pc_initial=364 nstack_initial=3)
2025-01-05 16:51:32,872 - DEBUG - dispatch pc=364, inst=STORE_FAST(arg=7, lineno=547)
2025-01-05 16:51:32,873 - DEBUG - stack ['$phi364.0', '$phi364.1', '$phi364.2']
2025-01-05 16:51:32,875 - DEBUG - dispatch pc=366, inst=LOAD_FAST(arg=2, lineno=548)
2025-01-05 16:51:32,876 - DEBUG - stack ['$phi364.0', '$phi364.1']
2025-01-05 16:51:32,877 - DEBUG - dispatch pc=368, inst=LOAD_FAST(arg=6, lineno=548)
2025-01-05 16:51:32,878 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3']
2025-01-05 16:51:32,880 - DEBUG - dispatch pc=370, inst=DUP_TOP_TWO(arg=None, lineno=548)
2025-01-05 16:51:32,882 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4']
2025-01-05 16:51:32,883 - DEBUG - dispatch pc=372, inst=BINARY_SUBSCR(arg=None, lineno=548)
2025-01-05 16:51:32,885 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$370dup_top_two.5', '$370dup_top_two.6']
2025-01-05 16:51:32,887 - DEBUG - dispatch pc=374, inst=LOAD_FAST(arg=4, lineno=548)
2025-01-05 16:51:32,888 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7']
2025-01-05 16:51:32,890 - DEBUG - dispatch pc=376, inst=LOAD_FAST(arg=7, lineno=548)
2025-01-05 16:51:32,891 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$window374.8']
2025-01-05 16:51:32,893 - DEBUG - dispatch pc=378, inst=BINARY_SUBSCR(arg=None, lineno=548)
2025-01-05 16:51:32,894 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$window374.8', '$k376.9']
2025-01-05 16:51:32,896 - DEBUG - dispatch pc=380, inst=LOAD_FAST(arg=0, lineno=548)
2025-01-05 16:51:32,898 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10']
2025-01-05 16:51:32,899 - DEBUG - dispatch pc=382, inst=LOAD_FAST(arg=6, lineno=548)
2025-01-05 16:51:32,901 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10', '$onset_envelope380.11']
2025-01-05 16:51:32,903 - DEBUG - dispatch pc=384, inst=LOAD_FAST(arg=5, lineno=548)
2025-01-05 16:51:32,904 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10', '$onset_envelope380.11', '$i382.12']
2025-01-05 16:51:32,907 - DEBUG - dispatch pc=386, inst=LOAD_CONST(arg=5, lineno=548)
2025-01-05 16:51:32,908 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10', '$onset_envelope380.11', '$i382.12', '$K384.13']
2025-01-05 16:51:32,910 - DEBUG - dispatch pc=388, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=548)
2025-01-05 16:51:32,912 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10', '$onset_envelope380.11', '$i382.12', '$K384.13', '$const386.14']
2025-01-05 16:51:32,915 - DEBUG - dispatch pc=390, inst=BINARY_ADD(arg=None, lineno=548)
2025-01-05 16:51:32,916 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10', '$onset_envelope380.11', '$i382.12', '$388binary_floor_divide.15']
2025-01-05 16:51:32,918 - DEBUG - dispatch pc=392, inst=LOAD_FAST(arg=7, lineno=548)
2025-01-05 16:51:32,920 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10', '$onset_envelope380.11', '$390binary_add.16']
2025-01-05 16:51:32,922 - DEBUG - dispatch pc=394, inst=BINARY_SUBTRACT(arg=None, lineno=548)
2025-01-05 16:51:32,924 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10', '$onset_envelope380.11', '$390binary_add.16', '$k392.17']
2025-01-05 16:51:32,926 - DEBUG - dispatch pc=396, inst=BINARY_SUBSCR(arg=None, lineno=548)
2025-01-05 16:51:32,928 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10', '$onset_envelope380.11', '$394binary_subtract.18']
2025-01-05 16:51:32,930 - DEBUG - dispatch pc=398, inst=BINARY_MULTIPLY(arg=None, lineno=548)
2025-01-05 16:51:32,932 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$378binary_subscr.10', '$396binary_subscr.19']
2025-01-05 16:51:32,934 - DEBUG - dispatch pc=400, inst=INPLACE_ADD(arg=None, lineno=548)
2025-01-05 16:51:32,936 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$372binary_subscr.7', '$398binary_multiply.20']
2025-01-05 16:51:32,937 - DEBUG - dispatch pc=402, inst=ROT_THREE(arg=None, lineno=548)
2025-01-05 16:51:32,939 - DEBUG - stack ['$phi364.0', '$phi364.1', '$localscore366.3', '$i368.4', '$400inplace_add.21']
2025-01-05 16:51:32,940 - DEBUG - dispatch pc=404, inst=STORE_SUBSCR(arg=None, lineno=548)
2025-01-05 16:51:32,942 - DEBUG - stack ['$phi364.0', '$phi364.1', '$400inplace_add.21', '$localscore366.3', '$i368.4']
2025-01-05 16:51:32,943 - DEBUG - dispatch pc=406, inst=NOP(arg=1, lineno=548)
2025-01-05 16:51:32,945 - DEBUG - stack ['$phi364.0', '$phi364.1']
2025-01-05 16:51:32,946 - DEBUG - dispatch pc=408, inst=JUMP_ABSOLUTE(arg=362, lineno=548)
2025-01-05 16:51:32,948 - DEBUG - stack ['$phi364.0', '$phi364.1']
2025-01-05 16:51:32,949 - DEBUG - end state. edges=[Edge(pc=362, stack=('$phi364.0', '$phi364.1'), blockstack=(), npush=0)]
2025-01-05 16:51:32,951 - DEBUG - pending: deque([State(pc_initial=232 nstack_initial=1), State(pc_initial=362 nstack_initial=2)])
2025-01-05 16:51:32,952 - DEBUG - pending: deque([State(pc_initial=362 nstack_initial=2)])
2025-01-05 16:51:32,954 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:51:32,956 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=1): {'$phi94.0'},
             State(pc_initial=96 nstack_initial=2): {'$phi96.1'},
             State(pc_initial=152 nstack_initial=2): {'$phi152.1'},
             State(pc_initial=154 nstack_initial=3): {'$phi154.2'},
             State(pc_initial=198 nstack_initial=1): set(),
             State(pc_initial=200 nstack_initial=0): set(),
             State(pc_initial=202 nstack_initial=0): set(),
             State(pc_initial=220 nstack_initial=0): set(),
             State(pc_initial=232 nstack_initial=1): {'$phi232.0'},
             State(pc_initial=234 nstack_initial=2): {'$phi234.1'},
             State(pc_initial=362 nstack_initial=2): {'$phi362.1'},
             State(pc_initial=364 nstack_initial=3): {'$phi364.2'},
             State(pc_initial=410 nstack_initial=1): set(),
             State(pc_initial=412 nstack_initial=0): set()})
2025-01-05 16:51:32,966 - DEBUG - defmap: {'$phi152.1': State(pc_initial=96 nstack_initial=2),
 '$phi154.2': State(pc_initial=152 nstack_initial=2),
 '$phi232.0': State(pc_initial=220 nstack_initial=0),
 '$phi234.1': State(pc_initial=232 nstack_initial=1),
 '$phi362.1': State(pc_initial=234 nstack_initial=2),
 '$phi364.2': State(pc_initial=362 nstack_initial=2),
 '$phi94.0': State(pc_initial=22 nstack_initial=0),
 '$phi96.1': State(pc_initial=94 nstack_initial=1)}
2025-01-05 16:51:32,971 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$phi154.0',
                            State(pc_initial=154 nstack_initial=3)),
                           ('$phi96.0', State(pc_initial=96 nstack_initial=2))},
             '$phi152.1': {('$150get_iter.27',
                            State(pc_initial=96 nstack_initial=2)),
                           ('$phi154.1',
                            State(pc_initial=154 nstack_initial=3))},
             '$phi154.0': {('$phi152.0',
                            State(pc_initial=152 nstack_initial=2))},
             '$phi154.1': {('$phi152.1',
                            State(pc_initial=152 nstack_initial=2))},
             '$phi154.2': {('$152for_iter.3',
                            State(pc_initial=152 nstack_initial=2))},
             '$phi198.0': {('$phi152.0',
                            State(pc_initial=152 nstack_initial=2))},
             '$phi232.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0)),
                           ('$phi410.0',
                            State(pc_initial=410 nstack_initial=1))},
             '$phi234.0': {('$phi232.0',
                            State(pc_initial=232 nstack_initial=1))},
             '$phi234.1': {('$232for_iter.2',
                            State(pc_initial=232 nstack_initial=1))},
             '$phi362.0': {('$phi234.0',
                            State(pc_initial=234 nstack_initial=2)),
                           ('$phi364.0',
                            State(pc_initial=364 nstack_initial=3))},
             '$phi362.1': {('$360get_iter.61',
                            State(pc_initial=234 nstack_initial=2)),
                           ('$phi364.1',
                            State(pc_initial=364 nstack_initial=3))},
             '$phi364.0': {('$phi362.0',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi364.1': {('$phi362.1',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi364.2': {('$362for_iter.3',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi410.0': {('$phi362.0',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi94.0': {('$92get_iter.33',
                           State(pc_initial=22 nstack_initial=0)),
                          ('$phi198.0',
                           State(pc_initial=198 nstack_initial=1))},
             '$phi96.0': {('$phi94.0', State(pc_initial=94 nstack_initial=1))},
             '$phi96.1': {('$94for_iter.2',
                           State(pc_initial=94 nstack_initial=1))}})
2025-01-05 16:51:32,999 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$phi152.0',
                            State(pc_initial=152 nstack_initial=2)),
                           ('$phi94.0', State(pc_initial=94 nstack_initial=1))},
             '$phi152.1': {('$150get_iter.27',
                            State(pc_initial=96 nstack_initial=2)),
                           ('$phi152.1',
                            State(pc_initial=152 nstack_initial=2))},
             '$phi154.0': {('$phi94.0', State(pc_initial=94 nstack_initial=1))},
             '$phi154.1': {('$150get_iter.27',
                            State(pc_initial=96 nstack_initial=2))},
             '$phi154.2': {('$152for_iter.3',
                            State(pc_initial=152 nstack_initial=2))},
             '$phi198.0': {('$phi94.0', State(pc_initial=94 nstack_initial=1))},
             '$phi232.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0)),
                           ('$phi362.0',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi234.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0)),
                           ('$phi362.0',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi234.1': {('$232for_iter.2',
                            State(pc_initial=232 nstack_initial=1))},
             '$phi362.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0)),
                           ('$phi362.0',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi362.1': {('$360get_iter.61',
                            State(pc_initial=234 nstack_initial=2)),
                           ('$phi362.1',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi364.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi364.1': {('$360get_iter.61',
                            State(pc_initial=234 nstack_initial=2))},
             '$phi364.2': {('$362for_iter.3',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi410.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi94.0': {('$92get_iter.33',
                           State(pc_initial=22 nstack_initial=0)),
                          ('$phi94.0', State(pc_initial=94 nstack_initial=1))},
             '$phi96.0': {('$92get_iter.33',
                           State(pc_initial=22 nstack_initial=0))},
             '$phi96.1': {('$94for_iter.2',
                           State(pc_initial=94 nstack_initial=1))}})
2025-01-05 16:51:33,027 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$92get_iter.33',
                            State(pc_initial=22 nstack_initial=0))},
             '$phi152.1': {('$150get_iter.27',
                            State(pc_initial=96 nstack_initial=2))},
             '$phi154.0': {('$92get_iter.33',
                            State(pc_initial=22 nstack_initial=0))},
             '$phi154.1': {('$150get_iter.27',
                            State(pc_initial=96 nstack_initial=2))},
             '$phi154.2': {('$152for_iter.3',
                            State(pc_initial=152 nstack_initial=2))},
             '$phi198.0': {('$92get_iter.33',
                            State(pc_initial=22 nstack_initial=0))},
             '$phi232.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi234.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi234.1': {('$232for_iter.2',
                            State(pc_initial=232 nstack_initial=1))},
             '$phi362.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi362.1': {('$360get_iter.61',
                            State(pc_initial=234 nstack_initial=2))},
             '$phi364.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi364.1': {('$360get_iter.61',
                            State(pc_initial=234 nstack_initial=2))},
             '$phi364.2': {('$362for_iter.3',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi410.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi94.0': {('$92get_iter.33',
                           State(pc_initial=22 nstack_initial=0))},
             '$phi96.0': {('$92get_iter.33',
                           State(pc_initial=22 nstack_initial=0))},
             '$phi96.1': {('$94for_iter.2',
                           State(pc_initial=94 nstack_initial=1))}})
2025-01-05 16:51:33,049 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$92get_iter.33',
                            State(pc_initial=22 nstack_initial=0))},
             '$phi152.1': {('$150get_iter.27',
                            State(pc_initial=96 nstack_initial=2))},
             '$phi154.0': {('$92get_iter.33',
                            State(pc_initial=22 nstack_initial=0))},
             '$phi154.1': {('$150get_iter.27',
                            State(pc_initial=96 nstack_initial=2))},
             '$phi154.2': {('$152for_iter.3',
                            State(pc_initial=152 nstack_initial=2))},
             '$phi198.0': {('$92get_iter.33',
                            State(pc_initial=22 nstack_initial=0))},
             '$phi232.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi234.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi234.1': {('$232for_iter.2',
                            State(pc_initial=232 nstack_initial=1))},
             '$phi362.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi362.1': {('$360get_iter.61',
                            State(pc_initial=234 nstack_initial=2))},
             '$phi364.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi364.1': {('$360get_iter.61',
                            State(pc_initial=234 nstack_initial=2))},
             '$phi364.2': {('$362for_iter.3',
                            State(pc_initial=362 nstack_initial=2))},
             '$phi410.0': {('$230get_iter.5',
                            State(pc_initial=220 nstack_initial=0))},
             '$phi94.0': {('$92get_iter.33',
                           State(pc_initial=22 nstack_initial=0))},
             '$phi96.0': {('$92get_iter.33',
                           State(pc_initial=22 nstack_initial=0))},
             '$phi96.1': {('$94for_iter.2',
                           State(pc_initial=94 nstack_initial=1))}})
2025-01-05 16:51:33,072 - DEBUG - keep phismap: {'$phi152.1': {('$150get_iter.27', State(pc_initial=96 nstack_initial=2))},
 '$phi154.2': {('$152for_iter.3', State(pc_initial=152 nstack_initial=2))},
 '$phi232.0': {('$230get_iter.5', State(pc_initial=220 nstack_initial=0))},
 '$phi234.1': {('$232for_iter.2', State(pc_initial=232 nstack_initial=1))},
 '$phi362.1': {('$360get_iter.61', State(pc_initial=234 nstack_initial=2))},
 '$phi364.2': {('$362for_iter.3', State(pc_initial=362 nstack_initial=2))},
 '$phi94.0': {('$92get_iter.33', State(pc_initial=22 nstack_initial=0))},
 '$phi96.1': {('$94for_iter.2', State(pc_initial=94 nstack_initial=1))}}
2025-01-05 16:51:33,077 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=22 nstack_initial=0): {'$phi94.0': '$92get_iter.33'},
             State(pc_initial=94 nstack_initial=1): {'$phi96.1': '$94for_iter.2'},
             State(pc_initial=96 nstack_initial=2): {'$phi152.1': '$150get_iter.27'},
             State(pc_initial=152 nstack_initial=2): {'$phi154.2': '$152for_iter.3'},
             State(pc_initial=220 nstack_initial=0): {'$phi232.0': '$230get_iter.5'},
             State(pc_initial=232 nstack_initial=1): {'$phi234.1': '$232for_iter.2'},
             State(pc_initial=234 nstack_initial=2): {'$phi362.1': '$360get_iter.61'},
             State(pc_initial=362 nstack_initial=2): {'$phi364.2': '$362for_iter.3'}})
2025-01-05 16:51:33,087 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:51:33,089 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$onset_envelope4.1'}), (6, {'func': '$2load_global.0', 'args': ['$onset_envelope4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$frames_per_beat12.4'}), (14, {'func': '$10load_global.3', 'args': ['$frames_per_beat12.4'], 'res': '$14call_function.5'}), (16, {'res': '$const16.6'}), (18, {'lhs': '$14call_function.5', 'rhs': '$const16.6', 'res': '$18compare_op.7'}), (20, {'pred': '$18compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 202: ()})
2025-01-05 16:51:33,095 - DEBUG - block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$22load_global.0'}), (24, {'item': '$22load_global.0', 'res': '$24load_method.1'}), (26, {'res': '$const26.2'}), (28, {'res': '$28load_global.3'}), (30, {'item': '$28load_global.3', 'res': '$30load_method.4'}), (32, {'res': '$frames_per_beat32.5'}), (34, {'res': '$const34.6'}), (36, {'index': '$const34.6', 'target': '$frames_per_beat32.5', 'res': '$36binary_subscr.7'}), (38, {'value': '$36binary_subscr.7', 'res': '$38unary_negative.8'}), (40, {'res': '$frames_per_beat40.9'}), (42, {'res': '$const42.10'}), (44, {'index': '$const42.10', 'target': '$frames_per_beat40.9', 'res': '$44binary_subscr.11'}), (46, {'res': '$const46.12'}), (48, {'lhs': '$44binary_subscr.11', 'rhs': '$const46.12', 'res': '$48binary_add.13'}), (50, {'func': '$30load_method.4', 'args': ['$38unary_negative.8', '$48binary_add.13'], 'res': '$50call_method.14'}), (52, {'res': '$const52.15'}), (54, {'lhs': '$50call_method.14', 'rhs': '$const52.15', 'res': '$54binary_multiply.16'}), (56, {'res': '$frames_per_beat56.17'}), (58, {'res': '$const58.18'}), (60, {'index': '$const58.18', 'target': '$frames_per_beat56.17', 'res': '$60binary_subscr.19'}), (62, {'lhs': '$54binary_multiply.16', 'rhs': '$60binary_subscr.19', 'res': '$62binary_true_divide.20'}), (64, {'res': '$const64.21'}), (66, {'lhs': '$62binary_true_divide.20', 'rhs': '$const64.21', 'res': '$66binary_power.22'}), (68, {'lhs': '$const26.2', 'rhs': '$66binary_power.22', 'res': '$68binary_multiply.23'}), (70, {'func': '$24load_method.1', 'args': ['$68binary_multiply.23'], 'res': '$70call_method.24'}), (72, {'value': '$70call_method.24'}), (74, {'res': '$74load_global.25'}), (76, {'res': '$window76.26'}), (78, {'func': '$74load_global.25', 'args': ['$window76.26'], 'res': '$78call_function.27'}), (80, {'value': '$78call_function.27'}), (82, {'res': '$82load_global.28'}), (84, {'res': '$84load_global.29'}), (86, {'res': '$onset_envelope86.30'}), (88, {'func': '$84load_global.29', 'args': ['$onset_envelope86.30'], 'res': '$88call_function.31'}), (90, {'func': '$82load_global.28', 'args': ['$88call_function.31'], 'res': '$90call_function.32'}), (92, {'value': '$90call_function.32', 'res': '$92get_iter.33'})), outgoing_phis={'$phi94.0': '$92get_iter.33'}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: ('$92get_iter.33',)})
2025-01-05 16:51:33,114 - DEBUG - block_infos State(pc_initial=94 nstack_initial=1):
AdaptBlockInfo(insts=((94, {'iterator': '$phi94.0', 'pair': '$94for_iter.1', 'indval': '$94for_iter.2', 'pred': '$94for_iter.3'}),), outgoing_phis={'$phi96.1': '$94for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={200: (), 96: ('$phi94.0', '$94for_iter.2')})
2025-01-05 16:51:33,118 - DEBUG - block_infos State(pc_initial=96 nstack_initial=2):
AdaptBlockInfo(insts=((96, {'value': '$phi96.1'}), (98, {'res': '$const98.2'}), (100, {'res': '$localscore100.3'}), (102, {'res': '$i102.4'}), (104, {'target': '$localscore100.3', 'index': '$i102.4', 'value': '$const98.2'}), (106, {'res': '$106load_global.5'}), (108, {'res': '$108load_global.6'}), (110, {'res': '$const110.7'}), (112, {'res': '$i112.8'}), (114, {'res': '$K114.9'}), (116, {'res': '$const116.10'}), (118, {'lhs': '$K114.9', 'rhs': '$const116.10', 'res': '$118binary_floor_divide.11'}), (120, {'lhs': '$i112.8', 'rhs': '$118binary_floor_divide.11', 'res': '$120binary_add.12'}), (122, {'res': '$N122.13'}), (124, {'lhs': '$120binary_add.12', 'rhs': '$N122.13', 'res': '$124binary_subtract.14'}), (126, {'res': '$const126.15'}), (128, {'lhs': '$124binary_subtract.14', 'rhs': '$const126.15', 'res': '$128binary_add.16'}), (130, {'func': '$108load_global.6', 'args': ['$const110.7', '$128binary_add.16'], 'res': '$130call_function.17'}), (132, {'res': '$132load_global.18'}), (134, {'res': '$i134.19'}), (136, {'res': '$K136.20'}), (138, {'res': '$const138.21'}), (140, {'lhs': '$K136.20', 'rhs': '$const138.21', 'res': '$140binary_floor_divide.22'}), (142, {'lhs': '$i134.19', 'rhs': '$140binary_floor_divide.22', 'res': '$142binary_add.23'}), (144, {'res': '$K144.24'}), (146, {'func': '$132load_global.18', 'args': ['$142binary_add.23', '$K144.24'], 'res': '$146call_function.25'}), (148, {'func': '$106load_global.5', 'args': ['$130call_function.17', '$146call_function.25'], 'res': '$148call_function.26'}), (150, {'value': '$148call_function.26', 'res': '$150get_iter.27'})), outgoing_phis={'$phi152.1': '$150get_iter.27'}, blockstack=(), active_try_block=None, outgoing_edgepushed={152: ('$phi96.0', '$150get_iter.27')})
2025-01-05 16:51:33,132 - DEBUG - block_infos State(pc_initial=152 nstack_initial=2):
AdaptBlockInfo(insts=((152, {'iterator': '$phi152.1', 'pair': '$152for_iter.2', 'indval': '$152for_iter.3', 'pred': '$152for_iter.4'}),), outgoing_phis={'$phi154.2': '$152for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={198: ('$phi152.0',), 154: ('$phi152.0', '$phi152.1', '$152for_iter.3')})
2025-01-05 16:51:33,136 - DEBUG - block_infos State(pc_initial=154 nstack_initial=3):
AdaptBlockInfo(insts=((154, {'value': '$phi154.2'}), (156, {'res': '$localscore156.3'}), (158, {'res': '$i158.4'}), (160, {'orig': ['$localscore156.3', '$i158.4'], 'duped': ['$160dup_top_two.5', '$160dup_top_two.6']}), (162, {'index': '$160dup_top_two.6', 'target': '$160dup_top_two.5', 'res': '$162binary_subscr.7'}), (164, {'res': '$window164.8'}), (166, {'res': '$k166.9'}), (168, {'index': '$k166.9', 'target': '$window164.8', 'res': '$168binary_subscr.10'}), (170, {'res': '$onset_envelope170.11'}), (172, {'res': '$i172.12'}), (174, {'res': '$K174.13'}), (176, {'res': '$const176.14'}), (178, {'lhs': '$K174.13', 'rhs': '$const176.14', 'res': '$178binary_floor_divide.15'}), (180, {'lhs': '$i172.12', 'rhs': '$178binary_floor_divide.15', 'res': '$180binary_add.16'}), (182, {'res': '$k182.17'}), (184, {'lhs': '$180binary_add.16', 'rhs': '$k182.17', 'res': '$184binary_subtract.18'}), (186, {'index': '$184binary_subtract.18', 'target': '$onset_envelope170.11', 'res': '$186binary_subscr.19'}), (188, {'lhs': '$168binary_subscr.10', 'rhs': '$186binary_subscr.19', 'res': '$188binary_multiply.20'}), (190, {'lhs': '$162binary_subscr.7', 'rhs': '$188binary_multiply.20', 'res': '$190inplace_add.21'}), (194, {'target': '$localscore156.3', 'index': '$i158.4', 'value': '$190inplace_add.21'}), (196, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={152: ('$phi154.0', '$phi154.1')})
2025-01-05 16:51:33,147 - DEBUG - block_infos State(pc_initial=198 nstack_initial=1):
AdaptBlockInfo(insts=((198, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: ('$phi198.0',)})
2025-01-05 16:51:33,150 - DEBUG - block_infos State(pc_initial=200 nstack_initial=0):
AdaptBlockInfo(insts=((200, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={412: ()})
2025-01-05 16:51:33,152 - DEBUG - block_infos State(pc_initial=202 nstack_initial=0):
AdaptBlockInfo(insts=((202, {'res': '$202load_global.0'}), (204, {'res': '$frames_per_beat204.1'}), (206, {'func': '$202load_global.0', 'args': ['$frames_per_beat204.1'], 'res': '$206call_function.2'}), (208, {'res': '$208load_global.3'}), (210, {'res': '$onset_envelope210.4'}), (212, {'func': '$208load_global.3', 'args': ['$onset_envelope210.4'], 'res': '$212call_function.5'}), (214, {'lhs': '$206call_function.2', 'rhs': '$212call_function.5', 'res': '$214compare_op.6'}), (216, {}), (218, {'pred': '$214compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={220: (), 412: ()})
2025-01-05 16:51:33,158 - DEBUG - block_infos State(pc_initial=220 nstack_initial=0):
AdaptBlockInfo(insts=((220, {'res': '$220load_global.0'}), (222, {'res': '$222load_global.1'}), (224, {'res': '$onset_envelope224.2'}), (226, {'func': '$222load_global.1', 'args': ['$onset_envelope224.2'], 'res': '$226call_function.3'}), (228, {'func': '$220load_global.0', 'args': ['$226call_function.3'], 'res': '$228call_function.4'}), (230, {'value': '$228call_function.4', 'res': '$230get_iter.5'})), outgoing_phis={'$phi232.0': '$230get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={232: ('$230get_iter.5',)})
2025-01-05 16:51:33,164 - DEBUG - block_infos State(pc_initial=232 nstack_initial=1):
AdaptBlockInfo(insts=((232, {'iterator': '$phi232.0', 'pair': '$232for_iter.1', 'indval': '$232for_iter.2', 'pred': '$232for_iter.3'}),), outgoing_phis={'$phi234.1': '$232for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={412: (), 234: ('$phi232.0', '$232for_iter.2')})
2025-01-05 16:51:33,168 - DEBUG - block_infos State(pc_initial=234 nstack_initial=2):
AdaptBlockInfo(insts=((234, {'value': '$phi234.1'}), (236, {'res': '$236load_global.2'}), (238, {'item': '$236load_global.2', 'res': '$238load_method.3'}), (240, {'res': '$const240.4'}), (242, {'res': '$242load_global.5'}), (244, {'item': '$242load_global.5', 'res': '$244load_method.6'}), (246, {'res': '$frames_per_beat246.7'}), (248, {'res': '$i248.8'}), (250, {'index': '$i248.8', 'target': '$frames_per_beat246.7', 'res': '$250binary_subscr.9'}), (252, {'value': '$250binary_subscr.9', 'res': '$252unary_negative.10'}), (254, {'res': '$frames_per_beat254.11'}), (256, {'res': '$i256.12'}), (258, {'index': '$i256.12', 'target': '$frames_per_beat254.11', 'res': '$258binary_subscr.13'}), (260, {'res': '$const260.14'}), (262, {'lhs': '$258binary_subscr.13', 'rhs': '$const260.14', 'res': '$262binary_add.15'}), (264, {'func': '$244load_method.6', 'args': ['$252unary_negative.10', '$262binary_add.15'], 'res': '$264call_method.16'}), (266, {'res': '$const266.17'}), (268, {'lhs': '$264call_method.16', 'rhs': '$const266.17', 'res': '$268binary_multiply.18'}), (270, {'res': '$frames_per_beat270.19'}), (272, {'res': '$i272.20'}), (274, {'index': '$i272.20', 'target': '$frames_per_beat270.19', 'res': '$274binary_subscr.21'}), (276, {'lhs': '$268binary_multiply.18', 'rhs': '$274binary_subscr.21', 'res': '$276binary_true_divide.22'}), (278, {'res': '$const278.23'}), (280, {'lhs': '$276binary_true_divide.22', 'rhs': '$const278.23', 'res': '$280binary_power.24'}), (282, {'lhs': '$const240.4', 'rhs': '$280binary_power.24', 'res': '$282binary_multiply.25'}), (284, {'func': '$238load_method.3', 'args': ['$282binary_multiply.25'], 'res': '$284call_method.26'}), (286, {'value': '$284call_method.26'}), (288, {'res': '$const288.27'}), (290, {'res': '$290load_global.28'}), (292, {'res': '$frames_per_beat292.29'}), (294, {'res': '$i294.30'}), (296, {'index': '$i294.30', 'target': '$frames_per_beat292.29', 'res': '$296binary_subscr.31'}), (298, {'func': '$290load_global.28', 'args': ['$296binary_subscr.31'], 'res': '$298call_function.32'}), (300, {'lhs': '$const288.27', 'rhs': '$298call_function.32', 'res': '$300binary_multiply.33'}), (302, {'res': '$const302.34'}), (304, {'lhs': '$300binary_multiply.33', 'rhs': '$const302.34', 'res': '$304binary_add.35'}), (306, {'value': '$304binary_add.35'}), (308, {'res': '$const308.36'}), (310, {'res': '$localscore310.37'}), (312, {'res': '$i312.38'}), (314, {'target': '$localscore310.37', 'index': '$i312.38', 'value': '$const308.36'}), (316, {'res': '$316load_global.39'}), (318, {'res': '$318load_global.40'}), (320, {'res': '$const320.41'}), (322, {'res': '$i322.42'}), (324, {'res': '$K324.43'}), (326, {'res': '$const326.44'}), (328, {'lhs': '$K324.43', 'rhs': '$const326.44', 'res': '$328binary_floor_divide.45'}), (330, {'lhs': '$i322.42', 'rhs': '$328binary_floor_divide.45', 'res': '$330binary_add.46'}), (332, {'res': '$N332.47'}), (334, {'lhs': '$330binary_add.46', 'rhs': '$N332.47', 'res': '$334binary_subtract.48'}), (336, {'res': '$const336.49'}), (338, {'lhs': '$334binary_subtract.48', 'rhs': '$const336.49', 'res': '$338binary_add.50'}), (340, {'func': '$318load_global.40', 'args': ['$const320.41', '$338binary_add.50'], 'res': '$340call_function.51'}), (342, {'res': '$342load_global.52'}), (344, {'res': '$i344.53'}), (346, {'res': '$K346.54'}), (348, {'res': '$const348.55'}), (350, {'lhs': '$K346.54', 'rhs': '$const348.55', 'res': '$350binary_floor_divide.56'}), (352, {'lhs': '$i344.53', 'rhs': '$350binary_floor_divide.56', 'res': '$352binary_add.57'}), (354, {'res': '$K354.58'}), (356, {'func': '$342load_global.52', 'args': ['$352binary_add.57', '$K354.58'], 'res': '$356call_function.59'}), (358, {'func': '$316load_global.39', 'args': ['$340call_function.51', '$356call_function.59'], 'res': '$358call_function.60'}), (360, {'value': '$358call_function.60', 'res': '$360get_iter.61'})), outgoing_phis={'$phi362.1': '$360get_iter.61'}, blockstack=(), active_try_block=None, outgoing_edgepushed={362: ('$phi234.0', '$360get_iter.61')})
2025-01-05 16:51:33,197 - DEBUG - block_infos State(pc_initial=362 nstack_initial=2):
AdaptBlockInfo(insts=((362, {'iterator': '$phi362.1', 'pair': '$362for_iter.2', 'indval': '$362for_iter.3', 'pred': '$362for_iter.4'}),), outgoing_phis={'$phi364.2': '$362for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={410: ('$phi362.0',), 364: ('$phi362.0', '$phi362.1', '$362for_iter.3')})
2025-01-05 16:51:33,201 - DEBUG - block_infos State(pc_initial=364 nstack_initial=3):
AdaptBlockInfo(insts=((364, {'value': '$phi364.2'}), (366, {'res': '$localscore366.3'}), (368, {'res': '$i368.4'}), (370, {'orig': ['$localscore366.3', '$i368.4'], 'duped': ['$370dup_top_two.5', '$370dup_top_two.6']}), (372, {'index': '$370dup_top_two.6', 'target': '$370dup_top_two.5', 'res': '$372binary_subscr.7'}), (374, {'res': '$window374.8'}), (376, {'res': '$k376.9'}), (378, {'index': '$k376.9', 'target': '$window374.8', 'res': '$378binary_subscr.10'}), (380, {'res': '$onset_envelope380.11'}), (382, {'res': '$i382.12'}), (384, {'res': '$K384.13'}), (386, {'res': '$const386.14'}), (388, {'lhs': '$K384.13', 'rhs': '$const386.14', 'res': '$388binary_floor_divide.15'}), (390, {'lhs': '$i382.12', 'rhs': '$388binary_floor_divide.15', 'res': '$390binary_add.16'}), (392, {'res': '$k392.17'}), (394, {'lhs': '$390binary_add.16', 'rhs': '$k392.17', 'res': '$394binary_subtract.18'}), (396, {'index': '$394binary_subtract.18', 'target': '$onset_envelope380.11', 'res': '$396binary_subscr.19'}), (398, {'lhs': '$378binary_subscr.10', 'rhs': '$396binary_subscr.19', 'res': '$398binary_multiply.20'}), (400, {'lhs': '$372binary_subscr.7', 'rhs': '$398binary_multiply.20', 'res': '$400inplace_add.21'}), (404, {'target': '$localscore366.3', 'index': '$i368.4', 'value': '$400inplace_add.21'}), (406, {}), (408, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={362: ('$phi364.0', '$phi364.1')})
2025-01-05 16:51:33,212 - DEBUG - block_infos State(pc_initial=410 nstack_initial=1):
AdaptBlockInfo(insts=((410, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={232: ('$phi410.0',)})
2025-01-05 16:51:33,215 - DEBUG - block_infos State(pc_initial=412 nstack_initial=0):
AdaptBlockInfo(insts=((412, {'res': '$const412.0'}), (414, {'retval': '$const412.0', 'castval': '$414return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:33,226 - DEBUG - label 0:
    onset_envelope = arg(0, name=onset_envelope) ['onset_envelope']
    frames_per_beat = arg(1, name=frames_per_beat) ['frames_per_beat']
    localscore = arg(2, name=localscore)     ['localscore']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'N', 'onset_envelope']
    $10load_global.3 = global(len: <built-in function len>) ['$10load_global.3']
    $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.3', '$14call_function.5', 'frames_per_beat']
    $const16.6 = const(int, 1)               ['$const16.6']
    $18compare_op.7 = $14call_function.5 == $const16.6 ['$14call_function.5', '$18compare_op.7', '$const16.6']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None) ['$18compare_op.7', '$20pred', 'bool20']
    branch $20pred, 22, 202                  ['$20pred']
label 22:
    $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$22load_global.0']
    $24load_method.1 = getattr(value=$22load_global.0, attr=exp) ['$22load_global.0', '$24load_method.1']
    $const26.2 = const(float, -0.5)          ['$const26.2']
    $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$28load_global.3']
    $30load_method.4 = getattr(value=$28load_global.3, attr=arange) ['$28load_global.3', '$30load_method.4']
    $const34.6 = const(int, 0)               ['$const34.6']
    $36binary_subscr.7 = getitem(value=frames_per_beat, index=$const34.6, fn=<built-in function getitem>) ['$36binary_subscr.7', '$const34.6', 'frames_per_beat']
    $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7) ['$36binary_subscr.7', '$38unary_negative.8']
    $const42.10 = const(int, 0)              ['$const42.10']
    $44binary_subscr.11 = getitem(value=frames_per_beat, index=$const42.10, fn=<built-in function getitem>) ['$44binary_subscr.11', '$const42.10', 'frames_per_beat']
    $const46.12 = const(int, 1)              ['$const46.12']
    $48binary_add.13 = $44binary_subscr.11 + $const46.12 ['$44binary_subscr.11', '$48binary_add.13', '$const46.12']
    $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_method.4', '$38unary_negative.8', '$48binary_add.13', '$50call_method.14']
    $const52.15 = const(float, 32.0)         ['$const52.15']
    $54binary_multiply.16 = $50call_method.14 * $const52.15 ['$50call_method.14', '$54binary_multiply.16', '$const52.15']
    $const58.18 = const(int, 0)              ['$const58.18']
    $60binary_subscr.19 = getitem(value=frames_per_beat, index=$const58.18, fn=<built-in function getitem>) ['$60binary_subscr.19', '$const58.18', 'frames_per_beat']
    $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19 ['$54binary_multiply.16', '$60binary_subscr.19', '$62binary_true_divide.20']
    $const64.21 = const(int, 2)              ['$const64.21']
    $66binary_power.22 = $62binary_true_divide.20 ** $const64.21 ['$62binary_true_divide.20', '$66binary_power.22', '$const64.21']
    $68binary_multiply.23 = $const26.2 * $66binary_power.22 ['$66binary_power.22', '$68binary_multiply.23', '$const26.2']
    window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None) ['$24load_method.1', '$68binary_multiply.23', 'window']
    $74load_global.25 = global(len: <built-in function len>) ['$74load_global.25']
    K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None) ['$74load_global.25', 'K', 'window']
    $82load_global.28 = global(range: <class 'range'>) ['$82load_global.28']
    $84load_global.29 = global(len: <built-in function len>) ['$84load_global.29']
    $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None) ['$84load_global.29', '$88call_function.31', 'onset_envelope']
    $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None) ['$82load_global.28', '$88call_function.31', '$90call_function.32']
    $92get_iter.33 = getiter(value=$90call_function.32) ['$90call_function.32', '$92get_iter.33']
    $phi94.0 = $92get_iter.33                ['$92get_iter.33', '$phi94.0']
    jump 94                                  []
label 94:
    $94for_iter.1 = iternext(value=$phi94.0) ['$94for_iter.1', '$phi94.0']
    $94for_iter.2 = pair_first(value=$94for_iter.1) ['$94for_iter.1', '$94for_iter.2']
    $94for_iter.3 = pair_second(value=$94for_iter.1) ['$94for_iter.1', '$94for_iter.3']
    $phi96.1 = $94for_iter.2                 ['$94for_iter.2', '$phi96.1']
    branch $94for_iter.3, 96, 200            ['$94for_iter.3']
label 96:
    i = $phi96.1                             ['$phi96.1', 'i']
    $const98.2 = const(float, 0.0)           ['$const98.2']
    localscore[i] = $const98.2               ['$const98.2', 'i', 'localscore']
    $106load_global.5 = global(range: <class 'range'>) ['$106load_global.5']
    $108load_global.6 = global(max: <built-in function max>) ['$108load_global.6']
    $const110.7 = const(int, 0)              ['$const110.7']
    $const116.10 = const(int, 2)             ['$const116.10']
    $118binary_floor_divide.11 = K // $const116.10 ['$118binary_floor_divide.11', '$const116.10', 'K']
    $120binary_add.12 = i + $118binary_floor_divide.11 ['$118binary_floor_divide.11', '$120binary_add.12', 'i']
    $124binary_subtract.14 = $120binary_add.12 - N ['$120binary_add.12', '$124binary_subtract.14', 'N']
    $const126.15 = const(int, 1)             ['$const126.15']
    $128binary_add.16 = $124binary_subtract.14 + $const126.15 ['$124binary_subtract.14', '$128binary_add.16', '$const126.15']
    $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None) ['$108load_global.6', '$128binary_add.16', '$130call_function.17', '$const110.7']
    $132load_global.18 = global(min: <built-in function min>) ['$132load_global.18']
    $const138.21 = const(int, 2)             ['$const138.21']
    $140binary_floor_divide.22 = K // $const138.21 ['$140binary_floor_divide.22', '$const138.21', 'K']
    $142binary_add.23 = i + $140binary_floor_divide.22 ['$140binary_floor_divide.22', '$142binary_add.23', 'i']
    $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None) ['$132load_global.18', '$142binary_add.23', '$146call_function.25', 'K']
    $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None) ['$106load_global.5', '$130call_function.17', '$146call_function.25', '$148call_function.26']
    $150get_iter.27 = getiter(value=$148call_function.26) ['$148call_function.26', '$150get_iter.27']
    $phi152.1 = $150get_iter.27              ['$150get_iter.27', '$phi152.1']
    jump 152                                 []
label 152:
    $152for_iter.2 = iternext(value=$phi152.1) ['$152for_iter.2', '$phi152.1']
    $152for_iter.3 = pair_first(value=$152for_iter.2) ['$152for_iter.2', '$152for_iter.3']
    $152for_iter.4 = pair_second(value=$152for_iter.2) ['$152for_iter.2', '$152for_iter.4']
    $phi154.2 = $152for_iter.3               ['$152for_iter.3', '$phi154.2']
    branch $152for_iter.4, 154, 198          ['$152for_iter.4']
label 154:
    k = $phi154.2                            ['$phi154.2', 'k']
    $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>) ['$162binary_subscr.7', 'i', 'localscore']
    $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>) ['$168binary_subscr.10', 'k', 'window']
    $const176.14 = const(int, 2)             ['$const176.14']
    $178binary_floor_divide.15 = K // $const176.14 ['$178binary_floor_divide.15', '$const176.14', 'K']
    $180binary_add.16 = i + $178binary_floor_divide.15 ['$178binary_floor_divide.15', '$180binary_add.16', 'i']
    $184binary_subtract.18 = $180binary_add.16 - k ['$180binary_add.16', '$184binary_subtract.18', 'k']
    $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>) ['$184binary_subtract.18', '$186binary_subscr.19', 'onset_envelope']
    $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19 ['$168binary_subscr.10', '$186binary_subscr.19', '$188binary_multiply.20']
    $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined) ['$162binary_subscr.7', '$188binary_multiply.20', '$190inplace_add.21']
    localscore[i] = $190inplace_add.21       ['$190inplace_add.21', 'i', 'localscore']
    jump 152                                 []
label 198:
    jump 94                                  []
label 200:
    jump 412                                 []
label 202:
    $202load_global.0 = global(len: <built-in function len>) ['$202load_global.0']
    $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None) ['$202load_global.0', '$206call_function.2', 'frames_per_beat']
    $208load_global.3 = global(len: <built-in function len>) ['$208load_global.3']
    $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None) ['$208load_global.3', '$212call_function.5', 'onset_envelope']
    $214compare_op.6 = $206call_function.2 == $212call_function.5 ['$206call_function.2', '$212call_function.5', '$214compare_op.6']
    bool218 = global(bool: <class 'bool'>)   ['bool218']
    $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None) ['$214compare_op.6', '$218pred', 'bool218']
    branch $218pred, 220, 412                ['$218pred']
label 220:
    $220load_global.0 = global(range: <class 'range'>) ['$220load_global.0']
    $222load_global.1 = global(len: <built-in function len>) ['$222load_global.1']
    $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None) ['$222load_global.1', '$226call_function.3', 'onset_envelope']
    $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None) ['$220load_global.0', '$226call_function.3', '$228call_function.4']
    $230get_iter.5 = getiter(value=$228call_function.4) ['$228call_function.4', '$230get_iter.5']
    $phi232.0 = $230get_iter.5               ['$230get_iter.5', '$phi232.0']
    jump 232                                 []
label 232:
    $232for_iter.1 = iternext(value=$phi232.0) ['$232for_iter.1', '$phi232.0']
    $232for_iter.2 = pair_first(value=$232for_iter.1) ['$232for_iter.1', '$232for_iter.2']
    $232for_iter.3 = pair_second(value=$232for_iter.1) ['$232for_iter.1', '$232for_iter.3']
    $phi234.1 = $232for_iter.2               ['$232for_iter.2', '$phi234.1']
    branch $232for_iter.3, 234, 412          ['$232for_iter.3']
label 234:
    i = $phi234.1                            ['$phi234.1', 'i']
    $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$236load_global.2']
    $238load_method.3 = getattr(value=$236load_global.2, attr=exp) ['$236load_global.2', '$238load_method.3']
    $const240.4 = const(float, -0.5)         ['$const240.4']
    $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$242load_global.5']
    $244load_method.6 = getattr(value=$242load_global.5, attr=arange) ['$242load_global.5', '$244load_method.6']
    $250binary_subscr.9 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>) ['$250binary_subscr.9', 'frames_per_beat', 'i']
    $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9) ['$250binary_subscr.9', '$252unary_negative.10']
    $258binary_subscr.13 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>) ['$258binary_subscr.13', 'frames_per_beat', 'i']
    $const260.14 = const(int, 1)             ['$const260.14']
    $262binary_add.15 = $258binary_subscr.13 + $const260.14 ['$258binary_subscr.13', '$262binary_add.15', '$const260.14']
    $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None) ['$244load_method.6', '$252unary_negative.10', '$262binary_add.15', '$264call_method.16']
    $const266.17 = const(float, 32.0)        ['$const266.17']
    $268binary_multiply.18 = $264call_method.16 * $const266.17 ['$264call_method.16', '$268binary_multiply.18', '$const266.17']
    $274binary_subscr.21 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>) ['$274binary_subscr.21', 'frames_per_beat', 'i']
    $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21 ['$268binary_multiply.18', '$274binary_subscr.21', '$276binary_true_divide.22']
    $const278.23 = const(int, 2)             ['$const278.23']
    $280binary_power.24 = $276binary_true_divide.22 ** $const278.23 ['$276binary_true_divide.22', '$280binary_power.24', '$const278.23']
    $282binary_multiply.25 = $const240.4 * $280binary_power.24 ['$280binary_power.24', '$282binary_multiply.25', '$const240.4']
    window = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None) ['$238load_method.3', '$282binary_multiply.25', 'window']
    $const288.27 = const(int, 2)             ['$const288.27']
    $290load_global.28 = global(int: <class 'int'>) ['$290load_global.28']
    $296binary_subscr.31 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>) ['$296binary_subscr.31', 'frames_per_beat', 'i']
    $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None) ['$290load_global.28', '$296binary_subscr.31', '$298call_function.32']
    $300binary_multiply.33 = $const288.27 * $298call_function.32 ['$298call_function.32', '$300binary_multiply.33', '$const288.27']
    $const302.34 = const(int, 1)             ['$const302.34']
    K = $300binary_multiply.33 + $const302.34 ['$300binary_multiply.33', '$const302.34', 'K']
    $const308.36 = const(float, 0.0)         ['$const308.36']
    localscore[i] = $const308.36             ['$const308.36', 'i', 'localscore']
    $316load_global.39 = global(range: <class 'range'>) ['$316load_global.39']
    $318load_global.40 = global(max: <built-in function max>) ['$318load_global.40']
    $const320.41 = const(int, 0)             ['$const320.41']
    $const326.44 = const(int, 2)             ['$const326.44']
    $328binary_floor_divide.45 = K // $const326.44 ['$328binary_floor_divide.45', '$const326.44', 'K']
    $330binary_add.46 = i + $328binary_floor_divide.45 ['$328binary_floor_divide.45', '$330binary_add.46', 'i']
    $334binary_subtract.48 = $330binary_add.46 - N ['$330binary_add.46', '$334binary_subtract.48', 'N']
    $const336.49 = const(int, 1)             ['$const336.49']
    $338binary_add.50 = $334binary_subtract.48 + $const336.49 ['$334binary_subtract.48', '$338binary_add.50', '$const336.49']
    $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None) ['$318load_global.40', '$338binary_add.50', '$340call_function.51', '$const320.41']
    $342load_global.52 = global(min: <built-in function min>) ['$342load_global.52']
    $const348.55 = const(int, 2)             ['$const348.55']
    $350binary_floor_divide.56 = K // $const348.55 ['$350binary_floor_divide.56', '$const348.55', 'K']
    $352binary_add.57 = i + $350binary_floor_divide.56 ['$350binary_floor_divide.56', '$352binary_add.57', 'i']
    $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None) ['$342load_global.52', '$352binary_add.57', '$356call_function.59', 'K']
    $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None) ['$316load_global.39', '$340call_function.51', '$356call_function.59', '$358call_function.60']
    $360get_iter.61 = getiter(value=$358call_function.60) ['$358call_function.60', '$360get_iter.61']
    $phi362.1 = $360get_iter.61              ['$360get_iter.61', '$phi362.1']
    jump 362                                 []
label 362:
    $362for_iter.2 = iternext(value=$phi362.1) ['$362for_iter.2', '$phi362.1']
    $362for_iter.3 = pair_first(value=$362for_iter.2) ['$362for_iter.2', '$362for_iter.3']
    $362for_iter.4 = pair_second(value=$362for_iter.2) ['$362for_iter.2', '$362for_iter.4']
    $phi364.2 = $362for_iter.3               ['$362for_iter.3', '$phi364.2']
    branch $362for_iter.4, 364, 410          ['$362for_iter.4']
label 364:
    k = $phi364.2                            ['$phi364.2', 'k']
    $372binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>) ['$372binary_subscr.7', 'i', 'localscore']
    $378binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>) ['$378binary_subscr.10', 'k', 'window']
    $const386.14 = const(int, 2)             ['$const386.14']
    $388binary_floor_divide.15 = K // $const386.14 ['$388binary_floor_divide.15', '$const386.14', 'K']
    $390binary_add.16 = i + $388binary_floor_divide.15 ['$388binary_floor_divide.15', '$390binary_add.16', 'i']
    $394binary_subtract.18 = $390binary_add.16 - k ['$390binary_add.16', '$394binary_subtract.18', 'k']
    $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>) ['$394binary_subtract.18', '$396binary_subscr.19', 'onset_envelope']
    $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19 ['$378binary_subscr.10', '$396binary_subscr.19', '$398binary_multiply.20']
    $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined) ['$372binary_subscr.7', '$398binary_multiply.20', '$400inplace_add.21']
    localscore[i] = $400inplace_add.21       ['$400inplace_add.21', 'i', 'localscore']
    jump 362                                 []
label 410:
    jump 232                                 []
label 412:
    $const412.0 = const(NoneType, None)      ['$const412.0']
    $414return_value.1 = cast(value=$const412.0) ['$414return_value.1', '$const412.0']
    return $414return_value.1                ['$414return_value.1']

2025-01-05 16:51:33,458 - DEBUG - ==== SSA block analysis pass on 0
2025-01-05 16:51:33,459 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014BFA5B0>
2025-01-05 16:51:33,460 - DEBUG - on stmt: onset_envelope = arg(0, name=onset_envelope)
2025-01-05 16:51:33,462 - DEBUG - on stmt: frames_per_beat = arg(1, name=frames_per_beat)
2025-01-05 16:51:33,464 - DEBUG - on stmt: localscore = arg(2, name=localscore)
2025-01-05 16:51:33,465 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:33,466 - DEBUG - on stmt: N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,468 - DEBUG - on stmt: $10load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:33,470 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,472 - DEBUG - on stmt: $const16.6 = const(int, 1)
2025-01-05 16:51:33,473 - DEBUG - on stmt: $18compare_op.7 = $14call_function.5 == $const16.6
2025-01-05 16:51:33,475 - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-01-05 16:51:33,477 - DEBUG - on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,480 - DEBUG - on stmt: branch $20pred, 22, 202
2025-01-05 16:51:33,481 - DEBUG - ==== SSA block analysis pass on 22
2025-01-05 16:51:33,482 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014BFA5B0>
2025-01-05 16:51:33,483 - DEBUG - on stmt: $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:33,485 - DEBUG - on stmt: $24load_method.1 = getattr(value=$22load_global.0, attr=exp)
2025-01-05 16:51:33,487 - DEBUG - on stmt: $const26.2 = const(float, -0.5)
2025-01-05 16:51:33,488 - DEBUG - on stmt: $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:33,490 - DEBUG - on stmt: $30load_method.4 = getattr(value=$28load_global.3, attr=arange)
2025-01-05 16:51:33,492 - DEBUG - on stmt: $const34.6 = const(int, 0)
2025-01-05 16:51:33,493 - DEBUG - on stmt: $36binary_subscr.7 = static_getitem(value=frames_per_beat, index=0, index_var=$const34.6, fn=<built-in function getitem>)
2025-01-05 16:51:33,495 - DEBUG - on stmt: $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7)
2025-01-05 16:51:33,497 - DEBUG - on stmt: $const42.10 = const(int, 0)
2025-01-05 16:51:33,498 - DEBUG - on stmt: $44binary_subscr.11 = static_getitem(value=frames_per_beat, index=0, index_var=$const42.10, fn=<built-in function getitem>)
2025-01-05 16:51:33,500 - DEBUG - on stmt: $const46.12 = const(int, 1)
2025-01-05 16:51:33,501 - DEBUG - on stmt: $48binary_add.13 = $44binary_subscr.11 + $const46.12
2025-01-05 16:51:33,503 - DEBUG - on stmt: $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,506 - DEBUG - on stmt: $const52.15 = const(float, 32.0)
2025-01-05 16:51:33,507 - DEBUG - on stmt: $54binary_multiply.16 = $50call_method.14 * $const52.15
2025-01-05 16:51:33,508 - DEBUG - on stmt: $const58.18 = const(int, 0)
2025-01-05 16:51:33,509 - DEBUG - on stmt: $60binary_subscr.19 = static_getitem(value=frames_per_beat, index=0, index_var=$const58.18, fn=<built-in function getitem>)
2025-01-05 16:51:33,511 - DEBUG - on stmt: $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19
2025-01-05 16:51:33,513 - DEBUG - on stmt: $const64.21 = const(int, 2)
2025-01-05 16:51:33,514 - DEBUG - on stmt: $66binary_power.22 = $62binary_true_divide.20 ** $const64.21
2025-01-05 16:51:33,516 - DEBUG - on stmt: $68binary_multiply.23 = $const26.2 * $66binary_power.22
2025-01-05 16:51:33,517 - DEBUG - on stmt: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,520 - DEBUG - on stmt: $74load_global.25 = global(len: <built-in function len>)
2025-01-05 16:51:33,521 - DEBUG - on stmt: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,524 - DEBUG - on stmt: $82load_global.28 = global(range: <class 'range'>)
2025-01-05 16:51:33,525 - DEBUG - on stmt: $84load_global.29 = global(len: <built-in function len>)
2025-01-05 16:51:33,527 - DEBUG - on stmt: $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,529 - DEBUG - on stmt: $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,532 - DEBUG - on stmt: $92get_iter.33 = getiter(value=$90call_function.32)
2025-01-05 16:51:33,533 - DEBUG - on stmt: $phi94.0 = $92get_iter.33
2025-01-05 16:51:33,534 - DEBUG - on stmt: jump 94
2025-01-05 16:51:33,535 - DEBUG - ==== SSA block analysis pass on 94
2025-01-05 16:51:33,536 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014BFA5B0>
2025-01-05 16:51:33,538 - DEBUG - on stmt: $94for_iter.1 = iternext(value=$phi94.0)
2025-01-05 16:51:33,539 - DEBUG - on stmt: $94for_iter.2 = pair_first(value=$94for_iter.1)
2025-01-05 16:51:33,541 - DEBUG - on stmt: $94for_iter.3 = pair_second(value=$94for_iter.1)
2025-01-05 16:51:33,543 - DEBUG - on stmt: $phi96.1 = $94for_iter.2
2025-01-05 16:51:33,544 - DEBUG - on stmt: branch $94for_iter.3, 96, 200
2025-01-05 16:51:33,545 - DEBUG - ==== SSA block analysis pass on 96
2025-01-05 16:51:33,545 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014BFA5B0>
2025-01-05 16:51:33,547 - DEBUG - on stmt: i = $phi96.1
2025-01-05 16:51:33,548 - DEBUG - on stmt: $const98.2 = const(float, 0.0)
2025-01-05 16:51:33,549 - DEBUG - on stmt: localscore[i] = $const98.2
2025-01-05 16:51:33,550 - DEBUG - on stmt: $106load_global.5 = global(range: <class 'range'>)
2025-01-05 16:51:33,552 - DEBUG - on stmt: $108load_global.6 = global(max: <built-in function max>)
2025-01-05 16:51:33,554 - DEBUG - on stmt: $const110.7 = const(int, 0)
2025-01-05 16:51:33,555 - DEBUG - on stmt: $const116.10 = const(int, 2)
2025-01-05 16:51:33,556 - DEBUG - on stmt: $118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:33,558 - DEBUG - on stmt: $120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:33,559 - DEBUG - on stmt: $124binary_subtract.14 = $120binary_add.12 - N
2025-01-05 16:51:33,561 - DEBUG - on stmt: $const126.15 = const(int, 1)
2025-01-05 16:51:33,562 - DEBUG - on stmt: $128binary_add.16 = $124binary_subtract.14 + $const126.15
2025-01-05 16:51:33,563 - DEBUG - on stmt: $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,566 - DEBUG - on stmt: $132load_global.18 = global(min: <built-in function min>)
2025-01-05 16:51:33,568 - DEBUG - on stmt: $const138.21 = const(int, 2)
2025-01-05 16:51:33,569 - DEBUG - on stmt: $140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:33,570 - DEBUG - on stmt: $142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:33,572 - DEBUG - on stmt: $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,575 - DEBUG - on stmt: $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,578 - DEBUG - on stmt: $150get_iter.27 = getiter(value=$148call_function.26)
2025-01-05 16:51:33,580 - DEBUG - on stmt: $phi152.1 = $150get_iter.27
2025-01-05 16:51:33,581 - DEBUG - on stmt: jump 152
2025-01-05 16:51:33,582 - DEBUG - ==== SSA block analysis pass on 152
2025-01-05 16:51:33,583 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014BFA5B0>
2025-01-05 16:51:33,584 - DEBUG - on stmt: $152for_iter.2 = iternext(value=$phi152.1)
2025-01-05 16:51:33,586 - DEBUG - on stmt: $152for_iter.3 = pair_first(value=$152for_iter.2)
2025-01-05 16:51:33,587 - DEBUG - on stmt: $152for_iter.4 = pair_second(value=$152for_iter.2)
2025-01-05 16:51:33,589 - DEBUG - on stmt: $phi154.2 = $152for_iter.3
2025-01-05 16:51:33,590 - DEBUG - on stmt: branch $152for_iter.4, 154, 198
2025-01-05 16:51:33,591 - DEBUG - ==== SSA block analysis pass on 154
2025-01-05 16:51:33,592 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014BFA5B0>
2025-01-05 16:51:33,593 - DEBUG - on stmt: k = $phi154.2
2025-01-05 16:51:33,594 - DEBUG - on stmt: $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:33,596 - DEBUG - on stmt: $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:33,598 - DEBUG - on stmt: $const176.14 = const(int, 2)
2025-01-05 16:51:33,599 - DEBUG - on stmt: $178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:33,600 - DEBUG - on stmt: $180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:33,602 - DEBUG - on stmt: $184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:33,603 - DEBUG - on stmt: $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:33,605 - DEBUG - on stmt: $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19
2025-01-05 16:51:33,606 - DEBUG - on stmt: $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:33,609 - DEBUG - on stmt: localscore[i] = $190inplace_add.21
2025-01-05 16:51:33,610 - DEBUG - on stmt: jump 152
2025-01-05 16:51:33,611 - DEBUG - ==== SSA block analysis pass on 198
2025-01-05 16:51:33,612 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014BFA5B0>
2025-01-05 16:51:33,614 - DEBUG - on stmt: jump 94
2025-01-05 16:51:33,615 - DEBUG - ==== SSA block analysis pass on 200
2025-01-05 16:51:33,616 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014BFA5B0>
2025-01-05 16:51:33,617 - DEBUG - on stmt: jump 412
2025-01-05 16:51:33,618 - DEBUG - ==== SSA block analysis pass on 202
2025-01-05 16:51:33,619 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014BFA5B0>
2025-01-05 16:51:33,621 - DEBUG - on stmt: $202load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:33,622 - DEBUG - on stmt: $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,624 - DEBUG - on stmt: $208load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:33,626 - DEBUG - on stmt: $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,628 - DEBUG - on stmt: $214compare_op.6 = $206call_function.2 == $212call_function.5
2025-01-05 16:51:33,631 - DEBUG - on stmt: bool218 = global(bool: <class 'bool'>)
2025-01-05 16:51:33,632 - DEBUG - on stmt: $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,635 - DEBUG - on stmt: branch $218pred, 220, 412
2025-01-05 16:51:33,636 - DEBUG - ==== SSA block analysis pass on 220
2025-01-05 16:51:33,637 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014BFA5B0>
2025-01-05 16:51:33,638 - DEBUG - on stmt: $220load_global.0 = global(range: <class 'range'>)
2025-01-05 16:51:33,640 - DEBUG - on stmt: $222load_global.1 = global(len: <built-in function len>)
2025-01-05 16:51:33,642 - DEBUG - on stmt: $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,644 - DEBUG - on stmt: $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,647 - DEBUG - on stmt: $230get_iter.5 = getiter(value=$228call_function.4)
2025-01-05 16:51:33,648 - DEBUG - on stmt: $phi232.0 = $230get_iter.5
2025-01-05 16:51:33,649 - DEBUG - on stmt: jump 232
2025-01-05 16:51:33,650 - DEBUG - ==== SSA block analysis pass on 232
2025-01-05 16:51:33,651 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014BFA5B0>
2025-01-05 16:51:33,653 - DEBUG - on stmt: $232for_iter.1 = iternext(value=$phi232.0)
2025-01-05 16:51:33,654 - DEBUG - on stmt: $232for_iter.2 = pair_first(value=$232for_iter.1)
2025-01-05 16:51:33,656 - DEBUG - on stmt: $232for_iter.3 = pair_second(value=$232for_iter.1)
2025-01-05 16:51:33,658 - DEBUG - on stmt: $phi234.1 = $232for_iter.2
2025-01-05 16:51:33,659 - DEBUG - on stmt: branch $232for_iter.3, 234, 412
2025-01-05 16:51:33,660 - DEBUG - ==== SSA block analysis pass on 234
2025-01-05 16:51:33,660 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014BFA5B0>
2025-01-05 16:51:33,662 - DEBUG - on stmt: i = $phi234.1
2025-01-05 16:51:33,663 - DEBUG - on stmt: $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:33,665 - DEBUG - on stmt: $238load_method.3 = getattr(value=$236load_global.2, attr=exp)
2025-01-05 16:51:33,667 - DEBUG - on stmt: $const240.4 = const(float, -0.5)
2025-01-05 16:51:33,668 - DEBUG - on stmt: $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:33,670 - DEBUG - on stmt: $244load_method.6 = getattr(value=$242load_global.5, attr=arange)
2025-01-05 16:51:33,672 - DEBUG - on stmt: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:33,673 - DEBUG - on stmt: $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9)
2025-01-05 16:51:33,675 - DEBUG - on stmt: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:33,676 - DEBUG - on stmt: $const260.14 = const(int, 1)
2025-01-05 16:51:33,677 - DEBUG - on stmt: $262binary_add.15 = $258binary_subscr.13 + $const260.14
2025-01-05 16:51:33,679 - DEBUG - on stmt: $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,682 - DEBUG - on stmt: $const266.17 = const(float, 32.0)
2025-01-05 16:51:33,683 - DEBUG - on stmt: $268binary_multiply.18 = $264call_method.16 * $const266.17
2025-01-05 16:51:33,685 - DEBUG - on stmt: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:33,686 - DEBUG - on stmt: $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21
2025-01-05 16:51:33,688 - DEBUG - on stmt: $const278.23 = const(int, 2)
2025-01-05 16:51:33,689 - DEBUG - on stmt: $280binary_power.24 = $276binary_true_divide.22 ** $const278.23
2025-01-05 16:51:33,690 - DEBUG - on stmt: $282binary_multiply.25 = $const240.4 * $280binary_power.24
2025-01-05 16:51:33,692 - DEBUG - on stmt: window = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,694 - DEBUG - on stmt: $const288.27 = const(int, 2)
2025-01-05 16:51:33,695 - DEBUG - on stmt: $290load_global.28 = global(int: <class 'int'>)
2025-01-05 16:51:33,697 - DEBUG - on stmt: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:33,699 - DEBUG - on stmt: $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,701 - DEBUG - on stmt: $300binary_multiply.33 = $const288.27 * $298call_function.32
2025-01-05 16:51:33,703 - DEBUG - on stmt: $const302.34 = const(int, 1)
2025-01-05 16:51:33,704 - DEBUG - on stmt: K = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:33,706 - DEBUG - on stmt: $const308.36 = const(float, 0.0)
2025-01-05 16:51:33,707 - DEBUG - on stmt: localscore[i] = $const308.36
2025-01-05 16:51:33,708 - DEBUG - on stmt: $316load_global.39 = global(range: <class 'range'>)
2025-01-05 16:51:33,709 - DEBUG - on stmt: $318load_global.40 = global(max: <built-in function max>)
2025-01-05 16:51:33,711 - DEBUG - on stmt: $const320.41 = const(int, 0)
2025-01-05 16:51:33,712 - DEBUG - on stmt: $const326.44 = const(int, 2)
2025-01-05 16:51:33,713 - DEBUG - on stmt: $328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:33,715 - DEBUG - on stmt: $330binary_add.46 = i + $328binary_floor_divide.45
2025-01-05 16:51:33,716 - DEBUG - on stmt: $334binary_subtract.48 = $330binary_add.46 - N
2025-01-05 16:51:33,718 - DEBUG - on stmt: $const336.49 = const(int, 1)
2025-01-05 16:51:33,719 - DEBUG - on stmt: $338binary_add.50 = $334binary_subtract.48 + $const336.49
2025-01-05 16:51:33,720 - DEBUG - on stmt: $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,723 - DEBUG - on stmt: $342load_global.52 = global(min: <built-in function min>)
2025-01-05 16:51:33,725 - DEBUG - on stmt: $const348.55 = const(int, 2)
2025-01-05 16:51:33,726 - DEBUG - on stmt: $350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:33,728 - DEBUG - on stmt: $352binary_add.57 = i + $350binary_floor_divide.56
2025-01-05 16:51:33,730 - DEBUG - on stmt: $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,732 - DEBUG - on stmt: $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,735 - DEBUG - on stmt: $360get_iter.61 = getiter(value=$358call_function.60)
2025-01-05 16:51:33,737 - DEBUG - on stmt: $phi362.1 = $360get_iter.61
2025-01-05 16:51:33,738 - DEBUG - on stmt: jump 362
2025-01-05 16:51:33,739 - DEBUG - ==== SSA block analysis pass on 362
2025-01-05 16:51:33,740 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014BFA5B0>
2025-01-05 16:51:33,741 - DEBUG - on stmt: $362for_iter.2 = iternext(value=$phi362.1)
2025-01-05 16:51:33,743 - DEBUG - on stmt: $362for_iter.3 = pair_first(value=$362for_iter.2)
2025-01-05 16:51:33,745 - DEBUG - on stmt: $362for_iter.4 = pair_second(value=$362for_iter.2)
2025-01-05 16:51:33,747 - DEBUG - on stmt: $phi364.2 = $362for_iter.3
2025-01-05 16:51:33,748 - DEBUG - on stmt: branch $362for_iter.4, 364, 410
2025-01-05 16:51:33,749 - DEBUG - ==== SSA block analysis pass on 364
2025-01-05 16:51:33,749 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014BFA5B0>
2025-01-05 16:51:33,751 - DEBUG - on stmt: k = $phi364.2
2025-01-05 16:51:33,752 - DEBUG - on stmt: $372binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:33,753 - DEBUG - on stmt: $378binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:33,755 - DEBUG - on stmt: $const386.14 = const(int, 2)
2025-01-05 16:51:33,756 - DEBUG - on stmt: $388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:33,757 - DEBUG - on stmt: $390binary_add.16 = i + $388binary_floor_divide.15
2025-01-05 16:51:33,759 - DEBUG - on stmt: $394binary_subtract.18 = $390binary_add.16 - k
2025-01-05 16:51:33,761 - DEBUG - on stmt: $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:33,762 - DEBUG - on stmt: $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19
2025-01-05 16:51:33,764 - DEBUG - on stmt: $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:33,767 - DEBUG - on stmt: localscore[i] = $400inplace_add.21
2025-01-05 16:51:33,768 - DEBUG - on stmt: jump 362
2025-01-05 16:51:33,769 - DEBUG - ==== SSA block analysis pass on 410
2025-01-05 16:51:33,770 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014BFA5B0>
2025-01-05 16:51:33,771 - DEBUG - on stmt: jump 232
2025-01-05 16:51:33,772 - DEBUG - ==== SSA block analysis pass on 412
2025-01-05 16:51:33,773 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014BFA5B0>
2025-01-05 16:51:33,775 - DEBUG - on stmt: $const412.0 = const(NoneType, None)
2025-01-05 16:51:33,776 - DEBUG - on stmt: $414return_value.1 = cast(value=$const412.0)
2025-01-05 16:51:33,777 - DEBUG - on stmt: return $414return_value.1
2025-01-05 16:51:33,782 - DEBUG - defs defaultdict(<class 'list'>,
            {'$106load_global.5': [<numba.core.ir.Assign object at 0x0000000014BC8D60>],
             '$108load_global.6': [<numba.core.ir.Assign object at 0x0000000014BC8EE0>],
             '$10load_global.3': [<numba.core.ir.Assign object at 0x000000001468D940>],
             '$118binary_floor_divide.11': [<numba.core.ir.Assign object at 0x0000000014BDC5E0>],
             '$120binary_add.12': [<numba.core.ir.Assign object at 0x0000000014BDC760>],
             '$124binary_subtract.14': [<numba.core.ir.Assign object at 0x0000000014BDCA00>],
             '$128binary_add.16': [<numba.core.ir.Assign object at 0x0000000014BDCD00>],
             '$130call_function.17': [<numba.core.ir.Assign object at 0x0000000014BDCEB0>],
             '$132load_global.18': [<numba.core.ir.Assign object at 0x0000000014BDD040>],
             '$140binary_floor_divide.22': [<numba.core.ir.Assign object at 0x0000000014BDD580>],
             '$142binary_add.23': [<numba.core.ir.Assign object at 0x0000000014BDD700>],
             '$146call_function.25': [<numba.core.ir.Assign object at 0x0000000014BDD9D0>],
             '$148call_function.26': [<numba.core.ir.Assign object at 0x0000000014BDDB50>],
             '$14call_function.5': [<numba.core.ir.Assign object at 0x0000000014686D60>],
             '$150get_iter.27': [<numba.core.ir.Assign object at 0x0000000014BDDCA0>],
             '$152for_iter.2': [<numba.core.ir.Assign object at 0x0000000014BDDD60>],
             '$152for_iter.3': [<numba.core.ir.Assign object at 0x0000000014BDDE80>],
             '$152for_iter.4': [<numba.core.ir.Assign object at 0x0000000014BDDFA0>],
             '$162binary_subscr.7': [<numba.core.ir.Assign object at 0x0000000014BDF820>],
             '$168binary_subscr.10': [<numba.core.ir.Assign object at 0x0000000014BDFBE0>],
             '$178binary_floor_divide.15': [<numba.core.ir.Assign object at 0x0000000014BE2280>],
             '$180binary_add.16': [<numba.core.ir.Assign object at 0x0000000014BE2400>],
             '$184binary_subtract.18': [<numba.core.ir.Assign object at 0x0000000014BE26A0>],
             '$186binary_subscr.19': [<numba.core.ir.Assign object at 0x0000000014BE2820>],
             '$188binary_multiply.20': [<numba.core.ir.Assign object at 0x0000000014BE29A0>],
             '$18compare_op.7': [<numba.core.ir.Assign object at 0x00000000146862E0>],
             '$190inplace_add.21': [<numba.core.ir.Assign object at 0x0000000014BE2B20>],
             '$202load_global.0': [<numba.core.ir.Assign object at 0x0000000014BE2E20>],
             '$206call_function.2': [<numba.core.ir.Assign object at 0x0000000014BE3130>],
             '$208load_global.3': [<numba.core.ir.Assign object at 0x0000000014BE3280>],
             '$20pred': [<numba.core.ir.Assign object at 0x00000000182702B0>],
             '$212call_function.5': [<numba.core.ir.Assign object at 0x0000000014BE3550>],
             '$214compare_op.6': [<numba.core.ir.Assign object at 0x0000000014BE36A0>],
             '$218pred': [<numba.core.ir.Assign object at 0x0000000014BE3940>],
             '$220load_global.0': [<numba.core.ir.Assign object at 0x0000000014BE3B20>],
             '$222load_global.1': [<numba.core.ir.Assign object at 0x0000000014BE3CA0>],
             '$226call_function.3': [<numba.core.ir.Assign object at 0x0000000014BE3F70>],
             '$228call_function.4': [<numba.core.ir.Assign object at 0x0000000014BE5130>],
             '$22load_global.0': [<numba.core.ir.Assign object at 0x0000000018296BE0>],
             '$230get_iter.5': [<numba.core.ir.Assign object at 0x0000000014BE5280>],
             '$232for_iter.1': [<numba.core.ir.Assign object at 0x0000000014BE55E0>],
             '$232for_iter.2': [<numba.core.ir.Assign object at 0x0000000014BE5700>],
             '$232for_iter.3': [<numba.core.ir.Assign object at 0x0000000014BE5820>],
             '$236load_global.2': [<numba.core.ir.Assign object at 0x0000000014BE5BE0>],
             '$238load_method.3': [<numba.core.ir.Assign object at 0x0000000014BE5D60>],
             '$242load_global.5': [<numba.core.ir.Assign object at 0x0000000014BE70A0>],
             '$244load_method.6': [<numba.core.ir.Assign object at 0x0000000014BE7220>],
             '$24load_method.1': [<numba.core.ir.Assign object at 0x00000000182F53D0>],
             '$250binary_subscr.9': [<numba.core.ir.Assign object at 0x0000000014BE75E0>],
             '$252unary_negative.10': [<numba.core.ir.Assign object at 0x0000000014BE7760>],
             '$258binary_subscr.13': [<numba.core.ir.Assign object at 0x0000000014BE7B20>],
             '$262binary_add.15': [<numba.core.ir.Assign object at 0x0000000014BE7E20>],
             '$264call_method.16': [<numba.core.ir.Assign object at 0x0000000014BE7FD0>],
             '$268binary_multiply.18': [<numba.core.ir.Assign object at 0x0000000014BE92E0>],
             '$274binary_subscr.21': [<numba.core.ir.Assign object at 0x0000000014BE96A0>],
             '$276binary_true_divide.22': [<numba.core.ir.Assign object at 0x0000000014BE9820>],
             '$280binary_power.24': [<numba.core.ir.Assign object at 0x0000000014BE9B20>],
             '$282binary_multiply.25': [<numba.core.ir.Assign object at 0x0000000014BE9CA0>],
             '$28load_global.3': [<numba.core.ir.Assign object at 0x000000001828BD00>],
             '$290load_global.28': [<numba.core.ir.Assign object at 0x0000000014BEC220>],
             '$296binary_subscr.31': [<numba.core.ir.Assign object at 0x0000000014BEC5E0>],
             '$298call_function.32': [<numba.core.ir.Assign object at 0x0000000014BEC790>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x00000000146BE5B0>],
             '$300binary_multiply.33': [<numba.core.ir.Assign object at 0x0000000014BEC8E0>],
             '$30load_method.4': [<numba.core.ir.Assign object at 0x0000000018274610>],
             '$316load_global.39': [<numba.core.ir.Assign object at 0x0000000014BEE2E0>],
             '$318load_global.40': [<numba.core.ir.Assign object at 0x0000000014BEE460>],
             '$328binary_floor_divide.45': [<numba.core.ir.Assign object at 0x0000000014BEEB20>],
             '$330binary_add.46': [<numba.core.ir.Assign object at 0x0000000014BEECA0>],
             '$334binary_subtract.48': [<numba.core.ir.Assign object at 0x0000000014BEEF40>],
             '$338binary_add.50': [<numba.core.ir.Assign object at 0x0000000014BF0280>],
             '$340call_function.51': [<numba.core.ir.Assign object at 0x0000000014BF0430>],
             '$342load_global.52': [<numba.core.ir.Assign object at 0x0000000014BF0580>],
             '$350binary_floor_divide.56': [<numba.core.ir.Assign object at 0x0000000014BF0AC0>],
             '$352binary_add.57': [<numba.core.ir.Assign object at 0x0000000014BF0C40>],
             '$356call_function.59': [<numba.core.ir.Assign object at 0x0000000014BF0F10>],
             '$358call_function.60': [<numba.core.ir.Assign object at 0x0000000014BF20D0>],
             '$360get_iter.61': [<numba.core.ir.Assign object at 0x0000000014BF2220>],
             '$362for_iter.2': [<numba.core.ir.Assign object at 0x0000000014BECCD0>],
             '$362for_iter.3': [<numba.core.ir.Assign object at 0x0000000014BEE0D0>],
             '$362for_iter.4': [<numba.core.ir.Assign object at 0x0000000014BEEDF0>],
             '$36binary_subscr.7': [<numba.core.ir.Assign object at 0x000000001485FDC0>],
             '$372binary_subscr.7': [<numba.core.ir.Assign object at 0x0000000014BF2880>],
             '$378binary_subscr.10': [<numba.core.ir.Assign object at 0x0000000014BF2C40>],
             '$388binary_floor_divide.15': [<numba.core.ir.Assign object at 0x0000000014BF42E0>],
             '$38unary_negative.8': [<numba.core.ir.Assign object at 0x000000001832CCA0>],
             '$390binary_add.16': [<numba.core.ir.Assign object at 0x0000000014BF4460>],
             '$394binary_subtract.18': [<numba.core.ir.Assign object at 0x0000000014BF4700>],
             '$396binary_subscr.19': [<numba.core.ir.Assign object at 0x0000000014BF4880>],
             '$398binary_multiply.20': [<numba.core.ir.Assign object at 0x0000000014BF4A00>],
             '$400inplace_add.21': [<numba.core.ir.Assign object at 0x0000000014BF4B80>],
             '$414return_value.1': [<numba.core.ir.Assign object at 0x0000000014BF4E80>],
             '$44binary_subscr.11': [<numba.core.ir.Assign object at 0x000000001485FE20>],
             '$48binary_add.13': [<numba.core.ir.Assign object at 0x000000001467CFD0>],
             '$50call_method.14': [<numba.core.ir.Assign object at 0x00000000146560A0>],
             '$54binary_multiply.16': [<numba.core.ir.Assign object at 0x000000001828CFA0>],
             '$60binary_subscr.19': [<numba.core.ir.Assign object at 0x0000000014630C40>],
             '$62binary_true_divide.20': [<numba.core.ir.Assign object at 0x000000001829C3D0>],
             '$66binary_power.22': [<numba.core.ir.Assign object at 0x0000000014714790>],
             '$68binary_multiply.23': [<numba.core.ir.Assign object at 0x0000000014A31C10>],
             '$74load_global.25': [<numba.core.ir.Assign object at 0x000000001488CF40>],
             '$82load_global.28': [<numba.core.ir.Assign object at 0x00000000149F8F10>],
             '$84load_global.29': [<numba.core.ir.Assign object at 0x000000001492A6D0>],
             '$88call_function.31': [<numba.core.ir.Assign object at 0x00000000148C7EB0>],
             '$90call_function.32': [<numba.core.ir.Assign object at 0x0000000014911430>],
             '$92get_iter.33': [<numba.core.ir.Assign object at 0x0000000014911EE0>],
             '$94for_iter.1': [<numba.core.ir.Assign object at 0x0000000014911040>],
             '$94for_iter.2': [<numba.core.ir.Assign object at 0x0000000014AF1910>],
             '$94for_iter.3': [<numba.core.ir.Assign object at 0x0000000014BC84F0>],
             '$const110.7': [<numba.core.ir.Assign object at 0x0000000014BDC0A0>],
             '$const116.10': [<numba.core.ir.Assign object at 0x0000000014BDC460>],
             '$const126.15': [<numba.core.ir.Assign object at 0x0000000014BDCB80>],
             '$const138.21': [<numba.core.ir.Assign object at 0x0000000014BDD400>],
             '$const16.6': [<numba.core.ir.Assign object at 0x0000000014686970>],
             '$const176.14': [<numba.core.ir.Assign object at 0x0000000014BE2100>],
             '$const240.4': [<numba.core.ir.Assign object at 0x0000000014BE5EE0>],
             '$const26.2': [<numba.core.ir.Assign object at 0x000000001724DD60>],
             '$const260.14': [<numba.core.ir.Assign object at 0x0000000014BE7CA0>],
             '$const266.17': [<numba.core.ir.Assign object at 0x0000000014BE9160>],
             '$const278.23': [<numba.core.ir.Assign object at 0x0000000014BE99A0>],
             '$const288.27': [<numba.core.ir.Assign object at 0x0000000014BEC0A0>],
             '$const302.34': [<numba.core.ir.Assign object at 0x0000000014BECA60>],
             '$const308.36': [<numba.core.ir.Assign object at 0x0000000014BECE20>],
             '$const320.41': [<numba.core.ir.Assign object at 0x0000000014BEE5E0>],
             '$const326.44': [<numba.core.ir.Assign object at 0x0000000014BEE9A0>],
             '$const336.49': [<numba.core.ir.Assign object at 0x0000000014BF0100>],
             '$const34.6': [<numba.core.ir.Assign object at 0x00000000182E2190>],
             '$const348.55': [<numba.core.ir.Assign object at 0x0000000014BF0940>],
             '$const386.14': [<numba.core.ir.Assign object at 0x0000000014BF4160>],
             '$const412.0': [<numba.core.ir.Assign object at 0x0000000014BF4580>],
             '$const42.10': [<numba.core.ir.Assign object at 0x0000000014681880>],
             '$const46.12': [<numba.core.ir.Assign object at 0x000000001467BF70>],
             '$const52.15': [<numba.core.ir.Assign object at 0x00000000146568B0>],
             '$const58.18': [<numba.core.ir.Assign object at 0x0000000014646310>],
             '$const64.21': [<numba.core.ir.Assign object at 0x000000001829C130>],
             '$const98.2': [<numba.core.ir.Assign object at 0x0000000014BC88E0>],
             '$phi152.1': [<numba.core.ir.Assign object at 0x0000000014BC8B20>],
             '$phi154.2': [<numba.core.ir.Assign object at 0x0000000014BDD2B0>],
             '$phi232.0': [<numba.core.ir.Assign object at 0x0000000014BE2550>],
             '$phi234.1': [<numba.core.ir.Assign object at 0x0000000014BE54F0>],
             '$phi362.1': [<numba.core.ir.Assign object at 0x0000000014BE7460>],
             '$phi364.2': [<numba.core.ir.Assign object at 0x0000000014BEC340>],
             '$phi94.0': [<numba.core.ir.Assign object at 0x000000001831C100>],
             '$phi96.1': [<numba.core.ir.Assign object at 0x00000000146EF550>],
             'K': [<numba.core.ir.Assign object at 0x0000000014A1B760>,
                   <numba.core.ir.Assign object at 0x0000000014BECBE0>],
             'N': [<numba.core.ir.Assign object at 0x0000000014690430>],
             'bool20': [<numba.core.ir.Assign object at 0x00000000182A74F0>],
             'bool218': [<numba.core.ir.Assign object at 0x0000000014BE3820>],
             'frames_per_beat': [<numba.core.ir.Assign object at 0x00000000146BEAF0>],
             'i': [<numba.core.ir.Assign object at 0x0000000014BC8760>,
                   <numba.core.ir.Assign object at 0x0000000014BE5A60>],
             'k': [<numba.core.ir.Assign object at 0x0000000014BDF280>,
                   <numba.core.ir.Assign object at 0x0000000014BF22E0>],
             'localscore': [<numba.core.ir.Assign object at 0x00000000146BE6A0>],
             'onset_envelope': [<numba.core.ir.Assign object at 0x00000000146EF640>],
             'window': [<numba.core.ir.Assign object at 0x0000000014AA9A90>,
                        <numba.core.ir.Assign object at 0x0000000014BE9E50>]})
2025-01-05 16:51:33,948 - DEBUG - SSA violators {'k', 'i', 'window', 'K'}
2025-01-05 16:51:33,949 - DEBUG - Fix SSA violator on var k
2025-01-05 16:51:33,950 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:33,951 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014630DC0>
2025-01-05 16:51:33,952 - DEBUG - on stmt: onset_envelope = arg(0, name=onset_envelope)
2025-01-05 16:51:33,954 - DEBUG - on stmt: frames_per_beat = arg(1, name=frames_per_beat)
2025-01-05 16:51:33,955 - DEBUG - on stmt: localscore = arg(2, name=localscore)
2025-01-05 16:51:33,956 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:33,958 - DEBUG - on stmt: N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,960 - DEBUG - on stmt: $10load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:33,962 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,964 - DEBUG - on stmt: $const16.6 = const(int, 1)
2025-01-05 16:51:33,965 - DEBUG - on stmt: $18compare_op.7 = $14call_function.5 == $const16.6
2025-01-05 16:51:33,967 - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-01-05 16:51:33,969 - DEBUG - on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,971 - DEBUG - on stmt: branch $20pred, 22, 202
2025-01-05 16:51:33,972 - DEBUG - ==== SSA block rewrite pass on 22
2025-01-05 16:51:33,973 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014630DC0>
2025-01-05 16:51:33,975 - DEBUG - on stmt: $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:33,977 - DEBUG - on stmt: $24load_method.1 = getattr(value=$22load_global.0, attr=exp)
2025-01-05 16:51:33,979 - DEBUG - on stmt: $const26.2 = const(float, -0.5)
2025-01-05 16:51:33,980 - DEBUG - on stmt: $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:33,982 - DEBUG - on stmt: $30load_method.4 = getattr(value=$28load_global.3, attr=arange)
2025-01-05 16:51:33,984 - DEBUG - on stmt: $const34.6 = const(int, 0)
2025-01-05 16:51:33,985 - DEBUG - on stmt: $36binary_subscr.7 = static_getitem(value=frames_per_beat, index=0, index_var=$const34.6, fn=<built-in function getitem>)
2025-01-05 16:51:33,987 - DEBUG - on stmt: $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7)
2025-01-05 16:51:33,988 - DEBUG - on stmt: $const42.10 = const(int, 0)
2025-01-05 16:51:33,989 - DEBUG - on stmt: $44binary_subscr.11 = static_getitem(value=frames_per_beat, index=0, index_var=$const42.10, fn=<built-in function getitem>)
2025-01-05 16:51:33,991 - DEBUG - on stmt: $const46.12 = const(int, 1)
2025-01-05 16:51:33,992 - DEBUG - on stmt: $48binary_add.13 = $44binary_subscr.11 + $const46.12
2025-01-05 16:51:33,994 - DEBUG - on stmt: $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:33,997 - DEBUG - on stmt: $const52.15 = const(float, 32.0)
2025-01-05 16:51:33,998 - DEBUG - on stmt: $54binary_multiply.16 = $50call_method.14 * $const52.15
2025-01-05 16:51:33,999 - DEBUG - on stmt: $const58.18 = const(int, 0)
2025-01-05 16:51:34,001 - DEBUG - on stmt: $60binary_subscr.19 = static_getitem(value=frames_per_beat, index=0, index_var=$const58.18, fn=<built-in function getitem>)
2025-01-05 16:51:34,003 - DEBUG - on stmt: $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19
2025-01-05 16:51:34,004 - DEBUG - on stmt: $const64.21 = const(int, 2)
2025-01-05 16:51:34,005 - DEBUG - on stmt: $66binary_power.22 = $62binary_true_divide.20 ** $const64.21
2025-01-05 16:51:34,007 - DEBUG - on stmt: $68binary_multiply.23 = $const26.2 * $66binary_power.22
2025-01-05 16:51:34,009 - DEBUG - on stmt: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,011 - DEBUG - on stmt: $74load_global.25 = global(len: <built-in function len>)
2025-01-05 16:51:34,013 - DEBUG - on stmt: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,015 - DEBUG - on stmt: $82load_global.28 = global(range: <class 'range'>)
2025-01-05 16:51:34,017 - DEBUG - on stmt: $84load_global.29 = global(len: <built-in function len>)
2025-01-05 16:51:34,018 - DEBUG - on stmt: $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,020 - DEBUG - on stmt: $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,023 - DEBUG - on stmt: $92get_iter.33 = getiter(value=$90call_function.32)
2025-01-05 16:51:34,025 - DEBUG - on stmt: $phi94.0 = $92get_iter.33
2025-01-05 16:51:34,026 - DEBUG - on stmt: jump 94
2025-01-05 16:51:34,027 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:34,028 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014630DC0>
2025-01-05 16:51:34,029 - DEBUG - on stmt: $94for_iter.1 = iternext(value=$phi94.0)
2025-01-05 16:51:34,031 - DEBUG - on stmt: $94for_iter.2 = pair_first(value=$94for_iter.1)
2025-01-05 16:51:34,032 - DEBUG - on stmt: $94for_iter.3 = pair_second(value=$94for_iter.1)
2025-01-05 16:51:34,034 - DEBUG - on stmt: $phi96.1 = $94for_iter.2
2025-01-05 16:51:34,035 - DEBUG - on stmt: branch $94for_iter.3, 96, 200
2025-01-05 16:51:34,036 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:34,037 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014630DC0>
2025-01-05 16:51:34,038 - DEBUG - on stmt: i = $phi96.1
2025-01-05 16:51:34,039 - DEBUG - on stmt: $const98.2 = const(float, 0.0)
2025-01-05 16:51:34,040 - DEBUG - on stmt: localscore[i] = $const98.2
2025-01-05 16:51:34,041 - DEBUG - on stmt: $106load_global.5 = global(range: <class 'range'>)
2025-01-05 16:51:34,042 - DEBUG - on stmt: $108load_global.6 = global(max: <built-in function max>)
2025-01-05 16:51:34,044 - DEBUG - on stmt: $const110.7 = const(int, 0)
2025-01-05 16:51:34,045 - DEBUG - on stmt: $const116.10 = const(int, 2)
2025-01-05 16:51:34,046 - DEBUG - on stmt: $118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:34,048 - DEBUG - on stmt: $120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:34,049 - DEBUG - on stmt: $124binary_subtract.14 = $120binary_add.12 - N
2025-01-05 16:51:34,051 - DEBUG - on stmt: $const126.15 = const(int, 1)
2025-01-05 16:51:34,052 - DEBUG - on stmt: $128binary_add.16 = $124binary_subtract.14 + $const126.15
2025-01-05 16:51:34,053 - DEBUG - on stmt: $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,056 - DEBUG - on stmt: $132load_global.18 = global(min: <built-in function min>)
2025-01-05 16:51:34,057 - DEBUG - on stmt: $const138.21 = const(int, 2)
2025-01-05 16:51:34,059 - DEBUG - on stmt: $140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:34,060 - DEBUG - on stmt: $142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:34,062 - DEBUG - on stmt: $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,065 - DEBUG - on stmt: $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,068 - DEBUG - on stmt: $150get_iter.27 = getiter(value=$148call_function.26)
2025-01-05 16:51:34,069 - DEBUG - on stmt: $phi152.1 = $150get_iter.27
2025-01-05 16:51:34,070 - DEBUG - on stmt: jump 152
2025-01-05 16:51:34,071 - DEBUG - ==== SSA block rewrite pass on 152
2025-01-05 16:51:34,072 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014630DC0>
2025-01-05 16:51:34,074 - DEBUG - on stmt: $152for_iter.2 = iternext(value=$phi152.1)
2025-01-05 16:51:34,075 - DEBUG - on stmt: $152for_iter.3 = pair_first(value=$152for_iter.2)
2025-01-05 16:51:34,077 - DEBUG - on stmt: $152for_iter.4 = pair_second(value=$152for_iter.2)
2025-01-05 16:51:34,079 - DEBUG - on stmt: $phi154.2 = $152for_iter.3
2025-01-05 16:51:34,080 - DEBUG - on stmt: branch $152for_iter.4, 154, 198
2025-01-05 16:51:34,081 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:34,082 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014630DC0>
2025-01-05 16:51:34,083 - DEBUG - on stmt: k = $phi154.2
2025-01-05 16:51:34,085 - DEBUG - first assign: k
2025-01-05 16:51:34,086 - DEBUG - replaced with: k = $phi154.2
2025-01-05 16:51:34,087 - DEBUG - on stmt: $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:34,088 - DEBUG - on stmt: $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:34,090 - DEBUG - on stmt: $const176.14 = const(int, 2)
2025-01-05 16:51:34,091 - DEBUG - on stmt: $178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:34,093 - DEBUG - on stmt: $180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:34,094 - DEBUG - on stmt: $184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:34,096 - DEBUG - on stmt: $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:34,098 - DEBUG - on stmt: $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19
2025-01-05 16:51:34,099 - DEBUG - on stmt: $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:34,102 - DEBUG - on stmt: localscore[i] = $190inplace_add.21
2025-01-05 16:51:34,103 - DEBUG - on stmt: jump 152
2025-01-05 16:51:34,104 - DEBUG - ==== SSA block rewrite pass on 198
2025-01-05 16:51:34,105 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014630DC0>
2025-01-05 16:51:34,106 - DEBUG - on stmt: jump 94
2025-01-05 16:51:34,107 - DEBUG - ==== SSA block rewrite pass on 200
2025-01-05 16:51:34,108 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014630DC0>
2025-01-05 16:51:34,110 - DEBUG - on stmt: jump 412
2025-01-05 16:51:34,111 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-05 16:51:34,112 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014630DC0>
2025-01-05 16:51:34,113 - DEBUG - on stmt: $202load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:34,115 - DEBUG - on stmt: $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,117 - DEBUG - on stmt: $208load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:34,118 - DEBUG - on stmt: $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,120 - DEBUG - on stmt: $214compare_op.6 = $206call_function.2 == $212call_function.5
2025-01-05 16:51:34,122 - DEBUG - on stmt: bool218 = global(bool: <class 'bool'>)
2025-01-05 16:51:34,124 - DEBUG - on stmt: $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,126 - DEBUG - on stmt: branch $218pred, 220, 412
2025-01-05 16:51:34,127 - DEBUG - ==== SSA block rewrite pass on 220
2025-01-05 16:51:34,128 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014630DC0>
2025-01-05 16:51:34,130 - DEBUG - on stmt: $220load_global.0 = global(range: <class 'range'>)
2025-01-05 16:51:34,131 - DEBUG - on stmt: $222load_global.1 = global(len: <built-in function len>)
2025-01-05 16:51:34,133 - DEBUG - on stmt: $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,135 - DEBUG - on stmt: $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,137 - DEBUG - on stmt: $230get_iter.5 = getiter(value=$228call_function.4)
2025-01-05 16:51:34,139 - DEBUG - on stmt: $phi232.0 = $230get_iter.5
2025-01-05 16:51:34,140 - DEBUG - on stmt: jump 232
2025-01-05 16:51:34,141 - DEBUG - ==== SSA block rewrite pass on 232
2025-01-05 16:51:34,142 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014630DC0>
2025-01-05 16:51:34,143 - DEBUG - on stmt: $232for_iter.1 = iternext(value=$phi232.0)
2025-01-05 16:51:34,145 - DEBUG - on stmt: $232for_iter.2 = pair_first(value=$232for_iter.1)
2025-01-05 16:51:34,147 - DEBUG - on stmt: $232for_iter.3 = pair_second(value=$232for_iter.1)
2025-01-05 16:51:34,148 - DEBUG - on stmt: $phi234.1 = $232for_iter.2
2025-01-05 16:51:34,149 - DEBUG - on stmt: branch $232for_iter.3, 234, 412
2025-01-05 16:51:34,150 - DEBUG - ==== SSA block rewrite pass on 234
2025-01-05 16:51:34,151 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014630DC0>
2025-01-05 16:51:34,152 - DEBUG - on stmt: i = $phi234.1
2025-01-05 16:51:34,153 - DEBUG - on stmt: $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:34,155 - DEBUG - on stmt: $238load_method.3 = getattr(value=$236load_global.2, attr=exp)
2025-01-05 16:51:34,157 - DEBUG - on stmt: $const240.4 = const(float, -0.5)
2025-01-05 16:51:34,158 - DEBUG - on stmt: $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:34,161 - DEBUG - on stmt: $244load_method.6 = getattr(value=$242load_global.5, attr=arange)
2025-01-05 16:51:34,162 - DEBUG - on stmt: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:34,164 - DEBUG - on stmt: $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9)
2025-01-05 16:51:34,166 - DEBUG - on stmt: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:34,167 - DEBUG - on stmt: $const260.14 = const(int, 1)
2025-01-05 16:51:34,168 - DEBUG - on stmt: $262binary_add.15 = $258binary_subscr.13 + $const260.14
2025-01-05 16:51:34,170 - DEBUG - on stmt: $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,172 - DEBUG - on stmt: $const266.17 = const(float, 32.0)
2025-01-05 16:51:34,173 - DEBUG - on stmt: $268binary_multiply.18 = $264call_method.16 * $const266.17
2025-01-05 16:51:34,175 - DEBUG - on stmt: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:34,176 - DEBUG - on stmt: $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21
2025-01-05 16:51:34,178 - DEBUG - on stmt: $const278.23 = const(int, 2)
2025-01-05 16:51:34,179 - DEBUG - on stmt: $280binary_power.24 = $276binary_true_divide.22 ** $const278.23
2025-01-05 16:51:34,181 - DEBUG - on stmt: $282binary_multiply.25 = $const240.4 * $280binary_power.24
2025-01-05 16:51:34,182 - DEBUG - on stmt: window = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,185 - DEBUG - on stmt: $const288.27 = const(int, 2)
2025-01-05 16:51:34,186 - DEBUG - on stmt: $290load_global.28 = global(int: <class 'int'>)
2025-01-05 16:51:34,187 - DEBUG - on stmt: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:34,189 - DEBUG - on stmt: $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,191 - DEBUG - on stmt: $300binary_multiply.33 = $const288.27 * $298call_function.32
2025-01-05 16:51:34,193 - DEBUG - on stmt: $const302.34 = const(int, 1)
2025-01-05 16:51:34,194 - DEBUG - on stmt: K = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:34,195 - DEBUG - on stmt: $const308.36 = const(float, 0.0)
2025-01-05 16:51:34,196 - DEBUG - on stmt: localscore[i] = $const308.36
2025-01-05 16:51:34,197 - DEBUG - on stmt: $316load_global.39 = global(range: <class 'range'>)
2025-01-05 16:51:34,199 - DEBUG - on stmt: $318load_global.40 = global(max: <built-in function max>)
2025-01-05 16:51:34,200 - DEBUG - on stmt: $const320.41 = const(int, 0)
2025-01-05 16:51:34,201 - DEBUG - on stmt: $const326.44 = const(int, 2)
2025-01-05 16:51:34,202 - DEBUG - on stmt: $328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:34,203 - DEBUG - on stmt: $330binary_add.46 = i + $328binary_floor_divide.45
2025-01-05 16:51:34,205 - DEBUG - on stmt: $334binary_subtract.48 = $330binary_add.46 - N
2025-01-05 16:51:34,207 - DEBUG - on stmt: $const336.49 = const(int, 1)
2025-01-05 16:51:34,208 - DEBUG - on stmt: $338binary_add.50 = $334binary_subtract.48 + $const336.49
2025-01-05 16:51:34,209 - DEBUG - on stmt: $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,212 - DEBUG - on stmt: $342load_global.52 = global(min: <built-in function min>)
2025-01-05 16:51:34,214 - DEBUG - on stmt: $const348.55 = const(int, 2)
2025-01-05 16:51:34,215 - DEBUG - on stmt: $350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:34,216 - DEBUG - on stmt: $352binary_add.57 = i + $350binary_floor_divide.56
2025-01-05 16:51:34,218 - DEBUG - on stmt: $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,220 - DEBUG - on stmt: $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,223 - DEBUG - on stmt: $360get_iter.61 = getiter(value=$358call_function.60)
2025-01-05 16:51:34,225 - DEBUG - on stmt: $phi362.1 = $360get_iter.61
2025-01-05 16:51:34,226 - DEBUG - on stmt: jump 362
2025-01-05 16:51:34,227 - DEBUG - ==== SSA block rewrite pass on 362
2025-01-05 16:51:34,228 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014630DC0>
2025-01-05 16:51:34,230 - DEBUG - on stmt: $362for_iter.2 = iternext(value=$phi362.1)
2025-01-05 16:51:34,231 - DEBUG - on stmt: $362for_iter.3 = pair_first(value=$362for_iter.2)
2025-01-05 16:51:34,233 - DEBUG - on stmt: $362for_iter.4 = pair_second(value=$362for_iter.2)
2025-01-05 16:51:34,234 - DEBUG - on stmt: $phi364.2 = $362for_iter.3
2025-01-05 16:51:34,235 - DEBUG - on stmt: branch $362for_iter.4, 364, 410
2025-01-05 16:51:34,237 - DEBUG - ==== SSA block rewrite pass on 364
2025-01-05 16:51:34,238 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014630DC0>
2025-01-05 16:51:34,240 - DEBUG - on stmt: k = $phi364.2
2025-01-05 16:51:34,241 - DEBUG - replaced with: k.1 = $phi364.2
2025-01-05 16:51:34,242 - DEBUG - on stmt: $372binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:34,244 - DEBUG - on stmt: $378binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:34,246 - DEBUG - on stmt: $const386.14 = const(int, 2)
2025-01-05 16:51:34,247 - DEBUG - on stmt: $388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:34,248 - DEBUG - on stmt: $390binary_add.16 = i + $388binary_floor_divide.15
2025-01-05 16:51:34,250 - DEBUG - on stmt: $394binary_subtract.18 = $390binary_add.16 - k
2025-01-05 16:51:34,252 - DEBUG - on stmt: $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:34,253 - DEBUG - on stmt: $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19
2025-01-05 16:51:34,255 - DEBUG - on stmt: $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:34,257 - DEBUG - on stmt: localscore[i] = $400inplace_add.21
2025-01-05 16:51:34,258 - DEBUG - on stmt: jump 362
2025-01-05 16:51:34,259 - DEBUG - ==== SSA block rewrite pass on 410
2025-01-05 16:51:34,260 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014630DC0>
2025-01-05 16:51:34,262 - DEBUG - on stmt: jump 232
2025-01-05 16:51:34,263 - DEBUG - ==== SSA block rewrite pass on 412
2025-01-05 16:51:34,264 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014630DC0>
2025-01-05 16:51:34,265 - DEBUG - on stmt: $const412.0 = const(NoneType, None)
2025-01-05 16:51:34,266 - DEBUG - on stmt: $414return_value.1 = cast(value=$const412.0)
2025-01-05 16:51:34,267 - DEBUG - on stmt: return $414return_value.1
2025-01-05 16:51:34,269 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {154: [<numba.core.ir.Assign object at 0x0000000014BFA5B0>],
             364: [<numba.core.ir.Assign object at 0x0000000014BFA6D0>]})
2025-01-05 16:51:34,271 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:34,272 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014630DC0>
2025-01-05 16:51:34,274 - DEBUG - on stmt: onset_envelope = arg(0, name=onset_envelope)
2025-01-05 16:51:34,275 - DEBUG - on stmt: frames_per_beat = arg(1, name=frames_per_beat)
2025-01-05 16:51:34,277 - DEBUG - on stmt: localscore = arg(2, name=localscore)
2025-01-05 16:51:34,278 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:34,280 - DEBUG - on stmt: N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,282 - DEBUG - on stmt: $10load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:34,283 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,286 - DEBUG - on stmt: $const16.6 = const(int, 1)
2025-01-05 16:51:34,287 - DEBUG - on stmt: $18compare_op.7 = $14call_function.5 == $const16.6
2025-01-05 16:51:34,288 - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-01-05 16:51:34,290 - DEBUG - on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,292 - DEBUG - on stmt: branch $20pred, 22, 202
2025-01-05 16:51:34,293 - DEBUG - ==== SSA block rewrite pass on 22
2025-01-05 16:51:34,294 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014630DC0>
2025-01-05 16:51:34,295 - DEBUG - on stmt: $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:34,298 - DEBUG - on stmt: $24load_method.1 = getattr(value=$22load_global.0, attr=exp)
2025-01-05 16:51:34,299 - DEBUG - on stmt: $const26.2 = const(float, -0.5)
2025-01-05 16:51:34,301 - DEBUG - on stmt: $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:34,302 - DEBUG - on stmt: $30load_method.4 = getattr(value=$28load_global.3, attr=arange)
2025-01-05 16:51:34,304 - DEBUG - on stmt: $const34.6 = const(int, 0)
2025-01-05 16:51:34,305 - DEBUG - on stmt: $36binary_subscr.7 = static_getitem(value=frames_per_beat, index=0, index_var=$const34.6, fn=<built-in function getitem>)
2025-01-05 16:51:34,307 - DEBUG - on stmt: $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7)
2025-01-05 16:51:34,309 - DEBUG - on stmt: $const42.10 = const(int, 0)
2025-01-05 16:51:34,310 - DEBUG - on stmt: $44binary_subscr.11 = static_getitem(value=frames_per_beat, index=0, index_var=$const42.10, fn=<built-in function getitem>)
2025-01-05 16:51:34,313 - DEBUG - on stmt: $const46.12 = const(int, 1)
2025-01-05 16:51:34,314 - DEBUG - on stmt: $48binary_add.13 = $44binary_subscr.11 + $const46.12
2025-01-05 16:51:34,315 - DEBUG - on stmt: $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,318 - DEBUG - on stmt: $const52.15 = const(float, 32.0)
2025-01-05 16:51:34,319 - DEBUG - on stmt: $54binary_multiply.16 = $50call_method.14 * $const52.15
2025-01-05 16:51:34,321 - DEBUG - on stmt: $const58.18 = const(int, 0)
2025-01-05 16:51:34,322 - DEBUG - on stmt: $60binary_subscr.19 = static_getitem(value=frames_per_beat, index=0, index_var=$const58.18, fn=<built-in function getitem>)
2025-01-05 16:51:34,324 - DEBUG - on stmt: $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19
2025-01-05 16:51:34,325 - DEBUG - on stmt: $const64.21 = const(int, 2)
2025-01-05 16:51:34,327 - DEBUG - on stmt: $66binary_power.22 = $62binary_true_divide.20 ** $const64.21
2025-01-05 16:51:34,328 - DEBUG - on stmt: $68binary_multiply.23 = $const26.2 * $66binary_power.22
2025-01-05 16:51:34,330 - DEBUG - on stmt: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,333 - DEBUG - on stmt: $74load_global.25 = global(len: <built-in function len>)
2025-01-05 16:51:34,335 - DEBUG - on stmt: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,338 - DEBUG - on stmt: $82load_global.28 = global(range: <class 'range'>)
2025-01-05 16:51:34,339 - DEBUG - on stmt: $84load_global.29 = global(len: <built-in function len>)
2025-01-05 16:51:34,341 - DEBUG - on stmt: $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,343 - DEBUG - on stmt: $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,346 - DEBUG - on stmt: $92get_iter.33 = getiter(value=$90call_function.32)
2025-01-05 16:51:34,348 - DEBUG - on stmt: $phi94.0 = $92get_iter.33
2025-01-05 16:51:34,349 - DEBUG - on stmt: jump 94
2025-01-05 16:51:34,350 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:34,351 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014630DC0>
2025-01-05 16:51:34,352 - DEBUG - on stmt: $94for_iter.1 = iternext(value=$phi94.0)
2025-01-05 16:51:34,354 - DEBUG - on stmt: $94for_iter.2 = pair_first(value=$94for_iter.1)
2025-01-05 16:51:34,356 - DEBUG - on stmt: $94for_iter.3 = pair_second(value=$94for_iter.1)
2025-01-05 16:51:34,357 - DEBUG - on stmt: $phi96.1 = $94for_iter.2
2025-01-05 16:51:34,358 - DEBUG - on stmt: branch $94for_iter.3, 96, 200
2025-01-05 16:51:34,359 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:34,360 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014630DC0>
2025-01-05 16:51:34,361 - DEBUG - on stmt: i = $phi96.1
2025-01-05 16:51:34,363 - DEBUG - on stmt: $const98.2 = const(float, 0.0)
2025-01-05 16:51:34,364 - DEBUG - on stmt: localscore[i] = $const98.2
2025-01-05 16:51:34,365 - DEBUG - on stmt: $106load_global.5 = global(range: <class 'range'>)
2025-01-05 16:51:34,366 - DEBUG - on stmt: $108load_global.6 = global(max: <built-in function max>)
2025-01-05 16:51:34,368 - DEBUG - on stmt: $const110.7 = const(int, 0)
2025-01-05 16:51:34,369 - DEBUG - on stmt: $const116.10 = const(int, 2)
2025-01-05 16:51:34,370 - DEBUG - on stmt: $118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:34,371 - DEBUG - on stmt: $120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:34,373 - DEBUG - on stmt: $124binary_subtract.14 = $120binary_add.12 - N
2025-01-05 16:51:34,374 - DEBUG - on stmt: $const126.15 = const(int, 1)
2025-01-05 16:51:34,375 - DEBUG - on stmt: $128binary_add.16 = $124binary_subtract.14 + $const126.15
2025-01-05 16:51:34,377 - DEBUG - on stmt: $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,380 - DEBUG - on stmt: $132load_global.18 = global(min: <built-in function min>)
2025-01-05 16:51:34,382 - DEBUG - on stmt: $const138.21 = const(int, 2)
2025-01-05 16:51:34,383 - DEBUG - on stmt: $140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:34,385 - DEBUG - on stmt: $142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:34,386 - DEBUG - on stmt: $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,390 - DEBUG - on stmt: $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,392 - DEBUG - on stmt: $150get_iter.27 = getiter(value=$148call_function.26)
2025-01-05 16:51:34,394 - DEBUG - on stmt: $phi152.1 = $150get_iter.27
2025-01-05 16:51:34,395 - DEBUG - on stmt: jump 152
2025-01-05 16:51:34,396 - DEBUG - ==== SSA block rewrite pass on 152
2025-01-05 16:51:34,397 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014630DC0>
2025-01-05 16:51:34,399 - DEBUG - on stmt: $152for_iter.2 = iternext(value=$phi152.1)
2025-01-05 16:51:34,400 - DEBUG - on stmt: $152for_iter.3 = pair_first(value=$152for_iter.2)
2025-01-05 16:51:34,402 - DEBUG - on stmt: $152for_iter.4 = pair_second(value=$152for_iter.2)
2025-01-05 16:51:34,403 - DEBUG - on stmt: $phi154.2 = $152for_iter.3
2025-01-05 16:51:34,404 - DEBUG - on stmt: branch $152for_iter.4, 154, 198
2025-01-05 16:51:34,405 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:34,406 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014630DC0>
2025-01-05 16:51:34,408 - DEBUG - on stmt: k = $phi154.2
2025-01-05 16:51:34,409 - DEBUG - on stmt: $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:34,410 - DEBUG - on stmt: $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:34,412 - DEBUG - find_def var='k' stmt=$168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:34,414 - DEBUG - on stmt: $const176.14 = const(int, 2)
2025-01-05 16:51:34,415 - DEBUG - on stmt: $178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:34,416 - DEBUG - on stmt: $180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:34,418 - DEBUG - on stmt: $184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:34,419 - DEBUG - find_def var='k' stmt=$184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:34,421 - DEBUG - on stmt: $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:34,422 - DEBUG - on stmt: $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19
2025-01-05 16:51:34,424 - DEBUG - on stmt: $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:34,427 - DEBUG - on stmt: localscore[i] = $190inplace_add.21
2025-01-05 16:51:34,428 - DEBUG - on stmt: jump 152
2025-01-05 16:51:34,429 - DEBUG - ==== SSA block rewrite pass on 198
2025-01-05 16:51:34,430 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014630DC0>
2025-01-05 16:51:34,432 - DEBUG - on stmt: jump 94
2025-01-05 16:51:34,433 - DEBUG - ==== SSA block rewrite pass on 200
2025-01-05 16:51:34,434 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014630DC0>
2025-01-05 16:51:34,435 - DEBUG - on stmt: jump 412
2025-01-05 16:51:34,436 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-05 16:51:34,437 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014630DC0>
2025-01-05 16:51:34,438 - DEBUG - on stmt: $202load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:34,440 - DEBUG - on stmt: $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,442 - DEBUG - on stmt: $208load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:34,444 - DEBUG - on stmt: $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,446 - DEBUG - on stmt: $214compare_op.6 = $206call_function.2 == $212call_function.5
2025-01-05 16:51:34,448 - DEBUG - on stmt: bool218 = global(bool: <class 'bool'>)
2025-01-05 16:51:34,450 - DEBUG - on stmt: $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,452 - DEBUG - on stmt: branch $218pred, 220, 412
2025-01-05 16:51:34,453 - DEBUG - ==== SSA block rewrite pass on 220
2025-01-05 16:51:34,454 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014630DC0>
2025-01-05 16:51:34,455 - DEBUG - on stmt: $220load_global.0 = global(range: <class 'range'>)
2025-01-05 16:51:34,457 - DEBUG - on stmt: $222load_global.1 = global(len: <built-in function len>)
2025-01-05 16:51:34,458 - DEBUG - on stmt: $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,460 - DEBUG - on stmt: $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,463 - DEBUG - on stmt: $230get_iter.5 = getiter(value=$228call_function.4)
2025-01-05 16:51:34,465 - DEBUG - on stmt: $phi232.0 = $230get_iter.5
2025-01-05 16:51:34,467 - DEBUG - on stmt: jump 232
2025-01-05 16:51:34,467 - DEBUG - ==== SSA block rewrite pass on 232
2025-01-05 16:51:34,468 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014630DC0>
2025-01-05 16:51:34,470 - DEBUG - on stmt: $232for_iter.1 = iternext(value=$phi232.0)
2025-01-05 16:51:34,471 - DEBUG - on stmt: $232for_iter.2 = pair_first(value=$232for_iter.1)
2025-01-05 16:51:34,473 - DEBUG - on stmt: $232for_iter.3 = pair_second(value=$232for_iter.1)
2025-01-05 16:51:34,474 - DEBUG - on stmt: $phi234.1 = $232for_iter.2
2025-01-05 16:51:34,475 - DEBUG - on stmt: branch $232for_iter.3, 234, 412
2025-01-05 16:51:34,476 - DEBUG - ==== SSA block rewrite pass on 234
2025-01-05 16:51:34,477 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014630DC0>
2025-01-05 16:51:34,479 - DEBUG - on stmt: i = $phi234.1
2025-01-05 16:51:34,480 - DEBUG - on stmt: $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:34,482 - DEBUG - on stmt: $238load_method.3 = getattr(value=$236load_global.2, attr=exp)
2025-01-05 16:51:34,484 - DEBUG - on stmt: $const240.4 = const(float, -0.5)
2025-01-05 16:51:34,485 - DEBUG - on stmt: $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:34,487 - DEBUG - on stmt: $244load_method.6 = getattr(value=$242load_global.5, attr=arange)
2025-01-05 16:51:34,488 - DEBUG - on stmt: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:34,490 - DEBUG - on stmt: $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9)
2025-01-05 16:51:34,492 - DEBUG - on stmt: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:34,494 - DEBUG - on stmt: $const260.14 = const(int, 1)
2025-01-05 16:51:34,495 - DEBUG - on stmt: $262binary_add.15 = $258binary_subscr.13 + $const260.14
2025-01-05 16:51:34,496 - DEBUG - on stmt: $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,499 - DEBUG - on stmt: $const266.17 = const(float, 32.0)
2025-01-05 16:51:34,500 - DEBUG - on stmt: $268binary_multiply.18 = $264call_method.16 * $const266.17
2025-01-05 16:51:34,502 - DEBUG - on stmt: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:34,503 - DEBUG - on stmt: $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21
2025-01-05 16:51:34,505 - DEBUG - on stmt: $const278.23 = const(int, 2)
2025-01-05 16:51:34,506 - DEBUG - on stmt: $280binary_power.24 = $276binary_true_divide.22 ** $const278.23
2025-01-05 16:51:34,507 - DEBUG - on stmt: $282binary_multiply.25 = $const240.4 * $280binary_power.24
2025-01-05 16:51:34,509 - DEBUG - on stmt: window = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,511 - DEBUG - on stmt: $const288.27 = const(int, 2)
2025-01-05 16:51:34,512 - DEBUG - on stmt: $290load_global.28 = global(int: <class 'int'>)
2025-01-05 16:51:34,514 - DEBUG - on stmt: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:34,515 - DEBUG - on stmt: $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,518 - DEBUG - on stmt: $300binary_multiply.33 = $const288.27 * $298call_function.32
2025-01-05 16:51:34,519 - DEBUG - on stmt: $const302.34 = const(int, 1)
2025-01-05 16:51:34,520 - DEBUG - on stmt: K = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:34,522 - DEBUG - on stmt: $const308.36 = const(float, 0.0)
2025-01-05 16:51:34,523 - DEBUG - on stmt: localscore[i] = $const308.36
2025-01-05 16:51:34,524 - DEBUG - on stmt: $316load_global.39 = global(range: <class 'range'>)
2025-01-05 16:51:34,526 - DEBUG - on stmt: $318load_global.40 = global(max: <built-in function max>)
2025-01-05 16:51:34,528 - DEBUG - on stmt: $const320.41 = const(int, 0)
2025-01-05 16:51:34,529 - DEBUG - on stmt: $const326.44 = const(int, 2)
2025-01-05 16:51:34,530 - DEBUG - on stmt: $328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:34,532 - DEBUG - on stmt: $330binary_add.46 = i + $328binary_floor_divide.45
2025-01-05 16:51:34,533 - DEBUG - on stmt: $334binary_subtract.48 = $330binary_add.46 - N
2025-01-05 16:51:34,535 - DEBUG - on stmt: $const336.49 = const(int, 1)
2025-01-05 16:51:34,536 - DEBUG - on stmt: $338binary_add.50 = $334binary_subtract.48 + $const336.49
2025-01-05 16:51:34,538 - DEBUG - on stmt: $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,540 - DEBUG - on stmt: $342load_global.52 = global(min: <built-in function min>)
2025-01-05 16:51:34,542 - DEBUG - on stmt: $const348.55 = const(int, 2)
2025-01-05 16:51:34,543 - DEBUG - on stmt: $350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:34,545 - DEBUG - on stmt: $352binary_add.57 = i + $350binary_floor_divide.56
2025-01-05 16:51:34,547 - DEBUG - on stmt: $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,549 - DEBUG - on stmt: $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,552 - DEBUG - on stmt: $360get_iter.61 = getiter(value=$358call_function.60)
2025-01-05 16:51:34,554 - DEBUG - on stmt: $phi362.1 = $360get_iter.61
2025-01-05 16:51:34,555 - DEBUG - on stmt: jump 362
2025-01-05 16:51:34,556 - DEBUG - ==== SSA block rewrite pass on 362
2025-01-05 16:51:34,557 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014630DC0>
2025-01-05 16:51:34,558 - DEBUG - on stmt: $362for_iter.2 = iternext(value=$phi362.1)
2025-01-05 16:51:34,560 - DEBUG - on stmt: $362for_iter.3 = pair_first(value=$362for_iter.2)
2025-01-05 16:51:34,562 - DEBUG - on stmt: $362for_iter.4 = pair_second(value=$362for_iter.2)
2025-01-05 16:51:34,563 - DEBUG - on stmt: $phi364.2 = $362for_iter.3
2025-01-05 16:51:34,565 - DEBUG - on stmt: branch $362for_iter.4, 364, 410
2025-01-05 16:51:34,566 - DEBUG - ==== SSA block rewrite pass on 364
2025-01-05 16:51:34,566 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014630DC0>
2025-01-05 16:51:34,568 - DEBUG - on stmt: k.1 = $phi364.2
2025-01-05 16:51:34,569 - DEBUG - on stmt: $372binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:34,570 - DEBUG - on stmt: $378binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:34,572 - DEBUG - find_def var='k' stmt=$378binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:34,573 - DEBUG - replaced with: $378binary_subscr.10 = getitem(value=window, index=k.1, fn=<built-in function getitem>)
2025-01-05 16:51:34,575 - DEBUG - on stmt: $const386.14 = const(int, 2)
2025-01-05 16:51:34,576 - DEBUG - on stmt: $388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:34,577 - DEBUG - on stmt: $390binary_add.16 = i + $388binary_floor_divide.15
2025-01-05 16:51:34,579 - DEBUG - on stmt: $394binary_subtract.18 = $390binary_add.16 - k
2025-01-05 16:51:34,581 - DEBUG - find_def var='k' stmt=$394binary_subtract.18 = $390binary_add.16 - k
2025-01-05 16:51:34,582 - DEBUG - replaced with: $394binary_subtract.18 = $390binary_add.16 - k.1
2025-01-05 16:51:34,584 - DEBUG - on stmt: $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:34,585 - DEBUG - on stmt: $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19
2025-01-05 16:51:34,587 - DEBUG - on stmt: $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:34,590 - DEBUG - on stmt: localscore[i] = $400inplace_add.21
2025-01-05 16:51:34,591 - DEBUG - on stmt: jump 362
2025-01-05 16:51:34,592 - DEBUG - ==== SSA block rewrite pass on 410
2025-01-05 16:51:34,593 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014630DC0>
2025-01-05 16:51:34,594 - DEBUG - on stmt: jump 232
2025-01-05 16:51:34,595 - DEBUG - ==== SSA block rewrite pass on 412
2025-01-05 16:51:34,596 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014630DC0>
2025-01-05 16:51:34,597 - DEBUG - on stmt: $const412.0 = const(NoneType, None)
2025-01-05 16:51:34,599 - DEBUG - on stmt: $414return_value.1 = cast(value=$const412.0)
2025-01-05 16:51:34,600 - DEBUG - on stmt: return $414return_value.1
2025-01-05 16:51:34,601 - DEBUG - Fix SSA violator on var i
2025-01-05 16:51:34,602 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:34,603 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000147C2460>
2025-01-05 16:51:34,604 - DEBUG - on stmt: onset_envelope = arg(0, name=onset_envelope)
2025-01-05 16:51:34,606 - DEBUG - on stmt: frames_per_beat = arg(1, name=frames_per_beat)
2025-01-05 16:51:34,607 - DEBUG - on stmt: localscore = arg(2, name=localscore)
2025-01-05 16:51:34,608 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:34,610 - DEBUG - on stmt: N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,612 - DEBUG - on stmt: $10load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:34,614 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,617 - DEBUG - on stmt: $const16.6 = const(int, 1)
2025-01-05 16:51:34,618 - DEBUG - on stmt: $18compare_op.7 = $14call_function.5 == $const16.6
2025-01-05 16:51:34,619 - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-01-05 16:51:34,621 - DEBUG - on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,623 - DEBUG - on stmt: branch $20pred, 22, 202
2025-01-05 16:51:34,625 - DEBUG - ==== SSA block rewrite pass on 22
2025-01-05 16:51:34,626 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000147C2460>
2025-01-05 16:51:34,627 - DEBUG - on stmt: $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:34,630 - DEBUG - on stmt: $24load_method.1 = getattr(value=$22load_global.0, attr=exp)
2025-01-05 16:51:34,631 - DEBUG - on stmt: $const26.2 = const(float, -0.5)
2025-01-05 16:51:34,632 - DEBUG - on stmt: $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:34,634 - DEBUG - on stmt: $30load_method.4 = getattr(value=$28load_global.3, attr=arange)
2025-01-05 16:51:34,636 - DEBUG - on stmt: $const34.6 = const(int, 0)
2025-01-05 16:51:34,637 - DEBUG - on stmt: $36binary_subscr.7 = static_getitem(value=frames_per_beat, index=0, index_var=$const34.6, fn=<built-in function getitem>)
2025-01-05 16:51:34,639 - DEBUG - on stmt: $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7)
2025-01-05 16:51:34,640 - DEBUG - on stmt: $const42.10 = const(int, 0)
2025-01-05 16:51:34,642 - DEBUG - on stmt: $44binary_subscr.11 = static_getitem(value=frames_per_beat, index=0, index_var=$const42.10, fn=<built-in function getitem>)
2025-01-05 16:51:34,644 - DEBUG - on stmt: $const46.12 = const(int, 1)
2025-01-05 16:51:34,645 - DEBUG - on stmt: $48binary_add.13 = $44binary_subscr.11 + $const46.12
2025-01-05 16:51:34,646 - DEBUG - on stmt: $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,649 - DEBUG - on stmt: $const52.15 = const(float, 32.0)
2025-01-05 16:51:34,650 - DEBUG - on stmt: $54binary_multiply.16 = $50call_method.14 * $const52.15
2025-01-05 16:51:34,652 - DEBUG - on stmt: $const58.18 = const(int, 0)
2025-01-05 16:51:34,653 - DEBUG - on stmt: $60binary_subscr.19 = static_getitem(value=frames_per_beat, index=0, index_var=$const58.18, fn=<built-in function getitem>)
2025-01-05 16:51:34,655 - DEBUG - on stmt: $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19
2025-01-05 16:51:34,657 - DEBUG - on stmt: $const64.21 = const(int, 2)
2025-01-05 16:51:34,658 - DEBUG - on stmt: $66binary_power.22 = $62binary_true_divide.20 ** $const64.21
2025-01-05 16:51:34,659 - DEBUG - on stmt: $68binary_multiply.23 = $const26.2 * $66binary_power.22
2025-01-05 16:51:34,661 - DEBUG - on stmt: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,663 - DEBUG - on stmt: $74load_global.25 = global(len: <built-in function len>)
2025-01-05 16:51:34,665 - DEBUG - on stmt: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,667 - DEBUG - on stmt: $82load_global.28 = global(range: <class 'range'>)
2025-01-05 16:51:34,668 - DEBUG - on stmt: $84load_global.29 = global(len: <built-in function len>)
2025-01-05 16:51:34,670 - DEBUG - on stmt: $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,672 - DEBUG - on stmt: $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,674 - DEBUG - on stmt: $92get_iter.33 = getiter(value=$90call_function.32)
2025-01-05 16:51:34,676 - DEBUG - on stmt: $phi94.0 = $92get_iter.33
2025-01-05 16:51:34,677 - DEBUG - on stmt: jump 94
2025-01-05 16:51:34,678 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:34,679 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000147C2460>
2025-01-05 16:51:34,680 - DEBUG - on stmt: $94for_iter.1 = iternext(value=$phi94.0)
2025-01-05 16:51:34,682 - DEBUG - on stmt: $94for_iter.2 = pair_first(value=$94for_iter.1)
2025-01-05 16:51:34,684 - DEBUG - on stmt: $94for_iter.3 = pair_second(value=$94for_iter.1)
2025-01-05 16:51:34,685 - DEBUG - on stmt: $phi96.1 = $94for_iter.2
2025-01-05 16:51:34,686 - DEBUG - on stmt: branch $94for_iter.3, 96, 200
2025-01-05 16:51:34,687 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:34,688 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000147C2460>
2025-01-05 16:51:34,689 - DEBUG - on stmt: i = $phi96.1
2025-01-05 16:51:34,690 - DEBUG - first assign: i
2025-01-05 16:51:34,691 - DEBUG - replaced with: i = $phi96.1
2025-01-05 16:51:34,692 - DEBUG - on stmt: $const98.2 = const(float, 0.0)
2025-01-05 16:51:34,694 - DEBUG - on stmt: localscore[i] = $const98.2
2025-01-05 16:51:34,695 - DEBUG - on stmt: $106load_global.5 = global(range: <class 'range'>)
2025-01-05 16:51:34,696 - DEBUG - on stmt: $108load_global.6 = global(max: <built-in function max>)
2025-01-05 16:51:34,698 - DEBUG - on stmt: $const110.7 = const(int, 0)
2025-01-05 16:51:34,699 - DEBUG - on stmt: $const116.10 = const(int, 2)
2025-01-05 16:51:34,700 - DEBUG - on stmt: $118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:34,701 - DEBUG - on stmt: $120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:34,703 - DEBUG - on stmt: $124binary_subtract.14 = $120binary_add.12 - N
2025-01-05 16:51:34,704 - DEBUG - on stmt: $const126.15 = const(int, 1)
2025-01-05 16:51:34,705 - DEBUG - on stmt: $128binary_add.16 = $124binary_subtract.14 + $const126.15
2025-01-05 16:51:34,707 - DEBUG - on stmt: $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,709 - DEBUG - on stmt: $132load_global.18 = global(min: <built-in function min>)
2025-01-05 16:51:34,711 - DEBUG - on stmt: $const138.21 = const(int, 2)
2025-01-05 16:51:34,712 - DEBUG - on stmt: $140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:34,714 - DEBUG - on stmt: $142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:34,715 - DEBUG - on stmt: $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,718 - DEBUG - on stmt: $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,721 - DEBUG - on stmt: $150get_iter.27 = getiter(value=$148call_function.26)
2025-01-05 16:51:34,722 - DEBUG - on stmt: $phi152.1 = $150get_iter.27
2025-01-05 16:51:34,724 - DEBUG - on stmt: jump 152
2025-01-05 16:51:34,724 - DEBUG - ==== SSA block rewrite pass on 152
2025-01-05 16:51:34,725 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000147C2460>
2025-01-05 16:51:34,727 - DEBUG - on stmt: $152for_iter.2 = iternext(value=$phi152.1)
2025-01-05 16:51:34,728 - DEBUG - on stmt: $152for_iter.3 = pair_first(value=$152for_iter.2)
2025-01-05 16:51:34,730 - DEBUG - on stmt: $152for_iter.4 = pair_second(value=$152for_iter.2)
2025-01-05 16:51:34,732 - DEBUG - on stmt: $phi154.2 = $152for_iter.3
2025-01-05 16:51:34,733 - DEBUG - on stmt: branch $152for_iter.4, 154, 198
2025-01-05 16:51:34,734 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:34,735 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000147C2460>
2025-01-05 16:51:34,736 - DEBUG - on stmt: k = $phi154.2
2025-01-05 16:51:34,737 - DEBUG - on stmt: $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:34,739 - DEBUG - on stmt: $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:34,740 - DEBUG - on stmt: $const176.14 = const(int, 2)
2025-01-05 16:51:34,741 - DEBUG - on stmt: $178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:34,743 - DEBUG - on stmt: $180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:34,744 - DEBUG - on stmt: $184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:34,746 - DEBUG - on stmt: $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:34,748 - DEBUG - on stmt: $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19
2025-01-05 16:51:34,749 - DEBUG - on stmt: $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:34,752 - DEBUG - on stmt: localscore[i] = $190inplace_add.21
2025-01-05 16:51:34,753 - DEBUG - on stmt: jump 152
2025-01-05 16:51:34,754 - DEBUG - ==== SSA block rewrite pass on 198
2025-01-05 16:51:34,755 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000147C2460>
2025-01-05 16:51:34,756 - DEBUG - on stmt: jump 94
2025-01-05 16:51:34,757 - DEBUG - ==== SSA block rewrite pass on 200
2025-01-05 16:51:34,758 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000147C2460>
2025-01-05 16:51:34,760 - DEBUG - on stmt: jump 412
2025-01-05 16:51:34,761 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-05 16:51:34,762 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000147C2460>
2025-01-05 16:51:34,763 - DEBUG - on stmt: $202load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:34,765 - DEBUG - on stmt: $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,767 - DEBUG - on stmt: $208load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:34,769 - DEBUG - on stmt: $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,771 - DEBUG - on stmt: $214compare_op.6 = $206call_function.2 == $212call_function.5
2025-01-05 16:51:34,773 - DEBUG - on stmt: bool218 = global(bool: <class 'bool'>)
2025-01-05 16:51:34,775 - DEBUG - on stmt: $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,777 - DEBUG - on stmt: branch $218pred, 220, 412
2025-01-05 16:51:34,778 - DEBUG - ==== SSA block rewrite pass on 220
2025-01-05 16:51:34,779 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000147C2460>
2025-01-05 16:51:34,781 - DEBUG - on stmt: $220load_global.0 = global(range: <class 'range'>)
2025-01-05 16:51:34,782 - DEBUG - on stmt: $222load_global.1 = global(len: <built-in function len>)
2025-01-05 16:51:34,784 - DEBUG - on stmt: $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,786 - DEBUG - on stmt: $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,788 - DEBUG - on stmt: $230get_iter.5 = getiter(value=$228call_function.4)
2025-01-05 16:51:34,790 - DEBUG - on stmt: $phi232.0 = $230get_iter.5
2025-01-05 16:51:34,791 - DEBUG - on stmt: jump 232
2025-01-05 16:51:34,792 - DEBUG - ==== SSA block rewrite pass on 232
2025-01-05 16:51:34,793 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000147C2460>
2025-01-05 16:51:34,794 - DEBUG - on stmt: $232for_iter.1 = iternext(value=$phi232.0)
2025-01-05 16:51:34,796 - DEBUG - on stmt: $232for_iter.2 = pair_first(value=$232for_iter.1)
2025-01-05 16:51:34,798 - DEBUG - on stmt: $232for_iter.3 = pair_second(value=$232for_iter.1)
2025-01-05 16:51:34,799 - DEBUG - on stmt: $phi234.1 = $232for_iter.2
2025-01-05 16:51:34,800 - DEBUG - on stmt: branch $232for_iter.3, 234, 412
2025-01-05 16:51:34,801 - DEBUG - ==== SSA block rewrite pass on 234
2025-01-05 16:51:34,802 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000147C2460>
2025-01-05 16:51:34,803 - DEBUG - on stmt: i = $phi234.1
2025-01-05 16:51:34,804 - DEBUG - replaced with: i.1 = $phi234.1
2025-01-05 16:51:34,805 - DEBUG - on stmt: $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:34,807 - DEBUG - on stmt: $238load_method.3 = getattr(value=$236load_global.2, attr=exp)
2025-01-05 16:51:34,809 - DEBUG - on stmt: $const240.4 = const(float, -0.5)
2025-01-05 16:51:34,810 - DEBUG - on stmt: $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:34,812 - DEBUG - on stmt: $244load_method.6 = getattr(value=$242load_global.5, attr=arange)
2025-01-05 16:51:34,814 - DEBUG - on stmt: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:34,816 - DEBUG - on stmt: $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9)
2025-01-05 16:51:34,817 - DEBUG - on stmt: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:34,819 - DEBUG - on stmt: $const260.14 = const(int, 1)
2025-01-05 16:51:34,820 - DEBUG - on stmt: $262binary_add.15 = $258binary_subscr.13 + $const260.14
2025-01-05 16:51:34,821 - DEBUG - on stmt: $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,824 - DEBUG - on stmt: $const266.17 = const(float, 32.0)
2025-01-05 16:51:34,825 - DEBUG - on stmt: $268binary_multiply.18 = $264call_method.16 * $const266.17
2025-01-05 16:51:34,827 - DEBUG - on stmt: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:34,828 - DEBUG - on stmt: $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21
2025-01-05 16:51:34,830 - DEBUG - on stmt: $const278.23 = const(int, 2)
2025-01-05 16:51:34,831 - DEBUG - on stmt: $280binary_power.24 = $276binary_true_divide.22 ** $const278.23
2025-01-05 16:51:34,833 - DEBUG - on stmt: $282binary_multiply.25 = $const240.4 * $280binary_power.24
2025-01-05 16:51:34,834 - DEBUG - on stmt: window = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,836 - DEBUG - on stmt: $const288.27 = const(int, 2)
2025-01-05 16:51:34,837 - DEBUG - on stmt: $290load_global.28 = global(int: <class 'int'>)
2025-01-05 16:51:34,839 - DEBUG - on stmt: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:34,840 - DEBUG - on stmt: $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,842 - DEBUG - on stmt: $300binary_multiply.33 = $const288.27 * $298call_function.32
2025-01-05 16:51:34,844 - DEBUG - on stmt: $const302.34 = const(int, 1)
2025-01-05 16:51:34,846 - DEBUG - on stmt: K = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:34,848 - DEBUG - on stmt: $const308.36 = const(float, 0.0)
2025-01-05 16:51:34,849 - DEBUG - on stmt: localscore[i] = $const308.36
2025-01-05 16:51:34,850 - DEBUG - on stmt: $316load_global.39 = global(range: <class 'range'>)
2025-01-05 16:51:34,851 - DEBUG - on stmt: $318load_global.40 = global(max: <built-in function max>)
2025-01-05 16:51:34,852 - DEBUG - on stmt: $const320.41 = const(int, 0)
2025-01-05 16:51:34,854 - DEBUG - on stmt: $const326.44 = const(int, 2)
2025-01-05 16:51:34,854 - DEBUG - on stmt: $328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:34,856 - DEBUG - on stmt: $330binary_add.46 = i + $328binary_floor_divide.45
2025-01-05 16:51:34,857 - DEBUG - on stmt: $334binary_subtract.48 = $330binary_add.46 - N
2025-01-05 16:51:34,859 - DEBUG - on stmt: $const336.49 = const(int, 1)
2025-01-05 16:51:34,860 - DEBUG - on stmt: $338binary_add.50 = $334binary_subtract.48 + $const336.49
2025-01-05 16:51:34,861 - DEBUG - on stmt: $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,864 - DEBUG - on stmt: $342load_global.52 = global(min: <built-in function min>)
2025-01-05 16:51:34,866 - DEBUG - on stmt: $const348.55 = const(int, 2)
2025-01-05 16:51:34,867 - DEBUG - on stmt: $350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:34,868 - DEBUG - on stmt: $352binary_add.57 = i + $350binary_floor_divide.56
2025-01-05 16:51:34,870 - DEBUG - on stmt: $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,873 - DEBUG - on stmt: $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,876 - DEBUG - on stmt: $360get_iter.61 = getiter(value=$358call_function.60)
2025-01-05 16:51:34,877 - DEBUG - on stmt: $phi362.1 = $360get_iter.61
2025-01-05 16:51:34,878 - DEBUG - on stmt: jump 362
2025-01-05 16:51:34,880 - DEBUG - ==== SSA block rewrite pass on 362
2025-01-05 16:51:34,881 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000147C2460>
2025-01-05 16:51:34,882 - DEBUG - on stmt: $362for_iter.2 = iternext(value=$phi362.1)
2025-01-05 16:51:34,883 - DEBUG - on stmt: $362for_iter.3 = pair_first(value=$362for_iter.2)
2025-01-05 16:51:34,885 - DEBUG - on stmt: $362for_iter.4 = pair_second(value=$362for_iter.2)
2025-01-05 16:51:34,887 - DEBUG - on stmt: $phi364.2 = $362for_iter.3
2025-01-05 16:51:34,888 - DEBUG - on stmt: branch $362for_iter.4, 364, 410
2025-01-05 16:51:34,889 - DEBUG - ==== SSA block rewrite pass on 364
2025-01-05 16:51:34,890 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000147C2460>
2025-01-05 16:51:34,891 - DEBUG - on stmt: k.1 = $phi364.2
2025-01-05 16:51:34,892 - DEBUG - on stmt: $372binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:34,893 - DEBUG - on stmt: $378binary_subscr.10 = getitem(value=window, index=k.1, fn=<built-in function getitem>)
2025-01-05 16:51:34,895 - DEBUG - on stmt: $const386.14 = const(int, 2)
2025-01-05 16:51:34,896 - DEBUG - on stmt: $388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:34,898 - DEBUG - on stmt: $390binary_add.16 = i + $388binary_floor_divide.15
2025-01-05 16:51:34,899 - DEBUG - on stmt: $394binary_subtract.18 = $390binary_add.16 - k.1
2025-01-05 16:51:34,901 - DEBUG - on stmt: $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:34,902 - DEBUG - on stmt: $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19
2025-01-05 16:51:34,904 - DEBUG - on stmt: $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:34,907 - DEBUG - on stmt: localscore[i] = $400inplace_add.21
2025-01-05 16:51:34,908 - DEBUG - on stmt: jump 362
2025-01-05 16:51:34,909 - DEBUG - ==== SSA block rewrite pass on 410
2025-01-05 16:51:34,910 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000147C2460>
2025-01-05 16:51:34,911 - DEBUG - on stmt: jump 232
2025-01-05 16:51:34,912 - DEBUG - ==== SSA block rewrite pass on 412
2025-01-05 16:51:34,913 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000147C2460>
2025-01-05 16:51:34,915 - DEBUG - on stmt: $const412.0 = const(NoneType, None)
2025-01-05 16:51:34,916 - DEBUG - on stmt: $414return_value.1 = cast(value=$const412.0)
2025-01-05 16:51:34,917 - DEBUG - on stmt: return $414return_value.1
2025-01-05 16:51:34,918 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {96: [<numba.core.ir.Assign object at 0x000000001470EB80>],
             234: [<numba.core.ir.Assign object at 0x0000000014BFA3A0>]})
2025-01-05 16:51:34,921 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:34,922 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EF040>
2025-01-05 16:51:34,923 - DEBUG - on stmt: onset_envelope = arg(0, name=onset_envelope)
2025-01-05 16:51:34,926 - DEBUG - on stmt: frames_per_beat = arg(1, name=frames_per_beat)
2025-01-05 16:51:34,927 - DEBUG - on stmt: localscore = arg(2, name=localscore)
2025-01-05 16:51:34,929 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:34,930 - DEBUG - on stmt: N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,932 - DEBUG - on stmt: $10load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:34,934 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,936 - DEBUG - on stmt: $const16.6 = const(int, 1)
2025-01-05 16:51:34,937 - DEBUG - on stmt: $18compare_op.7 = $14call_function.5 == $const16.6
2025-01-05 16:51:34,939 - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-01-05 16:51:34,940 - DEBUG - on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,942 - DEBUG - on stmt: branch $20pred, 22, 202
2025-01-05 16:51:34,943 - DEBUG - ==== SSA block rewrite pass on 22
2025-01-05 16:51:34,945 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EF040>
2025-01-05 16:51:34,946 - DEBUG - on stmt: $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:34,948 - DEBUG - on stmt: $24load_method.1 = getattr(value=$22load_global.0, attr=exp)
2025-01-05 16:51:34,950 - DEBUG - on stmt: $const26.2 = const(float, -0.5)
2025-01-05 16:51:34,951 - DEBUG - on stmt: $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:34,953 - DEBUG - on stmt: $30load_method.4 = getattr(value=$28load_global.3, attr=arange)
2025-01-05 16:51:34,955 - DEBUG - on stmt: $const34.6 = const(int, 0)
2025-01-05 16:51:34,956 - DEBUG - on stmt: $36binary_subscr.7 = static_getitem(value=frames_per_beat, index=0, index_var=$const34.6, fn=<built-in function getitem>)
2025-01-05 16:51:34,958 - DEBUG - on stmt: $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7)
2025-01-05 16:51:34,959 - DEBUG - on stmt: $const42.10 = const(int, 0)
2025-01-05 16:51:34,960 - DEBUG - on stmt: $44binary_subscr.11 = static_getitem(value=frames_per_beat, index=0, index_var=$const42.10, fn=<built-in function getitem>)
2025-01-05 16:51:34,963 - DEBUG - on stmt: $const46.12 = const(int, 1)
2025-01-05 16:51:34,964 - DEBUG - on stmt: $48binary_add.13 = $44binary_subscr.11 + $const46.12
2025-01-05 16:51:34,965 - DEBUG - on stmt: $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,968 - DEBUG - on stmt: $const52.15 = const(float, 32.0)
2025-01-05 16:51:34,969 - DEBUG - on stmt: $54binary_multiply.16 = $50call_method.14 * $const52.15
2025-01-05 16:51:34,971 - DEBUG - on stmt: $const58.18 = const(int, 0)
2025-01-05 16:51:34,972 - DEBUG - on stmt: $60binary_subscr.19 = static_getitem(value=frames_per_beat, index=0, index_var=$const58.18, fn=<built-in function getitem>)
2025-01-05 16:51:34,974 - DEBUG - on stmt: $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19
2025-01-05 16:51:34,975 - DEBUG - on stmt: $const64.21 = const(int, 2)
2025-01-05 16:51:34,977 - DEBUG - on stmt: $66binary_power.22 = $62binary_true_divide.20 ** $const64.21
2025-01-05 16:51:34,978 - DEBUG - on stmt: $68binary_multiply.23 = $const26.2 * $66binary_power.22
2025-01-05 16:51:34,980 - DEBUG - on stmt: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,982 - DEBUG - on stmt: $74load_global.25 = global(len: <built-in function len>)
2025-01-05 16:51:34,984 - DEBUG - on stmt: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,986 - DEBUG - on stmt: $82load_global.28 = global(range: <class 'range'>)
2025-01-05 16:51:34,987 - DEBUG - on stmt: $84load_global.29 = global(len: <built-in function len>)
2025-01-05 16:51:34,989 - DEBUG - on stmt: $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,991 - DEBUG - on stmt: $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:34,993 - DEBUG - on stmt: $92get_iter.33 = getiter(value=$90call_function.32)
2025-01-05 16:51:34,995 - DEBUG - on stmt: $phi94.0 = $92get_iter.33
2025-01-05 16:51:34,996 - DEBUG - on stmt: jump 94
2025-01-05 16:51:34,998 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:34,999 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EF040>
2025-01-05 16:51:35,000 - DEBUG - on stmt: $94for_iter.1 = iternext(value=$phi94.0)
2025-01-05 16:51:35,001 - DEBUG - on stmt: $94for_iter.2 = pair_first(value=$94for_iter.1)
2025-01-05 16:51:35,003 - DEBUG - on stmt: $94for_iter.3 = pair_second(value=$94for_iter.1)
2025-01-05 16:51:35,005 - DEBUG - on stmt: $phi96.1 = $94for_iter.2
2025-01-05 16:51:35,006 - DEBUG - on stmt: branch $94for_iter.3, 96, 200
2025-01-05 16:51:35,007 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:35,007 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EF040>
2025-01-05 16:51:35,009 - DEBUG - on stmt: i = $phi96.1
2025-01-05 16:51:35,010 - DEBUG - on stmt: $const98.2 = const(float, 0.0)
2025-01-05 16:51:35,011 - DEBUG - on stmt: localscore[i] = $const98.2
2025-01-05 16:51:35,012 - DEBUG - find_def var='i' stmt=localscore[i] = $const98.2
2025-01-05 16:51:35,013 - DEBUG - on stmt: $106load_global.5 = global(range: <class 'range'>)
2025-01-05 16:51:35,015 - DEBUG - on stmt: $108load_global.6 = global(max: <built-in function max>)
2025-01-05 16:51:35,017 - DEBUG - on stmt: $const110.7 = const(int, 0)
2025-01-05 16:51:35,018 - DEBUG - on stmt: $const116.10 = const(int, 2)
2025-01-05 16:51:35,019 - DEBUG - on stmt: $118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:35,020 - DEBUG - on stmt: $120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:35,021 - DEBUG - find_def var='i' stmt=$120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:35,023 - DEBUG - on stmt: $124binary_subtract.14 = $120binary_add.12 - N
2025-01-05 16:51:35,024 - DEBUG - on stmt: $const126.15 = const(int, 1)
2025-01-05 16:51:35,026 - DEBUG - on stmt: $128binary_add.16 = $124binary_subtract.14 + $const126.15
2025-01-05 16:51:35,027 - DEBUG - on stmt: $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,030 - DEBUG - on stmt: $132load_global.18 = global(min: <built-in function min>)
2025-01-05 16:51:35,032 - DEBUG - on stmt: $const138.21 = const(int, 2)
2025-01-05 16:51:35,033 - DEBUG - on stmt: $140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:35,034 - DEBUG - on stmt: $142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:35,036 - DEBUG - find_def var='i' stmt=$142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:35,037 - DEBUG - on stmt: $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,040 - DEBUG - on stmt: $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,043 - DEBUG - on stmt: $150get_iter.27 = getiter(value=$148call_function.26)
2025-01-05 16:51:35,045 - DEBUG - on stmt: $phi152.1 = $150get_iter.27
2025-01-05 16:51:35,046 - DEBUG - on stmt: jump 152
2025-01-05 16:51:35,047 - DEBUG - ==== SSA block rewrite pass on 152
2025-01-05 16:51:35,048 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EF040>
2025-01-05 16:51:35,050 - DEBUG - on stmt: $152for_iter.2 = iternext(value=$phi152.1)
2025-01-05 16:51:35,051 - DEBUG - on stmt: $152for_iter.3 = pair_first(value=$152for_iter.2)
2025-01-05 16:51:35,053 - DEBUG - on stmt: $152for_iter.4 = pair_second(value=$152for_iter.2)
2025-01-05 16:51:35,054 - DEBUG - on stmt: $phi154.2 = $152for_iter.3
2025-01-05 16:51:35,055 - DEBUG - on stmt: branch $152for_iter.4, 154, 198
2025-01-05 16:51:35,056 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:35,057 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EF040>
2025-01-05 16:51:35,058 - DEBUG - on stmt: k = $phi154.2
2025-01-05 16:51:35,059 - DEBUG - on stmt: $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:35,061 - DEBUG - find_def var='i' stmt=$162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:35,062 - DEBUG - find_def_from_top label 154
2025-01-05 16:51:35,064 - DEBUG - idom 152 from label 154
2025-01-05 16:51:35,065 - DEBUG - find_def_from_bottom label 152
2025-01-05 16:51:35,066 - DEBUG - find_def_from_top label 152
2025-01-05 16:51:35,066 - DEBUG - idom 96 from label 152
2025-01-05 16:51:35,067 - DEBUG - find_def_from_bottom label 96
2025-01-05 16:51:35,068 - DEBUG - on stmt: $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:35,070 - DEBUG - on stmt: $const176.14 = const(int, 2)
2025-01-05 16:51:35,071 - DEBUG - on stmt: $178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:35,072 - DEBUG - on stmt: $180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:35,075 - DEBUG - find_def var='i' stmt=$180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:35,076 - DEBUG - find_def_from_top label 154
2025-01-05 16:51:35,077 - DEBUG - idom 152 from label 154
2025-01-05 16:51:35,078 - DEBUG - find_def_from_bottom label 152
2025-01-05 16:51:35,080 - DEBUG - find_def_from_top label 152
2025-01-05 16:51:35,081 - DEBUG - idom 96 from label 152
2025-01-05 16:51:35,082 - DEBUG - find_def_from_bottom label 96
2025-01-05 16:51:35,082 - DEBUG - on stmt: $184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:35,084 - DEBUG - on stmt: $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:35,085 - DEBUG - on stmt: $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19
2025-01-05 16:51:35,087 - DEBUG - on stmt: $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:35,090 - DEBUG - on stmt: localscore[i] = $190inplace_add.21
2025-01-05 16:51:35,091 - DEBUG - find_def var='i' stmt=localscore[i] = $190inplace_add.21
2025-01-05 16:51:35,092 - DEBUG - find_def_from_top label 154
2025-01-05 16:51:35,093 - DEBUG - idom 152 from label 154
2025-01-05 16:51:35,094 - DEBUG - find_def_from_bottom label 152
2025-01-05 16:51:35,095 - DEBUG - find_def_from_top label 152
2025-01-05 16:51:35,096 - DEBUG - idom 96 from label 152
2025-01-05 16:51:35,097 - DEBUG - find_def_from_bottom label 96
2025-01-05 16:51:35,098 - DEBUG - on stmt: jump 152
2025-01-05 16:51:35,099 - DEBUG - ==== SSA block rewrite pass on 198
2025-01-05 16:51:35,100 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EF040>
2025-01-05 16:51:35,101 - DEBUG - on stmt: jump 94
2025-01-05 16:51:35,103 - DEBUG - ==== SSA block rewrite pass on 200
2025-01-05 16:51:35,103 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EF040>
2025-01-05 16:51:35,105 - DEBUG - on stmt: jump 412
2025-01-05 16:51:35,106 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-05 16:51:35,107 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EF040>
2025-01-05 16:51:35,108 - DEBUG - on stmt: $202load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:35,109 - DEBUG - on stmt: $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,112 - DEBUG - on stmt: $208load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:35,114 - DEBUG - on stmt: $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,116 - DEBUG - on stmt: $214compare_op.6 = $206call_function.2 == $212call_function.5
2025-01-05 16:51:35,118 - DEBUG - on stmt: bool218 = global(bool: <class 'bool'>)
2025-01-05 16:51:35,119 - DEBUG - on stmt: $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,121 - DEBUG - on stmt: branch $218pred, 220, 412
2025-01-05 16:51:35,123 - DEBUG - ==== SSA block rewrite pass on 220
2025-01-05 16:51:35,123 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EF040>
2025-01-05 16:51:35,125 - DEBUG - on stmt: $220load_global.0 = global(range: <class 'range'>)
2025-01-05 16:51:35,126 - DEBUG - on stmt: $222load_global.1 = global(len: <built-in function len>)
2025-01-05 16:51:35,128 - DEBUG - on stmt: $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,130 - DEBUG - on stmt: $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,133 - DEBUG - on stmt: $230get_iter.5 = getiter(value=$228call_function.4)
2025-01-05 16:51:35,134 - DEBUG - on stmt: $phi232.0 = $230get_iter.5
2025-01-05 16:51:35,135 - DEBUG - on stmt: jump 232
2025-01-05 16:51:35,136 - DEBUG - ==== SSA block rewrite pass on 232
2025-01-05 16:51:35,137 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EF040>
2025-01-05 16:51:35,139 - DEBUG - on stmt: $232for_iter.1 = iternext(value=$phi232.0)
2025-01-05 16:51:35,140 - DEBUG - on stmt: $232for_iter.2 = pair_first(value=$232for_iter.1)
2025-01-05 16:51:35,142 - DEBUG - on stmt: $232for_iter.3 = pair_second(value=$232for_iter.1)
2025-01-05 16:51:35,144 - DEBUG - on stmt: $phi234.1 = $232for_iter.2
2025-01-05 16:51:35,145 - DEBUG - on stmt: branch $232for_iter.3, 234, 412
2025-01-05 16:51:35,146 - DEBUG - ==== SSA block rewrite pass on 234
2025-01-05 16:51:35,147 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EF040>
2025-01-05 16:51:35,149 - DEBUG - on stmt: i.1 = $phi234.1
2025-01-05 16:51:35,150 - DEBUG - on stmt: $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:35,152 - DEBUG - on stmt: $238load_method.3 = getattr(value=$236load_global.2, attr=exp)
2025-01-05 16:51:35,154 - DEBUG - on stmt: $const240.4 = const(float, -0.5)
2025-01-05 16:51:35,155 - DEBUG - on stmt: $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:35,157 - DEBUG - on stmt: $244load_method.6 = getattr(value=$242load_global.5, attr=arange)
2025-01-05 16:51:35,159 - DEBUG - on stmt: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:35,160 - DEBUG - find_def var='i' stmt=$250binary_subscr.9 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:35,162 - DEBUG - replaced with: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,164 - DEBUG - on stmt: $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9)
2025-01-05 16:51:35,165 - DEBUG - on stmt: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:35,167 - DEBUG - find_def var='i' stmt=$258binary_subscr.13 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:35,168 - DEBUG - replaced with: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,170 - DEBUG - on stmt: $const260.14 = const(int, 1)
2025-01-05 16:51:35,171 - DEBUG - on stmt: $262binary_add.15 = $258binary_subscr.13 + $const260.14
2025-01-05 16:51:35,172 - DEBUG - on stmt: $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,175 - DEBUG - on stmt: $const266.17 = const(float, 32.0)
2025-01-05 16:51:35,176 - DEBUG - on stmt: $268binary_multiply.18 = $264call_method.16 * $const266.17
2025-01-05 16:51:35,177 - DEBUG - on stmt: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:35,180 - DEBUG - find_def var='i' stmt=$274binary_subscr.21 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:35,181 - DEBUG - replaced with: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,183 - DEBUG - on stmt: $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21
2025-01-05 16:51:35,184 - DEBUG - on stmt: $const278.23 = const(int, 2)
2025-01-05 16:51:35,186 - DEBUG - on stmt: $280binary_power.24 = $276binary_true_divide.22 ** $const278.23
2025-01-05 16:51:35,187 - DEBUG - on stmt: $282binary_multiply.25 = $const240.4 * $280binary_power.24
2025-01-05 16:51:35,188 - DEBUG - on stmt: window = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,190 - DEBUG - on stmt: $const288.27 = const(int, 2)
2025-01-05 16:51:35,192 - DEBUG - on stmt: $290load_global.28 = global(int: <class 'int'>)
2025-01-05 16:51:35,193 - DEBUG - on stmt: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:35,195 - DEBUG - find_def var='i' stmt=$296binary_subscr.31 = getitem(value=frames_per_beat, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:35,197 - DEBUG - replaced with: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,198 - DEBUG - on stmt: $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,200 - DEBUG - on stmt: $300binary_multiply.33 = $const288.27 * $298call_function.32
2025-01-05 16:51:35,202 - DEBUG - on stmt: $const302.34 = const(int, 1)
2025-01-05 16:51:35,203 - DEBUG - on stmt: K = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:35,205 - DEBUG - on stmt: $const308.36 = const(float, 0.0)
2025-01-05 16:51:35,206 - DEBUG - on stmt: localscore[i] = $const308.36
2025-01-05 16:51:35,207 - DEBUG - find_def var='i' stmt=localscore[i] = $const308.36
2025-01-05 16:51:35,208 - DEBUG - replaced with: localscore[i.1] = $const308.36
2025-01-05 16:51:35,209 - DEBUG - on stmt: $316load_global.39 = global(range: <class 'range'>)
2025-01-05 16:51:35,211 - DEBUG - on stmt: $318load_global.40 = global(max: <built-in function max>)
2025-01-05 16:51:35,212 - DEBUG - on stmt: $const320.41 = const(int, 0)
2025-01-05 16:51:35,213 - DEBUG - on stmt: $const326.44 = const(int, 2)
2025-01-05 16:51:35,214 - DEBUG - on stmt: $328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:35,216 - DEBUG - on stmt: $330binary_add.46 = i + $328binary_floor_divide.45
2025-01-05 16:51:35,217 - DEBUG - find_def var='i' stmt=$330binary_add.46 = i + $328binary_floor_divide.45
2025-01-05 16:51:35,219 - DEBUG - replaced with: $330binary_add.46 = i.1 + $328binary_floor_divide.45
2025-01-05 16:51:35,220 - DEBUG - on stmt: $334binary_subtract.48 = $330binary_add.46 - N
2025-01-05 16:51:35,222 - DEBUG - on stmt: $const336.49 = const(int, 1)
2025-01-05 16:51:35,223 - DEBUG - on stmt: $338binary_add.50 = $334binary_subtract.48 + $const336.49
2025-01-05 16:51:35,226 - DEBUG - on stmt: $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,229 - DEBUG - on stmt: $342load_global.52 = global(min: <built-in function min>)
2025-01-05 16:51:35,231 - DEBUG - on stmt: $const348.55 = const(int, 2)
2025-01-05 16:51:35,232 - DEBUG - on stmt: $350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:35,233 - DEBUG - on stmt: $352binary_add.57 = i + $350binary_floor_divide.56
2025-01-05 16:51:35,235 - DEBUG - find_def var='i' stmt=$352binary_add.57 = i + $350binary_floor_divide.56
2025-01-05 16:51:35,237 - DEBUG - replaced with: $352binary_add.57 = i.1 + $350binary_floor_divide.56
2025-01-05 16:51:35,238 - DEBUG - on stmt: $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,241 - DEBUG - on stmt: $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,244 - DEBUG - on stmt: $360get_iter.61 = getiter(value=$358call_function.60)
2025-01-05 16:51:35,246 - DEBUG - on stmt: $phi362.1 = $360get_iter.61
2025-01-05 16:51:35,247 - DEBUG - on stmt: jump 362
2025-01-05 16:51:35,248 - DEBUG - ==== SSA block rewrite pass on 362
2025-01-05 16:51:35,249 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EF040>
2025-01-05 16:51:35,250 - DEBUG - on stmt: $362for_iter.2 = iternext(value=$phi362.1)
2025-01-05 16:51:35,252 - DEBUG - on stmt: $362for_iter.3 = pair_first(value=$362for_iter.2)
2025-01-05 16:51:35,253 - DEBUG - on stmt: $362for_iter.4 = pair_second(value=$362for_iter.2)
2025-01-05 16:51:35,255 - DEBUG - on stmt: $phi364.2 = $362for_iter.3
2025-01-05 16:51:35,256 - DEBUG - on stmt: branch $362for_iter.4, 364, 410
2025-01-05 16:51:35,257 - DEBUG - ==== SSA block rewrite pass on 364
2025-01-05 16:51:35,258 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EF040>
2025-01-05 16:51:35,259 - DEBUG - on stmt: k.1 = $phi364.2
2025-01-05 16:51:35,260 - DEBUG - on stmt: $372binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:35,262 - DEBUG - find_def var='i' stmt=$372binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:35,264 - DEBUG - find_def_from_top label 364
2025-01-05 16:51:35,265 - DEBUG - idom 362 from label 364
2025-01-05 16:51:35,265 - DEBUG - find_def_from_bottom label 362
2025-01-05 16:51:35,266 - DEBUG - find_def_from_top label 362
2025-01-05 16:51:35,267 - DEBUG - idom 234 from label 362
2025-01-05 16:51:35,268 - DEBUG - find_def_from_bottom label 234
2025-01-05 16:51:35,269 - DEBUG - replaced with: $372binary_subscr.7 = getitem(value=localscore, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,270 - DEBUG - on stmt: $378binary_subscr.10 = getitem(value=window, index=k.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,272 - DEBUG - on stmt: $const386.14 = const(int, 2)
2025-01-05 16:51:35,273 - DEBUG - on stmt: $388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:35,274 - DEBUG - on stmt: $390binary_add.16 = i + $388binary_floor_divide.15
2025-01-05 16:51:35,276 - DEBUG - find_def var='i' stmt=$390binary_add.16 = i + $388binary_floor_divide.15
2025-01-05 16:51:35,278 - DEBUG - find_def_from_top label 364
2025-01-05 16:51:35,279 - DEBUG - idom 362 from label 364
2025-01-05 16:51:35,280 - DEBUG - find_def_from_bottom label 362
2025-01-05 16:51:35,281 - DEBUG - find_def_from_top label 362
2025-01-05 16:51:35,282 - DEBUG - idom 234 from label 362
2025-01-05 16:51:35,283 - DEBUG - find_def_from_bottom label 234
2025-01-05 16:51:35,284 - DEBUG - replaced with: $390binary_add.16 = i.1 + $388binary_floor_divide.15
2025-01-05 16:51:35,285 - DEBUG - on stmt: $394binary_subtract.18 = $390binary_add.16 - k.1
2025-01-05 16:51:35,287 - DEBUG - on stmt: $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:35,288 - DEBUG - on stmt: $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19
2025-01-05 16:51:35,290 - DEBUG - on stmt: $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:35,292 - DEBUG - on stmt: localscore[i] = $400inplace_add.21
2025-01-05 16:51:35,293 - DEBUG - find_def var='i' stmt=localscore[i] = $400inplace_add.21
2025-01-05 16:51:35,295 - DEBUG - find_def_from_top label 364
2025-01-05 16:51:35,296 - DEBUG - idom 362 from label 364
2025-01-05 16:51:35,297 - DEBUG - find_def_from_bottom label 362
2025-01-05 16:51:35,298 - DEBUG - find_def_from_top label 362
2025-01-05 16:51:35,299 - DEBUG - idom 234 from label 362
2025-01-05 16:51:35,300 - DEBUG - find_def_from_bottom label 234
2025-01-05 16:51:35,301 - DEBUG - replaced with: localscore[i.1] = $400inplace_add.21
2025-01-05 16:51:35,303 - DEBUG - on stmt: jump 362
2025-01-05 16:51:35,304 - DEBUG - ==== SSA block rewrite pass on 410
2025-01-05 16:51:35,305 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EF040>
2025-01-05 16:51:35,306 - DEBUG - on stmt: jump 232
2025-01-05 16:51:35,307 - DEBUG - ==== SSA block rewrite pass on 412
2025-01-05 16:51:35,308 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x00000000146EF040>
2025-01-05 16:51:35,310 - DEBUG - on stmt: $const412.0 = const(NoneType, None)
2025-01-05 16:51:35,311 - DEBUG - on stmt: $414return_value.1 = cast(value=$const412.0)
2025-01-05 16:51:35,313 - DEBUG - on stmt: return $414return_value.1
2025-01-05 16:51:35,314 - DEBUG - Fix SSA violator on var window
2025-01-05 16:51:35,315 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:35,316 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BFA610>
2025-01-05 16:51:35,318 - DEBUG - on stmt: onset_envelope = arg(0, name=onset_envelope)
2025-01-05 16:51:35,319 - DEBUG - on stmt: frames_per_beat = arg(1, name=frames_per_beat)
2025-01-05 16:51:35,321 - DEBUG - on stmt: localscore = arg(2, name=localscore)
2025-01-05 16:51:35,322 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:35,323 - DEBUG - on stmt: N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,325 - DEBUG - on stmt: $10load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:35,327 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,329 - DEBUG - on stmt: $const16.6 = const(int, 1)
2025-01-05 16:51:35,330 - DEBUG - on stmt: $18compare_op.7 = $14call_function.5 == $const16.6
2025-01-05 16:51:35,332 - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-01-05 16:51:35,333 - DEBUG - on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,335 - DEBUG - on stmt: branch $20pred, 22, 202
2025-01-05 16:51:35,337 - DEBUG - ==== SSA block rewrite pass on 22
2025-01-05 16:51:35,337 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BFA610>
2025-01-05 16:51:35,339 - DEBUG - on stmt: $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:35,341 - DEBUG - on stmt: $24load_method.1 = getattr(value=$22load_global.0, attr=exp)
2025-01-05 16:51:35,342 - DEBUG - on stmt: $const26.2 = const(float, -0.5)
2025-01-05 16:51:35,344 - DEBUG - on stmt: $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:35,346 - DEBUG - on stmt: $30load_method.4 = getattr(value=$28load_global.3, attr=arange)
2025-01-05 16:51:35,348 - DEBUG - on stmt: $const34.6 = const(int, 0)
2025-01-05 16:51:35,349 - DEBUG - on stmt: $36binary_subscr.7 = static_getitem(value=frames_per_beat, index=0, index_var=$const34.6, fn=<built-in function getitem>)
2025-01-05 16:51:35,351 - DEBUG - on stmt: $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7)
2025-01-05 16:51:35,353 - DEBUG - on stmt: $const42.10 = const(int, 0)
2025-01-05 16:51:35,354 - DEBUG - on stmt: $44binary_subscr.11 = static_getitem(value=frames_per_beat, index=0, index_var=$const42.10, fn=<built-in function getitem>)
2025-01-05 16:51:35,356 - DEBUG - on stmt: $const46.12 = const(int, 1)
2025-01-05 16:51:35,357 - DEBUG - on stmt: $48binary_add.13 = $44binary_subscr.11 + $const46.12
2025-01-05 16:51:35,359 - DEBUG - on stmt: $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,361 - DEBUG - on stmt: $const52.15 = const(float, 32.0)
2025-01-05 16:51:35,362 - DEBUG - on stmt: $54binary_multiply.16 = $50call_method.14 * $const52.15
2025-01-05 16:51:35,364 - DEBUG - on stmt: $const58.18 = const(int, 0)
2025-01-05 16:51:35,365 - DEBUG - on stmt: $60binary_subscr.19 = static_getitem(value=frames_per_beat, index=0, index_var=$const58.18, fn=<built-in function getitem>)
2025-01-05 16:51:35,367 - DEBUG - on stmt: $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19
2025-01-05 16:51:35,369 - DEBUG - on stmt: $const64.21 = const(int, 2)
2025-01-05 16:51:35,370 - DEBUG - on stmt: $66binary_power.22 = $62binary_true_divide.20 ** $const64.21
2025-01-05 16:51:35,371 - DEBUG - on stmt: $68binary_multiply.23 = $const26.2 * $66binary_power.22
2025-01-05 16:51:35,373 - DEBUG - on stmt: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,375 - DEBUG - first assign: window
2025-01-05 16:51:35,376 - DEBUG - replaced with: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,379 - DEBUG - on stmt: $74load_global.25 = global(len: <built-in function len>)
2025-01-05 16:51:35,381 - DEBUG - on stmt: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,383 - DEBUG - on stmt: $82load_global.28 = global(range: <class 'range'>)
2025-01-05 16:51:35,385 - DEBUG - on stmt: $84load_global.29 = global(len: <built-in function len>)
2025-01-05 16:51:35,386 - DEBUG - on stmt: $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,388 - DEBUG - on stmt: $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,391 - DEBUG - on stmt: $92get_iter.33 = getiter(value=$90call_function.32)
2025-01-05 16:51:35,392 - DEBUG - on stmt: $phi94.0 = $92get_iter.33
2025-01-05 16:51:35,393 - DEBUG - on stmt: jump 94
2025-01-05 16:51:35,394 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:35,395 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BFA610>
2025-01-05 16:51:35,397 - DEBUG - on stmt: $94for_iter.1 = iternext(value=$phi94.0)
2025-01-05 16:51:35,399 - DEBUG - on stmt: $94for_iter.2 = pair_first(value=$94for_iter.1)
2025-01-05 16:51:35,400 - DEBUG - on stmt: $94for_iter.3 = pair_second(value=$94for_iter.1)
2025-01-05 16:51:35,402 - DEBUG - on stmt: $phi96.1 = $94for_iter.2
2025-01-05 16:51:35,403 - DEBUG - on stmt: branch $94for_iter.3, 96, 200
2025-01-05 16:51:35,403 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:35,404 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BFA610>
2025-01-05 16:51:35,406 - DEBUG - on stmt: i = $phi96.1
2025-01-05 16:51:35,407 - DEBUG - on stmt: $const98.2 = const(float, 0.0)
2025-01-05 16:51:35,408 - DEBUG - on stmt: localscore[i] = $const98.2
2025-01-05 16:51:35,409 - DEBUG - on stmt: $106load_global.5 = global(range: <class 'range'>)
2025-01-05 16:51:35,410 - DEBUG - on stmt: $108load_global.6 = global(max: <built-in function max>)
2025-01-05 16:51:35,411 - DEBUG - on stmt: $const110.7 = const(int, 0)
2025-01-05 16:51:35,413 - DEBUG - on stmt: $const116.10 = const(int, 2)
2025-01-05 16:51:35,414 - DEBUG - on stmt: $118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:35,415 - DEBUG - on stmt: $120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:35,417 - DEBUG - on stmt: $124binary_subtract.14 = $120binary_add.12 - N
2025-01-05 16:51:35,419 - DEBUG - on stmt: $const126.15 = const(int, 1)
2025-01-05 16:51:35,420 - DEBUG - on stmt: $128binary_add.16 = $124binary_subtract.14 + $const126.15
2025-01-05 16:51:35,421 - DEBUG - on stmt: $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,424 - DEBUG - on stmt: $132load_global.18 = global(min: <built-in function min>)
2025-01-05 16:51:35,425 - DEBUG - on stmt: $const138.21 = const(int, 2)
2025-01-05 16:51:35,426 - DEBUG - on stmt: $140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:35,428 - DEBUG - on stmt: $142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:35,429 - DEBUG - on stmt: $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,432 - DEBUG - on stmt: $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,435 - DEBUG - on stmt: $150get_iter.27 = getiter(value=$148call_function.26)
2025-01-05 16:51:35,437 - DEBUG - on stmt: $phi152.1 = $150get_iter.27
2025-01-05 16:51:35,438 - DEBUG - on stmt: jump 152
2025-01-05 16:51:35,439 - DEBUG - ==== SSA block rewrite pass on 152
2025-01-05 16:51:35,440 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BFA610>
2025-01-05 16:51:35,441 - DEBUG - on stmt: $152for_iter.2 = iternext(value=$phi152.1)
2025-01-05 16:51:35,443 - DEBUG - on stmt: $152for_iter.3 = pair_first(value=$152for_iter.2)
2025-01-05 16:51:35,444 - DEBUG - on stmt: $152for_iter.4 = pair_second(value=$152for_iter.2)
2025-01-05 16:51:35,446 - DEBUG - on stmt: $phi154.2 = $152for_iter.3
2025-01-05 16:51:35,447 - DEBUG - on stmt: branch $152for_iter.4, 154, 198
2025-01-05 16:51:35,448 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:35,449 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BFA610>
2025-01-05 16:51:35,450 - DEBUG - on stmt: k = $phi154.2
2025-01-05 16:51:35,451 - DEBUG - on stmt: $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:35,453 - DEBUG - on stmt: $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:35,455 - DEBUG - on stmt: $const176.14 = const(int, 2)
2025-01-05 16:51:35,456 - DEBUG - on stmt: $178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:35,457 - DEBUG - on stmt: $180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:35,459 - DEBUG - on stmt: $184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:35,460 - DEBUG - on stmt: $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:35,462 - DEBUG - on stmt: $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19
2025-01-05 16:51:35,465 - DEBUG - on stmt: $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:35,467 - DEBUG - on stmt: localscore[i] = $190inplace_add.21
2025-01-05 16:51:35,468 - DEBUG - on stmt: jump 152
2025-01-05 16:51:35,469 - DEBUG - ==== SSA block rewrite pass on 198
2025-01-05 16:51:35,470 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BFA610>
2025-01-05 16:51:35,471 - DEBUG - on stmt: jump 94
2025-01-05 16:51:35,473 - DEBUG - ==== SSA block rewrite pass on 200
2025-01-05 16:51:35,473 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BFA610>
2025-01-05 16:51:35,475 - DEBUG - on stmt: jump 412
2025-01-05 16:51:35,476 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-05 16:51:35,477 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BFA610>
2025-01-05 16:51:35,478 - DEBUG - on stmt: $202load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:35,480 - DEBUG - on stmt: $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,482 - DEBUG - on stmt: $208load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:35,484 - DEBUG - on stmt: $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,486 - DEBUG - on stmt: $214compare_op.6 = $206call_function.2 == $212call_function.5
2025-01-05 16:51:35,488 - DEBUG - on stmt: bool218 = global(bool: <class 'bool'>)
2025-01-05 16:51:35,489 - DEBUG - on stmt: $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,491 - DEBUG - on stmt: branch $218pred, 220, 412
2025-01-05 16:51:35,493 - DEBUG - ==== SSA block rewrite pass on 220
2025-01-05 16:51:35,494 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BFA610>
2025-01-05 16:51:35,495 - DEBUG - on stmt: $220load_global.0 = global(range: <class 'range'>)
2025-01-05 16:51:35,497 - DEBUG - on stmt: $222load_global.1 = global(len: <built-in function len>)
2025-01-05 16:51:35,498 - DEBUG - on stmt: $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,501 - DEBUG - on stmt: $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,503 - DEBUG - on stmt: $230get_iter.5 = getiter(value=$228call_function.4)
2025-01-05 16:51:35,505 - DEBUG - on stmt: $phi232.0 = $230get_iter.5
2025-01-05 16:51:35,506 - DEBUG - on stmt: jump 232
2025-01-05 16:51:35,507 - DEBUG - ==== SSA block rewrite pass on 232
2025-01-05 16:51:35,507 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BFA610>
2025-01-05 16:51:35,509 - DEBUG - on stmt: $232for_iter.1 = iternext(value=$phi232.0)
2025-01-05 16:51:35,510 - DEBUG - on stmt: $232for_iter.2 = pair_first(value=$232for_iter.1)
2025-01-05 16:51:35,512 - DEBUG - on stmt: $232for_iter.3 = pair_second(value=$232for_iter.1)
2025-01-05 16:51:35,514 - DEBUG - on stmt: $phi234.1 = $232for_iter.2
2025-01-05 16:51:35,515 - DEBUG - on stmt: branch $232for_iter.3, 234, 412
2025-01-05 16:51:35,516 - DEBUG - ==== SSA block rewrite pass on 234
2025-01-05 16:51:35,517 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BFA610>
2025-01-05 16:51:35,518 - DEBUG - on stmt: i.1 = $phi234.1
2025-01-05 16:51:35,519 - DEBUG - on stmt: $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:35,521 - DEBUG - on stmt: $238load_method.3 = getattr(value=$236load_global.2, attr=exp)
2025-01-05 16:51:35,523 - DEBUG - on stmt: $const240.4 = const(float, -0.5)
2025-01-05 16:51:35,524 - DEBUG - on stmt: $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:35,526 - DEBUG - on stmt: $244load_method.6 = getattr(value=$242load_global.5, attr=arange)
2025-01-05 16:51:35,527 - DEBUG - on stmt: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,530 - DEBUG - on stmt: $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9)
2025-01-05 16:51:35,531 - DEBUG - on stmt: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,533 - DEBUG - on stmt: $const260.14 = const(int, 1)
2025-01-05 16:51:35,534 - DEBUG - on stmt: $262binary_add.15 = $258binary_subscr.13 + $const260.14
2025-01-05 16:51:35,536 - DEBUG - on stmt: $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,539 - DEBUG - on stmt: $const266.17 = const(float, 32.0)
2025-01-05 16:51:35,540 - DEBUG - on stmt: $268binary_multiply.18 = $264call_method.16 * $const266.17
2025-01-05 16:51:35,541 - DEBUG - on stmt: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,543 - DEBUG - on stmt: $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21
2025-01-05 16:51:35,544 - DEBUG - on stmt: $const278.23 = const(int, 2)
2025-01-05 16:51:35,545 - DEBUG - on stmt: $280binary_power.24 = $276binary_true_divide.22 ** $const278.23
2025-01-05 16:51:35,547 - DEBUG - on stmt: $282binary_multiply.25 = $const240.4 * $280binary_power.24
2025-01-05 16:51:35,549 - DEBUG - on stmt: window = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,551 - DEBUG - replaced with: window.1 = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,553 - DEBUG - on stmt: $const288.27 = const(int, 2)
2025-01-05 16:51:35,555 - DEBUG - on stmt: $290load_global.28 = global(int: <class 'int'>)
2025-01-05 16:51:35,556 - DEBUG - on stmt: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,557 - DEBUG - on stmt: $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,560 - DEBUG - on stmt: $300binary_multiply.33 = $const288.27 * $298call_function.32
2025-01-05 16:51:35,561 - DEBUG - on stmt: $const302.34 = const(int, 1)
2025-01-05 16:51:35,562 - DEBUG - on stmt: K = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:35,564 - DEBUG - on stmt: $const308.36 = const(float, 0.0)
2025-01-05 16:51:35,565 - DEBUG - on stmt: localscore[i.1] = $const308.36
2025-01-05 16:51:35,566 - DEBUG - on stmt: $316load_global.39 = global(range: <class 'range'>)
2025-01-05 16:51:35,567 - DEBUG - on stmt: $318load_global.40 = global(max: <built-in function max>)
2025-01-05 16:51:35,569 - DEBUG - on stmt: $const320.41 = const(int, 0)
2025-01-05 16:51:35,570 - DEBUG - on stmt: $const326.44 = const(int, 2)
2025-01-05 16:51:35,571 - DEBUG - on stmt: $328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:35,572 - DEBUG - on stmt: $330binary_add.46 = i.1 + $328binary_floor_divide.45
2025-01-05 16:51:35,574 - DEBUG - on stmt: $334binary_subtract.48 = $330binary_add.46 - N
2025-01-05 16:51:35,576 - DEBUG - on stmt: $const336.49 = const(int, 1)
2025-01-05 16:51:35,577 - DEBUG - on stmt: $338binary_add.50 = $334binary_subtract.48 + $const336.49
2025-01-05 16:51:35,578 - DEBUG - on stmt: $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,581 - DEBUG - on stmt: $342load_global.52 = global(min: <built-in function min>)
2025-01-05 16:51:35,582 - DEBUG - on stmt: $const348.55 = const(int, 2)
2025-01-05 16:51:35,584 - DEBUG - on stmt: $350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:35,585 - DEBUG - on stmt: $352binary_add.57 = i.1 + $350binary_floor_divide.56
2025-01-05 16:51:35,587 - DEBUG - on stmt: $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,589 - DEBUG - on stmt: $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,592 - DEBUG - on stmt: $360get_iter.61 = getiter(value=$358call_function.60)
2025-01-05 16:51:35,594 - DEBUG - on stmt: $phi362.1 = $360get_iter.61
2025-01-05 16:51:35,595 - DEBUG - on stmt: jump 362
2025-01-05 16:51:35,596 - DEBUG - ==== SSA block rewrite pass on 362
2025-01-05 16:51:35,597 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BFA610>
2025-01-05 16:51:35,599 - DEBUG - on stmt: $362for_iter.2 = iternext(value=$phi362.1)
2025-01-05 16:51:35,600 - DEBUG - on stmt: $362for_iter.3 = pair_first(value=$362for_iter.2)
2025-01-05 16:51:35,602 - DEBUG - on stmt: $362for_iter.4 = pair_second(value=$362for_iter.2)
2025-01-05 16:51:35,603 - DEBUG - on stmt: $phi364.2 = $362for_iter.3
2025-01-05 16:51:35,605 - DEBUG - on stmt: branch $362for_iter.4, 364, 410
2025-01-05 16:51:35,606 - DEBUG - ==== SSA block rewrite pass on 364
2025-01-05 16:51:35,607 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BFA610>
2025-01-05 16:51:35,608 - DEBUG - on stmt: k.1 = $phi364.2
2025-01-05 16:51:35,609 - DEBUG - on stmt: $372binary_subscr.7 = getitem(value=localscore, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,611 - DEBUG - on stmt: $378binary_subscr.10 = getitem(value=window, index=k.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,612 - DEBUG - on stmt: $const386.14 = const(int, 2)
2025-01-05 16:51:35,614 - DEBUG - on stmt: $388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:35,616 - DEBUG - on stmt: $390binary_add.16 = i.1 + $388binary_floor_divide.15
2025-01-05 16:51:35,617 - DEBUG - on stmt: $394binary_subtract.18 = $390binary_add.16 - k.1
2025-01-05 16:51:35,619 - DEBUG - on stmt: $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:35,620 - DEBUG - on stmt: $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19
2025-01-05 16:51:35,622 - DEBUG - on stmt: $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:35,625 - DEBUG - on stmt: localscore[i.1] = $400inplace_add.21
2025-01-05 16:51:35,626 - DEBUG - on stmt: jump 362
2025-01-05 16:51:35,627 - DEBUG - ==== SSA block rewrite pass on 410
2025-01-05 16:51:35,628 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BFA610>
2025-01-05 16:51:35,629 - DEBUG - on stmt: jump 232
2025-01-05 16:51:35,630 - DEBUG - ==== SSA block rewrite pass on 412
2025-01-05 16:51:35,631 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BFA610>
2025-01-05 16:51:35,633 - DEBUG - on stmt: $const412.0 = const(NoneType, None)
2025-01-05 16:51:35,634 - DEBUG - on stmt: $414return_value.1 = cast(value=$const412.0)
2025-01-05 16:51:35,635 - DEBUG - on stmt: return $414return_value.1
2025-01-05 16:51:35,636 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {22: [<numba.core.ir.Assign object at 0x0000000014BFAB50>],
             234: [<numba.core.ir.Assign object at 0x0000000014C062B0>]})
2025-01-05 16:51:35,639 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:35,640 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001485FEE0>
2025-01-05 16:51:35,641 - DEBUG - on stmt: onset_envelope = arg(0, name=onset_envelope)
2025-01-05 16:51:35,643 - DEBUG - on stmt: frames_per_beat = arg(1, name=frames_per_beat)
2025-01-05 16:51:35,644 - DEBUG - on stmt: localscore = arg(2, name=localscore)
2025-01-05 16:51:35,646 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:35,647 - DEBUG - on stmt: N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,649 - DEBUG - on stmt: $10load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:35,651 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,653 - DEBUG - on stmt: $const16.6 = const(int, 1)
2025-01-05 16:51:35,654 - DEBUG - on stmt: $18compare_op.7 = $14call_function.5 == $const16.6
2025-01-05 16:51:35,656 - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-01-05 16:51:35,657 - DEBUG - on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,659 - DEBUG - on stmt: branch $20pred, 22, 202
2025-01-05 16:51:35,660 - DEBUG - ==== SSA block rewrite pass on 22
2025-01-05 16:51:35,661 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001485FEE0>
2025-01-05 16:51:35,663 - DEBUG - on stmt: $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:35,665 - DEBUG - on stmt: $24load_method.1 = getattr(value=$22load_global.0, attr=exp)
2025-01-05 16:51:35,667 - DEBUG - on stmt: $const26.2 = const(float, -0.5)
2025-01-05 16:51:35,668 - DEBUG - on stmt: $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:35,670 - DEBUG - on stmt: $30load_method.4 = getattr(value=$28load_global.3, attr=arange)
2025-01-05 16:51:35,671 - DEBUG - on stmt: $const34.6 = const(int, 0)
2025-01-05 16:51:35,673 - DEBUG - on stmt: $36binary_subscr.7 = static_getitem(value=frames_per_beat, index=0, index_var=$const34.6, fn=<built-in function getitem>)
2025-01-05 16:51:35,674 - DEBUG - on stmt: $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7)
2025-01-05 16:51:35,676 - DEBUG - on stmt: $const42.10 = const(int, 0)
2025-01-05 16:51:35,677 - DEBUG - on stmt: $44binary_subscr.11 = static_getitem(value=frames_per_beat, index=0, index_var=$const42.10, fn=<built-in function getitem>)
2025-01-05 16:51:35,679 - DEBUG - on stmt: $const46.12 = const(int, 1)
2025-01-05 16:51:35,681 - DEBUG - on stmt: $48binary_add.13 = $44binary_subscr.11 + $const46.12
2025-01-05 16:51:35,683 - DEBUG - on stmt: $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,686 - DEBUG - on stmt: $const52.15 = const(float, 32.0)
2025-01-05 16:51:35,687 - DEBUG - on stmt: $54binary_multiply.16 = $50call_method.14 * $const52.15
2025-01-05 16:51:35,688 - DEBUG - on stmt: $const58.18 = const(int, 0)
2025-01-05 16:51:35,689 - DEBUG - on stmt: $60binary_subscr.19 = static_getitem(value=frames_per_beat, index=0, index_var=$const58.18, fn=<built-in function getitem>)
2025-01-05 16:51:35,691 - DEBUG - on stmt: $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19
2025-01-05 16:51:35,693 - DEBUG - on stmt: $const64.21 = const(int, 2)
2025-01-05 16:51:35,694 - DEBUG - on stmt: $66binary_power.22 = $62binary_true_divide.20 ** $const64.21
2025-01-05 16:51:35,695 - DEBUG - on stmt: $68binary_multiply.23 = $const26.2 * $66binary_power.22
2025-01-05 16:51:35,697 - DEBUG - on stmt: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,699 - DEBUG - on stmt: $74load_global.25 = global(len: <built-in function len>)
2025-01-05 16:51:35,701 - DEBUG - on stmt: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,703 - DEBUG - find_def var='window' stmt=K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,705 - DEBUG - on stmt: $82load_global.28 = global(range: <class 'range'>)
2025-01-05 16:51:35,707 - DEBUG - on stmt: $84load_global.29 = global(len: <built-in function len>)
2025-01-05 16:51:35,708 - DEBUG - on stmt: $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,711 - DEBUG - on stmt: $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,713 - DEBUG - on stmt: $92get_iter.33 = getiter(value=$90call_function.32)
2025-01-05 16:51:35,715 - DEBUG - on stmt: $phi94.0 = $92get_iter.33
2025-01-05 16:51:35,716 - DEBUG - on stmt: jump 94
2025-01-05 16:51:35,717 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:35,718 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001485FEE0>
2025-01-05 16:51:35,719 - DEBUG - on stmt: $94for_iter.1 = iternext(value=$phi94.0)
2025-01-05 16:51:35,721 - DEBUG - on stmt: $94for_iter.2 = pair_first(value=$94for_iter.1)
2025-01-05 16:51:35,722 - DEBUG - on stmt: $94for_iter.3 = pair_second(value=$94for_iter.1)
2025-01-05 16:51:35,724 - DEBUG - on stmt: $phi96.1 = $94for_iter.2
2025-01-05 16:51:35,725 - DEBUG - on stmt: branch $94for_iter.3, 96, 200
2025-01-05 16:51:35,726 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:35,727 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001485FEE0>
2025-01-05 16:51:35,728 - DEBUG - on stmt: i = $phi96.1
2025-01-05 16:51:35,729 - DEBUG - on stmt: $const98.2 = const(float, 0.0)
2025-01-05 16:51:35,730 - DEBUG - on stmt: localscore[i] = $const98.2
2025-01-05 16:51:35,731 - DEBUG - on stmt: $106load_global.5 = global(range: <class 'range'>)
2025-01-05 16:51:35,733 - DEBUG - on stmt: $108load_global.6 = global(max: <built-in function max>)
2025-01-05 16:51:35,734 - DEBUG - on stmt: $const110.7 = const(int, 0)
2025-01-05 16:51:35,735 - DEBUG - on stmt: $const116.10 = const(int, 2)
2025-01-05 16:51:35,736 - DEBUG - on stmt: $118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:35,737 - DEBUG - on stmt: $120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:35,739 - DEBUG - on stmt: $124binary_subtract.14 = $120binary_add.12 - N
2025-01-05 16:51:35,741 - DEBUG - on stmt: $const126.15 = const(int, 1)
2025-01-05 16:51:35,742 - DEBUG - on stmt: $128binary_add.16 = $124binary_subtract.14 + $const126.15
2025-01-05 16:51:35,743 - DEBUG - on stmt: $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,746 - DEBUG - on stmt: $132load_global.18 = global(min: <built-in function min>)
2025-01-05 16:51:35,748 - DEBUG - on stmt: $const138.21 = const(int, 2)
2025-01-05 16:51:35,749 - DEBUG - on stmt: $140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:35,751 - DEBUG - on stmt: $142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:35,752 - DEBUG - on stmt: $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,755 - DEBUG - on stmt: $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,758 - DEBUG - on stmt: $150get_iter.27 = getiter(value=$148call_function.26)
2025-01-05 16:51:35,760 - DEBUG - on stmt: $phi152.1 = $150get_iter.27
2025-01-05 16:51:35,761 - DEBUG - on stmt: jump 152
2025-01-05 16:51:35,762 - DEBUG - ==== SSA block rewrite pass on 152
2025-01-05 16:51:35,763 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001485FEE0>
2025-01-05 16:51:35,765 - DEBUG - on stmt: $152for_iter.2 = iternext(value=$phi152.1)
2025-01-05 16:51:35,767 - DEBUG - on stmt: $152for_iter.3 = pair_first(value=$152for_iter.2)
2025-01-05 16:51:35,768 - DEBUG - on stmt: $152for_iter.4 = pair_second(value=$152for_iter.2)
2025-01-05 16:51:35,770 - DEBUG - on stmt: $phi154.2 = $152for_iter.3
2025-01-05 16:51:35,771 - DEBUG - on stmt: branch $152for_iter.4, 154, 198
2025-01-05 16:51:35,771 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:35,772 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001485FEE0>
2025-01-05 16:51:35,774 - DEBUG - on stmt: k = $phi154.2
2025-01-05 16:51:35,775 - DEBUG - on stmt: $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:35,776 - DEBUG - on stmt: $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:35,778 - DEBUG - find_def var='window' stmt=$168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:35,780 - DEBUG - find_def_from_top label 154
2025-01-05 16:51:35,781 - DEBUG - idom 152 from label 154
2025-01-05 16:51:35,781 - DEBUG - find_def_from_bottom label 152
2025-01-05 16:51:35,782 - DEBUG - find_def_from_top label 152
2025-01-05 16:51:35,783 - DEBUG - idom 96 from label 152
2025-01-05 16:51:35,784 - DEBUG - find_def_from_bottom label 96
2025-01-05 16:51:35,785 - DEBUG - find_def_from_top label 96
2025-01-05 16:51:35,786 - DEBUG - idom 94 from label 96
2025-01-05 16:51:35,787 - DEBUG - find_def_from_bottom label 94
2025-01-05 16:51:35,788 - DEBUG - find_def_from_top label 94
2025-01-05 16:51:35,789 - DEBUG - idom 22 from label 94
2025-01-05 16:51:35,789 - DEBUG - find_def_from_bottom label 22
2025-01-05 16:51:35,790 - DEBUG - on stmt: $const176.14 = const(int, 2)
2025-01-05 16:51:35,791 - DEBUG - on stmt: $178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:35,793 - DEBUG - on stmt: $180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:35,794 - DEBUG - on stmt: $184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:35,796 - DEBUG - on stmt: $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:35,798 - DEBUG - on stmt: $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19
2025-01-05 16:51:35,799 - DEBUG - on stmt: $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:35,802 - DEBUG - on stmt: localscore[i] = $190inplace_add.21
2025-01-05 16:51:35,803 - DEBUG - on stmt: jump 152
2025-01-05 16:51:35,804 - DEBUG - ==== SSA block rewrite pass on 198
2025-01-05 16:51:35,805 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001485FEE0>
2025-01-05 16:51:35,806 - DEBUG - on stmt: jump 94
2025-01-05 16:51:35,807 - DEBUG - ==== SSA block rewrite pass on 200
2025-01-05 16:51:35,808 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001485FEE0>
2025-01-05 16:51:35,809 - DEBUG - on stmt: jump 412
2025-01-05 16:51:35,811 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-05 16:51:35,811 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001485FEE0>
2025-01-05 16:51:35,813 - DEBUG - on stmt: $202load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:35,815 - DEBUG - on stmt: $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,817 - DEBUG - on stmt: $208load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:35,818 - DEBUG - on stmt: $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,821 - DEBUG - on stmt: $214compare_op.6 = $206call_function.2 == $212call_function.5
2025-01-05 16:51:35,822 - DEBUG - on stmt: bool218 = global(bool: <class 'bool'>)
2025-01-05 16:51:35,824 - DEBUG - on stmt: $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,826 - DEBUG - on stmt: branch $218pred, 220, 412
2025-01-05 16:51:35,827 - DEBUG - ==== SSA block rewrite pass on 220
2025-01-05 16:51:35,828 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001485FEE0>
2025-01-05 16:51:35,830 - DEBUG - on stmt: $220load_global.0 = global(range: <class 'range'>)
2025-01-05 16:51:35,832 - DEBUG - on stmt: $222load_global.1 = global(len: <built-in function len>)
2025-01-05 16:51:35,834 - DEBUG - on stmt: $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,836 - DEBUG - on stmt: $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,838 - DEBUG - on stmt: $230get_iter.5 = getiter(value=$228call_function.4)
2025-01-05 16:51:35,840 - DEBUG - on stmt: $phi232.0 = $230get_iter.5
2025-01-05 16:51:35,841 - DEBUG - on stmt: jump 232
2025-01-05 16:51:35,842 - DEBUG - ==== SSA block rewrite pass on 232
2025-01-05 16:51:35,843 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001485FEE0>
2025-01-05 16:51:35,844 - DEBUG - on stmt: $232for_iter.1 = iternext(value=$phi232.0)
2025-01-05 16:51:35,846 - DEBUG - on stmt: $232for_iter.2 = pair_first(value=$232for_iter.1)
2025-01-05 16:51:35,847 - DEBUG - on stmt: $232for_iter.3 = pair_second(value=$232for_iter.1)
2025-01-05 16:51:35,849 - DEBUG - on stmt: $phi234.1 = $232for_iter.2
2025-01-05 16:51:35,850 - DEBUG - on stmt: branch $232for_iter.3, 234, 412
2025-01-05 16:51:35,851 - DEBUG - ==== SSA block rewrite pass on 234
2025-01-05 16:51:35,852 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001485FEE0>
2025-01-05 16:51:35,853 - DEBUG - on stmt: i.1 = $phi234.1
2025-01-05 16:51:35,854 - DEBUG - on stmt: $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:35,856 - DEBUG - on stmt: $238load_method.3 = getattr(value=$236load_global.2, attr=exp)
2025-01-05 16:51:35,858 - DEBUG - on stmt: $const240.4 = const(float, -0.5)
2025-01-05 16:51:35,859 - DEBUG - on stmt: $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:35,861 - DEBUG - on stmt: $244load_method.6 = getattr(value=$242load_global.5, attr=arange)
2025-01-05 16:51:35,862 - DEBUG - on stmt: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,865 - DEBUG - on stmt: $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9)
2025-01-05 16:51:35,866 - DEBUG - on stmt: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,868 - DEBUG - on stmt: $const260.14 = const(int, 1)
2025-01-05 16:51:35,869 - DEBUG - on stmt: $262binary_add.15 = $258binary_subscr.13 + $const260.14
2025-01-05 16:51:35,870 - DEBUG - on stmt: $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,873 - DEBUG - on stmt: $const266.17 = const(float, 32.0)
2025-01-05 16:51:35,874 - DEBUG - on stmt: $268binary_multiply.18 = $264call_method.16 * $const266.17
2025-01-05 16:51:35,875 - DEBUG - on stmt: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,877 - DEBUG - on stmt: $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21
2025-01-05 16:51:35,879 - DEBUG - on stmt: $const278.23 = const(int, 2)
2025-01-05 16:51:35,880 - DEBUG - on stmt: $280binary_power.24 = $276binary_true_divide.22 ** $const278.23
2025-01-05 16:51:35,882 - DEBUG - on stmt: $282binary_multiply.25 = $const240.4 * $280binary_power.24
2025-01-05 16:51:35,883 - DEBUG - on stmt: window.1 = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,885 - DEBUG - on stmt: $const288.27 = const(int, 2)
2025-01-05 16:51:35,886 - DEBUG - on stmt: $290load_global.28 = global(int: <class 'int'>)
2025-01-05 16:51:35,888 - DEBUG - on stmt: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,889 - DEBUG - on stmt: $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,891 - DEBUG - on stmt: $300binary_multiply.33 = $const288.27 * $298call_function.32
2025-01-05 16:51:35,893 - DEBUG - on stmt: $const302.34 = const(int, 1)
2025-01-05 16:51:35,894 - DEBUG - on stmt: K = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:35,895 - DEBUG - on stmt: $const308.36 = const(float, 0.0)
2025-01-05 16:51:35,897 - DEBUG - on stmt: localscore[i.1] = $const308.36
2025-01-05 16:51:35,898 - DEBUG - on stmt: $316load_global.39 = global(range: <class 'range'>)
2025-01-05 16:51:35,899 - DEBUG - on stmt: $318load_global.40 = global(max: <built-in function max>)
2025-01-05 16:51:35,901 - DEBUG - on stmt: $const320.41 = const(int, 0)
2025-01-05 16:51:35,902 - DEBUG - on stmt: $const326.44 = const(int, 2)
2025-01-05 16:51:35,903 - DEBUG - on stmt: $328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:35,904 - DEBUG - on stmt: $330binary_add.46 = i.1 + $328binary_floor_divide.45
2025-01-05 16:51:35,906 - DEBUG - on stmt: $334binary_subtract.48 = $330binary_add.46 - N
2025-01-05 16:51:35,907 - DEBUG - on stmt: $const336.49 = const(int, 1)
2025-01-05 16:51:35,908 - DEBUG - on stmt: $338binary_add.50 = $334binary_subtract.48 + $const336.49
2025-01-05 16:51:35,910 - DEBUG - on stmt: $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,914 - DEBUG - on stmt: $342load_global.52 = global(min: <built-in function min>)
2025-01-05 16:51:35,915 - DEBUG - on stmt: $const348.55 = const(int, 2)
2025-01-05 16:51:35,917 - DEBUG - on stmt: $350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:35,918 - DEBUG - on stmt: $352binary_add.57 = i.1 + $350binary_floor_divide.56
2025-01-05 16:51:35,920 - DEBUG - on stmt: $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,922 - DEBUG - on stmt: $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,926 - DEBUG - on stmt: $360get_iter.61 = getiter(value=$358call_function.60)
2025-01-05 16:51:35,927 - DEBUG - on stmt: $phi362.1 = $360get_iter.61
2025-01-05 16:51:35,929 - DEBUG - on stmt: jump 362
2025-01-05 16:51:35,930 - DEBUG - ==== SSA block rewrite pass on 362
2025-01-05 16:51:35,931 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001485FEE0>
2025-01-05 16:51:35,932 - DEBUG - on stmt: $362for_iter.2 = iternext(value=$phi362.1)
2025-01-05 16:51:35,934 - DEBUG - on stmt: $362for_iter.3 = pair_first(value=$362for_iter.2)
2025-01-05 16:51:35,935 - DEBUG - on stmt: $362for_iter.4 = pair_second(value=$362for_iter.2)
2025-01-05 16:51:35,937 - DEBUG - on stmt: $phi364.2 = $362for_iter.3
2025-01-05 16:51:35,938 - DEBUG - on stmt: branch $362for_iter.4, 364, 410
2025-01-05 16:51:35,939 - DEBUG - ==== SSA block rewrite pass on 364
2025-01-05 16:51:35,940 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001485FEE0>
2025-01-05 16:51:35,941 - DEBUG - on stmt: k.1 = $phi364.2
2025-01-05 16:51:35,942 - DEBUG - on stmt: $372binary_subscr.7 = getitem(value=localscore, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,943 - DEBUG - on stmt: $378binary_subscr.10 = getitem(value=window, index=k.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,945 - DEBUG - find_def var='window' stmt=$378binary_subscr.10 = getitem(value=window, index=k.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,947 - DEBUG - find_def_from_top label 364
2025-01-05 16:51:35,948 - DEBUG - idom 362 from label 364
2025-01-05 16:51:35,949 - DEBUG - find_def_from_bottom label 362
2025-01-05 16:51:35,950 - DEBUG - find_def_from_top label 362
2025-01-05 16:51:35,951 - DEBUG - idom 234 from label 362
2025-01-05 16:51:35,952 - DEBUG - find_def_from_bottom label 234
2025-01-05 16:51:35,953 - DEBUG - replaced with: $378binary_subscr.10 = getitem(value=window.1, index=k.1, fn=<built-in function getitem>)
2025-01-05 16:51:35,954 - DEBUG - on stmt: $const386.14 = const(int, 2)
2025-01-05 16:51:35,955 - DEBUG - on stmt: $388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:35,957 - DEBUG - on stmt: $390binary_add.16 = i.1 + $388binary_floor_divide.15
2025-01-05 16:51:35,958 - DEBUG - on stmt: $394binary_subtract.18 = $390binary_add.16 - k.1
2025-01-05 16:51:35,960 - DEBUG - on stmt: $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:35,961 - DEBUG - on stmt: $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19
2025-01-05 16:51:35,963 - DEBUG - on stmt: $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:35,966 - DEBUG - on stmt: localscore[i.1] = $400inplace_add.21
2025-01-05 16:51:35,967 - DEBUG - on stmt: jump 362
2025-01-05 16:51:35,968 - DEBUG - ==== SSA block rewrite pass on 410
2025-01-05 16:51:35,969 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001485FEE0>
2025-01-05 16:51:35,970 - DEBUG - on stmt: jump 232
2025-01-05 16:51:35,972 - DEBUG - ==== SSA block rewrite pass on 412
2025-01-05 16:51:35,972 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000000001485FEE0>
2025-01-05 16:51:35,974 - DEBUG - on stmt: $const412.0 = const(NoneType, None)
2025-01-05 16:51:35,975 - DEBUG - on stmt: $414return_value.1 = cast(value=$const412.0)
2025-01-05 16:51:35,976 - DEBUG - on stmt: return $414return_value.1
2025-01-05 16:51:35,977 - DEBUG - Fix SSA violator on var K
2025-01-05 16:51:35,978 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:35,979 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FAD00>
2025-01-05 16:51:35,981 - DEBUG - on stmt: onset_envelope = arg(0, name=onset_envelope)
2025-01-05 16:51:35,982 - DEBUG - on stmt: frames_per_beat = arg(1, name=frames_per_beat)
2025-01-05 16:51:35,984 - DEBUG - on stmt: localscore = arg(2, name=localscore)
2025-01-05 16:51:35,985 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:35,987 - DEBUG - on stmt: N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,989 - DEBUG - on stmt: $10load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:35,991 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,993 - DEBUG - on stmt: $const16.6 = const(int, 1)
2025-01-05 16:51:35,994 - DEBUG - on stmt: $18compare_op.7 = $14call_function.5 == $const16.6
2025-01-05 16:51:35,995 - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-01-05 16:51:35,997 - DEBUG - on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:35,999 - DEBUG - on stmt: branch $20pred, 22, 202
2025-01-05 16:51:36,000 - DEBUG - ==== SSA block rewrite pass on 22
2025-01-05 16:51:36,001 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FAD00>
2025-01-05 16:51:36,003 - DEBUG - on stmt: $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:36,005 - DEBUG - on stmt: $24load_method.1 = getattr(value=$22load_global.0, attr=exp)
2025-01-05 16:51:36,007 - DEBUG - on stmt: $const26.2 = const(float, -0.5)
2025-01-05 16:51:36,008 - DEBUG - on stmt: $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:36,010 - DEBUG - on stmt: $30load_method.4 = getattr(value=$28load_global.3, attr=arange)
2025-01-05 16:51:36,012 - DEBUG - on stmt: $const34.6 = const(int, 0)
2025-01-05 16:51:36,014 - DEBUG - on stmt: $36binary_subscr.7 = static_getitem(value=frames_per_beat, index=0, index_var=$const34.6, fn=<built-in function getitem>)
2025-01-05 16:51:36,016 - DEBUG - on stmt: $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7)
2025-01-05 16:51:36,017 - DEBUG - on stmt: $const42.10 = const(int, 0)
2025-01-05 16:51:36,018 - DEBUG - on stmt: $44binary_subscr.11 = static_getitem(value=frames_per_beat, index=0, index_var=$const42.10, fn=<built-in function getitem>)
2025-01-05 16:51:36,020 - DEBUG - on stmt: $const46.12 = const(int, 1)
2025-01-05 16:51:36,021 - DEBUG - on stmt: $48binary_add.13 = $44binary_subscr.11 + $const46.12
2025-01-05 16:51:36,023 - DEBUG - on stmt: $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,025 - DEBUG - on stmt: $const52.15 = const(float, 32.0)
2025-01-05 16:51:36,026 - DEBUG - on stmt: $54binary_multiply.16 = $50call_method.14 * $const52.15
2025-01-05 16:51:36,028 - DEBUG - on stmt: $const58.18 = const(int, 0)
2025-01-05 16:51:36,029 - DEBUG - on stmt: $60binary_subscr.19 = static_getitem(value=frames_per_beat, index=0, index_var=$const58.18, fn=<built-in function getitem>)
2025-01-05 16:51:36,031 - DEBUG - on stmt: $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19
2025-01-05 16:51:36,033 - DEBUG - on stmt: $const64.21 = const(int, 2)
2025-01-05 16:51:36,034 - DEBUG - on stmt: $66binary_power.22 = $62binary_true_divide.20 ** $const64.21
2025-01-05 16:51:36,035 - DEBUG - on stmt: $68binary_multiply.23 = $const26.2 * $66binary_power.22
2025-01-05 16:51:36,037 - DEBUG - on stmt: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,039 - DEBUG - on stmt: $74load_global.25 = global(len: <built-in function len>)
2025-01-05 16:51:36,041 - DEBUG - on stmt: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,043 - DEBUG - first assign: K
2025-01-05 16:51:36,044 - DEBUG - replaced with: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,046 - DEBUG - on stmt: $82load_global.28 = global(range: <class 'range'>)
2025-01-05 16:51:36,048 - DEBUG - on stmt: $84load_global.29 = global(len: <built-in function len>)
2025-01-05 16:51:36,050 - DEBUG - on stmt: $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,052 - DEBUG - on stmt: $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,054 - DEBUG - on stmt: $92get_iter.33 = getiter(value=$90call_function.32)
2025-01-05 16:51:36,055 - DEBUG - on stmt: $phi94.0 = $92get_iter.33
2025-01-05 16:51:36,056 - DEBUG - on stmt: jump 94
2025-01-05 16:51:36,057 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:36,058 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FAD00>
2025-01-05 16:51:36,060 - DEBUG - on stmt: $94for_iter.1 = iternext(value=$phi94.0)
2025-01-05 16:51:36,062 - DEBUG - on stmt: $94for_iter.2 = pair_first(value=$94for_iter.1)
2025-01-05 16:51:36,064 - DEBUG - on stmt: $94for_iter.3 = pair_second(value=$94for_iter.1)
2025-01-05 16:51:36,066 - DEBUG - on stmt: $phi96.1 = $94for_iter.2
2025-01-05 16:51:36,067 - DEBUG - on stmt: branch $94for_iter.3, 96, 200
2025-01-05 16:51:36,068 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:36,069 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FAD00>
2025-01-05 16:51:36,070 - DEBUG - on stmt: i = $phi96.1
2025-01-05 16:51:36,071 - DEBUG - on stmt: $const98.2 = const(float, 0.0)
2025-01-05 16:51:36,072 - DEBUG - on stmt: localscore[i] = $const98.2
2025-01-05 16:51:36,073 - DEBUG - on stmt: $106load_global.5 = global(range: <class 'range'>)
2025-01-05 16:51:36,074 - DEBUG - on stmt: $108load_global.6 = global(max: <built-in function max>)
2025-01-05 16:51:36,076 - DEBUG - on stmt: $const110.7 = const(int, 0)
2025-01-05 16:51:36,077 - DEBUG - on stmt: $const116.10 = const(int, 2)
2025-01-05 16:51:36,078 - DEBUG - on stmt: $118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:36,080 - DEBUG - on stmt: $120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:36,081 - DEBUG - on stmt: $124binary_subtract.14 = $120binary_add.12 - N
2025-01-05 16:51:36,083 - DEBUG - on stmt: $const126.15 = const(int, 1)
2025-01-05 16:51:36,084 - DEBUG - on stmt: $128binary_add.16 = $124binary_subtract.14 + $const126.15
2025-01-05 16:51:36,085 - DEBUG - on stmt: $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,088 - DEBUG - on stmt: $132load_global.18 = global(min: <built-in function min>)
2025-01-05 16:51:36,089 - DEBUG - on stmt: $const138.21 = const(int, 2)
2025-01-05 16:51:36,090 - DEBUG - on stmt: $140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:36,092 - DEBUG - on stmt: $142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:36,094 - DEBUG - on stmt: $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,097 - DEBUG - on stmt: $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,100 - DEBUG - on stmt: $150get_iter.27 = getiter(value=$148call_function.26)
2025-01-05 16:51:36,101 - DEBUG - on stmt: $phi152.1 = $150get_iter.27
2025-01-05 16:51:36,102 - DEBUG - on stmt: jump 152
2025-01-05 16:51:36,103 - DEBUG - ==== SSA block rewrite pass on 152
2025-01-05 16:51:36,104 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FAD00>
2025-01-05 16:51:36,106 - DEBUG - on stmt: $152for_iter.2 = iternext(value=$phi152.1)
2025-01-05 16:51:36,107 - DEBUG - on stmt: $152for_iter.3 = pair_first(value=$152for_iter.2)
2025-01-05 16:51:36,109 - DEBUG - on stmt: $152for_iter.4 = pair_second(value=$152for_iter.2)
2025-01-05 16:51:36,111 - DEBUG - on stmt: $phi154.2 = $152for_iter.3
2025-01-05 16:51:36,112 - DEBUG - on stmt: branch $152for_iter.4, 154, 198
2025-01-05 16:51:36,112 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:36,114 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FAD00>
2025-01-05 16:51:36,115 - DEBUG - on stmt: k = $phi154.2
2025-01-05 16:51:36,116 - DEBUG - on stmt: $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:36,117 - DEBUG - on stmt: $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:36,119 - DEBUG - on stmt: $const176.14 = const(int, 2)
2025-01-05 16:51:36,120 - DEBUG - on stmt: $178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:36,121 - DEBUG - on stmt: $180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:36,123 - DEBUG - on stmt: $184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:36,124 - DEBUG - on stmt: $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:36,126 - DEBUG - on stmt: $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19
2025-01-05 16:51:36,128 - DEBUG - on stmt: $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:36,131 - DEBUG - on stmt: localscore[i] = $190inplace_add.21
2025-01-05 16:51:36,132 - DEBUG - on stmt: jump 152
2025-01-05 16:51:36,133 - DEBUG - ==== SSA block rewrite pass on 198
2025-01-05 16:51:36,134 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FAD00>
2025-01-05 16:51:36,135 - DEBUG - on stmt: jump 94
2025-01-05 16:51:36,136 - DEBUG - ==== SSA block rewrite pass on 200
2025-01-05 16:51:36,137 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FAD00>
2025-01-05 16:51:36,139 - DEBUG - on stmt: jump 412
2025-01-05 16:51:36,140 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-05 16:51:36,141 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FAD00>
2025-01-05 16:51:36,142 - DEBUG - on stmt: $202load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:36,144 - DEBUG - on stmt: $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,146 - DEBUG - on stmt: $208load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:36,148 - DEBUG - on stmt: $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,150 - DEBUG - on stmt: $214compare_op.6 = $206call_function.2 == $212call_function.5
2025-01-05 16:51:36,152 - DEBUG - on stmt: bool218 = global(bool: <class 'bool'>)
2025-01-05 16:51:36,153 - DEBUG - on stmt: $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,155 - DEBUG - on stmt: branch $218pred, 220, 412
2025-01-05 16:51:36,156 - DEBUG - ==== SSA block rewrite pass on 220
2025-01-05 16:51:36,157 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FAD00>
2025-01-05 16:51:36,159 - DEBUG - on stmt: $220load_global.0 = global(range: <class 'range'>)
2025-01-05 16:51:36,160 - DEBUG - on stmt: $222load_global.1 = global(len: <built-in function len>)
2025-01-05 16:51:36,162 - DEBUG - on stmt: $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,164 - DEBUG - on stmt: $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,166 - DEBUG - on stmt: $230get_iter.5 = getiter(value=$228call_function.4)
2025-01-05 16:51:36,168 - DEBUG - on stmt: $phi232.0 = $230get_iter.5
2025-01-05 16:51:36,169 - DEBUG - on stmt: jump 232
2025-01-05 16:51:36,170 - DEBUG - ==== SSA block rewrite pass on 232
2025-01-05 16:51:36,171 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FAD00>
2025-01-05 16:51:36,173 - DEBUG - on stmt: $232for_iter.1 = iternext(value=$phi232.0)
2025-01-05 16:51:36,174 - DEBUG - on stmt: $232for_iter.2 = pair_first(value=$232for_iter.1)
2025-01-05 16:51:36,176 - DEBUG - on stmt: $232for_iter.3 = pair_second(value=$232for_iter.1)
2025-01-05 16:51:36,177 - DEBUG - on stmt: $phi234.1 = $232for_iter.2
2025-01-05 16:51:36,178 - DEBUG - on stmt: branch $232for_iter.3, 234, 412
2025-01-05 16:51:36,179 - DEBUG - ==== SSA block rewrite pass on 234
2025-01-05 16:51:36,180 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FAD00>
2025-01-05 16:51:36,182 - DEBUG - on stmt: i.1 = $phi234.1
2025-01-05 16:51:36,183 - DEBUG - on stmt: $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:36,185 - DEBUG - on stmt: $238load_method.3 = getattr(value=$236load_global.2, attr=exp)
2025-01-05 16:51:36,186 - DEBUG - on stmt: $const240.4 = const(float, -0.5)
2025-01-05 16:51:36,187 - DEBUG - on stmt: $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:36,189 - DEBUG - on stmt: $244load_method.6 = getattr(value=$242load_global.5, attr=arange)
2025-01-05 16:51:36,191 - DEBUG - on stmt: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:36,192 - DEBUG - on stmt: $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9)
2025-01-05 16:51:36,194 - DEBUG - on stmt: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:36,196 - DEBUG - on stmt: $const260.14 = const(int, 1)
2025-01-05 16:51:36,197 - DEBUG - on stmt: $262binary_add.15 = $258binary_subscr.13 + $const260.14
2025-01-05 16:51:36,199 - DEBUG - on stmt: $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,201 - DEBUG - on stmt: $const266.17 = const(float, 32.0)
2025-01-05 16:51:36,202 - DEBUG - on stmt: $268binary_multiply.18 = $264call_method.16 * $const266.17
2025-01-05 16:51:36,204 - DEBUG - on stmt: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:36,206 - DEBUG - on stmt: $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21
2025-01-05 16:51:36,207 - DEBUG - on stmt: $const278.23 = const(int, 2)
2025-01-05 16:51:36,208 - DEBUG - on stmt: $280binary_power.24 = $276binary_true_divide.22 ** $const278.23
2025-01-05 16:51:36,210 - DEBUG - on stmt: $282binary_multiply.25 = $const240.4 * $280binary_power.24
2025-01-05 16:51:36,211 - DEBUG - on stmt: window.1 = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,214 - DEBUG - on stmt: $const288.27 = const(int, 2)
2025-01-05 16:51:36,215 - DEBUG - on stmt: $290load_global.28 = global(int: <class 'int'>)
2025-01-05 16:51:36,217 - DEBUG - on stmt: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:36,219 - DEBUG - on stmt: $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,221 - DEBUG - on stmt: $300binary_multiply.33 = $const288.27 * $298call_function.32
2025-01-05 16:51:36,223 - DEBUG - on stmt: $const302.34 = const(int, 1)
2025-01-05 16:51:36,224 - DEBUG - on stmt: K = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:36,225 - DEBUG - replaced with: K.1 = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:36,227 - DEBUG - on stmt: $const308.36 = const(float, 0.0)
2025-01-05 16:51:36,228 - DEBUG - on stmt: localscore[i.1] = $const308.36
2025-01-05 16:51:36,228 - DEBUG - on stmt: $316load_global.39 = global(range: <class 'range'>)
2025-01-05 16:51:36,230 - DEBUG - on stmt: $318load_global.40 = global(max: <built-in function max>)
2025-01-05 16:51:36,232 - DEBUG - on stmt: $const320.41 = const(int, 0)
2025-01-05 16:51:36,233 - DEBUG - on stmt: $const326.44 = const(int, 2)
2025-01-05 16:51:36,234 - DEBUG - on stmt: $328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:36,235 - DEBUG - on stmt: $330binary_add.46 = i.1 + $328binary_floor_divide.45
2025-01-05 16:51:36,237 - DEBUG - on stmt: $334binary_subtract.48 = $330binary_add.46 - N
2025-01-05 16:51:36,238 - DEBUG - on stmt: $const336.49 = const(int, 1)
2025-01-05 16:51:36,239 - DEBUG - on stmt: $338binary_add.50 = $334binary_subtract.48 + $const336.49
2025-01-05 16:51:36,241 - DEBUG - on stmt: $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,243 - DEBUG - on stmt: $342load_global.52 = global(min: <built-in function min>)
2025-01-05 16:51:36,245 - DEBUG - on stmt: $const348.55 = const(int, 2)
2025-01-05 16:51:36,246 - DEBUG - on stmt: $350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:36,248 - DEBUG - on stmt: $352binary_add.57 = i.1 + $350binary_floor_divide.56
2025-01-05 16:51:36,249 - DEBUG - on stmt: $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,252 - DEBUG - on stmt: $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,255 - DEBUG - on stmt: $360get_iter.61 = getiter(value=$358call_function.60)
2025-01-05 16:51:36,257 - DEBUG - on stmt: $phi362.1 = $360get_iter.61
2025-01-05 16:51:36,258 - DEBUG - on stmt: jump 362
2025-01-05 16:51:36,259 - DEBUG - ==== SSA block rewrite pass on 362
2025-01-05 16:51:36,260 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FAD00>
2025-01-05 16:51:36,262 - DEBUG - on stmt: $362for_iter.2 = iternext(value=$phi362.1)
2025-01-05 16:51:36,263 - DEBUG - on stmt: $362for_iter.3 = pair_first(value=$362for_iter.2)
2025-01-05 16:51:36,265 - DEBUG - on stmt: $362for_iter.4 = pair_second(value=$362for_iter.2)
2025-01-05 16:51:36,266 - DEBUG - on stmt: $phi364.2 = $362for_iter.3
2025-01-05 16:51:36,268 - DEBUG - on stmt: branch $362for_iter.4, 364, 410
2025-01-05 16:51:36,268 - DEBUG - ==== SSA block rewrite pass on 364
2025-01-05 16:51:36,269 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FAD00>
2025-01-05 16:51:36,271 - DEBUG - on stmt: k.1 = $phi364.2
2025-01-05 16:51:36,272 - DEBUG - on stmt: $372binary_subscr.7 = getitem(value=localscore, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:36,273 - DEBUG - on stmt: $378binary_subscr.10 = getitem(value=window.1, index=k.1, fn=<built-in function getitem>)
2025-01-05 16:51:36,275 - DEBUG - on stmt: $const386.14 = const(int, 2)
2025-01-05 16:51:36,276 - DEBUG - on stmt: $388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:36,277 - DEBUG - on stmt: $390binary_add.16 = i.1 + $388binary_floor_divide.15
2025-01-05 16:51:36,279 - DEBUG - on stmt: $394binary_subtract.18 = $390binary_add.16 - k.1
2025-01-05 16:51:36,281 - DEBUG - on stmt: $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:36,282 - DEBUG - on stmt: $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19
2025-01-05 16:51:36,284 - DEBUG - on stmt: $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:36,286 - DEBUG - on stmt: localscore[i.1] = $400inplace_add.21
2025-01-05 16:51:36,287 - DEBUG - on stmt: jump 362
2025-01-05 16:51:36,289 - DEBUG - ==== SSA block rewrite pass on 410
2025-01-05 16:51:36,290 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FAD00>
2025-01-05 16:51:36,291 - DEBUG - on stmt: jump 232
2025-01-05 16:51:36,292 - DEBUG - ==== SSA block rewrite pass on 412
2025-01-05 16:51:36,293 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x00000000146FAD00>
2025-01-05 16:51:36,295 - DEBUG - on stmt: $const412.0 = const(NoneType, None)
2025-01-05 16:51:36,296 - DEBUG - on stmt: $414return_value.1 = cast(value=$const412.0)
2025-01-05 16:51:36,298 - DEBUG - on stmt: return $414return_value.1
2025-01-05 16:51:36,299 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {22: [<numba.core.ir.Assign object at 0x00000000147C2490>],
             234: [<numba.core.ir.Assign object at 0x0000000014C06E50>]})
2025-01-05 16:51:36,302 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:36,303 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014C06EE0>
2025-01-05 16:51:36,304 - DEBUG - on stmt: onset_envelope = arg(0, name=onset_envelope)
2025-01-05 16:51:36,306 - DEBUG - on stmt: frames_per_beat = arg(1, name=frames_per_beat)
2025-01-05 16:51:36,307 - DEBUG - on stmt: localscore = arg(2, name=localscore)
2025-01-05 16:51:36,309 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:36,310 - DEBUG - on stmt: N = call $2load_global.0(onset_envelope, func=$2load_global.0, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,312 - DEBUG - on stmt: $10load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:36,314 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(frames_per_beat, func=$10load_global.3, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,316 - DEBUG - on stmt: $const16.6 = const(int, 1)
2025-01-05 16:51:36,317 - DEBUG - on stmt: $18compare_op.7 = $14call_function.5 == $const16.6
2025-01-05 16:51:36,319 - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-01-05 16:51:36,320 - DEBUG - on stmt: $20pred = call bool20($18compare_op.7, func=bool20, args=(Var($18compare_op.7, beat.py:525),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,322 - DEBUG - on stmt: branch $20pred, 22, 202
2025-01-05 16:51:36,324 - DEBUG - ==== SSA block rewrite pass on 22
2025-01-05 16:51:36,325 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014C06EE0>
2025-01-05 16:51:36,326 - DEBUG - on stmt: $22load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:36,328 - DEBUG - on stmt: $24load_method.1 = getattr(value=$22load_global.0, attr=exp)
2025-01-05 16:51:36,330 - DEBUG - on stmt: $const26.2 = const(float, -0.5)
2025-01-05 16:51:36,331 - DEBUG - on stmt: $28load_global.3 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:36,333 - DEBUG - on stmt: $30load_method.4 = getattr(value=$28load_global.3, attr=arange)
2025-01-05 16:51:36,335 - DEBUG - on stmt: $const34.6 = const(int, 0)
2025-01-05 16:51:36,336 - DEBUG - on stmt: $36binary_subscr.7 = static_getitem(value=frames_per_beat, index=0, index_var=$const34.6, fn=<built-in function getitem>)
2025-01-05 16:51:36,338 - DEBUG - on stmt: $38unary_negative.8 = unary(fn=<built-in function neg>, value=$36binary_subscr.7)
2025-01-05 16:51:36,339 - DEBUG - on stmt: $const42.10 = const(int, 0)
2025-01-05 16:51:36,340 - DEBUG - on stmt: $44binary_subscr.11 = static_getitem(value=frames_per_beat, index=0, index_var=$const42.10, fn=<built-in function getitem>)
2025-01-05 16:51:36,342 - DEBUG - on stmt: $const46.12 = const(int, 1)
2025-01-05 16:51:36,343 - DEBUG - on stmt: $48binary_add.13 = $44binary_subscr.11 + $const46.12
2025-01-05 16:51:36,345 - DEBUG - on stmt: $50call_method.14 = call $30load_method.4($38unary_negative.8, $48binary_add.13, func=$30load_method.4, args=[Var($38unary_negative.8, beat.py:529), Var($48binary_add.13, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,348 - DEBUG - on stmt: $const52.15 = const(float, 32.0)
2025-01-05 16:51:36,349 - DEBUG - on stmt: $54binary_multiply.16 = $50call_method.14 * $const52.15
2025-01-05 16:51:36,351 - DEBUG - on stmt: $const58.18 = const(int, 0)
2025-01-05 16:51:36,352 - DEBUG - on stmt: $60binary_subscr.19 = static_getitem(value=frames_per_beat, index=0, index_var=$const58.18, fn=<built-in function getitem>)
2025-01-05 16:51:36,354 - DEBUG - on stmt: $62binary_true_divide.20 = $54binary_multiply.16 / $60binary_subscr.19
2025-01-05 16:51:36,355 - DEBUG - on stmt: $const64.21 = const(int, 2)
2025-01-05 16:51:36,356 - DEBUG - on stmt: $66binary_power.22 = $62binary_true_divide.20 ** $const64.21
2025-01-05 16:51:36,358 - DEBUG - on stmt: $68binary_multiply.23 = $const26.2 * $66binary_power.22
2025-01-05 16:51:36,359 - DEBUG - on stmt: window = call $24load_method.1($68binary_multiply.23, func=$24load_method.1, args=[Var($68binary_multiply.23, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,361 - DEBUG - on stmt: $74load_global.25 = global(len: <built-in function len>)
2025-01-05 16:51:36,363 - DEBUG - on stmt: K = call $74load_global.25(window, func=$74load_global.25, args=[Var(window, beat.py:529)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,366 - DEBUG - on stmt: $82load_global.28 = global(range: <class 'range'>)
2025-01-05 16:51:36,368 - DEBUG - on stmt: $84load_global.29 = global(len: <built-in function len>)
2025-01-05 16:51:36,370 - DEBUG - on stmt: $88call_function.31 = call $84load_global.29(onset_envelope, func=$84load_global.29, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,372 - DEBUG - on stmt: $90call_function.32 = call $82load_global.28($88call_function.31, func=$82load_global.28, args=[Var($88call_function.31, beat.py:532)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,374 - DEBUG - on stmt: $92get_iter.33 = getiter(value=$90call_function.32)
2025-01-05 16:51:36,376 - DEBUG - on stmt: $phi94.0 = $92get_iter.33
2025-01-05 16:51:36,377 - DEBUG - on stmt: jump 94
2025-01-05 16:51:36,378 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-05 16:51:36,379 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014C06EE0>
2025-01-05 16:51:36,380 - DEBUG - on stmt: $94for_iter.1 = iternext(value=$phi94.0)
2025-01-05 16:51:36,382 - DEBUG - on stmt: $94for_iter.2 = pair_first(value=$94for_iter.1)
2025-01-05 16:51:36,384 - DEBUG - on stmt: $94for_iter.3 = pair_second(value=$94for_iter.1)
2025-01-05 16:51:36,385 - DEBUG - on stmt: $phi96.1 = $94for_iter.2
2025-01-05 16:51:36,386 - DEBUG - on stmt: branch $94for_iter.3, 96, 200
2025-01-05 16:51:36,387 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:36,388 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014C06EE0>
2025-01-05 16:51:36,389 - DEBUG - on stmt: i = $phi96.1
2025-01-05 16:51:36,390 - DEBUG - on stmt: $const98.2 = const(float, 0.0)
2025-01-05 16:51:36,391 - DEBUG - on stmt: localscore[i] = $const98.2
2025-01-05 16:51:36,392 - DEBUG - on stmt: $106load_global.5 = global(range: <class 'range'>)
2025-01-05 16:51:36,393 - DEBUG - on stmt: $108load_global.6 = global(max: <built-in function max>)
2025-01-05 16:51:36,395 - DEBUG - on stmt: $const110.7 = const(int, 0)
2025-01-05 16:51:36,396 - DEBUG - on stmt: $const116.10 = const(int, 2)
2025-01-05 16:51:36,397 - DEBUG - on stmt: $118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:36,399 - DEBUG - find_def var='K' stmt=$118binary_floor_divide.11 = K // $const116.10
2025-01-05 16:51:36,400 - DEBUG - find_def_from_top label 96
2025-01-05 16:51:36,401 - DEBUG - idom 94 from label 96
2025-01-05 16:51:36,402 - DEBUG - find_def_from_bottom label 94
2025-01-05 16:51:36,403 - DEBUG - find_def_from_top label 94
2025-01-05 16:51:36,404 - DEBUG - idom 22 from label 94
2025-01-05 16:51:36,405 - DEBUG - find_def_from_bottom label 22
2025-01-05 16:51:36,406 - DEBUG - on stmt: $120binary_add.12 = i + $118binary_floor_divide.11
2025-01-05 16:51:36,407 - DEBUG - on stmt: $124binary_subtract.14 = $120binary_add.12 - N
2025-01-05 16:51:36,409 - DEBUG - on stmt: $const126.15 = const(int, 1)
2025-01-05 16:51:36,410 - DEBUG - on stmt: $128binary_add.16 = $124binary_subtract.14 + $const126.15
2025-01-05 16:51:36,411 - DEBUG - on stmt: $130call_function.17 = call $108load_global.6($const110.7, $128binary_add.16, func=$108load_global.6, args=[Var($const110.7, beat.py:536), Var($128binary_add.16, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,415 - DEBUG - on stmt: $132load_global.18 = global(min: <built-in function min>)
2025-01-05 16:51:36,416 - DEBUG - on stmt: $const138.21 = const(int, 2)
2025-01-05 16:51:36,417 - DEBUG - on stmt: $140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:36,418 - DEBUG - find_def var='K' stmt=$140binary_floor_divide.22 = K // $const138.21
2025-01-05 16:51:36,420 - DEBUG - find_def_from_top label 96
2025-01-05 16:51:36,421 - DEBUG - idom 94 from label 96
2025-01-05 16:51:36,422 - DEBUG - find_def_from_bottom label 94
2025-01-05 16:51:36,423 - DEBUG - find_def_from_top label 94
2025-01-05 16:51:36,424 - DEBUG - idom 22 from label 94
2025-01-05 16:51:36,425 - DEBUG - find_def_from_bottom label 22
2025-01-05 16:51:36,426 - DEBUG - on stmt: $142binary_add.23 = i + $140binary_floor_divide.22
2025-01-05 16:51:36,427 - DEBUG - on stmt: $146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,430 - DEBUG - find_def var='K' stmt=$146call_function.25 = call $132load_global.18($142binary_add.23, K, func=$132load_global.18, args=[Var($142binary_add.23, beat.py:536), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,433 - DEBUG - find_def_from_top label 96
2025-01-05 16:51:36,434 - DEBUG - idom 94 from label 96
2025-01-05 16:51:36,435 - DEBUG - find_def_from_bottom label 94
2025-01-05 16:51:36,436 - DEBUG - find_def_from_top label 94
2025-01-05 16:51:36,437 - DEBUG - idom 22 from label 94
2025-01-05 16:51:36,438 - DEBUG - find_def_from_bottom label 22
2025-01-05 16:51:36,439 - DEBUG - on stmt: $148call_function.26 = call $106load_global.5($130call_function.17, $146call_function.25, func=$106load_global.5, args=[Var($130call_function.17, beat.py:536), Var($146call_function.25, beat.py:536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,441 - DEBUG - on stmt: $150get_iter.27 = getiter(value=$148call_function.26)
2025-01-05 16:51:36,443 - DEBUG - on stmt: $phi152.1 = $150get_iter.27
2025-01-05 16:51:36,444 - DEBUG - on stmt: jump 152
2025-01-05 16:51:36,445 - DEBUG - ==== SSA block rewrite pass on 152
2025-01-05 16:51:36,447 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014C06EE0>
2025-01-05 16:51:36,448 - DEBUG - on stmt: $152for_iter.2 = iternext(value=$phi152.1)
2025-01-05 16:51:36,450 - DEBUG - on stmt: $152for_iter.3 = pair_first(value=$152for_iter.2)
2025-01-05 16:51:36,452 - DEBUG - on stmt: $152for_iter.4 = pair_second(value=$152for_iter.2)
2025-01-05 16:51:36,453 - DEBUG - on stmt: $phi154.2 = $152for_iter.3
2025-01-05 16:51:36,454 - DEBUG - on stmt: branch $152for_iter.4, 154, 198
2025-01-05 16:51:36,455 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-05 16:51:36,456 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014C06EE0>
2025-01-05 16:51:36,457 - DEBUG - on stmt: k = $phi154.2
2025-01-05 16:51:36,458 - DEBUG - on stmt: $162binary_subscr.7 = getitem(value=localscore, index=i, fn=<built-in function getitem>)
2025-01-05 16:51:36,460 - DEBUG - on stmt: $168binary_subscr.10 = getitem(value=window, index=k, fn=<built-in function getitem>)
2025-01-05 16:51:36,461 - DEBUG - on stmt: $const176.14 = const(int, 2)
2025-01-05 16:51:36,462 - DEBUG - on stmt: $178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:36,464 - DEBUG - find_def var='K' stmt=$178binary_floor_divide.15 = K // $const176.14
2025-01-05 16:51:36,466 - DEBUG - find_def_from_top label 154
2025-01-05 16:51:36,467 - DEBUG - idom 152 from label 154
2025-01-05 16:51:36,468 - DEBUG - find_def_from_bottom label 152
2025-01-05 16:51:36,468 - DEBUG - find_def_from_top label 152
2025-01-05 16:51:36,469 - DEBUG - idom 96 from label 152
2025-01-05 16:51:36,471 - DEBUG - find_def_from_bottom label 96
2025-01-05 16:51:36,471 - DEBUG - find_def_from_top label 96
2025-01-05 16:51:36,472 - DEBUG - idom 94 from label 96
2025-01-05 16:51:36,473 - DEBUG - find_def_from_bottom label 94
2025-01-05 16:51:36,474 - DEBUG - find_def_from_top label 94
2025-01-05 16:51:36,475 - DEBUG - idom 22 from label 94
2025-01-05 16:51:36,476 - DEBUG - find_def_from_bottom label 22
2025-01-05 16:51:36,477 - DEBUG - on stmt: $180binary_add.16 = i + $178binary_floor_divide.15
2025-01-05 16:51:36,478 - DEBUG - on stmt: $184binary_subtract.18 = $180binary_add.16 - k
2025-01-05 16:51:36,480 - DEBUG - on stmt: $186binary_subscr.19 = getitem(value=onset_envelope, index=$184binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:36,482 - DEBUG - on stmt: $188binary_multiply.20 = $168binary_subscr.10 * $186binary_subscr.19
2025-01-05 16:51:36,483 - DEBUG - on stmt: $190inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$162binary_subscr.7, rhs=$188binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:36,486 - DEBUG - on stmt: localscore[i] = $190inplace_add.21
2025-01-05 16:51:36,487 - DEBUG - on stmt: jump 152
2025-01-05 16:51:36,489 - DEBUG - ==== SSA block rewrite pass on 198
2025-01-05 16:51:36,490 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014C06EE0>
2025-01-05 16:51:36,491 - DEBUG - on stmt: jump 94
2025-01-05 16:51:36,492 - DEBUG - ==== SSA block rewrite pass on 200
2025-01-05 16:51:36,493 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014C06EE0>
2025-01-05 16:51:36,494 - DEBUG - on stmt: jump 412
2025-01-05 16:51:36,495 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-05 16:51:36,496 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014C06EE0>
2025-01-05 16:51:36,498 - DEBUG - on stmt: $202load_global.0 = global(len: <built-in function len>)
2025-01-05 16:51:36,500 - DEBUG - on stmt: $206call_function.2 = call $202load_global.0(frames_per_beat, func=$202load_global.0, args=[Var(frames_per_beat, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,502 - DEBUG - on stmt: $208load_global.3 = global(len: <built-in function len>)
2025-01-05 16:51:36,503 - DEBUG - on stmt: $212call_function.5 = call $208load_global.3(onset_envelope, func=$208load_global.3, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,506 - DEBUG - on stmt: $214compare_op.6 = $206call_function.2 == $212call_function.5
2025-01-05 16:51:36,507 - DEBUG - on stmt: bool218 = global(bool: <class 'bool'>)
2025-01-05 16:51:36,509 - DEBUG - on stmt: $218pred = call bool218($214compare_op.6, func=bool218, args=(Var($214compare_op.6, beat.py:539),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,511 - DEBUG - on stmt: branch $218pred, 220, 412
2025-01-05 16:51:36,512 - DEBUG - ==== SSA block rewrite pass on 220
2025-01-05 16:51:36,513 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014C06EE0>
2025-01-05 16:51:36,514 - DEBUG - on stmt: $220load_global.0 = global(range: <class 'range'>)
2025-01-05 16:51:36,516 - DEBUG - on stmt: $222load_global.1 = global(len: <built-in function len>)
2025-01-05 16:51:36,518 - DEBUG - on stmt: $226call_function.3 = call $222load_global.1(onset_envelope, func=$222load_global.1, args=[Var(onset_envelope, beat.py:511)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,520 - DEBUG - on stmt: $228call_function.4 = call $220load_global.0($226call_function.3, func=$220load_global.0, args=[Var($226call_function.3, beat.py:542)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,523 - DEBUG - on stmt: $230get_iter.5 = getiter(value=$228call_function.4)
2025-01-05 16:51:36,524 - DEBUG - on stmt: $phi232.0 = $230get_iter.5
2025-01-05 16:51:36,526 - DEBUG - on stmt: jump 232
2025-01-05 16:51:36,526 - DEBUG - ==== SSA block rewrite pass on 232
2025-01-05 16:51:36,527 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014C06EE0>
2025-01-05 16:51:36,529 - DEBUG - on stmt: $232for_iter.1 = iternext(value=$phi232.0)
2025-01-05 16:51:36,531 - DEBUG - on stmt: $232for_iter.2 = pair_first(value=$232for_iter.1)
2025-01-05 16:51:36,532 - DEBUG - on stmt: $232for_iter.3 = pair_second(value=$232for_iter.1)
2025-01-05 16:51:36,534 - DEBUG - on stmt: $phi234.1 = $232for_iter.2
2025-01-05 16:51:36,537 - DEBUG - on stmt: branch $232for_iter.3, 234, 412
2025-01-05 16:51:36,538 - DEBUG - ==== SSA block rewrite pass on 234
2025-01-05 16:51:36,539 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014C06EE0>
2025-01-05 16:51:36,540 - DEBUG - on stmt: i.1 = $phi234.1
2025-01-05 16:51:36,541 - DEBUG - on stmt: $236load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:36,543 - DEBUG - on stmt: $238load_method.3 = getattr(value=$236load_global.2, attr=exp)
2025-01-05 16:51:36,545 - DEBUG - on stmt: $const240.4 = const(float, -0.5)
2025-01-05 16:51:36,546 - DEBUG - on stmt: $242load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:36,548 - DEBUG - on stmt: $244load_method.6 = getattr(value=$242load_global.5, attr=arange)
2025-01-05 16:51:36,550 - DEBUG - on stmt: $250binary_subscr.9 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:36,704 - DEBUG - on stmt: $252unary_negative.10 = unary(fn=<built-in function neg>, value=$250binary_subscr.9)
2025-01-05 16:51:36,706 - DEBUG - on stmt: $258binary_subscr.13 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:36,708 - DEBUG - on stmt: $const260.14 = const(int, 1)
2025-01-05 16:51:36,709 - DEBUG - on stmt: $262binary_add.15 = $258binary_subscr.13 + $const260.14
2025-01-05 16:51:36,710 - DEBUG - on stmt: $264call_method.16 = call $244load_method.6($252unary_negative.10, $262binary_add.15, func=$244load_method.6, args=[Var($252unary_negative.10, beat.py:543), Var($262binary_add.15, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,713 - DEBUG - on stmt: $const266.17 = const(float, 32.0)
2025-01-05 16:51:36,714 - DEBUG - on stmt: $268binary_multiply.18 = $264call_method.16 * $const266.17
2025-01-05 16:51:36,716 - DEBUG - on stmt: $274binary_subscr.21 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:36,717 - DEBUG - on stmt: $276binary_true_divide.22 = $268binary_multiply.18 / $274binary_subscr.21
2025-01-05 16:51:36,719 - DEBUG - on stmt: $const278.23 = const(int, 2)
2025-01-05 16:51:36,720 - DEBUG - on stmt: $280binary_power.24 = $276binary_true_divide.22 ** $const278.23
2025-01-05 16:51:36,722 - DEBUG - on stmt: $282binary_multiply.25 = $const240.4 * $280binary_power.24
2025-01-05 16:51:36,723 - DEBUG - on stmt: window.1 = call $238load_method.3($282binary_multiply.25, func=$238load_method.3, args=[Var($282binary_multiply.25, beat.py:543)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,725 - DEBUG - on stmt: $const288.27 = const(int, 2)
2025-01-05 16:51:36,726 - DEBUG - on stmt: $290load_global.28 = global(int: <class 'int'>)
2025-01-05 16:51:36,728 - DEBUG - on stmt: $296binary_subscr.31 = getitem(value=frames_per_beat, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:36,729 - DEBUG - on stmt: $298call_function.32 = call $290load_global.28($296binary_subscr.31, func=$290load_global.28, args=[Var($296binary_subscr.31, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,732 - DEBUG - on stmt: $300binary_multiply.33 = $const288.27 * $298call_function.32
2025-01-05 16:51:36,734 - DEBUG - on stmt: $const302.34 = const(int, 1)
2025-01-05 16:51:36,735 - DEBUG - on stmt: K.1 = $300binary_multiply.33 + $const302.34
2025-01-05 16:51:36,736 - DEBUG - on stmt: $const308.36 = const(float, 0.0)
2025-01-05 16:51:36,737 - DEBUG - on stmt: localscore[i.1] = $const308.36
2025-01-05 16:51:36,738 - DEBUG - on stmt: $316load_global.39 = global(range: <class 'range'>)
2025-01-05 16:51:36,739 - DEBUG - on stmt: $318load_global.40 = global(max: <built-in function max>)
2025-01-05 16:51:36,741 - DEBUG - on stmt: $const320.41 = const(int, 0)
2025-01-05 16:51:36,742 - DEBUG - on stmt: $const326.44 = const(int, 2)
2025-01-05 16:51:36,743 - DEBUG - on stmt: $328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:36,745 - DEBUG - find_def var='K' stmt=$328binary_floor_divide.45 = K // $const326.44
2025-01-05 16:51:36,747 - DEBUG - replaced with: $328binary_floor_divide.45 = K.1 // $const326.44
2025-01-05 16:51:36,749 - DEBUG - on stmt: $330binary_add.46 = i.1 + $328binary_floor_divide.45
2025-01-05 16:51:36,751 - DEBUG - on stmt: $334binary_subtract.48 = $330binary_add.46 - N
2025-01-05 16:51:36,753 - DEBUG - on stmt: $const336.49 = const(int, 1)
2025-01-05 16:51:36,754 - DEBUG - on stmt: $338binary_add.50 = $334binary_subtract.48 + $const336.49
2025-01-05 16:51:36,756 - DEBUG - on stmt: $340call_function.51 = call $318load_global.40($const320.41, $338binary_add.50, func=$318load_global.40, args=[Var($const320.41, beat.py:547), Var($338binary_add.50, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,759 - DEBUG - on stmt: $342load_global.52 = global(min: <built-in function min>)
2025-01-05 16:51:36,761 - DEBUG - on stmt: $const348.55 = const(int, 2)
2025-01-05 16:51:36,762 - DEBUG - on stmt: $350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:36,764 - DEBUG - find_def var='K' stmt=$350binary_floor_divide.56 = K // $const348.55
2025-01-05 16:51:36,766 - DEBUG - replaced with: $350binary_floor_divide.56 = K.1 // $const348.55
2025-01-05 16:51:36,767 - DEBUG - on stmt: $352binary_add.57 = i.1 + $350binary_floor_divide.56
2025-01-05 16:51:36,769 - DEBUG - on stmt: $356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,771 - DEBUG - find_def var='K' stmt=$356call_function.59 = call $342load_global.52($352binary_add.57, K, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K, beat.py:530)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,774 - DEBUG - replaced with: $356call_function.59 = call $342load_global.52($352binary_add.57, K.1, func=$342load_global.52, args=[Var($352binary_add.57, beat.py:547), Var(K.1, beat.py:544)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,777 - DEBUG - on stmt: $358call_function.60 = call $316load_global.39($340call_function.51, $356call_function.59, func=$316load_global.39, args=[Var($340call_function.51, beat.py:547), Var($356call_function.59, beat.py:547)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:36,780 - DEBUG - on stmt: $360get_iter.61 = getiter(value=$358call_function.60)
2025-01-05 16:51:36,782 - DEBUG - on stmt: $phi362.1 = $360get_iter.61
2025-01-05 16:51:36,784 - DEBUG - on stmt: jump 362
2025-01-05 16:51:36,784 - DEBUG - ==== SSA block rewrite pass on 362
2025-01-05 16:51:36,785 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014C06EE0>
2025-01-05 16:51:36,787 - DEBUG - on stmt: $362for_iter.2 = iternext(value=$phi362.1)
2025-01-05 16:51:36,788 - DEBUG - on stmt: $362for_iter.3 = pair_first(value=$362for_iter.2)
2025-01-05 16:51:36,790 - DEBUG - on stmt: $362for_iter.4 = pair_second(value=$362for_iter.2)
2025-01-05 16:51:36,791 - DEBUG - on stmt: $phi364.2 = $362for_iter.3
2025-01-05 16:51:36,793 - DEBUG - on stmt: branch $362for_iter.4, 364, 410
2025-01-05 16:51:36,793 - DEBUG - ==== SSA block rewrite pass on 364
2025-01-05 16:51:36,794 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014C06EE0>
2025-01-05 16:51:36,796 - DEBUG - on stmt: k.1 = $phi364.2
2025-01-05 16:51:36,797 - DEBUG - on stmt: $372binary_subscr.7 = getitem(value=localscore, index=i.1, fn=<built-in function getitem>)
2025-01-05 16:51:36,798 - DEBUG - on stmt: $378binary_subscr.10 = getitem(value=window.1, index=k.1, fn=<built-in function getitem>)
2025-01-05 16:51:36,800 - DEBUG - on stmt: $const386.14 = const(int, 2)
2025-01-05 16:51:36,801 - DEBUG - on stmt: $388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:36,803 - DEBUG - find_def var='K' stmt=$388binary_floor_divide.15 = K // $const386.14
2025-01-05 16:51:36,804 - DEBUG - find_def_from_top label 364
2025-01-05 16:51:36,805 - DEBUG - idom 362 from label 364
2025-01-05 16:51:36,806 - DEBUG - find_def_from_bottom label 362
2025-01-05 16:51:36,807 - DEBUG - find_def_from_top label 362
2025-01-05 16:51:36,808 - DEBUG - idom 234 from label 362
2025-01-05 16:51:36,809 - DEBUG - find_def_from_bottom label 234
2025-01-05 16:51:36,810 - DEBUG - replaced with: $388binary_floor_divide.15 = K.1 // $const386.14
2025-01-05 16:51:36,811 - DEBUG - on stmt: $390binary_add.16 = i.1 + $388binary_floor_divide.15
2025-01-05 16:51:36,813 - DEBUG - on stmt: $394binary_subtract.18 = $390binary_add.16 - k.1
2025-01-05 16:51:36,815 - DEBUG - on stmt: $396binary_subscr.19 = getitem(value=onset_envelope, index=$394binary_subtract.18, fn=<built-in function getitem>)
2025-01-05 16:51:36,816 - DEBUG - on stmt: $398binary_multiply.20 = $378binary_subscr.10 * $396binary_subscr.19
2025-01-05 16:51:36,818 - DEBUG - on stmt: $400inplace_add.21 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$372binary_subscr.7, rhs=$398binary_multiply.20, static_lhs=Undefined, static_rhs=Undefined)
2025-01-05 16:51:36,821 - DEBUG - on stmt: localscore[i.1] = $400inplace_add.21
2025-01-05 16:51:36,823 - DEBUG - on stmt: jump 362
2025-01-05 16:51:36,823 - DEBUG - ==== SSA block rewrite pass on 410
2025-01-05 16:51:36,824 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014C06EE0>
2025-01-05 16:51:36,826 - DEBUG - on stmt: jump 232
2025-01-05 16:51:36,827 - DEBUG - ==== SSA block rewrite pass on 412
2025-01-05 16:51:36,828 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014C06EE0>
2025-01-05 16:51:36,829 - DEBUG - on stmt: $const412.0 = const(NoneType, None)
2025-01-05 16:51:36,831 - DEBUG - on stmt: $414return_value.1 = cast(value=$const412.0)
2025-01-05 16:51:36,832 - DEBUG - on stmt: return $414return_value.1
2025-01-05 16:51:36,865 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=4747)
           2	LOAD_DEREF(arg=0, lineno=4749)
           4	LOAD_CONST(arg=0, lineno=4749)
           6	COMPARE_OP(arg=9, lineno=4749)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=4749)
          10	LOAD_DEREF(arg=0, lineno=4749)
          12	JUMP_FORWARD(arg=2, lineno=4749)
>         14	LOAD_FAST(arg=0, lineno=4749)
>         16	STORE_FAST(arg=4, lineno=4749)
          18	LOAD_DEREF(arg=2, lineno=4750)
          20	LOAD_CONST(arg=0, lineno=4750)
          22	COMPARE_OP(arg=9, lineno=4750)
          24	POP_JUMP_IF_FALSE(arg=30, lineno=4750)
          26	LOAD_DEREF(arg=2, lineno=4750)
          28	JUMP_FORWARD(arg=2, lineno=4750)
>         30	LOAD_FAST(arg=1, lineno=4750)
>         32	STORE_FAST(arg=5, lineno=4750)
          34	LOAD_DEREF(arg=1, lineno=4751)
          36	LOAD_CONST(arg=0, lineno=4751)
          38	COMPARE_OP(arg=9, lineno=4751)
          40	POP_JUMP_IF_FALSE(arg=46, lineno=4751)
          42	LOAD_DEREF(arg=1, lineno=4751)
          44	JUMP_FORWARD(arg=2, lineno=4751)
>         46	LOAD_FAST(arg=2, lineno=4751)
>         48	STORE_FAST(arg=6, lineno=4751)
          50	LOAD_FAST(arg=6, lineno=4753)
          52	LOAD_CONST(arg=0, lineno=4753)
          54	COMPARE_OP(arg=9, lineno=4753)
          56	POP_JUMP_IF_FALSE(arg=62, lineno=4753)
          58	LOAD_FAST(arg=6, lineno=4753)
          60	JUMP_FORWARD(arg=2, lineno=4753)
>         62	LOAD_CONST(arg=1, lineno=4753)
>         64	STORE_FAST(arg=7, lineno=4753)
          66	LOAD_FAST(arg=5, lineno=4754)
          68	LOAD_CONST(arg=0, lineno=4754)
          70	COMPARE_OP(arg=8, lineno=4754)
          72	POP_JUMP_IF_FALSE(arg=86, lineno=4754)
          74	LOAD_CONST(arg=2, lineno=4755)
          76	LOAD_FAST(arg=4, lineno=4755)
          78	ROT_TWO(arg=None, lineno=4755)
          80	STORE_FAST(arg=8, lineno=4755)
          82	STORE_FAST(arg=9, lineno=4755)
          84	JUMP_FORWARD(arg=10, lineno=4755)
>         86	LOAD_FAST(arg=4, lineno=4757)
          88	LOAD_FAST(arg=5, lineno=4757)
          90	ROT_TWO(arg=None, lineno=4757)
          92	STORE_FAST(arg=8, lineno=4757)
          94	STORE_FAST(arg=9, lineno=4757)
>         96	LOAD_FAST(arg=7, lineno=4759)
          98	LOAD_CONST(arg=2, lineno=4759)
         100	COMPARE_OP(arg=2, lineno=4759)
         102	POP_JUMP_IF_FALSE(arg=112, lineno=4759)
         104	LOAD_GLOBAL(arg=0, lineno=4760)
         106	LOAD_CONST(arg=3, lineno=4760)
         108	CALL_FUNCTION(arg=1, lineno=4760)
         110	RAISE_VARARGS(arg=1, lineno=4760)
>        112	LOAD_FAST(arg=9, lineno=4762)
         114	LOAD_FAST(arg=8, lineno=4762)
         116	BINARY_SUBTRACT(arg=None, lineno=4762)
         118	LOAD_FAST(arg=7, lineno=4762)
         120	BINARY_TRUE_DIVIDE(arg=None, lineno=4762)
         122	STORE_FAST(arg=10, lineno=4762)
         124	LOAD_GLOBAL(arg=1, lineno=4763)
         126	LOAD_GLOBAL(arg=2, lineno=4763)
         128	LOAD_METHOD(arg=3, lineno=4763)
         130	LOAD_FAST(arg=10, lineno=4763)
         132	LOAD_ATTR(arg=4, lineno=4763)
         134	CALL_METHOD(arg=1, lineno=4763)
         136	CALL_FUNCTION(arg=1, lineno=4763)
         138	STORE_FAST(arg=11, lineno=4763)
         140	LOAD_DEREF(arg=4, lineno=4766)
         142	LOAD_CONST(arg=4, lineno=4766)
         144	COMPARE_OP(arg=8, lineno=4766)
         146	POP_JUMP_IF_FALSE(arg=182, lineno=4766)
         148	LOAD_GLOBAL(arg=1, lineno=4767)
         150	LOAD_GLOBAL(arg=2, lineno=4767)
         152	LOAD_METHOD(arg=3, lineno=4767)
         154	LOAD_FAST(arg=10, lineno=4767)
         156	LOAD_ATTR(arg=5, lineno=4767)
         158	CALL_METHOD(arg=1, lineno=4767)
         160	CALL_FUNCTION(arg=1, lineno=4767)
         162	STORE_FAST(arg=12, lineno=4767)
         164	LOAD_GLOBAL(arg=6, lineno=4768)
         166	LOAD_GLOBAL(arg=7, lineno=4768)
         168	LOAD_FAST(arg=12, lineno=4768)
         170	LOAD_FAST(arg=11, lineno=4768)
         172	CALL_FUNCTION(arg=2, lineno=4768)
         174	LOAD_CONST(arg=2, lineno=4768)
         176	CALL_FUNCTION(arg=2, lineno=4768)
         178	STORE_FAST(arg=13, lineno=4768)
         180	JUMP_FORWARD(arg=10, lineno=4768)
>        182	LOAD_GLOBAL(arg=6, lineno=4770)
         184	LOAD_FAST(arg=11, lineno=4770)
         186	LOAD_CONST(arg=2, lineno=4770)
         188	CALL_FUNCTION(arg=2, lineno=4770)
         190	STORE_FAST(arg=13, lineno=4770)
>        192	LOAD_GLOBAL(arg=8, lineno=4771)
         194	LOAD_METHOD(arg=9, lineno=4771)
         196	LOAD_FAST(arg=13, lineno=4771)
         198	LOAD_DEREF(arg=3, lineno=4771)
         200	CALL_METHOD(arg=2, lineno=4771)
         202	STORE_FAST(arg=14, lineno=4771)
         204	LOAD_FAST(arg=8, lineno=4772)
         206	STORE_FAST(arg=15, lineno=4772)
         208	LOAD_GLOBAL(arg=10, lineno=4773)
         210	LOAD_FAST(arg=13, lineno=4773)
         212	CALL_FUNCTION(arg=1, lineno=4773)
         214	GET_ITER(arg=None, lineno=4773)
>        216	FOR_ITER(arg=20, lineno=4773)
         218	STORE_FAST(arg=16, lineno=4773)
         220	LOAD_FAST(arg=15, lineno=4774)
         222	LOAD_FAST(arg=16, lineno=4774)
         224	LOAD_FAST(arg=7, lineno=4774)
         226	BINARY_MULTIPLY(arg=None, lineno=4774)
         228	BINARY_ADD(arg=None, lineno=4774)
         230	LOAD_FAST(arg=14, lineno=4774)
         232	LOAD_FAST(arg=16, lineno=4774)
         234	STORE_SUBSCR(arg=None, lineno=4774)
         236	JUMP_ABSOLUTE(arg=216, lineno=4774)
>        238	LOAD_FAST(arg=14, lineno=4775)
         240	RETURN_VALUE(arg=None, lineno=4775)
2025-01-05 16:51:36,921 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:51:36,922 - DEBUG - stack: []
2025-01-05 16:51:36,923 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:51:36,925 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=4747)
2025-01-05 16:51:36,926 - DEBUG - stack []
2025-01-05 16:51:36,927 - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=4749)
2025-01-05 16:51:36,929 - DEBUG - stack []
2025-01-05 16:51:36,930 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=0, lineno=4749)
2025-01-05 16:51:36,932 - DEBUG - stack ['$2load_deref.0']
2025-01-05 16:51:36,933 - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=9, lineno=4749)
2025-01-05 16:51:36,934 - DEBUG - stack ['$2load_deref.0', '$const4.1']
2025-01-05 16:51:36,935 - DEBUG - dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=4749)
2025-01-05 16:51:36,937 - DEBUG - stack ['$6compare_op.2']
2025-01-05 16:51:36,938 - DEBUG - end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:36,939 - DEBUG - pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
2025-01-05 16:51:36,941 - DEBUG - stack: []
2025-01-05 16:51:36,942 - DEBUG - state.pc_initial: State(pc_initial=10 nstack_initial=0)
2025-01-05 16:51:36,943 - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=0, lineno=4749)
2025-01-05 16:51:36,944 - DEBUG - stack []
2025-01-05 16:51:36,946 - DEBUG - dispatch pc=12, inst=JUMP_FORWARD(arg=2, lineno=4749)
2025-01-05 16:51:36,947 - DEBUG - stack ['$10load_deref.0']
2025-01-05 16:51:36,948 - DEBUG - end state. edges=[Edge(pc=16, stack=('$10load_deref.0',), blockstack=(), npush=0)]
2025-01-05 16:51:36,950 - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=0), State(pc_initial=16 nstack_initial=1)])
2025-01-05 16:51:36,951 - DEBUG - stack: []
2025-01-05 16:51:36,952 - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=0)
2025-01-05 16:51:36,954 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=4749)
2025-01-05 16:51:36,955 - DEBUG - stack []
2025-01-05 16:51:36,956 - DEBUG - end state. edges=[Edge(pc=16, stack=('$start14.0',), blockstack=(), npush=0)]
2025-01-05 16:51:36,958 - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=1), State(pc_initial=16 nstack_initial=1)])
2025-01-05 16:51:36,959 - DEBUG - stack: ['$phi16.0']
2025-01-05 16:51:36,960 - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=1)
2025-01-05 16:51:36,962 - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=4, lineno=4749)
2025-01-05 16:51:36,963 - DEBUG - stack ['$phi16.0']
2025-01-05 16:51:36,965 - DEBUG - dispatch pc=18, inst=LOAD_DEREF(arg=2, lineno=4750)
2025-01-05 16:51:36,966 - DEBUG - stack []
2025-01-05 16:51:36,967 - DEBUG - dispatch pc=20, inst=LOAD_CONST(arg=0, lineno=4750)
2025-01-05 16:51:36,969 - DEBUG - stack ['$18load_deref.1']
2025-01-05 16:51:36,970 - DEBUG - dispatch pc=22, inst=COMPARE_OP(arg=9, lineno=4750)
2025-01-05 16:51:36,971 - DEBUG - stack ['$18load_deref.1', '$const20.2']
2025-01-05 16:51:36,972 - DEBUG - dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=30, lineno=4750)
2025-01-05 16:51:36,974 - DEBUG - stack ['$22compare_op.3']
2025-01-05 16:51:36,975 - DEBUG - end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=30, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:36,977 - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=1), State(pc_initial=26 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
2025-01-05 16:51:36,979 - DEBUG - pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
2025-01-05 16:51:36,981 - DEBUG - stack: []
2025-01-05 16:51:36,982 - DEBUG - state.pc_initial: State(pc_initial=26 nstack_initial=0)
2025-01-05 16:51:36,983 - DEBUG - dispatch pc=26, inst=LOAD_DEREF(arg=2, lineno=4750)
2025-01-05 16:51:36,985 - DEBUG - stack []
2025-01-05 16:51:36,986 - DEBUG - dispatch pc=28, inst=JUMP_FORWARD(arg=2, lineno=4750)
2025-01-05 16:51:36,987 - DEBUG - stack ['$26load_deref.0']
2025-01-05 16:51:36,989 - DEBUG - end state. edges=[Edge(pc=32, stack=('$26load_deref.0',), blockstack=(), npush=0)]
2025-01-05 16:51:36,990 - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=32 nstack_initial=1)])
2025-01-05 16:51:36,991 - DEBUG - stack: []
2025-01-05 16:51:36,992 - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2025-01-05 16:51:36,994 - DEBUG - dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=4750)
2025-01-05 16:51:36,995 - DEBUG - stack []
2025-01-05 16:51:36,997 - DEBUG - end state. edges=[Edge(pc=32, stack=('$stop30.0',), blockstack=(), npush=0)]
2025-01-05 16:51:36,998 - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2025-01-05 16:51:37,000 - DEBUG - stack: ['$phi32.0']
2025-01-05 16:51:37,001 - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2025-01-05 16:51:37,002 - DEBUG - dispatch pc=32, inst=STORE_FAST(arg=5, lineno=4750)
2025-01-05 16:51:37,004 - DEBUG - stack ['$phi32.0']
2025-01-05 16:51:37,005 - DEBUG - dispatch pc=34, inst=LOAD_DEREF(arg=1, lineno=4751)
2025-01-05 16:51:37,006 - DEBUG - stack []
2025-01-05 16:51:37,007 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=0, lineno=4751)
2025-01-05 16:51:37,009 - DEBUG - stack ['$34load_deref.1']
2025-01-05 16:51:37,010 - DEBUG - dispatch pc=38, inst=COMPARE_OP(arg=9, lineno=4751)
2025-01-05 16:51:37,012 - DEBUG - stack ['$34load_deref.1', '$const36.2']
2025-01-05 16:51:37,013 - DEBUG - dispatch pc=40, inst=POP_JUMP_IF_FALSE(arg=46, lineno=4751)
2025-01-05 16:51:37,015 - DEBUG - stack ['$38compare_op.3']
2025-01-05 16:51:37,016 - DEBUG - end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=46, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:37,017 - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=42 nstack_initial=0), State(pc_initial=46 nstack_initial=0)])
2025-01-05 16:51:37,019 - DEBUG - pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=46 nstack_initial=0)])
2025-01-05 16:51:37,021 - DEBUG - stack: []
2025-01-05 16:51:37,022 - DEBUG - state.pc_initial: State(pc_initial=42 nstack_initial=0)
2025-01-05 16:51:37,023 - DEBUG - dispatch pc=42, inst=LOAD_DEREF(arg=1, lineno=4751)
2025-01-05 16:51:37,025 - DEBUG - stack []
2025-01-05 16:51:37,026 - DEBUG - dispatch pc=44, inst=JUMP_FORWARD(arg=2, lineno=4751)
2025-01-05 16:51:37,027 - DEBUG - stack ['$42load_deref.0']
2025-01-05 16:51:37,028 - DEBUG - end state. edges=[Edge(pc=48, stack=('$42load_deref.0',), blockstack=(), npush=0)]
2025-01-05 16:51:37,029 - DEBUG - pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=48 nstack_initial=1)])
2025-01-05 16:51:37,032 - DEBUG - stack: []
2025-01-05 16:51:37,032 - DEBUG - state.pc_initial: State(pc_initial=46 nstack_initial=0)
2025-01-05 16:51:37,034 - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=4751)
2025-01-05 16:51:37,035 - DEBUG - stack []
2025-01-05 16:51:37,037 - DEBUG - end state. edges=[Edge(pc=48, stack=('$step46.0',), blockstack=(), npush=0)]
2025-01-05 16:51:37,038 - DEBUG - pending: deque([State(pc_initial=48 nstack_initial=1), State(pc_initial=48 nstack_initial=1)])
2025-01-05 16:51:37,039 - DEBUG - stack: ['$phi48.0']
2025-01-05 16:51:37,040 - DEBUG - state.pc_initial: State(pc_initial=48 nstack_initial=1)
2025-01-05 16:51:37,042 - DEBUG - dispatch pc=48, inst=STORE_FAST(arg=6, lineno=4751)
2025-01-05 16:51:37,043 - DEBUG - stack ['$phi48.0']
2025-01-05 16:51:37,044 - DEBUG - dispatch pc=50, inst=LOAD_FAST(arg=6, lineno=4753)
2025-01-05 16:51:37,046 - DEBUG - stack []
2025-01-05 16:51:37,047 - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=0, lineno=4753)
2025-01-05 16:51:37,049 - DEBUG - stack ['$lit_step50.1']
2025-01-05 16:51:37,050 - DEBUG - dispatch pc=54, inst=COMPARE_OP(arg=9, lineno=4753)
2025-01-05 16:51:37,052 - DEBUG - stack ['$lit_step50.1', '$const52.2']
2025-01-05 16:51:37,053 - DEBUG - dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=62, lineno=4753)
2025-01-05 16:51:37,055 - DEBUG - stack ['$54compare_op.3']
2025-01-05 16:51:37,056 - DEBUG - end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:37,057 - DEBUG - pending: deque([State(pc_initial=48 nstack_initial=1), State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2025-01-05 16:51:37,059 - DEBUG - pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
2025-01-05 16:51:37,061 - DEBUG - stack: []
2025-01-05 16:51:37,062 - DEBUG - state.pc_initial: State(pc_initial=58 nstack_initial=0)
2025-01-05 16:51:37,064 - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=6, lineno=4753)
2025-01-05 16:51:37,066 - DEBUG - stack []
2025-01-05 16:51:37,067 - DEBUG - dispatch pc=60, inst=JUMP_FORWARD(arg=2, lineno=4753)
2025-01-05 16:51:37,069 - DEBUG - stack ['$lit_step58.0']
2025-01-05 16:51:37,070 - DEBUG - end state. edges=[Edge(pc=64, stack=('$lit_step58.0',), blockstack=(), npush=0)]
2025-01-05 16:51:37,071 - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=64 nstack_initial=1)])
2025-01-05 16:51:37,073 - DEBUG - stack: []
2025-01-05 16:51:37,074 - DEBUG - state.pc_initial: State(pc_initial=62 nstack_initial=0)
2025-01-05 16:51:37,075 - DEBUG - dispatch pc=62, inst=LOAD_CONST(arg=1, lineno=4753)
2025-01-05 16:51:37,077 - DEBUG - stack []
2025-01-05 16:51:37,078 - DEBUG - end state. edges=[Edge(pc=64, stack=('$const62.0',), blockstack=(), npush=0)]
2025-01-05 16:51:37,079 - DEBUG - pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=64 nstack_initial=1)])
2025-01-05 16:51:37,081 - DEBUG - stack: ['$phi64.0']
2025-01-05 16:51:37,082 - DEBUG - state.pc_initial: State(pc_initial=64 nstack_initial=1)
2025-01-05 16:51:37,083 - DEBUG - dispatch pc=64, inst=STORE_FAST(arg=7, lineno=4753)
2025-01-05 16:51:37,085 - DEBUG - stack ['$phi64.0']
2025-01-05 16:51:37,086 - DEBUG - dispatch pc=66, inst=LOAD_FAST(arg=5, lineno=4754)
2025-01-05 16:51:37,087 - DEBUG - stack []
2025-01-05 16:51:37,089 - DEBUG - dispatch pc=68, inst=LOAD_CONST(arg=0, lineno=4754)
2025-01-05 16:51:37,090 - DEBUG - stack ['$lit_stop66.1']
2025-01-05 16:51:37,091 - DEBUG - dispatch pc=70, inst=COMPARE_OP(arg=8, lineno=4754)
2025-01-05 16:51:37,092 - DEBUG - stack ['$lit_stop66.1', '$const68.2']
2025-01-05 16:51:37,093 - DEBUG - dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=86, lineno=4754)
2025-01-05 16:51:37,095 - DEBUG - stack ['$70compare_op.3']
2025-01-05 16:51:37,096 - DEBUG - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:37,098 - DEBUG - pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
2025-01-05 16:51:37,100 - DEBUG - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
2025-01-05 16:51:37,101 - DEBUG - stack: []
2025-01-05 16:51:37,102 - DEBUG - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2025-01-05 16:51:37,104 - DEBUG - dispatch pc=74, inst=LOAD_CONST(arg=2, lineno=4755)
2025-01-05 16:51:37,105 - DEBUG - stack []
2025-01-05 16:51:37,106 - DEBUG - dispatch pc=76, inst=LOAD_FAST(arg=4, lineno=4755)
2025-01-05 16:51:37,107 - DEBUG - stack ['$const74.0']
2025-01-05 16:51:37,109 - DEBUG - dispatch pc=78, inst=ROT_TWO(arg=None, lineno=4755)
2025-01-05 16:51:37,110 - DEBUG - stack ['$const74.0', '$lit_start76.1']
2025-01-05 16:51:37,111 - DEBUG - dispatch pc=80, inst=STORE_FAST(arg=8, lineno=4755)
2025-01-05 16:51:37,113 - DEBUG - stack ['$lit_start76.1', '$const74.0']
2025-01-05 16:51:37,114 - DEBUG - dispatch pc=82, inst=STORE_FAST(arg=9, lineno=4755)
2025-01-05 16:51:37,115 - DEBUG - stack ['$lit_start76.1']
2025-01-05 16:51:37,116 - DEBUG - dispatch pc=84, inst=JUMP_FORWARD(arg=10, lineno=4755)
2025-01-05 16:51:37,118 - DEBUG - stack []
2025-01-05 16:51:37,119 - DEBUG - end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:37,120 - DEBUG - pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2025-01-05 16:51:37,122 - DEBUG - stack: []
2025-01-05 16:51:37,123 - DEBUG - state.pc_initial: State(pc_initial=86 nstack_initial=0)
2025-01-05 16:51:37,124 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=4, lineno=4757)
2025-01-05 16:51:37,126 - DEBUG - stack []
2025-01-05 16:51:37,127 - DEBUG - dispatch pc=88, inst=LOAD_FAST(arg=5, lineno=4757)
2025-01-05 16:51:37,128 - DEBUG - stack ['$lit_start86.0']
2025-01-05 16:51:37,130 - DEBUG - dispatch pc=90, inst=ROT_TWO(arg=None, lineno=4757)
2025-01-05 16:51:37,132 - DEBUG - stack ['$lit_start86.0', '$lit_stop88.1']
2025-01-05 16:51:37,133 - DEBUG - dispatch pc=92, inst=STORE_FAST(arg=8, lineno=4757)
2025-01-05 16:51:37,134 - DEBUG - stack ['$lit_stop88.1', '$lit_start86.0']
2025-01-05 16:51:37,136 - DEBUG - dispatch pc=94, inst=STORE_FAST(arg=9, lineno=4757)
2025-01-05 16:51:37,137 - DEBUG - stack ['$lit_stop88.1']
2025-01-05 16:51:37,138 - DEBUG - end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:37,140 - DEBUG - pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2025-01-05 16:51:37,141 - DEBUG - stack: []
2025-01-05 16:51:37,142 - DEBUG - state.pc_initial: State(pc_initial=96 nstack_initial=0)
2025-01-05 16:51:37,144 - DEBUG - dispatch pc=96, inst=LOAD_FAST(arg=7, lineno=4759)
2025-01-05 16:51:37,145 - DEBUG - stack []
2025-01-05 16:51:37,146 - DEBUG - dispatch pc=98, inst=LOAD_CONST(arg=2, lineno=4759)
2025-01-05 16:51:37,148 - DEBUG - stack ['$_step96.0']
2025-01-05 16:51:37,149 - DEBUG - dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=4759)
2025-01-05 16:51:37,150 - DEBUG - stack ['$_step96.0', '$const98.1']
2025-01-05 16:51:37,152 - DEBUG - dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=112, lineno=4759)
2025-01-05 16:51:37,153 - DEBUG - stack ['$100compare_op.2']
2025-01-05 16:51:37,154 - DEBUG - end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=112, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:37,156 - DEBUG - pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=112 nstack_initial=0)])
2025-01-05 16:51:37,158 - DEBUG - pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=112 nstack_initial=0)])
2025-01-05 16:51:37,159 - DEBUG - stack: []
2025-01-05 16:51:37,160 - DEBUG - state.pc_initial: State(pc_initial=104 nstack_initial=0)
2025-01-05 16:51:37,162 - DEBUG - dispatch pc=104, inst=LOAD_GLOBAL(arg=0, lineno=4760)
2025-01-05 16:51:37,164 - DEBUG - stack []
2025-01-05 16:51:37,165 - DEBUG - dispatch pc=106, inst=LOAD_CONST(arg=3, lineno=4760)
2025-01-05 16:51:37,166 - DEBUG - stack ['$104load_global.0']
2025-01-05 16:51:37,167 - DEBUG - dispatch pc=108, inst=CALL_FUNCTION(arg=1, lineno=4760)
2025-01-05 16:51:37,169 - DEBUG - stack ['$104load_global.0', '$const106.1']
2025-01-05 16:51:37,170 - DEBUG - dispatch pc=110, inst=RAISE_VARARGS(arg=1, lineno=4760)
2025-01-05 16:51:37,171 - DEBUG - stack ['$108call_function.2']
2025-01-05 16:51:37,172 - DEBUG - end state. edges=[]
2025-01-05 16:51:37,173 - DEBUG - pending: deque([State(pc_initial=112 nstack_initial=0)])
2025-01-05 16:51:37,174 - DEBUG - stack: []
2025-01-05 16:51:37,176 - DEBUG - state.pc_initial: State(pc_initial=112 nstack_initial=0)
2025-01-05 16:51:37,177 - DEBUG - dispatch pc=112, inst=LOAD_FAST(arg=9, lineno=4762)
2025-01-05 16:51:37,178 - DEBUG - stack []
2025-01-05 16:51:37,180 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=8, lineno=4762)
2025-01-05 16:51:37,181 - DEBUG - stack ['$_stop112.0']
2025-01-05 16:51:37,183 - DEBUG - dispatch pc=116, inst=BINARY_SUBTRACT(arg=None, lineno=4762)
2025-01-05 16:51:37,184 - DEBUG - stack ['$_stop112.0', '$_start114.1']
2025-01-05 16:51:37,185 - DEBUG - dispatch pc=118, inst=LOAD_FAST(arg=7, lineno=4762)
2025-01-05 16:51:37,186 - DEBUG - stack ['$116binary_subtract.2']
2025-01-05 16:51:37,187 - DEBUG - dispatch pc=120, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=4762)
2025-01-05 16:51:37,189 - DEBUG - stack ['$116binary_subtract.2', '$_step118.3']
2025-01-05 16:51:37,190 - DEBUG - dispatch pc=122, inst=STORE_FAST(arg=10, lineno=4762)
2025-01-05 16:51:37,192 - DEBUG - stack ['$120binary_true_divide.4']
2025-01-05 16:51:37,193 - DEBUG - dispatch pc=124, inst=LOAD_GLOBAL(arg=1, lineno=4763)
2025-01-05 16:51:37,194 - DEBUG - stack []
2025-01-05 16:51:37,195 - DEBUG - dispatch pc=126, inst=LOAD_GLOBAL(arg=2, lineno=4763)
2025-01-05 16:51:37,197 - DEBUG - stack ['$124load_global.5']
2025-01-05 16:51:37,198 - DEBUG - dispatch pc=128, inst=LOAD_METHOD(arg=3, lineno=4763)
2025-01-05 16:51:37,199 - DEBUG - stack ['$124load_global.5', '$126load_global.6']
2025-01-05 16:51:37,201 - DEBUG - dispatch pc=130, inst=LOAD_FAST(arg=10, lineno=4763)
2025-01-05 16:51:37,203 - DEBUG - stack ['$124load_global.5', '$128load_method.7']
2025-01-05 16:51:37,205 - DEBUG - dispatch pc=132, inst=LOAD_ATTR(arg=4, lineno=4763)
2025-01-05 16:51:37,206 - DEBUG - stack ['$124load_global.5', '$128load_method.7', '$nitems_c130.8']
2025-01-05 16:51:37,208 - DEBUG - dispatch pc=134, inst=CALL_METHOD(arg=1, lineno=4763)
2025-01-05 16:51:37,210 - DEBUG - stack ['$124load_global.5', '$128load_method.7', '$132load_attr.9']
2025-01-05 16:51:37,211 - DEBUG - dispatch pc=136, inst=CALL_FUNCTION(arg=1, lineno=4763)
2025-01-05 16:51:37,213 - DEBUG - stack ['$124load_global.5', '$134call_method.10']
2025-01-05 16:51:37,215 - DEBUG - dispatch pc=138, inst=STORE_FAST(arg=11, lineno=4763)
2025-01-05 16:51:37,216 - DEBUG - stack ['$136call_function.11']
2025-01-05 16:51:37,217 - DEBUG - dispatch pc=140, inst=LOAD_DEREF(arg=4, lineno=4766)
2025-01-05 16:51:37,218 - DEBUG - stack []
2025-01-05 16:51:37,219 - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=4, lineno=4766)
2025-01-05 16:51:37,221 - DEBUG - stack ['$140load_deref.12']
2025-01-05 16:51:37,222 - DEBUG - dispatch pc=144, inst=COMPARE_OP(arg=8, lineno=4766)
2025-01-05 16:51:37,223 - DEBUG - stack ['$140load_deref.12', '$const142.13']
2025-01-05 16:51:37,225 - DEBUG - dispatch pc=146, inst=POP_JUMP_IF_FALSE(arg=182, lineno=4766)
2025-01-05 16:51:37,226 - DEBUG - stack ['$144compare_op.14']
2025-01-05 16:51:37,227 - DEBUG - end state. edges=[Edge(pc=148, stack=(), blockstack=(), npush=0), Edge(pc=182, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:37,228 - DEBUG - pending: deque([State(pc_initial=148 nstack_initial=0), State(pc_initial=182 nstack_initial=0)])
2025-01-05 16:51:37,230 - DEBUG - stack: []
2025-01-05 16:51:37,231 - DEBUG - state.pc_initial: State(pc_initial=148 nstack_initial=0)
2025-01-05 16:51:37,233 - DEBUG - dispatch pc=148, inst=LOAD_GLOBAL(arg=1, lineno=4767)
2025-01-05 16:51:37,234 - DEBUG - stack []
2025-01-05 16:51:37,235 - DEBUG - dispatch pc=150, inst=LOAD_GLOBAL(arg=2, lineno=4767)
2025-01-05 16:51:37,237 - DEBUG - stack ['$148load_global.0']
2025-01-05 16:51:37,238 - DEBUG - dispatch pc=152, inst=LOAD_METHOD(arg=3, lineno=4767)
2025-01-05 16:51:37,239 - DEBUG - stack ['$148load_global.0', '$150load_global.1']
2025-01-05 16:51:37,241 - DEBUG - dispatch pc=154, inst=LOAD_FAST(arg=10, lineno=4767)
2025-01-05 16:51:37,242 - DEBUG - stack ['$148load_global.0', '$152load_method.2']
2025-01-05 16:51:37,244 - DEBUG - dispatch pc=156, inst=LOAD_ATTR(arg=5, lineno=4767)
2025-01-05 16:51:37,245 - DEBUG - stack ['$148load_global.0', '$152load_method.2', '$nitems_c154.3']
2025-01-05 16:51:37,247 - DEBUG - dispatch pc=158, inst=CALL_METHOD(arg=1, lineno=4767)
2025-01-05 16:51:37,249 - DEBUG - stack ['$148load_global.0', '$152load_method.2', '$156load_attr.4']
2025-01-05 16:51:37,251 - DEBUG - dispatch pc=160, inst=CALL_FUNCTION(arg=1, lineno=4767)
2025-01-05 16:51:37,252 - DEBUG - stack ['$148load_global.0', '$158call_method.5']
2025-01-05 16:51:37,254 - DEBUG - dispatch pc=162, inst=STORE_FAST(arg=12, lineno=4767)
2025-01-05 16:51:37,255 - DEBUG - stack ['$160call_function.6']
2025-01-05 16:51:37,256 - DEBUG - dispatch pc=164, inst=LOAD_GLOBAL(arg=6, lineno=4768)
2025-01-05 16:51:37,257 - DEBUG - stack []
2025-01-05 16:51:37,259 - DEBUG - dispatch pc=166, inst=LOAD_GLOBAL(arg=7, lineno=4768)
2025-01-05 16:51:37,260 - DEBUG - stack ['$164load_global.7']
2025-01-05 16:51:37,261 - DEBUG - dispatch pc=168, inst=LOAD_FAST(arg=12, lineno=4768)
2025-01-05 16:51:37,263 - DEBUG - stack ['$164load_global.7', '$166load_global.8']
2025-01-05 16:51:37,265 - DEBUG - dispatch pc=170, inst=LOAD_FAST(arg=11, lineno=4768)
2025-01-05 16:51:37,266 - DEBUG - stack ['$164load_global.7', '$166load_global.8', '$nitems_i168.9']
2025-01-05 16:51:37,268 - DEBUG - dispatch pc=172, inst=CALL_FUNCTION(arg=2, lineno=4768)
2025-01-05 16:51:37,269 - DEBUG - stack ['$164load_global.7', '$166load_global.8', '$nitems_i168.9', '$nitems_r170.10']
2025-01-05 16:51:37,271 - DEBUG - dispatch pc=174, inst=LOAD_CONST(arg=2, lineno=4768)
2025-01-05 16:51:37,272 - DEBUG - stack ['$164load_global.7', '$172call_function.11']
2025-01-05 16:51:37,274 - DEBUG - dispatch pc=176, inst=CALL_FUNCTION(arg=2, lineno=4768)
2025-01-05 16:51:37,275 - DEBUG - stack ['$164load_global.7', '$172call_function.11', '$const174.12']
2025-01-05 16:51:37,277 - DEBUG - dispatch pc=178, inst=STORE_FAST(arg=13, lineno=4768)
2025-01-05 16:51:37,279 - DEBUG - stack ['$176call_function.13']
2025-01-05 16:51:37,280 - DEBUG - dispatch pc=180, inst=JUMP_FORWARD(arg=10, lineno=4768)
2025-01-05 16:51:37,282 - DEBUG - stack []
2025-01-05 16:51:37,283 - DEBUG - end state. edges=[Edge(pc=192, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:37,284 - DEBUG - pending: deque([State(pc_initial=182 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
2025-01-05 16:51:37,286 - DEBUG - stack: []
2025-01-05 16:51:37,288 - DEBUG - state.pc_initial: State(pc_initial=182 nstack_initial=0)
2025-01-05 16:51:37,289 - DEBUG - dispatch pc=182, inst=LOAD_GLOBAL(arg=6, lineno=4770)
2025-01-05 16:51:37,291 - DEBUG - stack []
2025-01-05 16:51:37,292 - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=11, lineno=4770)
2025-01-05 16:51:37,293 - DEBUG - stack ['$182load_global.0']
2025-01-05 16:51:37,294 - DEBUG - dispatch pc=186, inst=LOAD_CONST(arg=2, lineno=4770)
2025-01-05 16:51:37,295 - DEBUG - stack ['$182load_global.0', '$nitems_r184.1']
2025-01-05 16:51:37,297 - DEBUG - dispatch pc=188, inst=CALL_FUNCTION(arg=2, lineno=4770)
2025-01-05 16:51:37,298 - DEBUG - stack ['$182load_global.0', '$nitems_r184.1', '$const186.2']
2025-01-05 16:51:37,300 - DEBUG - dispatch pc=190, inst=STORE_FAST(arg=13, lineno=4770)
2025-01-05 16:51:37,301 - DEBUG - stack ['$188call_function.3']
2025-01-05 16:51:37,303 - DEBUG - end state. edges=[Edge(pc=192, stack=(), blockstack=(), npush=0)]
2025-01-05 16:51:37,304 - DEBUG - pending: deque([State(pc_initial=192 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
2025-01-05 16:51:37,306 - DEBUG - stack: []
2025-01-05 16:51:37,307 - DEBUG - state.pc_initial: State(pc_initial=192 nstack_initial=0)
2025-01-05 16:51:37,309 - DEBUG - dispatch pc=192, inst=LOAD_GLOBAL(arg=8, lineno=4771)
2025-01-05 16:51:37,310 - DEBUG - stack []
2025-01-05 16:51:37,311 - DEBUG - dispatch pc=194, inst=LOAD_METHOD(arg=9, lineno=4771)
2025-01-05 16:51:37,313 - DEBUG - stack ['$192load_global.0']
2025-01-05 16:51:37,314 - DEBUG - dispatch pc=196, inst=LOAD_FAST(arg=13, lineno=4771)
2025-01-05 16:51:37,316 - DEBUG - stack ['$194load_method.1']
2025-01-05 16:51:37,317 - DEBUG - dispatch pc=198, inst=LOAD_DEREF(arg=3, lineno=4771)
2025-01-05 16:51:37,318 - DEBUG - stack ['$194load_method.1', '$nitems196.2']
2025-01-05 16:51:37,320 - DEBUG - dispatch pc=200, inst=CALL_METHOD(arg=2, lineno=4771)
2025-01-05 16:51:37,321 - DEBUG - stack ['$194load_method.1', '$nitems196.2', '$198load_deref.3']
2025-01-05 16:51:37,323 - DEBUG - dispatch pc=202, inst=STORE_FAST(arg=14, lineno=4771)
2025-01-05 16:51:37,325 - DEBUG - stack ['$200call_method.4']
2025-01-05 16:51:37,326 - DEBUG - dispatch pc=204, inst=LOAD_FAST(arg=8, lineno=4772)
2025-01-05 16:51:37,327 - DEBUG - stack []
2025-01-05 16:51:37,328 - DEBUG - dispatch pc=206, inst=STORE_FAST(arg=15, lineno=4772)
2025-01-05 16:51:37,329 - DEBUG - stack ['$_start204.5']
2025-01-05 16:51:37,331 - DEBUG - dispatch pc=208, inst=LOAD_GLOBAL(arg=10, lineno=4773)
2025-01-05 16:51:37,332 - DEBUG - stack []
2025-01-05 16:51:37,333 - DEBUG - dispatch pc=210, inst=LOAD_FAST(arg=13, lineno=4773)
2025-01-05 16:51:37,335 - DEBUG - stack ['$208load_global.6']
2025-01-05 16:51:37,336 - DEBUG - dispatch pc=212, inst=CALL_FUNCTION(arg=1, lineno=4773)
2025-01-05 16:51:37,337 - DEBUG - stack ['$208load_global.6', '$nitems210.7']
2025-01-05 16:51:37,338 - DEBUG - dispatch pc=214, inst=GET_ITER(arg=None, lineno=4773)
2025-01-05 16:51:37,339 - DEBUG - stack ['$212call_function.8']
2025-01-05 16:51:37,341 - DEBUG - end state. edges=[Edge(pc=216, stack=('$214get_iter.9',), blockstack=(), npush=0)]
2025-01-05 16:51:37,342 - DEBUG - pending: deque([State(pc_initial=192 nstack_initial=0), State(pc_initial=216 nstack_initial=1)])
2025-01-05 16:51:37,344 - DEBUG - pending: deque([State(pc_initial=216 nstack_initial=1)])
2025-01-05 16:51:37,345 - DEBUG - stack: ['$phi216.0']
2025-01-05 16:51:37,346 - DEBUG - state.pc_initial: State(pc_initial=216 nstack_initial=1)
2025-01-05 16:51:37,348 - DEBUG - dispatch pc=216, inst=FOR_ITER(arg=20, lineno=4773)
2025-01-05 16:51:37,350 - DEBUG - stack ['$phi216.0']
2025-01-05 16:51:37,351 - DEBUG - end state. edges=[Edge(pc=238, stack=(), blockstack=(), npush=0), Edge(pc=218, stack=('$phi216.0', '$216for_iter.2'), blockstack=(), npush=0)]
2025-01-05 16:51:37,353 - DEBUG - pending: deque([State(pc_initial=238 nstack_initial=0), State(pc_initial=218 nstack_initial=2)])
2025-01-05 16:51:37,355 - DEBUG - stack: []
2025-01-05 16:51:37,356 - DEBUG - state.pc_initial: State(pc_initial=238 nstack_initial=0)
2025-01-05 16:51:37,358 - DEBUG - dispatch pc=238, inst=LOAD_FAST(arg=14, lineno=4775)
2025-01-05 16:51:37,360 - DEBUG - stack []
2025-01-05 16:51:37,361 - DEBUG - dispatch pc=240, inst=RETURN_VALUE(arg=None, lineno=4775)
2025-01-05 16:51:37,362 - DEBUG - stack ['$arr238.0']
2025-01-05 16:51:37,363 - DEBUG - end state. edges=[]
2025-01-05 16:51:37,364 - DEBUG - pending: deque([State(pc_initial=218 nstack_initial=2)])
2025-01-05 16:51:37,366 - DEBUG - stack: ['$phi218.0', '$phi218.1']
2025-01-05 16:51:37,367 - DEBUG - state.pc_initial: State(pc_initial=218 nstack_initial=2)
2025-01-05 16:51:37,368 - DEBUG - dispatch pc=218, inst=STORE_FAST(arg=16, lineno=4773)
2025-01-05 16:51:37,370 - DEBUG - stack ['$phi218.0', '$phi218.1']
2025-01-05 16:51:37,371 - DEBUG - dispatch pc=220, inst=LOAD_FAST(arg=15, lineno=4774)
2025-01-05 16:51:37,372 - DEBUG - stack ['$phi218.0']
2025-01-05 16:51:37,374 - DEBUG - dispatch pc=222, inst=LOAD_FAST(arg=16, lineno=4774)
2025-01-05 16:51:37,375 - DEBUG - stack ['$phi218.0', '$val220.2']
2025-01-05 16:51:37,377 - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=7, lineno=4774)
2025-01-05 16:51:37,378 - DEBUG - stack ['$phi218.0', '$val220.2', '$i222.3']
2025-01-05 16:51:37,379 - DEBUG - dispatch pc=226, inst=BINARY_MULTIPLY(arg=None, lineno=4774)
2025-01-05 16:51:37,381 - DEBUG - stack ['$phi218.0', '$val220.2', '$i222.3', '$_step224.4']
2025-01-05 16:51:37,382 - DEBUG - dispatch pc=228, inst=BINARY_ADD(arg=None, lineno=4774)
2025-01-05 16:51:37,384 - DEBUG - stack ['$phi218.0', '$val220.2', '$226binary_multiply.5']
2025-01-05 16:51:37,385 - DEBUG - dispatch pc=230, inst=LOAD_FAST(arg=14, lineno=4774)
2025-01-05 16:51:37,387 - DEBUG - stack ['$phi218.0', '$228binary_add.6']
2025-01-05 16:51:37,388 - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=16, lineno=4774)
2025-01-05 16:51:37,389 - DEBUG - stack ['$phi218.0', '$228binary_add.6', '$arr230.7']
2025-01-05 16:51:37,391 - DEBUG - dispatch pc=234, inst=STORE_SUBSCR(arg=None, lineno=4774)
2025-01-05 16:51:37,393 - DEBUG - stack ['$phi218.0', '$228binary_add.6', '$arr230.7', '$i232.8']
2025-01-05 16:51:37,394 - DEBUG - dispatch pc=236, inst=JUMP_ABSOLUTE(arg=216, lineno=4774)
2025-01-05 16:51:37,396 - DEBUG - stack ['$phi218.0']
2025-01-05 16:51:37,397 - DEBUG - end state. edges=[Edge(pc=216, stack=('$phi218.0',), blockstack=(), npush=0)]
2025-01-05 16:51:37,399 - DEBUG - pending: deque([State(pc_initial=216 nstack_initial=1)])
2025-01-05 16:51:37,400 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:51:37,402 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): {'$phi32.0'},
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=1): {'$phi48.0'},
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=1): {'$phi64.0'},
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=112 nstack_initial=0): set(),
             State(pc_initial=148 nstack_initial=0): set(),
             State(pc_initial=182 nstack_initial=0): set(),
             State(pc_initial=192 nstack_initial=0): set(),
             State(pc_initial=216 nstack_initial=1): {'$phi216.0'},
             State(pc_initial=218 nstack_initial=2): {'$phi218.1'},
             State(pc_initial=238 nstack_initial=0): set()})
2025-01-05 16:51:37,416 - DEBUG - defmap: {'$phi16.0': State(pc_initial=14 nstack_initial=0),
 '$phi216.0': State(pc_initial=192 nstack_initial=0),
 '$phi218.1': State(pc_initial=216 nstack_initial=1),
 '$phi32.0': State(pc_initial=26 nstack_initial=0),
 '$phi48.0': State(pc_initial=46 nstack_initial=0),
 '$phi64.0': State(pc_initial=62 nstack_initial=0)}
2025-01-05 16:51:37,421 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi216.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0)),
                           ('$phi218.0',
                            State(pc_initial=218 nstack_initial=2))},
             '$phi218.0': {('$phi216.0',
                            State(pc_initial=216 nstack_initial=1))},
             '$phi218.1': {('$216for_iter.2',
                            State(pc_initial=216 nstack_initial=1))},
             '$phi32.0': {('$26load_deref.0',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
             '$phi48.0': {('$42load_deref.0',
                           State(pc_initial=42 nstack_initial=0)),
                          ('$step46.0', State(pc_initial=46 nstack_initial=0))},
             '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
                          ('$lit_step58.0',
                           State(pc_initial=58 nstack_initial=0))}})
2025-01-05 16:51:37,436 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi216.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0)),
                           ('$phi216.0',
                            State(pc_initial=216 nstack_initial=1))},
             '$phi218.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi218.1': {('$216for_iter.2',
                            State(pc_initial=216 nstack_initial=1))},
             '$phi32.0': {('$26load_deref.0',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
             '$phi48.0': {('$42load_deref.0',
                           State(pc_initial=42 nstack_initial=0)),
                          ('$step46.0', State(pc_initial=46 nstack_initial=0))},
             '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
                          ('$lit_step58.0',
                           State(pc_initial=58 nstack_initial=0))}})
2025-01-05 16:51:37,451 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi216.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi218.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi218.1': {('$216for_iter.2',
                            State(pc_initial=216 nstack_initial=1))},
             '$phi32.0': {('$26load_deref.0',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
             '$phi48.0': {('$42load_deref.0',
                           State(pc_initial=42 nstack_initial=0)),
                          ('$step46.0', State(pc_initial=46 nstack_initial=0))},
             '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
                          ('$lit_step58.0',
                           State(pc_initial=58 nstack_initial=0))}})
2025-01-05 16:51:37,464 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi216.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi218.0': {('$214get_iter.9',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi218.1': {('$216for_iter.2',
                            State(pc_initial=216 nstack_initial=1))},
             '$phi32.0': {('$26load_deref.0',
                           State(pc_initial=26 nstack_initial=0)),
                          ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
             '$phi48.0': {('$42load_deref.0',
                           State(pc_initial=42 nstack_initial=0)),
                          ('$step46.0', State(pc_initial=46 nstack_initial=0))},
             '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
                          ('$lit_step58.0',
                           State(pc_initial=58 nstack_initial=0))}})
2025-01-05 16:51:37,478 - DEBUG - keep phismap: {'$phi16.0': {('$10load_deref.0', State(pc_initial=10 nstack_initial=0)),
              ('$start14.0', State(pc_initial=14 nstack_initial=0))},
 '$phi216.0': {('$214get_iter.9', State(pc_initial=192 nstack_initial=0))},
 '$phi218.1': {('$216for_iter.2', State(pc_initial=216 nstack_initial=1))},
 '$phi32.0': {('$26load_deref.0', State(pc_initial=26 nstack_initial=0)),
              ('$stop30.0', State(pc_initial=30 nstack_initial=0))},
 '$phi48.0': {('$42load_deref.0', State(pc_initial=42 nstack_initial=0)),
              ('$step46.0', State(pc_initial=46 nstack_initial=0))},
 '$phi64.0': {('$const62.0', State(pc_initial=62 nstack_initial=0)),
              ('$lit_step58.0', State(pc_initial=58 nstack_initial=0))}}
2025-01-05 16:51:37,485 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi16.0': '$10load_deref.0'},
             State(pc_initial=14 nstack_initial=0): {'$phi16.0': '$start14.0'},
             State(pc_initial=26 nstack_initial=0): {'$phi32.0': '$26load_deref.0'},
             State(pc_initial=30 nstack_initial=0): {'$phi32.0': '$stop30.0'},
             State(pc_initial=42 nstack_initial=0): {'$phi48.0': '$42load_deref.0'},
             State(pc_initial=46 nstack_initial=0): {'$phi48.0': '$step46.0'},
             State(pc_initial=58 nstack_initial=0): {'$phi64.0': '$lit_step58.0'},
             State(pc_initial=62 nstack_initial=0): {'$phi64.0': '$const62.0'},
             State(pc_initial=192 nstack_initial=0): {'$phi216.0': '$214get_iter.9'},
             State(pc_initial=216 nstack_initial=1): {'$phi218.1': '$216for_iter.2'}})
2025-01-05 16:51:37,496 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:51:37,498 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'lhs': '$2load_deref.0', 'rhs': '$const4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
2025-01-05 16:51:37,502 - DEBUG - block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_deref.0'}), (12, {})), outgoing_phis={'$phi16.0': '$10load_deref.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$10load_deref.0',)})
2025-01-05 16:51:37,505 - DEBUG - block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$start14.0'}),), outgoing_phis={'$phi16.0': '$start14.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$start14.0',)})
2025-01-05 16:51:37,509 - DEBUG - block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'value': '$phi16.0'}), (18, {'res': '$18load_deref.1'}), (20, {'res': '$const20.2'}), (22, {'lhs': '$18load_deref.1', 'rhs': '$const20.2', 'res': '$22compare_op.3'}), (24, {'pred': '$22compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 30: ()})
2025-01-05 16:51:37,515 - DEBUG - block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$26load_deref.0'}), (28, {})), outgoing_phis={'$phi32.0': '$26load_deref.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$26load_deref.0',)})
2025-01-05 16:51:37,518 - DEBUG - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$stop30.0'}),), outgoing_phis={'$phi32.0': '$stop30.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: ('$stop30.0',)})
2025-01-05 16:51:37,521 - DEBUG - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((32, {'value': '$phi32.0'}), (34, {'res': '$34load_deref.1'}), (36, {'res': '$const36.2'}), (38, {'lhs': '$34load_deref.1', 'rhs': '$const36.2', 'res': '$38compare_op.3'}), (40, {'pred': '$38compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 46: ()})
2025-01-05 16:51:37,525 - DEBUG - block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$42load_deref.0'}), (44, {})), outgoing_phis={'$phi48.0': '$42load_deref.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ('$42load_deref.0',)})
2025-01-05 16:51:37,529 - DEBUG - block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=((46, {'res': '$step46.0'}),), outgoing_phis={'$phi48.0': '$step46.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ('$step46.0',)})
2025-01-05 16:51:37,533 - DEBUG - block_infos State(pc_initial=48 nstack_initial=1):
AdaptBlockInfo(insts=((48, {'value': '$phi48.0'}), (50, {'res': '$lit_step50.1'}), (52, {'res': '$const52.2'}), (54, {'lhs': '$lit_step50.1', 'rhs': '$const52.2', 'res': '$54compare_op.3'}), (56, {'pred': '$54compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 62: ()})
2025-01-05 16:51:37,537 - DEBUG - block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$lit_step58.0'}), (60, {})), outgoing_phis={'$phi64.0': '$lit_step58.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$lit_step58.0',)})
2025-01-05 16:51:37,541 - DEBUG - block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$const62.0'}),), outgoing_phis={'$phi64.0': '$const62.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$const62.0',)})
2025-01-05 16:51:37,544 - DEBUG - block_infos State(pc_initial=64 nstack_initial=1):
AdaptBlockInfo(insts=((64, {'value': '$phi64.0'}), (66, {'res': '$lit_stop66.1'}), (68, {'res': '$const68.2'}), (70, {'lhs': '$lit_stop66.1', 'rhs': '$const68.2', 'res': '$70compare_op.3'}), (72, {'pred': '$70compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 86: ()})
2025-01-05 16:51:37,549 - DEBUG - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'res': '$lit_start76.1'}), (80, {'value': '$const74.0'}), (82, {'value': '$lit_start76.1'}), (84, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: ()})
2025-01-05 16:51:37,553 - DEBUG - block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$lit_start86.0'}), (88, {'res': '$lit_stop88.1'}), (92, {'value': '$lit_start86.0'}), (94, {'value': '$lit_stop88.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: ()})
2025-01-05 16:51:37,556 - DEBUG - block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$_step96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$_step96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 112: ()})
2025-01-05 16:51:37,561 - DEBUG - block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$104load_global.0'}), (106, {'res': '$const106.1'}), (108, {'func': '$104load_global.0', 'args': ['$const106.1'], 'res': '$108call_function.2'}), (110, {'exc': '$108call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:37,565 - DEBUG - block_infos State(pc_initial=112 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'res': '$_stop112.0'}), (114, {'res': '$_start114.1'}), (116, {'lhs': '$_stop112.0', 'rhs': '$_start114.1', 'res': '$116binary_subtract.2'}), (118, {'res': '$_step118.3'}), (120, {'lhs': '$116binary_subtract.2', 'rhs': '$_step118.3', 'res': '$120binary_true_divide.4'}), (122, {'value': '$120binary_true_divide.4'}), (124, {'res': '$124load_global.5'}), (126, {'res': '$126load_global.6'}), (128, {'item': '$126load_global.6', 'res': '$128load_method.7'}), (130, {'res': '$nitems_c130.8'}), (132, {'item': '$nitems_c130.8', 'res': '$132load_attr.9'}), (134, {'func': '$128load_method.7', 'args': ['$132load_attr.9'], 'res': '$134call_method.10'}), (136, {'func': '$124load_global.5', 'args': ['$134call_method.10'], 'res': '$136call_function.11'}), (138, {'value': '$136call_function.11'}), (140, {'res': '$140load_deref.12'}), (142, {'res': '$const142.13'}), (144, {'lhs': '$140load_deref.12', 'rhs': '$const142.13', 'res': '$144compare_op.14'}), (146, {'pred': '$144compare_op.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={148: (), 182: ()})
2025-01-05 16:51:37,574 - DEBUG - block_infos State(pc_initial=148 nstack_initial=0):
AdaptBlockInfo(insts=((148, {'res': '$148load_global.0'}), (150, {'res': '$150load_global.1'}), (152, {'item': '$150load_global.1', 'res': '$152load_method.2'}), (154, {'res': '$nitems_c154.3'}), (156, {'item': '$nitems_c154.3', 'res': '$156load_attr.4'}), (158, {'func': '$152load_method.2', 'args': ['$156load_attr.4'], 'res': '$158call_method.5'}), (160, {'func': '$148load_global.0', 'args': ['$158call_method.5'], 'res': '$160call_function.6'}), (162, {'value': '$160call_function.6'}), (164, {'res': '$164load_global.7'}), (166, {'res': '$166load_global.8'}), (168, {'res': '$nitems_i168.9'}), (170, {'res': '$nitems_r170.10'}), (172, {'func': '$166load_global.8', 'args': ['$nitems_i168.9', '$nitems_r170.10'], 'res': '$172call_function.11'}), (174, {'res': '$const174.12'}), (176, {'func': '$164load_global.7', 'args': ['$172call_function.11', '$const174.12'], 'res': '$176call_function.13'}), (178, {'value': '$176call_function.13'}), (180, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={192: ()})
2025-01-05 16:51:37,584 - DEBUG - block_infos State(pc_initial=182 nstack_initial=0):
AdaptBlockInfo(insts=((182, {'res': '$182load_global.0'}), (184, {'res': '$nitems_r184.1'}), (186, {'res': '$const186.2'}), (188, {'func': '$182load_global.0', 'args': ['$nitems_r184.1', '$const186.2'], 'res': '$188call_function.3'}), (190, {'value': '$188call_function.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={192: ()})
2025-01-05 16:51:37,589 - DEBUG - block_infos State(pc_initial=192 nstack_initial=0):
AdaptBlockInfo(insts=((192, {'res': '$192load_global.0'}), (194, {'item': '$192load_global.0', 'res': '$194load_method.1'}), (196, {'res': '$nitems196.2'}), (198, {'res': '$198load_deref.3'}), (200, {'func': '$194load_method.1', 'args': ['$nitems196.2', '$198load_deref.3'], 'res': '$200call_method.4'}), (202, {'value': '$200call_method.4'}), (204, {'res': '$_start204.5'}), (206, {'value': '$_start204.5'}), (208, {'res': '$208load_global.6'}), (210, {'res': '$nitems210.7'}), (212, {'func': '$208load_global.6', 'args': ['$nitems210.7'], 'res': '$212call_function.8'}), (214, {'value': '$212call_function.8', 'res': '$214get_iter.9'})), outgoing_phis={'$phi216.0': '$214get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={216: ('$214get_iter.9',)})
2025-01-05 16:51:37,598 - DEBUG - block_infos State(pc_initial=216 nstack_initial=1):
AdaptBlockInfo(insts=((216, {'iterator': '$phi216.0', 'pair': '$216for_iter.1', 'indval': '$216for_iter.2', 'pred': '$216for_iter.3'}),), outgoing_phis={'$phi218.1': '$216for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={238: (), 218: ('$phi216.0', '$216for_iter.2')})
2025-01-05 16:51:37,602 - DEBUG - block_infos State(pc_initial=218 nstack_initial=2):
AdaptBlockInfo(insts=((218, {'value': '$phi218.1'}), (220, {'res': '$val220.2'}), (222, {'res': '$i222.3'}), (224, {'res': '$_step224.4'}), (226, {'lhs': '$i222.3', 'rhs': '$_step224.4', 'res': '$226binary_multiply.5'}), (228, {'lhs': '$val220.2', 'rhs': '$226binary_multiply.5', 'res': '$228binary_add.6'}), (230, {'res': '$arr230.7'}), (232, {'res': '$i232.8'}), (234, {'target': '$arr230.7', 'index': '$i232.8', 'value': '$228binary_add.6'}), (236, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={216: ('$phi218.0',)})
2025-01-05 16:51:37,607 - DEBUG - block_infos State(pc_initial=238 nstack_initial=0):
AdaptBlockInfo(insts=((238, {'res': '$arr238.0'}), (240, {'retval': '$arr238.0', 'castval': '$240return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:37,616 - DEBUG - label 0:
    start = arg(0, name=start)               ['start']
    stop = arg(1, name=stop)                 ['stop']
    step = arg(2, name=step)                 ['step']
    dtype = arg(3, name=dtype)               ['dtype']
    $2load_deref.0 = freevar(start_value: None) ['$2load_deref.0']
    $const4.1 = const(NoneType, None)        ['$const4.1']
    $6compare_op.2 = $2load_deref.0 is not $const4.1 ['$2load_deref.0', '$6compare_op.2', '$const4.1']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4749),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $10load_deref.0 = freevar(start_value: None) ['$10load_deref.0']
    $phi16.0 = $10load_deref.0               ['$10load_deref.0', '$phi16.0']
    jump 16                                  []
label 14:
    $phi16.0 = start                         ['$phi16.0', 'start']
    jump 16                                  []
label 16:
    lit_start = $phi16.0                     ['$phi16.0', 'lit_start']
    $18load_deref.1 = freevar(stop_value: None) ['$18load_deref.1']
    $const20.2 = const(NoneType, None)       ['$const20.2']
    $22compare_op.3 = $18load_deref.1 is not $const20.2 ['$18load_deref.1', '$22compare_op.3', '$const20.2']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4750),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.3', '$24pred', 'bool24']
    branch $24pred, 26, 30                   ['$24pred']
label 26:
    $26load_deref.0 = freevar(stop_value: None) ['$26load_deref.0']
    $phi32.0 = $26load_deref.0               ['$26load_deref.0', '$phi32.0']
    jump 32                                  []
label 30:
    $phi32.0 = stop                          ['$phi32.0', 'stop']
    jump 32                                  []
label 32:
    lit_stop = $phi32.0                      ['$phi32.0', 'lit_stop']
    $34load_deref.1 = freevar(step_value: None) ['$34load_deref.1']
    $const36.2 = const(NoneType, None)       ['$const36.2']
    $38compare_op.3 = $34load_deref.1 is not $const36.2 ['$34load_deref.1', '$38compare_op.3', '$const36.2']
    bool40 = global(bool: <class 'bool'>)    ['bool40']
    $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4751),), kws=(), vararg=None, varkwarg=None, target=None) ['$38compare_op.3', '$40pred', 'bool40']
    branch $40pred, 42, 46                   ['$40pred']
label 42:
    $42load_deref.0 = freevar(step_value: None) ['$42load_deref.0']
    $phi48.0 = $42load_deref.0               ['$42load_deref.0', '$phi48.0']
    jump 48                                  []
label 46:
    $phi48.0 = step                          ['$phi48.0', 'step']
    jump 48                                  []
label 48:
    lit_step = $phi48.0                      ['$phi48.0', 'lit_step']
    $const52.2 = const(NoneType, None)       ['$const52.2']
    $54compare_op.3 = lit_step is not $const52.2 ['$54compare_op.3', '$const52.2', 'lit_step']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4753),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.3', '$56pred', 'bool56']
    branch $56pred, 58, 62                   ['$56pred']
label 58:
    $phi64.0 = lit_step                      ['$phi64.0', 'lit_step']
    jump 64                                  []
label 62:
    $const62.0 = const(int, 1)               ['$const62.0']
    $phi64.0 = $const62.0                    ['$const62.0', '$phi64.0']
    jump 64                                  []
label 64:
    _step = $phi64.0                         ['$phi64.0', '_step']
    $const68.2 = const(NoneType, None)       ['$const68.2']
    $70compare_op.3 = lit_stop is $const68.2 ['$70compare_op.3', '$const68.2', 'lit_stop']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4754),), kws=(), vararg=None, varkwarg=None, target=None) ['$70compare_op.3', '$72pred', 'bool72']
    branch $72pred, 74, 86                   ['$72pred']
label 74:
    _start = const(int, 0)                   ['_start']
    _stop = lit_start                        ['_stop', 'lit_start']
    jump 96                                  []
label 86:
    _start = lit_start                       ['_start', 'lit_start']
    _stop = lit_stop                         ['_stop', 'lit_stop']
    jump 96                                  []
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = _step == $const98.1   ['$100compare_op.2', '$const98.1', '_step']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4759),), kws=(), vararg=None, varkwarg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 112                ['$102pred']
label 104:
    $104load_global.0 = global(ValueError: <class 'ValueError'>) ['$104load_global.0']
    $const106.1 = const(str, Maximum allowed size exceeded) ['$const106.1']
    $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4760)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_global.0', '$108call_function.2', '$const106.1']
    raise $108call_function.2                ['$108call_function.2']
label 112:
    $116binary_subtract.2 = _stop - _start   ['$116binary_subtract.2', '_start', '_stop']
    nitems_c = $116binary_subtract.2 / _step ['$116binary_subtract.2', '_step', 'nitems_c']
    $124load_global.5 = global(int: <class 'int'>) ['$124load_global.5']
    $126load_global.6 = global(math: <module 'math' (built-in)>) ['$126load_global.6']
    $128load_method.7 = getattr(value=$126load_global.6, attr=ceil) ['$126load_global.6', '$128load_method.7']
    $132load_attr.9 = getattr(value=nitems_c, attr=real) ['$132load_attr.9', 'nitems_c']
    $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None) ['$128load_method.7', '$132load_attr.9', '$134call_method.10']
    nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None) ['$124load_global.5', '$134call_method.10', 'nitems_r']
    $140load_deref.12 = freevar(use_complex: False) ['$140load_deref.12']
    $const142.13 = const(bool, True)         ['$const142.13']
    $144compare_op.14 = $140load_deref.12 is $const142.13 ['$140load_deref.12', '$144compare_op.14', '$const142.13']
    bool146 = global(bool: <class 'bool'>)   ['bool146']
    $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4766),), kws=(), vararg=None, varkwarg=None, target=None) ['$144compare_op.14', '$146pred', 'bool146']
    branch $146pred, 148, 182                ['$146pred']
label 148:
    $148load_global.0 = global(int: <class 'int'>) ['$148load_global.0']
    $150load_global.1 = global(math: <module 'math' (built-in)>) ['$150load_global.1']
    $152load_method.2 = getattr(value=$150load_global.1, attr=ceil) ['$150load_global.1', '$152load_method.2']
    $156load_attr.4 = getattr(value=nitems_c, attr=imag) ['$156load_attr.4', 'nitems_c']
    $158call_method.5 = call $152load_method.2($156load_attr.4, func=$152load_method.2, args=[Var($156load_attr.4, arrayobj.py:4767)], kws=(), vararg=None, varkwarg=None, target=None) ['$152load_method.2', '$156load_attr.4', '$158call_method.5']
    nitems_i = call $148load_global.0($158call_method.5, func=$148load_global.0, args=[Var($158call_method.5, arrayobj.py:4767)], kws=(), vararg=None, varkwarg=None, target=None) ['$148load_global.0', '$158call_method.5', 'nitems_i']
    $164load_global.7 = global(max: <built-in function max>) ['$164load_global.7']
    $166load_global.8 = global(min: <built-in function min>) ['$166load_global.8']
    $172call_function.11 = call $166load_global.8(nitems_i, nitems_r, func=$166load_global.8, args=[Var(nitems_i, arrayobj.py:4767), Var(nitems_r, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None) ['$166load_global.8', '$172call_function.11', 'nitems_i', 'nitems_r']
    $const174.12 = const(int, 0)             ['$const174.12']
    nitems = call $164load_global.7($172call_function.11, $const174.12, func=$164load_global.7, args=[Var($172call_function.11, arrayobj.py:4768), Var($const174.12, arrayobj.py:4768)], kws=(), vararg=None, varkwarg=None, target=None) ['$164load_global.7', '$172call_function.11', '$const174.12', 'nitems']
    jump 192                                 []
label 182:
    $182load_global.0 = global(max: <built-in function max>) ['$182load_global.0']
    $const186.2 = const(int, 0)              ['$const186.2']
    nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4763), Var($const186.2, arrayobj.py:4770)], kws=(), vararg=None, varkwarg=None, target=None) ['$182load_global.0', '$const186.2', 'nitems', 'nitems_r']
    jump 192                                 []
label 192:
    $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>) ['$192load_global.0']
    $194load_method.1 = getattr(value=$192load_global.0, attr=empty) ['$192load_global.0', '$194load_method.1']
    $198load_deref.3 = freevar(true_dtype: float64) ['$198load_deref.3']
    arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4768), Var($198load_deref.3, arrayobj.py:4771)], kws=(), vararg=None, varkwarg=None, target=None) ['$194load_method.1', '$198load_deref.3', 'arr', 'nitems']
    val = _start                             ['_start', 'val']
    $208load_global.6 = global(range: <class 'range'>) ['$208load_global.6']
    $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4768)], kws=(), vararg=None, varkwarg=None, target=None) ['$208load_global.6', '$212call_function.8', 'nitems']
    $214get_iter.9 = getiter(value=$212call_function.8) ['$212call_function.8', '$214get_iter.9']
    $phi216.0 = $214get_iter.9               ['$214get_iter.9', '$phi216.0']
    jump 216                                 []
label 216:
    $216for_iter.1 = iternext(value=$phi216.0) ['$216for_iter.1', '$phi216.0']
    $216for_iter.2 = pair_first(value=$216for_iter.1) ['$216for_iter.1', '$216for_iter.2']
    $216for_iter.3 = pair_second(value=$216for_iter.1) ['$216for_iter.1', '$216for_iter.3']
    $phi218.1 = $216for_iter.2               ['$216for_iter.2', '$phi218.1']
    branch $216for_iter.3, 218, 238          ['$216for_iter.3']
label 218:
    i = $phi218.1                            ['$phi218.1', 'i']
    $226binary_multiply.5 = i * _step        ['$226binary_multiply.5', '_step', 'i']
    $228binary_add.6 = val + $226binary_multiply.5 ['$226binary_multiply.5', '$228binary_add.6', 'val']
    arr[i] = $228binary_add.6                ['$228binary_add.6', 'arr', 'i']
    jump 216                                 []
label 238:
    $240return_value.1 = cast(value=arr)     ['$240return_value.1', 'arr']
    return $240return_value.1                ['$240return_value.1']

2025-01-05 16:51:37,761 - DEBUG - ==== SSA block analysis pass on 0
2025-01-05 16:51:37,761 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,763 - DEBUG - on stmt: start = arg(0, name=start)
2025-01-05 16:51:37,764 - DEBUG - on stmt: stop = arg(1, name=stop)
2025-01-05 16:51:37,766 - DEBUG - on stmt: step = arg(2, name=step)
2025-01-05 16:51:37,766 - DEBUG - on stmt: dtype = arg(3, name=dtype)
2025-01-05 16:51:37,767 - DEBUG - on stmt: $2load_deref.0 = freevar(start_value: None)
2025-01-05 16:51:37,769 - DEBUG - on stmt: $const4.1 = const(NoneType, None)
2025-01-05 16:51:37,770 - DEBUG - on stmt: $6compare_op.2 = const(int, 0)
2025-01-05 16:51:37,771 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:37,772 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4749),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:37,774 - DEBUG - on stmt: jump 14
2025-01-05 16:51:37,775 - DEBUG - ==== SSA block analysis pass on 14
2025-01-05 16:51:37,776 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,778 - DEBUG - on stmt: $phi16.0 = start
2025-01-05 16:51:37,779 - DEBUG - on stmt: jump 16
2025-01-05 16:51:37,779 - DEBUG - ==== SSA block analysis pass on 16
2025-01-05 16:51:37,781 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,782 - DEBUG - on stmt: lit_start = $phi16.0
2025-01-05 16:51:37,783 - DEBUG - on stmt: $18load_deref.1 = freevar(stop_value: None)
2025-01-05 16:51:37,785 - DEBUG - on stmt: $const20.2 = const(NoneType, None)
2025-01-05 16:51:37,786 - DEBUG - on stmt: $22compare_op.3 = const(int, 0)
2025-01-05 16:51:37,787 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:37,788 - DEBUG - on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4750),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:37,790 - DEBUG - on stmt: jump 30
2025-01-05 16:51:37,791 - DEBUG - ==== SSA block analysis pass on 30
2025-01-05 16:51:37,792 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,793 - DEBUG - on stmt: $phi32.0 = stop
2025-01-05 16:51:37,794 - DEBUG - on stmt: jump 32
2025-01-05 16:51:37,795 - DEBUG - ==== SSA block analysis pass on 32
2025-01-05 16:51:37,796 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,798 - DEBUG - on stmt: lit_stop = $phi32.0
2025-01-05 16:51:37,799 - DEBUG - on stmt: $34load_deref.1 = freevar(step_value: None)
2025-01-05 16:51:37,800 - DEBUG - on stmt: $const36.2 = const(NoneType, None)
2025-01-05 16:51:37,801 - DEBUG - on stmt: $38compare_op.3 = const(int, 0)
2025-01-05 16:51:37,802 - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-01-05 16:51:37,804 - DEBUG - on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4751),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:37,806 - DEBUG - on stmt: jump 46
2025-01-05 16:51:37,807 - DEBUG - ==== SSA block analysis pass on 46
2025-01-05 16:51:37,808 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,809 - DEBUG - on stmt: $phi48.0 = step
2025-01-05 16:51:37,810 - DEBUG - on stmt: jump 48
2025-01-05 16:51:37,811 - DEBUG - ==== SSA block analysis pass on 48
2025-01-05 16:51:37,813 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,814 - DEBUG - on stmt: lit_step = $phi48.0
2025-01-05 16:51:37,815 - DEBUG - on stmt: $const52.2 = const(NoneType, None)
2025-01-05 16:51:37,816 - DEBUG - on stmt: $54compare_op.3 = lit_step is not $const52.2
2025-01-05 16:51:37,818 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:37,820 - DEBUG - on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4753),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:37,822 - DEBUG - on stmt: branch $56pred, 58, 62
2025-01-05 16:51:37,823 - DEBUG - ==== SSA block analysis pass on 58
2025-01-05 16:51:37,824 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,826 - DEBUG - on stmt: $phi64.0 = lit_step
2025-01-05 16:51:37,827 - DEBUG - on stmt: jump 64
2025-01-05 16:51:37,828 - DEBUG - ==== SSA block analysis pass on 62
2025-01-05 16:51:37,828 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,830 - DEBUG - on stmt: $const62.0 = const(int, 1)
2025-01-05 16:51:37,831 - DEBUG - on stmt: $phi64.0 = $const62.0
2025-01-05 16:51:37,832 - DEBUG - on stmt: jump 64
2025-01-05 16:51:37,833 - DEBUG - ==== SSA block analysis pass on 64
2025-01-05 16:51:37,834 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,835 - DEBUG - on stmt: _step = $phi64.0
2025-01-05 16:51:37,836 - DEBUG - on stmt: $const68.2 = const(NoneType, None)
2025-01-05 16:51:37,837 - DEBUG - on stmt: $70compare_op.3 = lit_stop is $const68.2
2025-01-05 16:51:37,838 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:37,840 - DEBUG - on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4754),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:37,842 - DEBUG - on stmt: branch $72pred, 74, 86
2025-01-05 16:51:37,843 - DEBUG - ==== SSA block analysis pass on 74
2025-01-05 16:51:37,844 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,846 - DEBUG - on stmt: _start = const(int, 0)
2025-01-05 16:51:37,847 - DEBUG - on stmt: _stop = lit_start
2025-01-05 16:51:37,848 - DEBUG - on stmt: jump 96
2025-01-05 16:51:37,849 - DEBUG - ==== SSA block analysis pass on 86
2025-01-05 16:51:37,850 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,851 - DEBUG - on stmt: _start = lit_start
2025-01-05 16:51:37,852 - DEBUG - on stmt: _stop = lit_stop
2025-01-05 16:51:37,853 - DEBUG - on stmt: jump 96
2025-01-05 16:51:37,854 - DEBUG - ==== SSA block analysis pass on 96
2025-01-05 16:51:37,855 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,856 - DEBUG - on stmt: $const98.1 = const(int, 0)
2025-01-05 16:51:37,857 - DEBUG - on stmt: $100compare_op.2 = _step == $const98.1
2025-01-05 16:51:37,858 - DEBUG - on stmt: bool102 = global(bool: <class 'bool'>)
2025-01-05 16:51:37,860 - DEBUG - on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4759),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:37,862 - DEBUG - on stmt: branch $102pred, 104, 112
2025-01-05 16:51:37,863 - DEBUG - ==== SSA block analysis pass on 104
2025-01-05 16:51:37,864 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,866 - DEBUG - on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-05 16:51:37,867 - DEBUG - on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
2025-01-05 16:51:37,869 - DEBUG - on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4760)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:37,871 - DEBUG - on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2025-01-05 16:51:37,872 - DEBUG - ==== SSA block analysis pass on 112
2025-01-05 16:51:37,873 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,875 - DEBUG - on stmt: $116binary_subtract.2 = _stop - _start
2025-01-05 16:51:37,877 - DEBUG - on stmt: nitems_c = $116binary_subtract.2 / _step
2025-01-05 16:51:37,878 - DEBUG - on stmt: $124load_global.5 = global(int: <class 'int'>)
2025-01-05 16:51:37,880 - DEBUG - on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:37,882 - DEBUG - on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
2025-01-05 16:51:37,883 - DEBUG - on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
2025-01-05 16:51:37,885 - DEBUG - on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:37,887 - DEBUG - on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:37,890 - DEBUG - on stmt: $140load_deref.12 = freevar(use_complex: False)
2025-01-05 16:51:37,892 - DEBUG - on stmt: $const142.13 = const(bool, True)
2025-01-05 16:51:37,893 - DEBUG - on stmt: $144compare_op.14 = const(int, 0)
2025-01-05 16:51:37,894 - DEBUG - on stmt: bool146 = global(bool: <class 'bool'>)
2025-01-05 16:51:37,895 - DEBUG - on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4766),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:37,898 - DEBUG - on stmt: jump 182
2025-01-05 16:51:37,899 - DEBUG - ==== SSA block analysis pass on 182
2025-01-05 16:51:37,899 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,901 - DEBUG - on stmt: $182load_global.0 = global(max: <built-in function max>)
2025-01-05 16:51:37,902 - DEBUG - on stmt: $const186.2 = const(int, 0)
2025-01-05 16:51:37,903 - DEBUG - on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4763), Var($const186.2, arrayobj.py:4770)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:37,906 - DEBUG - on stmt: jump 192
2025-01-05 16:51:37,907 - DEBUG - ==== SSA block analysis pass on 192
2025-01-05 16:51:37,908 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,910 - DEBUG - on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:37,912 - DEBUG - on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
2025-01-05 16:51:37,913 - DEBUG - on stmt: $198load_deref.3 = freevar(true_dtype: float64)
2025-01-05 16:51:37,915 - DEBUG - on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4768), Var($198load_deref.3, arrayobj.py:4771)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:37,918 - DEBUG - on stmt: val = _start
2025-01-05 16:51:37,919 - DEBUG - on stmt: $208load_global.6 = global(range: <class 'range'>)
2025-01-05 16:51:37,920 - DEBUG - on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4768)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:37,922 - DEBUG - on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
2025-01-05 16:51:37,924 - DEBUG - on stmt: $phi216.0 = $214get_iter.9
2025-01-05 16:51:37,925 - DEBUG - on stmt: jump 216
2025-01-05 16:51:37,926 - DEBUG - ==== SSA block analysis pass on 216
2025-01-05 16:51:37,927 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,929 - DEBUG - on stmt: $216for_iter.1 = iternext(value=$phi216.0)
2025-01-05 16:51:37,931 - DEBUG - on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
2025-01-05 16:51:37,933 - DEBUG - on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
2025-01-05 16:51:37,934 - DEBUG - on stmt: $phi218.1 = $216for_iter.2
2025-01-05 16:51:37,936 - DEBUG - on stmt: branch $216for_iter.3, 218, 238
2025-01-05 16:51:37,937 - DEBUG - ==== SSA block analysis pass on 218
2025-01-05 16:51:37,939 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,940 - DEBUG - on stmt: i = $phi218.1
2025-01-05 16:51:37,941 - DEBUG - on stmt: $226binary_multiply.5 = i * _step
2025-01-05 16:51:37,942 - DEBUG - on stmt: $228binary_add.6 = val + $226binary_multiply.5
2025-01-05 16:51:37,943 - DEBUG - on stmt: arr[i] = $228binary_add.6
2025-01-05 16:51:37,945 - DEBUG - on stmt: jump 216
2025-01-05 16:51:37,945 - DEBUG - ==== SSA block analysis pass on 238
2025-01-05 16:51:37,946 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014AF1520>
2025-01-05 16:51:37,948 - DEBUG - on stmt: $240return_value.1 = cast(value=arr)
2025-01-05 16:51:37,949 - DEBUG - on stmt: return $240return_value.1
2025-01-05 16:51:37,952 - DEBUG - defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x0000000014C15430>],
             '$102pred': [<numba.core.ir.Assign object at 0x0000000014C156D0>],
             '$104load_global.0': [<numba.core.ir.Assign object at 0x0000000014C15910>],
             '$108call_function.2': [<numba.core.ir.Assign object at 0x0000000014C15C40>],
             '$116binary_subtract.2': [<numba.core.ir.Assign object at 0x0000000014C16190>],
             '$124load_global.5': [<numba.core.ir.Assign object at 0x0000000014C166D0>],
             '$126load_global.6': [<numba.core.ir.Assign object at 0x0000000014C16850>],
             '$128load_method.7': [<numba.core.ir.Assign object at 0x0000000014C169D0>],
             '$132load_attr.9': [<numba.core.ir.Assign object at 0x0000000014C16C70>],
             '$134call_method.10': [<numba.core.ir.Assign object at 0x0000000014C16E20>],
             '$140load_deref.12': [<numba.core.ir.Assign object at 0x0000000014C17250>],
             '$144compare_op.14': [<numba.core.ir.Assign object at 0x0000000014C17550>],
             '$146pred': [<numba.core.ir.Assign object at 0x0000000014C177F0>],
             '$182load_global.0': [<numba.core.ir.Assign object at 0x0000000014C18E50>],
             '$18load_deref.1': [<numba.core.ir.Assign object at 0x0000000014C11670>],
             '$192load_global.0': [<numba.core.ir.Assign object at 0x0000000014C194F0>],
             '$194load_method.1': [<numba.core.ir.Assign object at 0x0000000014C19670>],
             '$198load_deref.3': [<numba.core.ir.Assign object at 0x0000000014C19910>],
             '$208load_global.6': [<numba.core.ir.Assign object at 0x0000000014C19F70>],
             '$212call_function.8': [<numba.core.ir.Assign object at 0x0000000014C1A280>],
             '$214get_iter.9': [<numba.core.ir.Assign object at 0x0000000014C1A3D0>],
             '$216for_iter.1': [<numba.core.ir.Assign object at 0x0000000014C1A610>],
             '$216for_iter.2': [<numba.core.ir.Assign object at 0x0000000014C1A730>],
             '$216for_iter.3': [<numba.core.ir.Assign object at 0x0000000014C1A850>],
             '$226binary_multiply.5': [<numba.core.ir.Assign object at 0x0000000014C1AFD0>],
             '$228binary_add.6': [<numba.core.ir.Assign object at 0x0000000014C1B190>],
             '$22compare_op.3': [<numba.core.ir.Assign object at 0x0000000014C11970>],
             '$240return_value.1': [<numba.core.ir.Assign object at 0x0000000014C1B6D0>],
             '$24pred': [<numba.core.ir.Assign object at 0x0000000014C11C10>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x0000000014C03490>],
             '$34load_deref.1': [<numba.core.ir.Assign object at 0x0000000014C12610>],
             '$38compare_op.3': [<numba.core.ir.Assign object at 0x0000000014C12910>],
             '$40pred': [<numba.core.ir.Assign object at 0x0000000014C12BB0>],
             '$54compare_op.3': [<numba.core.ir.Assign object at 0x0000000014ACAD00>],
             '$56pred': [<numba.core.ir.Assign object at 0x0000000014C13670>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x0000000014C03220>],
             '$70compare_op.3': [<numba.core.ir.Assign object at 0x0000000014C142B0>],
             '$72pred': [<numba.core.ir.Assign object at 0x0000000014C14550>],
             '$8pred': [<numba.core.ir.Assign object at 0x0000000014C03C70>],
             '$const106.1': [<numba.core.ir.Assign object at 0x0000000014C15A90>],
             '$const142.13': [<numba.core.ir.Assign object at 0x0000000014C173D0>],
             '$const186.2': [<numba.core.ir.Assign object at 0x0000000014C19130>],
             '$const20.2': [<numba.core.ir.Assign object at 0x0000000014C117F0>],
             '$const36.2': [<numba.core.ir.Assign object at 0x0000000014C12790>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000000014C03400>],
             '$const52.2': [<numba.core.ir.Assign object at 0x0000000014BB1880>],
             '$const62.0': [<numba.core.ir.Assign object at 0x0000000014C13BB0>],
             '$const68.2': [<numba.core.ir.Assign object at 0x0000000014C14130>],
             '$const98.1': [<numba.core.ir.Assign object at 0x0000000014C152B0>],
             '$phi16.0': [<numba.core.ir.Assign object at 0x0000000014C03DC0>],
             '$phi216.0': [<numba.core.ir.Assign object at 0x0000000014C19BB0>],
             '$phi218.1': [<numba.core.ir.Assign object at 0x0000000014C1A520>],
             '$phi32.0': [<numba.core.ir.Assign object at 0x0000000014C11D60>],
             '$phi48.0': [<numba.core.ir.Assign object at 0x0000000014C12D00>],
             '$phi64.0': [<numba.core.ir.Assign object at 0x0000000014C13340>,
                          <numba.core.ir.Assign object at 0x0000000014C13760>],
             '_start': [<numba.core.ir.Assign object at 0x0000000014C14790>,
                        <numba.core.ir.Assign object at 0x0000000014C14EB0>],
             '_step': [<numba.core.ir.Assign object at 0x0000000014C13E50>],
             '_stop': [<numba.core.ir.Assign object at 0x0000000014C14AF0>,
                       <numba.core.ir.Assign object at 0x0000000014C14F70>],
             'arr': [<numba.core.ir.Assign object at 0x0000000014C19AC0>],
             'bool102': [<numba.core.ir.Assign object at 0x0000000014C155B0>],
             'bool146': [<numba.core.ir.Assign object at 0x0000000014C176D0>],
             'bool24': [<numba.core.ir.Assign object at 0x0000000014C11AF0>],
             'bool40': [<numba.core.ir.Assign object at 0x0000000014C12A90>],
             'bool56': [<numba.core.ir.Assign object at 0x0000000014C13550>],
             'bool72': [<numba.core.ir.Assign object at 0x0000000014C14430>],
             'bool8': [<numba.core.ir.Assign object at 0x0000000014C03B50>],
             'dtype': [<numba.core.ir.Assign object at 0x0000000014C03A60>],
             'i': [<numba.core.ir.Assign object at 0x0000000014C1AAF0>],
             'lit_start': [<numba.core.ir.Assign object at 0x0000000014C114F0>],
             'lit_step': [<numba.core.ir.Assign object at 0x0000000014C13430>],
             'lit_stop': [<numba.core.ir.Assign object at 0x0000000014C12490>],
             'nitems': [<numba.core.ir.Assign object at 0x0000000014C192E0>],
             'nitems_c': [<numba.core.ir.Assign object at 0x0000000014C16430>],
             'nitems_r': [<numba.core.ir.Assign object at 0x0000000014C16FA0>],
             'start': [<numba.core.ir.Assign object at 0x0000000014BC4E20>],
             'step': [<numba.core.ir.Assign object at 0x0000000014B0B6A0>],
             'stop': [<numba.core.ir.Assign object at 0x0000000014BC4C40>],
             'val': [<numba.core.ir.Assign object at 0x0000000014C19DF0>]})
2025-01-05 16:51:38,021 - DEBUG - SSA violators {'_stop', '$phi64.0', '_start'}
2025-01-05 16:51:38,022 - DEBUG - Fix SSA violator on var _stop
2025-01-05 16:51:38,023 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:38,024 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,026 - DEBUG - on stmt: start = arg(0, name=start)
2025-01-05 16:51:38,027 - DEBUG - on stmt: stop = arg(1, name=stop)
2025-01-05 16:51:38,028 - DEBUG - on stmt: step = arg(2, name=step)
2025-01-05 16:51:38,029 - DEBUG - on stmt: dtype = arg(3, name=dtype)
2025-01-05 16:51:38,029 - DEBUG - on stmt: $2load_deref.0 = freevar(start_value: None)
2025-01-05 16:51:38,031 - DEBUG - on stmt: $const4.1 = const(NoneType, None)
2025-01-05 16:51:38,033 - DEBUG - on stmt: $6compare_op.2 = const(int, 0)
2025-01-05 16:51:38,033 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,034 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4749),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,036 - DEBUG - on stmt: jump 14
2025-01-05 16:51:38,037 - DEBUG - ==== SSA block rewrite pass on 14
2025-01-05 16:51:38,038 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,040 - DEBUG - on stmt: $phi16.0 = start
2025-01-05 16:51:38,042 - DEBUG - on stmt: jump 16
2025-01-05 16:51:38,043 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-05 16:51:38,043 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,045 - DEBUG - on stmt: lit_start = $phi16.0
2025-01-05 16:51:38,046 - DEBUG - on stmt: $18load_deref.1 = freevar(stop_value: None)
2025-01-05 16:51:38,048 - DEBUG - on stmt: $const20.2 = const(NoneType, None)
2025-01-05 16:51:38,049 - DEBUG - on stmt: $22compare_op.3 = const(int, 0)
2025-01-05 16:51:38,050 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,051 - DEBUG - on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4750),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,053 - DEBUG - on stmt: jump 30
2025-01-05 16:51:38,054 - DEBUG - ==== SSA block rewrite pass on 30
2025-01-05 16:51:38,055 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,057 - DEBUG - on stmt: $phi32.0 = stop
2025-01-05 16:51:38,058 - DEBUG - on stmt: jump 32
2025-01-05 16:51:38,059 - DEBUG - ==== SSA block rewrite pass on 32
2025-01-05 16:51:38,060 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,062 - DEBUG - on stmt: lit_stop = $phi32.0
2025-01-05 16:51:38,063 - DEBUG - on stmt: $34load_deref.1 = freevar(step_value: None)
2025-01-05 16:51:38,065 - DEBUG - on stmt: $const36.2 = const(NoneType, None)
2025-01-05 16:51:38,066 - DEBUG - on stmt: $38compare_op.3 = const(int, 0)
2025-01-05 16:51:38,067 - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,069 - DEBUG - on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4751),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,071 - DEBUG - on stmt: jump 46
2025-01-05 16:51:38,072 - DEBUG - ==== SSA block rewrite pass on 46
2025-01-05 16:51:38,074 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,075 - DEBUG - on stmt: $phi48.0 = step
2025-01-05 16:51:38,076 - DEBUG - on stmt: jump 48
2025-01-05 16:51:38,077 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:38,078 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,080 - DEBUG - on stmt: lit_step = $phi48.0
2025-01-05 16:51:38,081 - DEBUG - on stmt: $const52.2 = const(NoneType, None)
2025-01-05 16:51:38,082 - DEBUG - on stmt: $54compare_op.3 = lit_step is not $const52.2
2025-01-05 16:51:38,084 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,085 - DEBUG - on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4753),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,088 - DEBUG - on stmt: branch $56pred, 58, 62
2025-01-05 16:51:38,089 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-05 16:51:38,090 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,092 - DEBUG - on stmt: $phi64.0 = lit_step
2025-01-05 16:51:38,093 - DEBUG - on stmt: jump 64
2025-01-05 16:51:38,094 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-05 16:51:38,095 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,096 - DEBUG - on stmt: $const62.0 = const(int, 1)
2025-01-05 16:51:38,098 - DEBUG - on stmt: $phi64.0 = $const62.0
2025-01-05 16:51:38,099 - DEBUG - on stmt: jump 64
2025-01-05 16:51:38,100 - DEBUG - ==== SSA block rewrite pass on 64
2025-01-05 16:51:38,101 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,102 - DEBUG - on stmt: _step = $phi64.0
2025-01-05 16:51:38,104 - DEBUG - on stmt: $const68.2 = const(NoneType, None)
2025-01-05 16:51:38,105 - DEBUG - on stmt: $70compare_op.3 = lit_stop is $const68.2
2025-01-05 16:51:38,106 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,108 - DEBUG - on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4754),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,110 - DEBUG - on stmt: branch $72pred, 74, 86
2025-01-05 16:51:38,111 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-05 16:51:38,112 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,114 - DEBUG - on stmt: _start = const(int, 0)
2025-01-05 16:51:38,116 - DEBUG - on stmt: _stop = lit_start
2025-01-05 16:51:38,117 - DEBUG - first assign: _stop
2025-01-05 16:51:38,118 - DEBUG - replaced with: _stop = lit_start
2025-01-05 16:51:38,119 - DEBUG - on stmt: jump 96
2025-01-05 16:51:38,120 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-05 16:51:38,121 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,122 - DEBUG - on stmt: _start = lit_start
2025-01-05 16:51:38,124 - DEBUG - on stmt: _stop = lit_stop
2025-01-05 16:51:38,125 - DEBUG - replaced with: _stop.1 = lit_stop
2025-01-05 16:51:38,126 - DEBUG - on stmt: jump 96
2025-01-05 16:51:38,127 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:38,128 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,130 - DEBUG - on stmt: $const98.1 = const(int, 0)
2025-01-05 16:51:38,131 - DEBUG - on stmt: $100compare_op.2 = _step == $const98.1
2025-01-05 16:51:38,133 - DEBUG - on stmt: bool102 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,135 - DEBUG - on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4759),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,137 - DEBUG - on stmt: branch $102pred, 104, 112
2025-01-05 16:51:38,138 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-05 16:51:38,139 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,141 - DEBUG - on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-05 16:51:38,142 - DEBUG - on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
2025-01-05 16:51:38,144 - DEBUG - on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4760)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,146 - DEBUG - on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2025-01-05 16:51:38,149 - DEBUG - ==== SSA block rewrite pass on 112
2025-01-05 16:51:38,150 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,151 - DEBUG - on stmt: $116binary_subtract.2 = _stop - _start
2025-01-05 16:51:38,153 - DEBUG - on stmt: nitems_c = $116binary_subtract.2 / _step
2025-01-05 16:51:38,155 - DEBUG - on stmt: $124load_global.5 = global(int: <class 'int'>)
2025-01-05 16:51:38,156 - DEBUG - on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:38,158 - DEBUG - on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
2025-01-05 16:51:38,160 - DEBUG - on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
2025-01-05 16:51:38,162 - DEBUG - on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,164 - DEBUG - on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,167 - DEBUG - on stmt: $140load_deref.12 = freevar(use_complex: False)
2025-01-05 16:51:38,168 - DEBUG - on stmt: $const142.13 = const(bool, True)
2025-01-05 16:51:38,169 - DEBUG - on stmt: $144compare_op.14 = const(int, 0)
2025-01-05 16:51:38,170 - DEBUG - on stmt: bool146 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,172 - DEBUG - on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4766),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,174 - DEBUG - on stmt: jump 182
2025-01-05 16:51:38,176 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-05 16:51:38,177 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,178 - DEBUG - on stmt: $182load_global.0 = global(max: <built-in function max>)
2025-01-05 16:51:38,180 - DEBUG - on stmt: $const186.2 = const(int, 0)
2025-01-05 16:51:38,181 - DEBUG - on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4763), Var($const186.2, arrayobj.py:4770)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,184 - DEBUG - on stmt: jump 192
2025-01-05 16:51:38,185 - DEBUG - ==== SSA block rewrite pass on 192
2025-01-05 16:51:38,187 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,188 - DEBUG - on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:38,190 - DEBUG - on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
2025-01-05 16:51:38,193 - DEBUG - on stmt: $198load_deref.3 = freevar(true_dtype: float64)
2025-01-05 16:51:38,195 - DEBUG - on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4768), Var($198load_deref.3, arrayobj.py:4771)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,198 - DEBUG - on stmt: val = _start
2025-01-05 16:51:38,200 - DEBUG - on stmt: $208load_global.6 = global(range: <class 'range'>)
2025-01-05 16:51:38,201 - DEBUG - on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4768)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,203 - DEBUG - on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
2025-01-05 16:51:38,205 - DEBUG - on stmt: $phi216.0 = $214get_iter.9
2025-01-05 16:51:38,206 - DEBUG - on stmt: jump 216
2025-01-05 16:51:38,207 - DEBUG - ==== SSA block rewrite pass on 216
2025-01-05 16:51:38,208 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,210 - DEBUG - on stmt: $216for_iter.1 = iternext(value=$phi216.0)
2025-01-05 16:51:38,212 - DEBUG - on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
2025-01-05 16:51:38,214 - DEBUG - on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
2025-01-05 16:51:38,216 - DEBUG - on stmt: $phi218.1 = $216for_iter.2
2025-01-05 16:51:38,217 - DEBUG - on stmt: branch $216for_iter.3, 218, 238
2025-01-05 16:51:38,218 - DEBUG - ==== SSA block rewrite pass on 218
2025-01-05 16:51:38,219 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,220 - DEBUG - on stmt: i = $phi218.1
2025-01-05 16:51:38,221 - DEBUG - on stmt: $226binary_multiply.5 = i * _step
2025-01-05 16:51:38,223 - DEBUG - on stmt: $228binary_add.6 = val + $226binary_multiply.5
2025-01-05 16:51:38,224 - DEBUG - on stmt: arr[i] = $228binary_add.6
2025-01-05 16:51:38,225 - DEBUG - on stmt: jump 216
2025-01-05 16:51:38,226 - DEBUG - ==== SSA block rewrite pass on 238
2025-01-05 16:51:38,227 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1400>
2025-01-05 16:51:38,229 - DEBUG - on stmt: $240return_value.1 = cast(value=arr)
2025-01-05 16:51:38,230 - DEBUG - on stmt: return $240return_value.1
2025-01-05 16:51:38,232 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {74: [<numba.core.ir.Assign object at 0x0000000014BC4DC0>],
             86: [<numba.core.ir.Assign object at 0x0000000014BC4730>]})
2025-01-05 16:51:38,234 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:38,236 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,237 - DEBUG - on stmt: start = arg(0, name=start)
2025-01-05 16:51:38,238 - DEBUG - on stmt: stop = arg(1, name=stop)
2025-01-05 16:51:38,239 - DEBUG - on stmt: step = arg(2, name=step)
2025-01-05 16:51:38,240 - DEBUG - on stmt: dtype = arg(3, name=dtype)
2025-01-05 16:51:38,241 - DEBUG - on stmt: $2load_deref.0 = freevar(start_value: None)
2025-01-05 16:51:38,243 - DEBUG - on stmt: $const4.1 = const(NoneType, None)
2025-01-05 16:51:38,244 - DEBUG - on stmt: $6compare_op.2 = const(int, 0)
2025-01-05 16:51:38,245 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,246 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4749),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,249 - DEBUG - on stmt: jump 14
2025-01-05 16:51:38,251 - DEBUG - ==== SSA block rewrite pass on 14
2025-01-05 16:51:38,252 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,254 - DEBUG - on stmt: $phi16.0 = start
2025-01-05 16:51:38,255 - DEBUG - on stmt: jump 16
2025-01-05 16:51:38,256 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-05 16:51:38,257 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,258 - DEBUG - on stmt: lit_start = $phi16.0
2025-01-05 16:51:38,259 - DEBUG - on stmt: $18load_deref.1 = freevar(stop_value: None)
2025-01-05 16:51:38,261 - DEBUG - on stmt: $const20.2 = const(NoneType, None)
2025-01-05 16:51:38,262 - DEBUG - on stmt: $22compare_op.3 = const(int, 0)
2025-01-05 16:51:38,264 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,265 - DEBUG - on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4750),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,268 - DEBUG - on stmt: jump 30
2025-01-05 16:51:38,270 - DEBUG - ==== SSA block rewrite pass on 30
2025-01-05 16:51:38,271 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,272 - DEBUG - on stmt: $phi32.0 = stop
2025-01-05 16:51:38,274 - DEBUG - on stmt: jump 32
2025-01-05 16:51:38,275 - DEBUG - ==== SSA block rewrite pass on 32
2025-01-05 16:51:38,276 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,278 - DEBUG - on stmt: lit_stop = $phi32.0
2025-01-05 16:51:38,279 - DEBUG - on stmt: $34load_deref.1 = freevar(step_value: None)
2025-01-05 16:51:38,281 - DEBUG - on stmt: $const36.2 = const(NoneType, None)
2025-01-05 16:51:38,282 - DEBUG - on stmt: $38compare_op.3 = const(int, 0)
2025-01-05 16:51:38,283 - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,285 - DEBUG - on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4751),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,287 - DEBUG - on stmt: jump 46
2025-01-05 16:51:38,288 - DEBUG - ==== SSA block rewrite pass on 46
2025-01-05 16:51:38,289 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,291 - DEBUG - on stmt: $phi48.0 = step
2025-01-05 16:51:38,292 - DEBUG - on stmt: jump 48
2025-01-05 16:51:38,293 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:38,294 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,296 - DEBUG - on stmt: lit_step = $phi48.0
2025-01-05 16:51:38,297 - DEBUG - on stmt: $const52.2 = const(NoneType, None)
2025-01-05 16:51:38,298 - DEBUG - on stmt: $54compare_op.3 = lit_step is not $const52.2
2025-01-05 16:51:38,300 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,301 - DEBUG - on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4753),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,304 - DEBUG - on stmt: branch $56pred, 58, 62
2025-01-05 16:51:38,305 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-05 16:51:38,307 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,308 - DEBUG - on stmt: $phi64.0 = lit_step
2025-01-05 16:51:38,309 - DEBUG - on stmt: jump 64
2025-01-05 16:51:38,310 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-05 16:51:38,311 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,313 - DEBUG - on stmt: $const62.0 = const(int, 1)
2025-01-05 16:51:38,314 - DEBUG - on stmt: $phi64.0 = $const62.0
2025-01-05 16:51:38,315 - DEBUG - on stmt: jump 64
2025-01-05 16:51:38,317 - DEBUG - ==== SSA block rewrite pass on 64
2025-01-05 16:51:38,318 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,319 - DEBUG - on stmt: _step = $phi64.0
2025-01-05 16:51:38,320 - DEBUG - on stmt: $const68.2 = const(NoneType, None)
2025-01-05 16:51:38,321 - DEBUG - on stmt: $70compare_op.3 = lit_stop is $const68.2
2025-01-05 16:51:38,323 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,325 - DEBUG - on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4754),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,327 - DEBUG - on stmt: branch $72pred, 74, 86
2025-01-05 16:51:38,328 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-05 16:51:38,329 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,331 - DEBUG - on stmt: _start = const(int, 0)
2025-01-05 16:51:38,332 - DEBUG - on stmt: _stop = lit_start
2025-01-05 16:51:38,333 - DEBUG - on stmt: jump 96
2025-01-05 16:51:38,334 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-05 16:51:38,335 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,337 - DEBUG - on stmt: _start = lit_start
2025-01-05 16:51:38,338 - DEBUG - on stmt: _stop.1 = lit_stop
2025-01-05 16:51:38,339 - DEBUG - on stmt: jump 96
2025-01-05 16:51:38,340 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:38,341 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,342 - DEBUG - on stmt: $const98.1 = const(int, 0)
2025-01-05 16:51:38,343 - DEBUG - on stmt: $100compare_op.2 = _step == $const98.1
2025-01-05 16:51:38,346 - DEBUG - on stmt: bool102 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,348 - DEBUG - on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4759),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,350 - DEBUG - on stmt: branch $102pred, 104, 112
2025-01-05 16:51:38,352 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-05 16:51:38,353 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,354 - DEBUG - on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-05 16:51:38,356 - DEBUG - on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
2025-01-05 16:51:38,358 - DEBUG - on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4760)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,360 - DEBUG - on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2025-01-05 16:51:38,362 - DEBUG - ==== SSA block rewrite pass on 112
2025-01-05 16:51:38,363 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,365 - DEBUG - on stmt: $116binary_subtract.2 = _stop - _start
2025-01-05 16:51:38,367 - DEBUG - find_def var='_stop' stmt=$116binary_subtract.2 = _stop - _start
2025-01-05 16:51:38,368 - DEBUG - find_def_from_top label 112
2025-01-05 16:51:38,369 - DEBUG - idom 96 from label 112
2025-01-05 16:51:38,370 - DEBUG - find_def_from_bottom label 96
2025-01-05 16:51:38,371 - DEBUG - find_def_from_top label 96
2025-01-05 16:51:38,373 - DEBUG - insert phi node _stop.2 = phi(incoming_values=[], incoming_blocks=[]) at 96
2025-01-05 16:51:38,374 - DEBUG - find_def_from_bottom label 74
2025-01-05 16:51:38,375 - DEBUG - incoming_def _stop = lit_start
2025-01-05 16:51:38,377 - DEBUG - find_def_from_bottom label 86
2025-01-05 16:51:38,378 - DEBUG - incoming_def _stop.1 = lit_stop
2025-01-05 16:51:38,379 - DEBUG - replaced with: $116binary_subtract.2 = _stop.2 - _start
2025-01-05 16:51:38,381 - DEBUG - on stmt: nitems_c = $116binary_subtract.2 / _step
2025-01-05 16:51:38,383 - DEBUG - on stmt: $124load_global.5 = global(int: <class 'int'>)
2025-01-05 16:51:38,384 - DEBUG - on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:38,386 - DEBUG - on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
2025-01-05 16:51:38,388 - DEBUG - on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
2025-01-05 16:51:38,389 - DEBUG - on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,392 - DEBUG - on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,394 - DEBUG - on stmt: $140load_deref.12 = freevar(use_complex: False)
2025-01-05 16:51:38,396 - DEBUG - on stmt: $const142.13 = const(bool, True)
2025-01-05 16:51:38,397 - DEBUG - on stmt: $144compare_op.14 = const(int, 0)
2025-01-05 16:51:38,398 - DEBUG - on stmt: bool146 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,400 - DEBUG - on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4766),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,402 - DEBUG - on stmt: jump 182
2025-01-05 16:51:38,404 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-05 16:51:38,405 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,406 - DEBUG - on stmt: $182load_global.0 = global(max: <built-in function max>)
2025-01-05 16:51:38,408 - DEBUG - on stmt: $const186.2 = const(int, 0)
2025-01-05 16:51:38,409 - DEBUG - on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4763), Var($const186.2, arrayobj.py:4770)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,412 - DEBUG - on stmt: jump 192
2025-01-05 16:51:38,414 - DEBUG - ==== SSA block rewrite pass on 192
2025-01-05 16:51:38,415 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,416 - DEBUG - on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:38,419 - DEBUG - on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
2025-01-05 16:51:38,421 - DEBUG - on stmt: $198load_deref.3 = freevar(true_dtype: float64)
2025-01-05 16:51:38,423 - DEBUG - on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4768), Var($198load_deref.3, arrayobj.py:4771)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,426 - DEBUG - on stmt: val = _start
2025-01-05 16:51:38,428 - DEBUG - on stmt: $208load_global.6 = global(range: <class 'range'>)
2025-01-05 16:51:38,429 - DEBUG - on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4768)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,432 - DEBUG - on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
2025-01-05 16:51:38,434 - DEBUG - on stmt: $phi216.0 = $214get_iter.9
2025-01-05 16:51:38,435 - DEBUG - on stmt: jump 216
2025-01-05 16:51:38,436 - DEBUG - ==== SSA block rewrite pass on 216
2025-01-05 16:51:38,437 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,439 - DEBUG - on stmt: $216for_iter.1 = iternext(value=$phi216.0)
2025-01-05 16:51:38,441 - DEBUG - on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
2025-01-05 16:51:38,443 - DEBUG - on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
2025-01-05 16:51:38,444 - DEBUG - on stmt: $phi218.1 = $216for_iter.2
2025-01-05 16:51:38,446 - DEBUG - on stmt: branch $216for_iter.3, 218, 238
2025-01-05 16:51:38,447 - DEBUG - ==== SSA block rewrite pass on 218
2025-01-05 16:51:38,448 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,449 - DEBUG - on stmt: i = $phi218.1
2025-01-05 16:51:38,450 - DEBUG - on stmt: $226binary_multiply.5 = i * _step
2025-01-05 16:51:38,452 - DEBUG - on stmt: $228binary_add.6 = val + $226binary_multiply.5
2025-01-05 16:51:38,453 - DEBUG - on stmt: arr[i] = $228binary_add.6
2025-01-05 16:51:38,454 - DEBUG - on stmt: jump 216
2025-01-05 16:51:38,455 - DEBUG - ==== SSA block rewrite pass on 238
2025-01-05 16:51:38,456 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,458 - DEBUG - on stmt: $240return_value.1 = cast(value=arr)
2025-01-05 16:51:38,459 - DEBUG - on stmt: return $240return_value.1
2025-01-05 16:51:38,460 - DEBUG - Fix SSA violator on var $phi64.0
2025-01-05 16:51:38,461 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:38,462 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,464 - DEBUG - on stmt: start = arg(0, name=start)
2025-01-05 16:51:38,465 - DEBUG - on stmt: stop = arg(1, name=stop)
2025-01-05 16:51:38,466 - DEBUG - on stmt: step = arg(2, name=step)
2025-01-05 16:51:38,467 - DEBUG - on stmt: dtype = arg(3, name=dtype)
2025-01-05 16:51:38,468 - DEBUG - on stmt: $2load_deref.0 = freevar(start_value: None)
2025-01-05 16:51:38,470 - DEBUG - on stmt: $const4.1 = const(NoneType, None)
2025-01-05 16:51:38,471 - DEBUG - on stmt: $6compare_op.2 = const(int, 0)
2025-01-05 16:51:38,472 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,473 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4749),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,475 - DEBUG - on stmt: jump 14
2025-01-05 16:51:38,477 - DEBUG - ==== SSA block rewrite pass on 14
2025-01-05 16:51:38,478 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,479 - DEBUG - on stmt: $phi16.0 = start
2025-01-05 16:51:38,481 - DEBUG - on stmt: jump 16
2025-01-05 16:51:38,482 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-05 16:51:38,483 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,485 - DEBUG - on stmt: lit_start = $phi16.0
2025-01-05 16:51:38,486 - DEBUG - on stmt: $18load_deref.1 = freevar(stop_value: None)
2025-01-05 16:51:38,487 - DEBUG - on stmt: $const20.2 = const(NoneType, None)
2025-01-05 16:51:38,488 - DEBUG - on stmt: $22compare_op.3 = const(int, 0)
2025-01-05 16:51:38,489 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,491 - DEBUG - on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4750),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,493 - DEBUG - on stmt: jump 30
2025-01-05 16:51:38,494 - DEBUG - ==== SSA block rewrite pass on 30
2025-01-05 16:51:38,495 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,498 - DEBUG - on stmt: $phi32.0 = stop
2025-01-05 16:51:38,500 - DEBUG - on stmt: jump 32
2025-01-05 16:51:38,501 - DEBUG - ==== SSA block rewrite pass on 32
2025-01-05 16:51:38,502 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,503 - DEBUG - on stmt: lit_stop = $phi32.0
2025-01-05 16:51:38,504 - DEBUG - on stmt: $34load_deref.1 = freevar(step_value: None)
2025-01-05 16:51:38,506 - DEBUG - on stmt: $const36.2 = const(NoneType, None)
2025-01-05 16:51:38,507 - DEBUG - on stmt: $38compare_op.3 = const(int, 0)
2025-01-05 16:51:38,508 - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,510 - DEBUG - on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4751),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,512 - DEBUG - on stmt: jump 46
2025-01-05 16:51:38,513 - DEBUG - ==== SSA block rewrite pass on 46
2025-01-05 16:51:38,514 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,516 - DEBUG - on stmt: $phi48.0 = step
2025-01-05 16:51:38,517 - DEBUG - on stmt: jump 48
2025-01-05 16:51:38,518 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:38,519 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,521 - DEBUG - on stmt: lit_step = $phi48.0
2025-01-05 16:51:38,522 - DEBUG - on stmt: $const52.2 = const(NoneType, None)
2025-01-05 16:51:38,523 - DEBUG - on stmt: $54compare_op.3 = lit_step is not $const52.2
2025-01-05 16:51:38,528 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,530 - DEBUG - on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4753),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,532 - DEBUG - on stmt: branch $56pred, 58, 62
2025-01-05 16:51:38,534 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-05 16:51:38,535 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,536 - DEBUG - on stmt: $phi64.0 = lit_step
2025-01-05 16:51:38,538 - DEBUG - first assign: $phi64.0
2025-01-05 16:51:38,539 - DEBUG - replaced with: $phi64.0 = lit_step
2025-01-05 16:51:38,540 - DEBUG - on stmt: jump 64
2025-01-05 16:51:38,541 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-05 16:51:38,542 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,543 - DEBUG - on stmt: $const62.0 = const(int, 1)
2025-01-05 16:51:38,544 - DEBUG - on stmt: $phi64.0 = $const62.0
2025-01-05 16:51:38,545 - DEBUG - replaced with: $phi64.0.1 = $const62.0
2025-01-05 16:51:38,546 - DEBUG - on stmt: jump 64
2025-01-05 16:51:38,548 - DEBUG - ==== SSA block rewrite pass on 64
2025-01-05 16:51:38,549 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,550 - DEBUG - on stmt: _step = $phi64.0
2025-01-05 16:51:38,551 - DEBUG - on stmt: $const68.2 = const(NoneType, None)
2025-01-05 16:51:38,552 - DEBUG - on stmt: $70compare_op.3 = lit_stop is $const68.2
2025-01-05 16:51:38,553 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,555 - DEBUG - on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4754),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,557 - DEBUG - on stmt: branch $72pred, 74, 86
2025-01-05 16:51:38,558 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-05 16:51:38,559 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,561 - DEBUG - on stmt: _start = const(int, 0)
2025-01-05 16:51:38,562 - DEBUG - on stmt: _stop = lit_start
2025-01-05 16:51:38,563 - DEBUG - on stmt: jump 96
2025-01-05 16:51:38,564 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-05 16:51:38,565 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,567 - DEBUG - on stmt: _start = lit_start
2025-01-05 16:51:38,568 - DEBUG - on stmt: _stop.1 = lit_stop
2025-01-05 16:51:38,569 - DEBUG - on stmt: jump 96
2025-01-05 16:51:38,569 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:38,570 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,572 - DEBUG - on stmt: _stop.2 = phi(incoming_values=[Var(_stop, arrayobj.py:4755), Var(_stop.1, arrayobj.py:4757)], incoming_blocks=[74, 86])
2025-01-05 16:51:38,575 - DEBUG - on stmt: $const98.1 = const(int, 0)
2025-01-05 16:51:38,576 - DEBUG - on stmt: $100compare_op.2 = _step == $const98.1
2025-01-05 16:51:38,578 - DEBUG - on stmt: bool102 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,579 - DEBUG - on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4759),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,582 - DEBUG - on stmt: branch $102pred, 104, 112
2025-01-05 16:51:38,583 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-05 16:51:38,584 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,585 - DEBUG - on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-05 16:51:38,587 - DEBUG - on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
2025-01-05 16:51:38,588 - DEBUG - on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4760)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,591 - DEBUG - on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2025-01-05 16:51:38,592 - DEBUG - ==== SSA block rewrite pass on 112
2025-01-05 16:51:38,594 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,595 - DEBUG - on stmt: $116binary_subtract.2 = _stop.2 - _start
2025-01-05 16:51:38,597 - DEBUG - on stmt: nitems_c = $116binary_subtract.2 / _step
2025-01-05 16:51:38,599 - DEBUG - on stmt: $124load_global.5 = global(int: <class 'int'>)
2025-01-05 16:51:38,600 - DEBUG - on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:38,602 - DEBUG - on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
2025-01-05 16:51:38,603 - DEBUG - on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
2025-01-05 16:51:38,605 - DEBUG - on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,607 - DEBUG - on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,610 - DEBUG - on stmt: $140load_deref.12 = freevar(use_complex: False)
2025-01-05 16:51:38,612 - DEBUG - on stmt: $const142.13 = const(bool, True)
2025-01-05 16:51:38,613 - DEBUG - on stmt: $144compare_op.14 = const(int, 0)
2025-01-05 16:51:38,614 - DEBUG - on stmt: bool146 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,616 - DEBUG - on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4766),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,618 - DEBUG - on stmt: jump 182
2025-01-05 16:51:38,619 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-05 16:51:38,620 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,621 - DEBUG - on stmt: $182load_global.0 = global(max: <built-in function max>)
2025-01-05 16:51:38,623 - DEBUG - on stmt: $const186.2 = const(int, 0)
2025-01-05 16:51:38,624 - DEBUG - on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4763), Var($const186.2, arrayobj.py:4770)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,627 - DEBUG - on stmt: jump 192
2025-01-05 16:51:38,628 - DEBUG - ==== SSA block rewrite pass on 192
2025-01-05 16:51:38,629 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,631 - DEBUG - on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:38,633 - DEBUG - on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
2025-01-05 16:51:38,634 - DEBUG - on stmt: $198load_deref.3 = freevar(true_dtype: float64)
2025-01-05 16:51:38,636 - DEBUG - on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4768), Var($198load_deref.3, arrayobj.py:4771)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,638 - DEBUG - on stmt: val = _start
2025-01-05 16:51:38,639 - DEBUG - on stmt: $208load_global.6 = global(range: <class 'range'>)
2025-01-05 16:51:38,641 - DEBUG - on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4768)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,643 - DEBUG - on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
2025-01-05 16:51:38,645 - DEBUG - on stmt: $phi216.0 = $214get_iter.9
2025-01-05 16:51:38,646 - DEBUG - on stmt: jump 216
2025-01-05 16:51:38,647 - DEBUG - ==== SSA block rewrite pass on 216
2025-01-05 16:51:38,648 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,650 - DEBUG - on stmt: $216for_iter.1 = iternext(value=$phi216.0)
2025-01-05 16:51:38,652 - DEBUG - on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
2025-01-05 16:51:38,654 - DEBUG - on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
2025-01-05 16:51:38,655 - DEBUG - on stmt: $phi218.1 = $216for_iter.2
2025-01-05 16:51:38,656 - DEBUG - on stmt: branch $216for_iter.3, 218, 238
2025-01-05 16:51:38,657 - DEBUG - ==== SSA block rewrite pass on 218
2025-01-05 16:51:38,658 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,659 - DEBUG - on stmt: i = $phi218.1
2025-01-05 16:51:38,660 - DEBUG - on stmt: $226binary_multiply.5 = i * _step
2025-01-05 16:51:38,661 - DEBUG - on stmt: $228binary_add.6 = val + $226binary_multiply.5
2025-01-05 16:51:38,663 - DEBUG - on stmt: arr[i] = $228binary_add.6
2025-01-05 16:51:38,664 - DEBUG - on stmt: jump 216
2025-01-05 16:51:38,665 - DEBUG - ==== SSA block rewrite pass on 238
2025-01-05 16:51:38,666 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014BC4E80>
2025-01-05 16:51:38,667 - DEBUG - on stmt: $240return_value.1 = cast(value=arr)
2025-01-05 16:51:38,668 - DEBUG - on stmt: return $240return_value.1
2025-01-05 16:51:38,669 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {58: [<numba.core.ir.Assign object at 0x0000000014BC44C0>],
             62: [<numba.core.ir.Assign object at 0x0000000014BC4BE0>]})
2025-01-05 16:51:38,672 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:38,673 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,674 - DEBUG - on stmt: start = arg(0, name=start)
2025-01-05 16:51:38,675 - DEBUG - on stmt: stop = arg(1, name=stop)
2025-01-05 16:51:38,676 - DEBUG - on stmt: step = arg(2, name=step)
2025-01-05 16:51:38,677 - DEBUG - on stmt: dtype = arg(3, name=dtype)
2025-01-05 16:51:38,678 - DEBUG - on stmt: $2load_deref.0 = freevar(start_value: None)
2025-01-05 16:51:38,679 - DEBUG - on stmt: $const4.1 = const(NoneType, None)
2025-01-05 16:51:38,681 - DEBUG - on stmt: $6compare_op.2 = const(int, 0)
2025-01-05 16:51:38,682 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,683 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4749),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,685 - DEBUG - on stmt: jump 14
2025-01-05 16:51:38,686 - DEBUG - ==== SSA block rewrite pass on 14
2025-01-05 16:51:38,687 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,688 - DEBUG - on stmt: $phi16.0 = start
2025-01-05 16:51:38,689 - DEBUG - on stmt: jump 16
2025-01-05 16:51:38,690 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-05 16:51:38,691 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,692 - DEBUG - on stmt: lit_start = $phi16.0
2025-01-05 16:51:38,693 - DEBUG - on stmt: $18load_deref.1 = freevar(stop_value: None)
2025-01-05 16:51:38,695 - DEBUG - on stmt: $const20.2 = const(NoneType, None)
2025-01-05 16:51:38,696 - DEBUG - on stmt: $22compare_op.3 = const(int, 0)
2025-01-05 16:51:38,697 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,698 - DEBUG - on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4750),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,701 - DEBUG - on stmt: jump 30
2025-01-05 16:51:38,702 - DEBUG - ==== SSA block rewrite pass on 30
2025-01-05 16:51:38,703 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,705 - DEBUG - on stmt: $phi32.0 = stop
2025-01-05 16:51:38,706 - DEBUG - on stmt: jump 32
2025-01-05 16:51:38,707 - DEBUG - ==== SSA block rewrite pass on 32
2025-01-05 16:51:38,708 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,709 - DEBUG - on stmt: lit_stop = $phi32.0
2025-01-05 16:51:38,710 - DEBUG - on stmt: $34load_deref.1 = freevar(step_value: None)
2025-01-05 16:51:38,711 - DEBUG - on stmt: $const36.2 = const(NoneType, None)
2025-01-05 16:51:38,712 - DEBUG - on stmt: $38compare_op.3 = const(int, 0)
2025-01-05 16:51:38,713 - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,715 - DEBUG - on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4751),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,717 - DEBUG - on stmt: jump 46
2025-01-05 16:51:38,718 - DEBUG - ==== SSA block rewrite pass on 46
2025-01-05 16:51:38,719 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,721 - DEBUG - on stmt: $phi48.0 = step
2025-01-05 16:51:38,722 - DEBUG - on stmt: jump 48
2025-01-05 16:51:38,723 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:38,724 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,726 - DEBUG - on stmt: lit_step = $phi48.0
2025-01-05 16:51:38,727 - DEBUG - on stmt: $const52.2 = const(NoneType, None)
2025-01-05 16:51:38,728 - DEBUG - on stmt: $54compare_op.3 = lit_step is not $const52.2
2025-01-05 16:51:38,731 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,732 - DEBUG - on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4753),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,735 - DEBUG - on stmt: branch $56pred, 58, 62
2025-01-05 16:51:38,736 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-05 16:51:38,737 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,738 - DEBUG - on stmt: $phi64.0 = lit_step
2025-01-05 16:51:38,739 - DEBUG - on stmt: jump 64
2025-01-05 16:51:38,740 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-05 16:51:38,741 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,742 - DEBUG - on stmt: $const62.0 = const(int, 1)
2025-01-05 16:51:38,743 - DEBUG - on stmt: $phi64.0.1 = $const62.0
2025-01-05 16:51:38,744 - DEBUG - on stmt: jump 64
2025-01-05 16:51:38,745 - DEBUG - ==== SSA block rewrite pass on 64
2025-01-05 16:51:38,746 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,747 - DEBUG - on stmt: _step = $phi64.0
2025-01-05 16:51:38,749 - DEBUG - find_def var='$phi64.0' stmt=_step = $phi64.0
2025-01-05 16:51:38,750 - DEBUG - find_def_from_top label 64
2025-01-05 16:51:38,751 - DEBUG - insert phi node $phi64.0.2 = phi(incoming_values=[], incoming_blocks=[]) at 64
2025-01-05 16:51:38,752 - DEBUG - find_def_from_bottom label 58
2025-01-05 16:51:38,753 - DEBUG - incoming_def $phi64.0 = lit_step
2025-01-05 16:51:38,755 - DEBUG - find_def_from_bottom label 62
2025-01-05 16:51:38,756 - DEBUG - incoming_def $phi64.0.1 = $const62.0
2025-01-05 16:51:38,756 - DEBUG - replaced with: _step = $phi64.0.2
2025-01-05 16:51:38,757 - DEBUG - on stmt: $const68.2 = const(NoneType, None)
2025-01-05 16:51:38,758 - DEBUG - on stmt: $70compare_op.3 = lit_stop is $const68.2
2025-01-05 16:51:38,760 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,761 - DEBUG - on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4754),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,764 - DEBUG - on stmt: branch $72pred, 74, 86
2025-01-05 16:51:38,765 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-05 16:51:38,766 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,767 - DEBUG - on stmt: _start = const(int, 0)
2025-01-05 16:51:38,768 - DEBUG - on stmt: _stop = lit_start
2025-01-05 16:51:38,769 - DEBUG - on stmt: jump 96
2025-01-05 16:51:38,770 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-05 16:51:38,771 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,772 - DEBUG - on stmt: _start = lit_start
2025-01-05 16:51:38,773 - DEBUG - on stmt: _stop.1 = lit_stop
2025-01-05 16:51:38,774 - DEBUG - on stmt: jump 96
2025-01-05 16:51:38,775 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:38,776 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,777 - DEBUG - on stmt: _stop.2 = phi(incoming_values=[Var(_stop, arrayobj.py:4755), Var(_stop.1, arrayobj.py:4757)], incoming_blocks=[74, 86])
2025-01-05 16:51:38,779 - DEBUG - on stmt: $const98.1 = const(int, 0)
2025-01-05 16:51:38,781 - DEBUG - on stmt: $100compare_op.2 = _step == $const98.1
2025-01-05 16:51:38,783 - DEBUG - on stmt: bool102 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,784 - DEBUG - on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4759),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,787 - DEBUG - on stmt: branch $102pred, 104, 112
2025-01-05 16:51:38,788 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-05 16:51:38,789 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,790 - DEBUG - on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-05 16:51:38,792 - DEBUG - on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
2025-01-05 16:51:38,793 - DEBUG - on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4760)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,796 - DEBUG - on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2025-01-05 16:51:38,798 - DEBUG - ==== SSA block rewrite pass on 112
2025-01-05 16:51:38,799 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,801 - DEBUG - on stmt: $116binary_subtract.2 = _stop.2 - _start
2025-01-05 16:51:38,803 - DEBUG - on stmt: nitems_c = $116binary_subtract.2 / _step
2025-01-05 16:51:38,804 - DEBUG - on stmt: $124load_global.5 = global(int: <class 'int'>)
2025-01-05 16:51:38,806 - DEBUG - on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:38,807 - DEBUG - on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
2025-01-05 16:51:38,809 - DEBUG - on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
2025-01-05 16:51:38,811 - DEBUG - on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,814 - DEBUG - on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,816 - DEBUG - on stmt: $140load_deref.12 = freevar(use_complex: False)
2025-01-05 16:51:38,818 - DEBUG - on stmt: $const142.13 = const(bool, True)
2025-01-05 16:51:38,819 - DEBUG - on stmt: $144compare_op.14 = const(int, 0)
2025-01-05 16:51:38,820 - DEBUG - on stmt: bool146 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,821 - DEBUG - on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4766),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,823 - DEBUG - on stmt: jump 182
2025-01-05 16:51:38,824 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-05 16:51:38,825 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,826 - DEBUG - on stmt: $182load_global.0 = global(max: <built-in function max>)
2025-01-05 16:51:38,828 - DEBUG - on stmt: $const186.2 = const(int, 0)
2025-01-05 16:51:38,829 - DEBUG - on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4763), Var($const186.2, arrayobj.py:4770)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,832 - DEBUG - on stmt: jump 192
2025-01-05 16:51:38,833 - DEBUG - ==== SSA block rewrite pass on 192
2025-01-05 16:51:38,835 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,836 - DEBUG - on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:38,838 - DEBUG - on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
2025-01-05 16:51:38,840 - DEBUG - on stmt: $198load_deref.3 = freevar(true_dtype: float64)
2025-01-05 16:51:38,841 - DEBUG - on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4768), Var($198load_deref.3, arrayobj.py:4771)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,844 - DEBUG - on stmt: val = _start
2025-01-05 16:51:38,845 - DEBUG - on stmt: $208load_global.6 = global(range: <class 'range'>)
2025-01-05 16:51:38,847 - DEBUG - on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4768)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,850 - DEBUG - on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
2025-01-05 16:51:38,852 - DEBUG - on stmt: $phi216.0 = $214get_iter.9
2025-01-05 16:51:38,853 - DEBUG - on stmt: jump 216
2025-01-05 16:51:38,854 - DEBUG - ==== SSA block rewrite pass on 216
2025-01-05 16:51:38,854 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,856 - DEBUG - on stmt: $216for_iter.1 = iternext(value=$phi216.0)
2025-01-05 16:51:38,857 - DEBUG - on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
2025-01-05 16:51:38,859 - DEBUG - on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
2025-01-05 16:51:38,860 - DEBUG - on stmt: $phi218.1 = $216for_iter.2
2025-01-05 16:51:38,861 - DEBUG - on stmt: branch $216for_iter.3, 218, 238
2025-01-05 16:51:38,862 - DEBUG - ==== SSA block rewrite pass on 218
2025-01-05 16:51:38,863 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,865 - DEBUG - on stmt: i = $phi218.1
2025-01-05 16:51:38,866 - DEBUG - on stmt: $226binary_multiply.5 = i * _step
2025-01-05 16:51:38,867 - DEBUG - on stmt: $228binary_add.6 = val + $226binary_multiply.5
2025-01-05 16:51:38,869 - DEBUG - on stmt: arr[i] = $228binary_add.6
2025-01-05 16:51:38,870 - DEBUG - on stmt: jump 216
2025-01-05 16:51:38,871 - DEBUG - ==== SSA block rewrite pass on 238
2025-01-05 16:51:38,872 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1400>
2025-01-05 16:51:38,873 - DEBUG - on stmt: $240return_value.1 = cast(value=arr)
2025-01-05 16:51:38,875 - DEBUG - on stmt: return $240return_value.1
2025-01-05 16:51:38,875 - DEBUG - Fix SSA violator on var _start
2025-01-05 16:51:38,877 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:38,878 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:38,879 - DEBUG - on stmt: start = arg(0, name=start)
2025-01-05 16:51:38,881 - DEBUG - on stmt: stop = arg(1, name=stop)
2025-01-05 16:51:38,882 - DEBUG - on stmt: step = arg(2, name=step)
2025-01-05 16:51:38,883 - DEBUG - on stmt: dtype = arg(3, name=dtype)
2025-01-05 16:51:38,884 - DEBUG - on stmt: $2load_deref.0 = freevar(start_value: None)
2025-01-05 16:51:38,885 - DEBUG - on stmt: $const4.1 = const(NoneType, None)
2025-01-05 16:51:38,886 - DEBUG - on stmt: $6compare_op.2 = const(int, 0)
2025-01-05 16:51:38,887 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,888 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4749),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,890 - DEBUG - on stmt: jump 14
2025-01-05 16:51:38,891 - DEBUG - ==== SSA block rewrite pass on 14
2025-01-05 16:51:38,892 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:38,893 - DEBUG - on stmt: $phi16.0 = start
2025-01-05 16:51:38,895 - DEBUG - on stmt: jump 16
2025-01-05 16:51:38,895 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-05 16:51:38,896 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:38,898 - DEBUG - on stmt: lit_start = $phi16.0
2025-01-05 16:51:38,899 - DEBUG - on stmt: $18load_deref.1 = freevar(stop_value: None)
2025-01-05 16:51:38,900 - DEBUG - on stmt: $const20.2 = const(NoneType, None)
2025-01-05 16:51:38,901 - DEBUG - on stmt: $22compare_op.3 = const(int, 0)
2025-01-05 16:51:38,902 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,904 - DEBUG - on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4750),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,906 - DEBUG - on stmt: jump 30
2025-01-05 16:51:38,907 - DEBUG - ==== SSA block rewrite pass on 30
2025-01-05 16:51:38,908 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:38,909 - DEBUG - on stmt: $phi32.0 = stop
2025-01-05 16:51:38,910 - DEBUG - on stmt: jump 32
2025-01-05 16:51:38,911 - DEBUG - ==== SSA block rewrite pass on 32
2025-01-05 16:51:38,912 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:38,914 - DEBUG - on stmt: lit_stop = $phi32.0
2025-01-05 16:51:38,915 - DEBUG - on stmt: $34load_deref.1 = freevar(step_value: None)
2025-01-05 16:51:38,916 - DEBUG - on stmt: $const36.2 = const(NoneType, None)
2025-01-05 16:51:38,917 - DEBUG - on stmt: $38compare_op.3 = const(int, 0)
2025-01-05 16:51:38,918 - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,919 - DEBUG - on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4751),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,922 - DEBUG - on stmt: jump 46
2025-01-05 16:51:38,923 - DEBUG - ==== SSA block rewrite pass on 46
2025-01-05 16:51:38,925 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:38,926 - DEBUG - on stmt: $phi48.0 = step
2025-01-05 16:51:38,927 - DEBUG - on stmt: jump 48
2025-01-05 16:51:38,928 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:38,929 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:38,931 - DEBUG - on stmt: lit_step = $phi48.0
2025-01-05 16:51:38,932 - DEBUG - on stmt: $const52.2 = const(NoneType, None)
2025-01-05 16:51:38,932 - DEBUG - on stmt: $54compare_op.3 = lit_step is not $const52.2
2025-01-05 16:51:38,934 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,935 - DEBUG - on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4753),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,938 - DEBUG - on stmt: branch $56pred, 58, 62
2025-01-05 16:51:38,939 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-05 16:51:38,940 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:38,941 - DEBUG - on stmt: $phi64.0 = lit_step
2025-01-05 16:51:38,943 - DEBUG - on stmt: jump 64
2025-01-05 16:51:38,944 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-05 16:51:38,945 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:38,946 - DEBUG - on stmt: $const62.0 = const(int, 1)
2025-01-05 16:51:38,947 - DEBUG - on stmt: $phi64.0.1 = $const62.0
2025-01-05 16:51:38,948 - DEBUG - on stmt: jump 64
2025-01-05 16:51:38,949 - DEBUG - ==== SSA block rewrite pass on 64
2025-01-05 16:51:38,950 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:38,951 - DEBUG - on stmt: $phi64.0.2 = phi(incoming_values=[Var($phi64.0, arrayobj.py:4753), Var($phi64.0.1, arrayobj.py:4753)], incoming_blocks=[58, 62])
2025-01-05 16:51:38,954 - DEBUG - on stmt: _step = $phi64.0.2
2025-01-05 16:51:38,955 - DEBUG - on stmt: $const68.2 = const(NoneType, None)
2025-01-05 16:51:38,956 - DEBUG - on stmt: $70compare_op.3 = lit_stop is $const68.2
2025-01-05 16:51:38,957 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,959 - DEBUG - on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4754),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,961 - DEBUG - on stmt: branch $72pred, 74, 86
2025-01-05 16:51:38,962 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-05 16:51:38,963 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:38,965 - DEBUG - on stmt: _start = const(int, 0)
2025-01-05 16:51:38,966 - DEBUG - first assign: _start
2025-01-05 16:51:38,967 - DEBUG - replaced with: _start = const(int, 0)
2025-01-05 16:51:38,968 - DEBUG - on stmt: _stop = lit_start
2025-01-05 16:51:38,969 - DEBUG - on stmt: jump 96
2025-01-05 16:51:38,970 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-05 16:51:38,971 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:38,972 - DEBUG - on stmt: _start = lit_start
2025-01-05 16:51:38,974 - DEBUG - replaced with: _start.1 = lit_start
2025-01-05 16:51:38,975 - DEBUG - on stmt: _stop.1 = lit_stop
2025-01-05 16:51:38,976 - DEBUG - on stmt: jump 96
2025-01-05 16:51:38,976 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:38,977 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:38,979 - DEBUG - on stmt: _stop.2 = phi(incoming_values=[Var(_stop, arrayobj.py:4755), Var(_stop.1, arrayobj.py:4757)], incoming_blocks=[74, 86])
2025-01-05 16:51:38,981 - DEBUG - on stmt: $const98.1 = const(int, 0)
2025-01-05 16:51:38,982 - DEBUG - on stmt: $100compare_op.2 = _step == $const98.1
2025-01-05 16:51:38,984 - DEBUG - on stmt: bool102 = global(bool: <class 'bool'>)
2025-01-05 16:51:38,985 - DEBUG - on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4759),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,988 - DEBUG - on stmt: branch $102pred, 104, 112
2025-01-05 16:51:38,989 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-05 16:51:38,990 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:38,991 - DEBUG - on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-05 16:51:38,993 - DEBUG - on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
2025-01-05 16:51:38,994 - DEBUG - on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4760)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:38,996 - DEBUG - on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2025-01-05 16:51:38,998 - DEBUG - ==== SSA block rewrite pass on 112
2025-01-05 16:51:38,999 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:39,000 - DEBUG - on stmt: $116binary_subtract.2 = _stop.2 - _start
2025-01-05 16:51:39,002 - DEBUG - on stmt: nitems_c = $116binary_subtract.2 / _step
2025-01-05 16:51:39,004 - DEBUG - on stmt: $124load_global.5 = global(int: <class 'int'>)
2025-01-05 16:51:39,006 - DEBUG - on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:39,008 - DEBUG - on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
2025-01-05 16:51:39,009 - DEBUG - on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
2025-01-05 16:51:39,011 - DEBUG - on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,013 - DEBUG - on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,015 - DEBUG - on stmt: $140load_deref.12 = freevar(use_complex: False)
2025-01-05 16:51:39,017 - DEBUG - on stmt: $const142.13 = const(bool, True)
2025-01-05 16:51:39,018 - DEBUG - on stmt: $144compare_op.14 = const(int, 0)
2025-01-05 16:51:39,019 - DEBUG - on stmt: bool146 = global(bool: <class 'bool'>)
2025-01-05 16:51:39,020 - DEBUG - on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4766),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,022 - DEBUG - on stmt: jump 182
2025-01-05 16:51:39,023 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-05 16:51:39,025 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:39,026 - DEBUG - on stmt: $182load_global.0 = global(max: <built-in function max>)
2025-01-05 16:51:39,028 - DEBUG - on stmt: $const186.2 = const(int, 0)
2025-01-05 16:51:39,030 - DEBUG - on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4763), Var($const186.2, arrayobj.py:4770)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,033 - DEBUG - on stmt: jump 192
2025-01-05 16:51:39,035 - DEBUG - ==== SSA block rewrite pass on 192
2025-01-05 16:51:39,036 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:39,037 - DEBUG - on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:39,039 - DEBUG - on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
2025-01-05 16:51:39,041 - DEBUG - on stmt: $198load_deref.3 = freevar(true_dtype: float64)
2025-01-05 16:51:39,042 - DEBUG - on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4768), Var($198load_deref.3, arrayobj.py:4771)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,045 - DEBUG - on stmt: val = _start
2025-01-05 16:51:39,046 - DEBUG - on stmt: $208load_global.6 = global(range: <class 'range'>)
2025-01-05 16:51:39,048 - DEBUG - on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4768)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,050 - DEBUG - on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
2025-01-05 16:51:39,051 - DEBUG - on stmt: $phi216.0 = $214get_iter.9
2025-01-05 16:51:39,052 - DEBUG - on stmt: jump 216
2025-01-05 16:51:39,053 - DEBUG - ==== SSA block rewrite pass on 216
2025-01-05 16:51:39,054 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:39,056 - DEBUG - on stmt: $216for_iter.1 = iternext(value=$phi216.0)
2025-01-05 16:51:39,057 - DEBUG - on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
2025-01-05 16:51:39,059 - DEBUG - on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
2025-01-05 16:51:39,060 - DEBUG - on stmt: $phi218.1 = $216for_iter.2
2025-01-05 16:51:39,061 - DEBUG - on stmt: branch $216for_iter.3, 218, 238
2025-01-05 16:51:39,062 - DEBUG - ==== SSA block rewrite pass on 218
2025-01-05 16:51:39,064 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:39,065 - DEBUG - on stmt: i = $phi218.1
2025-01-05 16:51:39,066 - DEBUG - on stmt: $226binary_multiply.5 = i * _step
2025-01-05 16:51:39,067 - DEBUG - on stmt: $228binary_add.6 = val + $226binary_multiply.5
2025-01-05 16:51:39,068 - DEBUG - on stmt: arr[i] = $228binary_add.6
2025-01-05 16:51:39,070 - DEBUG - on stmt: jump 216
2025-01-05 16:51:39,071 - DEBUG - ==== SSA block rewrite pass on 238
2025-01-05 16:51:39,072 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x0000000014AF1E20>
2025-01-05 16:51:39,073 - DEBUG - on stmt: $240return_value.1 = cast(value=arr)
2025-01-05 16:51:39,074 - DEBUG - on stmt: return $240return_value.1
2025-01-05 16:51:39,075 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {74: [<numba.core.ir.Assign object at 0x0000000014BC4DF0>],
             86: [<numba.core.ir.Assign object at 0x0000000014C33C40>]})
2025-01-05 16:51:39,078 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-05 16:51:39,079 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,080 - DEBUG - on stmt: start = arg(0, name=start)
2025-01-05 16:51:39,081 - DEBUG - on stmt: stop = arg(1, name=stop)
2025-01-05 16:51:39,082 - DEBUG - on stmt: step = arg(2, name=step)
2025-01-05 16:51:39,083 - DEBUG - on stmt: dtype = arg(3, name=dtype)
2025-01-05 16:51:39,084 - DEBUG - on stmt: $2load_deref.0 = freevar(start_value: None)
2025-01-05 16:51:39,086 - DEBUG - on stmt: $const4.1 = const(NoneType, None)
2025-01-05 16:51:39,087 - DEBUG - on stmt: $6compare_op.2 = const(int, 0)
2025-01-05 16:51:39,087 - DEBUG - on stmt: bool8 = global(bool: <class 'bool'>)
2025-01-05 16:51:39,088 - DEBUG - on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, arrayobj.py:4749),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,090 - DEBUG - on stmt: jump 14
2025-01-05 16:51:39,092 - DEBUG - ==== SSA block rewrite pass on 14
2025-01-05 16:51:39,093 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,094 - DEBUG - on stmt: $phi16.0 = start
2025-01-05 16:51:39,095 - DEBUG - on stmt: jump 16
2025-01-05 16:51:39,097 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-05 16:51:39,098 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,099 - DEBUG - on stmt: lit_start = $phi16.0
2025-01-05 16:51:39,100 - DEBUG - on stmt: $18load_deref.1 = freevar(stop_value: None)
2025-01-05 16:51:39,102 - DEBUG - on stmt: $const20.2 = const(NoneType, None)
2025-01-05 16:51:39,103 - DEBUG - on stmt: $22compare_op.3 = const(int, 0)
2025-01-05 16:51:39,104 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-05 16:51:39,105 - DEBUG - on stmt: $24pred = call bool24($22compare_op.3, func=bool24, args=(Var($22compare_op.3, arrayobj.py:4750),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,108 - DEBUG - on stmt: jump 30
2025-01-05 16:51:39,109 - DEBUG - ==== SSA block rewrite pass on 30
2025-01-05 16:51:39,110 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,111 - DEBUG - on stmt: $phi32.0 = stop
2025-01-05 16:51:39,112 - DEBUG - on stmt: jump 32
2025-01-05 16:51:39,113 - DEBUG - ==== SSA block rewrite pass on 32
2025-01-05 16:51:39,115 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,116 - DEBUG - on stmt: lit_stop = $phi32.0
2025-01-05 16:51:39,118 - DEBUG - on stmt: $34load_deref.1 = freevar(step_value: None)
2025-01-05 16:51:39,119 - DEBUG - on stmt: $const36.2 = const(NoneType, None)
2025-01-05 16:51:39,121 - DEBUG - on stmt: $38compare_op.3 = const(int, 0)
2025-01-05 16:51:39,122 - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-01-05 16:51:39,124 - DEBUG - on stmt: $40pred = call bool40($38compare_op.3, func=bool40, args=(Var($38compare_op.3, arrayobj.py:4751),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,126 - DEBUG - on stmt: jump 46
2025-01-05 16:51:39,127 - DEBUG - ==== SSA block rewrite pass on 46
2025-01-05 16:51:39,128 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,129 - DEBUG - on stmt: $phi48.0 = step
2025-01-05 16:51:39,131 - DEBUG - on stmt: jump 48
2025-01-05 16:51:39,131 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-05 16:51:39,132 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,134 - DEBUG - on stmt: lit_step = $phi48.0
2025-01-05 16:51:39,135 - DEBUG - on stmt: $const52.2 = const(NoneType, None)
2025-01-05 16:51:39,136 - DEBUG - on stmt: $54compare_op.3 = lit_step is not $const52.2
2025-01-05 16:51:39,137 - DEBUG - on stmt: bool56 = global(bool: <class 'bool'>)
2025-01-05 16:51:39,138 - DEBUG - on stmt: $56pred = call bool56($54compare_op.3, func=bool56, args=(Var($54compare_op.3, arrayobj.py:4753),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,141 - DEBUG - on stmt: branch $56pred, 58, 62
2025-01-05 16:51:39,142 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-05 16:51:39,143 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,144 - DEBUG - on stmt: $phi64.0 = lit_step
2025-01-05 16:51:39,145 - DEBUG - on stmt: jump 64
2025-01-05 16:51:39,146 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-05 16:51:39,148 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,149 - DEBUG - on stmt: $const62.0 = const(int, 1)
2025-01-05 16:51:39,150 - DEBUG - on stmt: $phi64.0.1 = $const62.0
2025-01-05 16:51:39,151 - DEBUG - on stmt: jump 64
2025-01-05 16:51:39,152 - DEBUG - ==== SSA block rewrite pass on 64
2025-01-05 16:51:39,153 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,154 - DEBUG - on stmt: $phi64.0.2 = phi(incoming_values=[Var($phi64.0, arrayobj.py:4753), Var($phi64.0.1, arrayobj.py:4753)], incoming_blocks=[58, 62])
2025-01-05 16:51:39,156 - DEBUG - on stmt: _step = $phi64.0.2
2025-01-05 16:51:39,157 - DEBUG - on stmt: $const68.2 = const(NoneType, None)
2025-01-05 16:51:39,158 - DEBUG - on stmt: $70compare_op.3 = lit_stop is $const68.2
2025-01-05 16:51:39,160 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-05 16:51:39,161 - DEBUG - on stmt: $72pred = call bool72($70compare_op.3, func=bool72, args=(Var($70compare_op.3, arrayobj.py:4754),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,164 - DEBUG - on stmt: branch $72pred, 74, 86
2025-01-05 16:51:39,165 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-05 16:51:39,166 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,167 - DEBUG - on stmt: _start = const(int, 0)
2025-01-05 16:51:39,168 - DEBUG - on stmt: _stop = lit_start
2025-01-05 16:51:39,169 - DEBUG - on stmt: jump 96
2025-01-05 16:51:39,170 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-05 16:51:39,171 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,172 - DEBUG - on stmt: _start.1 = lit_start
2025-01-05 16:51:39,173 - DEBUG - on stmt: _stop.1 = lit_stop
2025-01-05 16:51:39,174 - DEBUG - on stmt: jump 96
2025-01-05 16:51:39,175 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-05 16:51:39,176 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,178 - DEBUG - on stmt: _stop.2 = phi(incoming_values=[Var(_stop, arrayobj.py:4755), Var(_stop.1, arrayobj.py:4757)], incoming_blocks=[74, 86])
2025-01-05 16:51:39,182 - DEBUG - on stmt: $const98.1 = const(int, 0)
2025-01-05 16:51:39,183 - DEBUG - on stmt: $100compare_op.2 = _step == $const98.1
2025-01-05 16:51:39,184 - DEBUG - on stmt: bool102 = global(bool: <class 'bool'>)
2025-01-05 16:51:39,186 - DEBUG - on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:4759),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,188 - DEBUG - on stmt: branch $102pred, 104, 112
2025-01-05 16:51:39,189 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-05 16:51:39,190 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,191 - DEBUG - on stmt: $104load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-05 16:51:39,193 - DEBUG - on stmt: $const106.1 = const(str, Maximum allowed size exceeded)
2025-01-05 16:51:39,194 - DEBUG - on stmt: $108call_function.2 = call $104load_global.0($const106.1, func=$104load_global.0, args=[Var($const106.1, arrayobj.py:4760)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,196 - DEBUG - on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2025-01-05 16:51:39,198 - DEBUG - ==== SSA block rewrite pass on 112
2025-01-05 16:51:39,199 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,201 - DEBUG - on stmt: $116binary_subtract.2 = _stop.2 - _start
2025-01-05 16:51:39,203 - DEBUG - find_def var='_start' stmt=$116binary_subtract.2 = _stop.2 - _start
2025-01-05 16:51:39,204 - DEBUG - find_def_from_top label 112
2025-01-05 16:51:39,205 - DEBUG - idom 96 from label 112
2025-01-05 16:51:39,206 - DEBUG - find_def_from_bottom label 96
2025-01-05 16:51:39,207 - DEBUG - find_def_from_top label 96
2025-01-05 16:51:39,209 - DEBUG - insert phi node _start.2 = phi(incoming_values=[], incoming_blocks=[]) at 96
2025-01-05 16:51:39,210 - DEBUG - find_def_from_bottom label 74
2025-01-05 16:51:39,211 - DEBUG - incoming_def _start = const(int, 0)
2025-01-05 16:51:39,212 - DEBUG - find_def_from_bottom label 86
2025-01-05 16:51:39,213 - DEBUG - incoming_def _start.1 = lit_start
2025-01-05 16:51:39,214 - DEBUG - replaced with: $116binary_subtract.2 = _stop.2 - _start.2
2025-01-05 16:51:39,216 - DEBUG - on stmt: nitems_c = $116binary_subtract.2 / _step
2025-01-05 16:51:39,217 - DEBUG - on stmt: $124load_global.5 = global(int: <class 'int'>)
2025-01-05 16:51:39,219 - DEBUG - on stmt: $126load_global.6 = global(math: <module 'math' (built-in)>)
2025-01-05 16:51:39,220 - DEBUG - on stmt: $128load_method.7 = getattr(value=$126load_global.6, attr=ceil)
2025-01-05 16:51:39,222 - DEBUG - on stmt: $132load_attr.9 = getattr(value=nitems_c, attr=real)
2025-01-05 16:51:39,224 - DEBUG - on stmt: $134call_method.10 = call $128load_method.7($132load_attr.9, func=$128load_method.7, args=[Var($132load_attr.9, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,226 - DEBUG - on stmt: nitems_r = call $124load_global.5($134call_method.10, func=$124load_global.5, args=[Var($134call_method.10, arrayobj.py:4763)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,228 - DEBUG - on stmt: $140load_deref.12 = freevar(use_complex: False)
2025-01-05 16:51:39,230 - DEBUG - on stmt: $const142.13 = const(bool, True)
2025-01-05 16:51:39,231 - DEBUG - on stmt: $144compare_op.14 = const(int, 0)
2025-01-05 16:51:39,232 - DEBUG - on stmt: bool146 = global(bool: <class 'bool'>)
2025-01-05 16:51:39,234 - DEBUG - on stmt: $146pred = call bool146($144compare_op.14, func=bool146, args=(Var($144compare_op.14, arrayobj.py:4766),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,236 - DEBUG - on stmt: jump 182
2025-01-05 16:51:39,237 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-05 16:51:39,238 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,239 - DEBUG - on stmt: $182load_global.0 = global(max: <built-in function max>)
2025-01-05 16:51:39,241 - DEBUG - on stmt: $const186.2 = const(int, 0)
2025-01-05 16:51:39,242 - DEBUG - on stmt: nitems = call $182load_global.0(nitems_r, $const186.2, func=$182load_global.0, args=[Var(nitems_r, arrayobj.py:4763), Var($const186.2, arrayobj.py:4770)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,244 - DEBUG - on stmt: jump 192
2025-01-05 16:51:39,246 - DEBUG - ==== SSA block rewrite pass on 192
2025-01-05 16:51:39,247 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,249 - DEBUG - on stmt: $192load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\Owner\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\numpy\\__init__.py'>)
2025-01-05 16:51:39,251 - DEBUG - on stmt: $194load_method.1 = getattr(value=$192load_global.0, attr=empty)
2025-01-05 16:51:39,253 - DEBUG - on stmt: $198load_deref.3 = freevar(true_dtype: float64)
2025-01-05 16:51:39,254 - DEBUG - on stmt: arr = call $194load_method.1(nitems, $198load_deref.3, func=$194load_method.1, args=[Var(nitems, arrayobj.py:4768), Var($198load_deref.3, arrayobj.py:4771)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,258 - DEBUG - on stmt: val = _start
2025-01-05 16:51:39,259 - DEBUG - find_def var='_start' stmt=val = _start
2025-01-05 16:51:39,260 - DEBUG - find_def_from_top label 192
2025-01-05 16:51:39,261 - DEBUG - idom 182 from label 192
2025-01-05 16:51:39,262 - DEBUG - find_def_from_bottom label 182
2025-01-05 16:51:39,264 - DEBUG - find_def_from_top label 182
2025-01-05 16:51:39,265 - DEBUG - idom 112 from label 182
2025-01-05 16:51:39,266 - DEBUG - find_def_from_bottom label 112
2025-01-05 16:51:39,267 - DEBUG - find_def_from_top label 112
2025-01-05 16:51:39,268 - DEBUG - idom 96 from label 112
2025-01-05 16:51:39,269 - DEBUG - find_def_from_bottom label 96
2025-01-05 16:51:39,270 - DEBUG - replaced with: val = _start.2
2025-01-05 16:51:39,271 - DEBUG - on stmt: $208load_global.6 = global(range: <class 'range'>)
2025-01-05 16:51:39,272 - DEBUG - on stmt: $212call_function.8 = call $208load_global.6(nitems, func=$208load_global.6, args=[Var(nitems, arrayobj.py:4768)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,274 - DEBUG - on stmt: $214get_iter.9 = getiter(value=$212call_function.8)
2025-01-05 16:51:39,276 - DEBUG - on stmt: $phi216.0 = $214get_iter.9
2025-01-05 16:51:39,277 - DEBUG - on stmt: jump 216
2025-01-05 16:51:39,278 - DEBUG - ==== SSA block rewrite pass on 216
2025-01-05 16:51:39,279 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,281 - DEBUG - on stmt: $216for_iter.1 = iternext(value=$phi216.0)
2025-01-05 16:51:39,283 - DEBUG - on stmt: $216for_iter.2 = pair_first(value=$216for_iter.1)
2025-01-05 16:51:39,284 - DEBUG - on stmt: $216for_iter.3 = pair_second(value=$216for_iter.1)
2025-01-05 16:51:39,286 - DEBUG - on stmt: $phi218.1 = $216for_iter.2
2025-01-05 16:51:39,287 - DEBUG - on stmt: branch $216for_iter.3, 218, 238
2025-01-05 16:51:39,288 - DEBUG - ==== SSA block rewrite pass on 218
2025-01-05 16:51:39,289 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,290 - DEBUG - on stmt: i = $phi218.1
2025-01-05 16:51:39,291 - DEBUG - on stmt: $226binary_multiply.5 = i * _step
2025-01-05 16:51:39,292 - DEBUG - on stmt: $228binary_add.6 = val + $226binary_multiply.5
2025-01-05 16:51:39,293 - DEBUG - on stmt: arr[i] = $228binary_add.6
2025-01-05 16:51:39,294 - DEBUG - on stmt: jump 216
2025-01-05 16:51:39,295 - DEBUG - ==== SSA block rewrite pass on 238
2025-01-05 16:51:39,296 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x0000000014AF1E20>
2025-01-05 16:51:39,298 - DEBUG - on stmt: $240return_value.1 = cast(value=arr)
2025-01-05 16:51:39,299 - DEBUG - on stmt: return $240return_value.1
2025-01-05 16:51:39,666 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_CONST(arg=1, lineno=1)
           6	LOAD_FAST(arg=0, lineno=1)
           8	LOAD_CONST(arg=2, lineno=1)
          10	BINARY_MULTIPLY(arg=None, lineno=1)
          12	LOAD_FAST(arg=1, lineno=1)
          14	BINARY_TRUE_DIVIDE(arg=None, lineno=1)
          16	LOAD_CONST(arg=3, lineno=1)
          18	BINARY_POWER(arg=None, lineno=1)
          20	BINARY_MULTIPLY(arg=None, lineno=1)
          22	CALL_FUNCTION(arg=1, lineno=1)
          24	RETURN_VALUE(arg=None, lineno=1)
2025-01-05 16:51:39,673 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:51:39,674 - DEBUG - stack: []
2025-01-05 16:51:39,675 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:51:39,676 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2025-01-05 16:51:39,677 - DEBUG - stack []
2025-01-05 16:51:39,678 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
2025-01-05 16:51:39,680 - DEBUG - stack []
2025-01-05 16:51:39,682 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
2025-01-05 16:51:39,683 - DEBUG - stack ['$2load_global.0']
2025-01-05 16:51:39,684 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=1)
2025-01-05 16:51:39,686 - DEBUG - stack ['$2load_global.0', '$const4.1']
2025-01-05 16:51:39,687 - DEBUG - dispatch pc=8, inst=LOAD_CONST(arg=2, lineno=1)
2025-01-05 16:51:39,688 - DEBUG - stack ['$2load_global.0', '$const4.1', '$_50call_method_14_16.2']
2025-01-05 16:51:39,690 - DEBUG - dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=1)
2025-01-05 16:51:39,691 - DEBUG - stack ['$2load_global.0', '$const4.1', '$_50call_method_14_16.2', '$const8.3']
2025-01-05 16:51:39,693 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=1)
2025-01-05 16:51:39,694 - DEBUG - stack ['$2load_global.0', '$const4.1', '$10binary_multiply.4']
2025-01-05 16:51:39,695 - DEBUG - dispatch pc=14, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1)
2025-01-05 16:51:39,697 - DEBUG - stack ['$2load_global.0', '$const4.1', '$10binary_multiply.4', '$_60binary_subscr_19_112.5']
2025-01-05 16:51:39,699 - DEBUG - dispatch pc=16, inst=LOAD_CONST(arg=3, lineno=1)
2025-01-05 16:51:39,700 - DEBUG - stack ['$2load_global.0', '$const4.1', '$14binary_true_divide.6']
2025-01-05 16:51:39,702 - DEBUG - dispatch pc=18, inst=BINARY_POWER(arg=None, lineno=1)
2025-01-05 16:51:39,704 - DEBUG - stack ['$2load_global.0', '$const4.1', '$14binary_true_divide.6', '$const16.7']
2025-01-05 16:51:39,705 - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=1)
2025-01-05 16:51:39,707 - DEBUG - stack ['$2load_global.0', '$const4.1', '$18binary_power.8']
2025-01-05 16:51:39,708 - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=1)
2025-01-05 16:51:39,710 - DEBUG - stack ['$2load_global.0', '$20binary_multiply.9']
2025-01-05 16:51:39,711 - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=1)
2025-01-05 16:51:39,714 - DEBUG - stack ['$22call_function.10']
2025-01-05 16:51:39,715 - DEBUG - end state. edges=[]
2025-01-05 16:51:39,717 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:51:39,718 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-05 16:51:39,720 - DEBUG - defmap: {}
2025-01-05 16:51:39,721 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:39,722 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:39,723 - DEBUG - keep phismap: {}
2025-01-05 16:51:39,724 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-05 16:51:39,726 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:51:39,727 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$_50call_method_14_16.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$_50call_method_14_16.2', 'rhs': '$const8.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$_60binary_subscr_19_112.5'}), (14, {'lhs': '$10binary_multiply.4', 'rhs': '$_60binary_subscr_19_112.5', 'res': '$14binary_true_divide.6'}), (16, {'res': '$const16.7'}), (18, {'lhs': '$14binary_true_divide.6', 'rhs': '$const16.7', 'res': '$18binary_power.8'}), (20, {'lhs': '$const4.1', 'rhs': '$18binary_power.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$2load_global.0', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'retval': '$22call_function.10', 'castval': '$24return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:39,736 - DEBUG - label 0:
    _50call_method_14_1 = arg(0, name=_50call_method_14_1) ['_50call_method_14_1']
    _60binary_subscr_19_1 = arg(1, name=_60binary_subscr_19_1) ['_60binary_subscr_19_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x28ab34: <ufunc 'exp'>) ['$2load_global.0']
    $const4.1 = const(float, -0.5)           ['$const4.1']
    $const8.3 = const(float, 32.0)           ['$const8.3']
    $10binary_multiply.4 = _50call_method_14_1 * $const8.3 ['$10binary_multiply.4', '$const8.3', '_50call_method_14_1']
    $14binary_true_divide.6 = $10binary_multiply.4 / _60binary_subscr_19_1 ['$10binary_multiply.4', '$14binary_true_divide.6', '_60binary_subscr_19_1']
    $const16.7 = const(int, 2)               ['$const16.7']
    $18binary_power.8 = $14binary_true_divide.6 ** $const16.7 ['$14binary_true_divide.6', '$18binary_power.8', '$const16.7']
    $20binary_multiply.9 = $const4.1 * $18binary_power.8 ['$18binary_power.8', '$20binary_multiply.9', '$const4.1']
    $22call_function.10 = call $2load_global.0($20binary_multiply.9, func=$2load_global.0, args=[Var($20binary_multiply.9, beat.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$20binary_multiply.9', '$22call_function.10', '$2load_global.0']
    $24return_value.11 = cast(value=$22call_function.10) ['$22call_function.10', '$24return_value.11']
    return $24return_value.11                ['$24return_value.11']

2025-01-05 16:51:39,756 - DEBUG - ==== SSA block analysis pass on 0
2025-01-05 16:51:39,757 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x0000000014ACABB0>
2025-01-05 16:51:39,758 - DEBUG - on stmt: _50call_method_14_1 = arg(0, name=_50call_method_14_1)
2025-01-05 16:51:39,759 - DEBUG - on stmt: _60binary_subscr_19_1 = arg(1, name=_60binary_subscr_19_1)
2025-01-05 16:51:39,761 - DEBUG - on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x28ab34: <ufunc 'exp'>)
2025-01-05 16:51:39,762 - DEBUG - on stmt: $const4.1 = const(float, -0.5)
2025-01-05 16:51:39,764 - DEBUG - on stmt: $const8.3 = const(float, 32.0)
2025-01-05 16:51:39,765 - DEBUG - on stmt: $10binary_multiply.4 = _50call_method_14_1 * $const8.3
2025-01-05 16:51:39,767 - DEBUG - on stmt: $14binary_true_divide.6 = $10binary_multiply.4 / _60binary_subscr_19_1
2025-01-05 16:51:39,768 - DEBUG - on stmt: $const16.7 = const(int, 2)
2025-01-05 16:51:39,769 - DEBUG - on stmt: $18binary_power.8 = $14binary_true_divide.6 ** $const16.7
2025-01-05 16:51:39,771 - DEBUG - on stmt: $20binary_multiply.9 = $const4.1 * $18binary_power.8
2025-01-05 16:51:39,772 - DEBUG - on stmt: $22call_function.10 = call $2load_global.0($20binary_multiply.9, func=$2load_global.0, args=[Var($20binary_multiply.9, beat.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:39,774 - DEBUG - on stmt: $24return_value.11 = cast(value=$22call_function.10)
2025-01-05 16:51:39,775 - DEBUG - on stmt: return $24return_value.11
2025-01-05 16:51:39,777 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x0000000014AD53A0>],
             '$14binary_true_divide.6': [<numba.core.ir.Assign object at 0x0000000014ACA6A0>],
             '$18binary_power.8': [<numba.core.ir.Assign object at 0x0000000014ACAD90>],
             '$20binary_multiply.9': [<numba.core.ir.Assign object at 0x0000000014AA9E20>],
             '$22call_function.10': [<numba.core.ir.Assign object at 0x0000000014AA9940>],
             '$24return_value.11': [<numba.core.ir.Assign object at 0x0000000014AD5040>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000000014ACA070>],
             '$const16.7': [<numba.core.ir.Assign object at 0x0000000014ACA910>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000000014AD57C0>],
             '$const8.3': [<numba.core.ir.Assign object at 0x0000000014AD55B0>],
             '_50call_method_14_1': [<numba.core.ir.Assign object at 0x0000000014ACAF10>],
             '_60binary_subscr_19_1': [<numba.core.ir.Assign object at 0x0000000014ACA3A0>]})
2025-01-05 16:51:39,790 - DEBUG - SSA violators set()
2025-01-05 16:51:39,927 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_CONST(arg=1, lineno=1)
           6	LOAD_FAST(arg=0, lineno=1)
           8	LOAD_CONST(arg=2, lineno=1)
          10	BINARY_MULTIPLY(arg=None, lineno=1)
          12	LOAD_FAST(arg=1, lineno=1)
          14	BINARY_TRUE_DIVIDE(arg=None, lineno=1)
          16	LOAD_CONST(arg=3, lineno=1)
          18	BINARY_POWER(arg=None, lineno=1)
          20	BINARY_MULTIPLY(arg=None, lineno=1)
          22	CALL_FUNCTION(arg=1, lineno=1)
          24	RETURN_VALUE(arg=None, lineno=1)
2025-01-05 16:51:39,936 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-05 16:51:39,937 - DEBUG - stack: []
2025-01-05 16:51:39,938 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-05 16:51:39,940 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2025-01-05 16:51:39,941 - DEBUG - stack []
2025-01-05 16:51:39,943 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
2025-01-05 16:51:39,944 - DEBUG - stack []
2025-01-05 16:51:39,945 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1)
2025-01-05 16:51:39,947 - DEBUG - stack ['$2load_global.0']
2025-01-05 16:51:39,948 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=1)
2025-01-05 16:51:39,950 - DEBUG - stack ['$2load_global.0', '$const4.1']
2025-01-05 16:51:39,951 - DEBUG - dispatch pc=8, inst=LOAD_CONST(arg=2, lineno=1)
2025-01-05 16:51:39,952 - DEBUG - stack ['$2load_global.0', '$const4.1', '$_264call_method_16_16.2']
2025-01-05 16:51:39,954 - DEBUG - dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=1)
2025-01-05 16:51:39,955 - DEBUG - stack ['$2load_global.0', '$const4.1', '$_264call_method_16_16.2', '$const8.3']
2025-01-05 16:51:39,957 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=1)
2025-01-05 16:51:39,958 - DEBUG - stack ['$2load_global.0', '$const4.1', '$10binary_multiply.4']
2025-01-05 16:51:39,960 - DEBUG - dispatch pc=14, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=1)
2025-01-05 16:51:39,962 - DEBUG - stack ['$2load_global.0', '$const4.1', '$10binary_multiply.4', '$_274binary_subscr_21_112.5']
2025-01-05 16:51:39,964 - DEBUG - dispatch pc=16, inst=LOAD_CONST(arg=3, lineno=1)
2025-01-05 16:51:39,965 - DEBUG - stack ['$2load_global.0', '$const4.1', '$14binary_true_divide.6']
2025-01-05 16:51:39,967 - DEBUG - dispatch pc=18, inst=BINARY_POWER(arg=None, lineno=1)
2025-01-05 16:51:39,969 - DEBUG - stack ['$2load_global.0', '$const4.1', '$14binary_true_divide.6', '$const16.7']
2025-01-05 16:51:39,970 - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=1)
2025-01-05 16:51:39,972 - DEBUG - stack ['$2load_global.0', '$const4.1', '$18binary_power.8']
2025-01-05 16:51:39,973 - DEBUG - dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=1)
2025-01-05 16:51:39,975 - DEBUG - stack ['$2load_global.0', '$20binary_multiply.9']
2025-01-05 16:51:39,976 - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=1)
2025-01-05 16:51:39,978 - DEBUG - stack ['$22call_function.10']
2025-01-05 16:51:39,979 - DEBUG - end state. edges=[]
2025-01-05 16:51:39,980 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-05 16:51:39,981 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-05 16:51:39,983 - DEBUG - defmap: {}
2025-01-05 16:51:39,984 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:39,985 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-05 16:51:39,987 - DEBUG - keep phismap: {}
2025-01-05 16:51:39,988 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-05 16:51:39,989 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-05 16:51:39,990 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$_264call_method_16_16.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$_264call_method_16_16.2', 'rhs': '$const8.3', 'res': '$10binary_multiply.4'}), (12, {'res': '$_274binary_subscr_21_112.5'}), (14, {'lhs': '$10binary_multiply.4', 'rhs': '$_274binary_subscr_21_112.5', 'res': '$14binary_true_divide.6'}), (16, {'res': '$const16.7'}), (18, {'lhs': '$14binary_true_divide.6', 'rhs': '$const16.7', 'res': '$18binary_power.8'}), (20, {'lhs': '$const4.1', 'rhs': '$18binary_power.8', 'res': '$20binary_multiply.9'}), (22, {'func': '$2load_global.0', 'args': ['$20binary_multiply.9'], 'res': '$22call_function.10'}), (24, {'retval': '$22call_function.10', 'castval': '$24return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-05 16:51:39,999 - DEBUG - label 0:
    _264call_method_16_1 = arg(0, name=_264call_method_16_1) ['_264call_method_16_1']
    _274binary_subscr_21_1 = arg(1, name=_274binary_subscr_21_1) ['_274binary_subscr_21_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x28ab34: <ufunc 'exp'>) ['$2load_global.0']
    $const4.1 = const(float, -0.5)           ['$const4.1']
    $const8.3 = const(float, 32.0)           ['$const8.3']
    $10binary_multiply.4 = _264call_method_16_1 * $const8.3 ['$10binary_multiply.4', '$const8.3', '_264call_method_16_1']
    $14binary_true_divide.6 = $10binary_multiply.4 / _274binary_subscr_21_1 ['$10binary_multiply.4', '$14binary_true_divide.6', '_274binary_subscr_21_1']
    $const16.7 = const(int, 2)               ['$const16.7']
    $18binary_power.8 = $14binary_true_divide.6 ** $const16.7 ['$14binary_true_divide.6', '$18binary_power.8', '$const16.7']
    $20binary_multiply.9 = $const4.1 * $18binary_power.8 ['$18binary_power.8', '$20binary_multiply.9', '$const4.1']
    $22call_function.10 = call $2load_global.0($20binary_multiply.9, func=$2load_global.0, args=[Var($20binary_multiply.9, beat.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$20binary_multiply.9', '$22call_function.10', '$2load_global.0']
    $24return_value.11 = cast(value=$22call_function.10) ['$22call_function.10', '$24return_value.11']
    return $24return_value.11                ['$24return_value.11']

2025-01-05 16:51:40,021 - DEBUG - ==== SSA block analysis pass on 0
2025-01-05 16:51:40,022 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x00000000148642B0>
2025-01-05 16:51:40,023 - DEBUG - on stmt: _264call_method_16_1 = arg(0, name=_264call_method_16_1)
2025-01-05 16:51:40,025 - DEBUG - on stmt: _274binary_subscr_21_1 = arg(1, name=_274binary_subscr_21_1)
2025-01-05 16:51:40,026 - DEBUG - on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x28ab34: <ufunc 'exp'>)
2025-01-05 16:51:40,027 - DEBUG - on stmt: $const4.1 = const(float, -0.5)
2025-01-05 16:51:40,028 - DEBUG - on stmt: $const8.3 = const(float, 32.0)
2025-01-05 16:51:40,029 - DEBUG - on stmt: $10binary_multiply.4 = _264call_method_16_1 * $const8.3
2025-01-05 16:51:40,032 - DEBUG - on stmt: $14binary_true_divide.6 = $10binary_multiply.4 / _274binary_subscr_21_1
2025-01-05 16:51:40,033 - DEBUG - on stmt: $const16.7 = const(int, 2)
2025-01-05 16:51:40,034 - DEBUG - on stmt: $18binary_power.8 = $14binary_true_divide.6 ** $const16.7
2025-01-05 16:51:40,036 - DEBUG - on stmt: $20binary_multiply.9 = $const4.1 * $18binary_power.8
2025-01-05 16:51:40,038 - DEBUG - on stmt: $22call_function.10 = call $2load_global.0($20binary_multiply.9, func=$2load_global.0, args=[Var($20binary_multiply.9, beat.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-05 16:51:40,040 - DEBUG - on stmt: $24return_value.11 = cast(value=$22call_function.10)
2025-01-05 16:51:40,042 - DEBUG - on stmt: return $24return_value.11
2025-01-05 16:51:40,044 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0x000000001492D220>],
             '$14binary_true_divide.6': [<numba.core.ir.Assign object at 0x000000001492D4C0>],
             '$18binary_power.8': [<numba.core.ir.Assign object at 0x00000000149289A0>],
             '$20binary_multiply.9': [<numba.core.ir.Assign object at 0x0000000014928820>],
             '$22call_function.10': [<numba.core.ir.Assign object at 0x0000000014928670>],
             '$24return_value.11': [<numba.core.ir.Assign object at 0x000000001494CBB0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000000014928C40>],
             '$const16.7': [<numba.core.ir.Assign object at 0x000000001492D640>],
             '$const4.1': [<numba.core.ir.Assign object at 0x0000000014928DC0>],
             '$const8.3': [<numba.core.ir.Assign object at 0x000000001492D0A0>],
             '_264call_method_16_1': [<numba.core.ir.Assign object at 0x0000000014928160>],
             '_274binary_subscr_21_1': [<numba.core.ir.Assign object at 0x0000000014928430>]})
2025-01-05 16:51:40,057 - DEBUG - SSA violators set()
2025-01-05 16:52:35,517 - INFO - Processed 43 valid track segments
2025-01-05 16:52:35,727 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (35).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:36,267 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (35).mp3 - intro
2025-01-05 16:52:36,316 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (9).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:37,000 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (9).mp3 - verse
2025-01-05 16:52:37,048 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (29).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:37,873 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (4).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:38,395 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (4).mp3 - verse
2025-01-05 16:52:38,436 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (40).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:39,383 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (40).mp3 - chorus
2025-01-05 16:52:39,430 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (5).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:39,970 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (5).mp3 - intro
2025-01-05 16:52:40,012 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (9).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:40,690 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (9).mp3 - intro
2025-01-05 16:52:40,734 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (31).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:41,398 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (31).mp3 - verse
2025-01-05 16:52:41,443 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (12).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:42,881 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (41).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:43,581 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (41).mp3 - intro
2025-01-05 16:52:43,621 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (24).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:44,272 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (24).mp3 - intro
2025-01-05 16:52:44,316 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (42).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:45,182 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (42).mp3 - chorus
2025-01-05 16:52:45,230 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (7).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:46,098 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (7).mp3 - intro
2025-01-05 16:52:46,151 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (5).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:46,689 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (5).mp3 - chorus
2025-01-05 16:52:46,734 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (38).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:47,221 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (38).mp3 - chorus
2025-01-05 16:52:47,259 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (42).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:48,142 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (42).mp3 - intro
2025-01-05 16:52:48,191 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (41).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:48,793 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (41).mp3 - chorus
2025-01-05 16:52:48,836 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (19).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:49,447 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (19).mp3 - intro
2025-01-05 16:52:49,489 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (15).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:50,162 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (15).mp3 - chorus
2025-01-05 16:52:50,203 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (10).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:50,886 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (10).mp3 - intro
2025-01-05 16:52:50,942 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (25).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:51,559 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (25).mp3 - intro
2025-01-05 16:52:51,603 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (32).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:52,329 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (32).mp3 - verse
2025-01-05 16:52:52,373 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (7).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:53,237 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (7).mp3 - chorus
2025-01-05 16:52:53,286 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (37).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:53,832 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (37).mp3 - verse
2025-01-05 16:52:53,877 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (20).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:54,550 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (20).mp3 - chorus
2025-01-05 16:52:54,599 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (22).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:55,370 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (22).mp3 - verse
2025-01-05 16:52:55,412 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (18).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:56,181 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (18).mp3 - intro
2025-01-05 16:52:56,221 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (32).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:56,991 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (32).mp3 - intro
2025-01-05 16:52:57,037 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (34).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:57,760 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (34).mp3 - chorus
2025-01-05 16:52:57,803 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (11).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:58,686 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (11).mp3 - verse
2025-01-05 16:52:58,732 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (36).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:52:59,485 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (36).mp3 - verse
2025-01-05 16:52:59,528 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (26).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:00,274 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (26).mp3 - intro
2025-01-05 16:53:00,317 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (32).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:02,511 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (20).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:04,484 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (34).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:05,195 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (34).mp3 - chorus
2025-01-05 16:53:05,240 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (4).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:05,767 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (4).mp3 - verse
2025-01-05 16:53:05,809 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (31).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:06,441 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (31).mp3 - chorus
2025-01-05 16:53:06,487 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (4).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:07,044 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (4).mp3 - chorus
2025-01-05 16:53:07,088 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (28).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:08,003 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (28).mp3 - chorus
2025-01-05 16:53:08,046 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (36).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:08,725 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (36).mp3 - verse
2025-01-05 16:53:08,770 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (42).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:09,568 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (42).mp3 - verse
2025-01-05 16:53:09,606 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (23).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:10,379 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (23).mp3 - intro
2025-01-05 16:53:10,420 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (26).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:11,106 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (26).mp3 - intro
2025-01-05 16:53:11,146 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (16).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:14,046 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (21).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:18,649 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (26).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:20,390 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (26).mp3 - verse
2025-01-05 16:53:20,426 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (35).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:20,836 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (35).mp3 - verse
2025-01-05 16:53:20,869 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (13).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:21,456 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (13).mp3 - intro
2025-01-05 16:53:21,489 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (4).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:21,918 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (4).mp3 - intro
2025-01-05 16:53:21,951 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (13).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:22,514 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (13).mp3 - chorus
2025-01-05 16:53:22,549 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (19).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:28,913 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (11).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:29,577 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (11).mp3 - intro
2025-01-05 16:53:29,612 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (17).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:30,132 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (17).mp3 - intro
2025-01-05 16:53:30,164 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (35).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:30,592 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (35).mp3 - intro
2025-01-05 16:53:30,625 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (40).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:31,600 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (40).mp3 - intro
2025-01-05 16:53:31,633 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (27).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:32,295 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (27).mp3 - verse
2025-01-05 16:53:32,327 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (13).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:32,879 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (13).mp3 - chorus
2025-01-05 16:53:32,913 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (13).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:33,472 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (13).mp3 - chorus
2025-01-05 16:53:33,508 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (22).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:34,092 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (22).mp3 - verse
2025-01-05 16:53:34,133 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (23).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:34,778 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (23).mp3 - chorus
2025-01-05 16:53:34,811 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (4).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:53:35,217 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (4).mp3 - intro
2025-01-05 16:53:35,251 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (2).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:54:58,064 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (17).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:55:35,597 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (17).mp3 - chorus
2025-01-05 16:55:40,246 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (8).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:55:53,597 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (40).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:55:55,146 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (40).mp3 - intro
2025-01-05 16:55:55,204 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (28).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:55:56,490 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (28).mp3 - chorus
2025-01-05 16:55:56,603 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (14).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:55:58,155 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (14).mp3 - intro
2025-01-05 16:55:58,236 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (27).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:55:58,957 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (27).mp3 - chorus
2025-01-05 16:55:58,990 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (37).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 16:55:59,470 - WARNING - Segment too short: C:\Users\Owner\mascom\danzoa\AllAtOnce\AllAtOnce (37).mp3 - intro
2025-01-05 16:55:59,504 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (36).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-05 17:05:05,139 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', 'C:\\Users\\Owner\\mascom\\danzoa\\AllAtOnce\\AllAtOnce (26).mp3', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
